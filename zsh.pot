# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-17 14:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: settitle
#: zsh.texi:7
#, no-wrap
msgid "zsh"
msgstr ""

#. type: node
#: zsh.texi:19 zsh.texi:35486 zsh.texi:35488 zsh.texi:35932
#, no-wrap
msgid "Utilities"
msgstr ""

#. type: menuentry
#: zsh.texi:22
msgid "ZSH: (zsh)"
msgstr ""

#. type: menuentry
#: zsh.texi:22
msgid "The Z Shell Manual."
msgstr ""

#. type: node
#: zsh.texi:29 zsh.texi:55 zsh.texi:56 zsh.texi:306 zsh.texi:308 zsh.texi:350
#, no-wrap
msgid "The Z Shell Manual"
msgstr ""

#. type: subtitle
#: zsh.texi:30
#, no-wrap
msgid "Version 5.9"
msgstr ""

#. type: subtitle
#: zsh.texi:31
#, no-wrap
msgid "Updated May 14, 2022"
msgstr ""

#. type: author
#: zsh.texi:32
#, no-wrap
msgid "Original documentation by Paul Falstad"
msgstr ""

#. type: titlepage
#: zsh.texi:36
msgid ""
"This is a texinfo version of the documentation for the Z Shell, originally "
"by Paul Falstad."
msgstr ""

#. type: titlepage
#: zsh.texi:41
msgid ""
"Permission is granted to make and distribute verbatim copies of this manual "
"provided the copyright notice and this permission notice are preserved on "
"all copies."
msgstr ""

#. type: titlepage
#: zsh.texi:47
msgid ""
"Permission is granted to copy and distribute modified versions of this "
"manual under the conditions for verbatim copying, provided also that the "
"entire resulting derived work is distributed under the terms of a permission "
"notice identical to this one."
msgstr ""

#. type: titlepage
#: zsh.texi:51
msgid ""
"Permission is granted to copy and distribute translations of this manual "
"into another language, under the above conditions for modified versions."
msgstr ""

#. type: node
#: zsh.texi:55 zsh.texi:306 zsh.texi:350 zsh.texi:515 zsh.texi:753
#: zsh.texi:1086 zsh.texi:1179 zsh.texi:2014 zsh.texi:2470 zsh.texi:2523
#: zsh.texi:3018 zsh.texi:3186 zsh.texi:3535 zsh.texi:3814 zsh.texi:4264
#: zsh.texi:7702 zsh.texi:9690 zsh.texi:12712 zsh.texi:16079 zsh.texi:19221
#: zsh.texi:20546 zsh.texi:26821 zsh.texi:27603 zsh.texi:32609 zsh.texi:33721
#: zsh.texi:34690 zsh.texi:35454 zsh.texi:41268 zsh.texi:41275 zsh.texi:41282
#: zsh.texi:41289 zsh.texi:41296 zsh.texi:41303
#, no-wrap
msgid "Top"
msgstr ""

#. type: node
#: zsh.texi:55
#, no-wrap
msgid "(dir)"
msgstr ""

#. type: ifinfo
#: zsh.texi:63
msgid ""
"This Info file documents Zsh, a freely available UNIX command interpreter "
"(shell), which of the standard shells most closely resembles the Korn shell "
"(ksh), although it is not completely compatible.  Zsh is able to emulate "
"POSIX shells, but its default mode is not POSIX compatible, either."
msgstr ""

#. type: cindex
#: zsh.texi:65
#, no-wrap
msgid "version"
msgstr ""

#. type: ifinfo
#: zsh.texi:67
msgid "Version 5.9, last updated May 14, 2022."
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "The Z Shell Manual::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "Introduction::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "Roadmap::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "Invocation::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "Files::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "Shell Grammar::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "Redirection::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "Command Execution::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "Functions::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "Jobs & Signals::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "Arithmetic Evaluation::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "Conditional Expressions::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "Prompt Expansion::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "Expansion::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "Parameters::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "Options::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "Shell Builtin Commands::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "Zsh Line Editor::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "Completion Widgets::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "Completion System::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "Completion Using compctl::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "Zsh Modules::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "Calendar Function System::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "TCP Function System::"
msgstr ""

#. type: menuentry
#: zsh.texi:96
msgid "Zftp Function System::"
msgstr ""

#. type: node
#: zsh.texi:96 zsh.texi:290 zsh.texi:34690 zsh.texi:35454 zsh.texi:35456
#: zsh.texi:35486 zsh.texi:35932 zsh.texi:36273 zsh.texi:36505 zsh.texi:37906
#: zsh.texi:38080 zsh.texi:39808 zsh.texi:39908 zsh.texi:40326 zsh.texi:40615
#: zsh.texi:40673
#, no-wrap
msgid "User Contributions"
msgstr ""

#. type: menuentry
#: zsh.texi:99
msgid "--- Indices ---"
msgstr ""

#. type: menuentry
#: zsh.texi:107
msgid "Concept Index::"
msgstr ""

#. type: menuentry
#: zsh.texi:107
msgid "Variables Index::"
msgstr ""

#. type: menuentry
#: zsh.texi:107
msgid "Options Index::"
msgstr ""

#. type: menuentry
#: zsh.texi:107
msgid "Functions Index::"
msgstr ""

#. type: menuentry
#: zsh.texi:107
msgid "Editor Functions Index::"
msgstr ""

#. type: unnumbered
#: zsh.texi:107 zsh.texi:41296 zsh.texi:41303 zsh.texi:41305
#, no-wrap
msgid "Style and Tag Index"
msgstr ""

#. type: menuentry
#: zsh.texi:110
msgid "--- The Detailed Node Listing ---"
msgstr ""

#. type: node
#: zsh.texi:113 zsh.texi:306 zsh.texi:350 zsh.texi:352 zsh.texi:376
#: zsh.texi:387 zsh.texi:407 zsh.texi:467 zsh.texi:477 zsh.texi:483
#: zsh.texi:496 zsh.texi:515
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: menuentry
#: zsh.texi:122 zsh.texi:375
msgid "Author::"
msgstr ""

#. type: menuentry
#: zsh.texi:122 zsh.texi:375
msgid "Availability::"
msgstr ""

#. type: menuentry
#: zsh.texi:122 zsh.texi:375
msgid "Mailing Lists::"
msgstr ""

#. type: menuentry
#: zsh.texi:122 zsh.texi:375
msgid "The Zsh FAQ::"
msgstr ""

#. type: menuentry
#: zsh.texi:122 zsh.texi:375
msgid "The Zsh Web Page::"
msgstr ""

#. type: menuentry
#: zsh.texi:122 zsh.texi:375
msgid "The Zsh Userguide::"
msgstr ""

#. type: section
#: zsh.texi:122 zsh.texi:375 zsh.texi:483 zsh.texi:496 zsh.texi:498
#, no-wrap
msgid "See Also"
msgstr ""

#. type: node
#: zsh.texi:125 zsh.texi:515 zsh.texi:753 zsh.texi:755 zsh.texi:759
#: zsh.texi:886 zsh.texi:975 zsh.texi:1086
#, no-wrap
msgid "Invocation"
msgstr ""

#. type: menuentry
#: zsh.texi:129 zsh.texi:882
msgid "Compatibility::"
msgstr ""

#. type: section
#: zsh.texi:129 zsh.texi:882 zsh.texi:886 zsh.texi:975 zsh.texi:977
#, no-wrap
msgid "Restricted Shell"
msgstr ""

#. type: node
#: zsh.texi:132 zsh.texi:1086 zsh.texi:1179 zsh.texi:1181 zsh.texi:1196
#: zsh.texi:1302 zsh.texi:1370 zsh.texi:1644 zsh.texi:1733 zsh.texi:1751
#: zsh.texi:1831 zsh.texi:1843 zsh.texi:1975 zsh.texi:2014
#, no-wrap
msgid "Shell Grammar"
msgstr ""

#. type: menuentry
#: zsh.texi:142 zsh.texi:1195
msgid "Simple Commands & Pipelines::"
msgstr ""

#. type: menuentry
#: zsh.texi:142 zsh.texi:1195
msgid "Precommand Modifiers::"
msgstr ""

#. type: menuentry
#: zsh.texi:142 zsh.texi:1195
msgid "Complex Commands::"
msgstr ""

#. type: menuentry
#: zsh.texi:142 zsh.texi:1195
msgid "Alternate Forms For Complex Commands::"
msgstr ""

#. type: menuentry
#: zsh.texi:142 zsh.texi:1195
msgid "Reserved Words::"
msgstr ""

#. type: menuentry
#: zsh.texi:142 zsh.texi:1195
msgid "Comments::"
msgstr ""

#. type: menuentry
#: zsh.texi:142 zsh.texi:1195
msgid "Aliasing::"
msgstr ""

#. type: section
#: zsh.texi:142 zsh.texi:1195 zsh.texi:1843 zsh.texi:1975 zsh.texi:1977
#, no-wrap
msgid "Quoting"
msgstr ""

#. type: node
#: zsh.texi:145 zsh.texi:3814 zsh.texi:4264 zsh.texi:4266 zsh.texi:4321
#: zsh.texi:4754 zsh.texi:4919 zsh.texi:6249 zsh.texi:6276 zsh.texi:6288
#: zsh.texi:6364 zsh.texi:6583 zsh.texi:7702
#, no-wrap
msgid "Expansion"
msgstr ""

#. type: menuentry
#: zsh.texi:155 zsh.texi:4320
msgid "History Expansion::"
msgstr ""

#. type: menuentry
#: zsh.texi:155 zsh.texi:4320
msgid "Process Substitution::"
msgstr ""

#. type: menuentry
#: zsh.texi:155 zsh.texi:4320
msgid "Parameter Expansion::"
msgstr ""

#. type: menuentry
#: zsh.texi:155 zsh.texi:4320
msgid "Command Substitution::"
msgstr ""

#. type: menuentry
#: zsh.texi:155 zsh.texi:4320
msgid "Arithmetic Expansion::"
msgstr ""

#. type: menuentry
#: zsh.texi:155 zsh.texi:4320
msgid "Brace Expansion::"
msgstr ""

#. type: menuentry
#: zsh.texi:155 zsh.texi:4320
msgid "Filename Expansion::"
msgstr ""

#. type: section
#: zsh.texi:155 zsh.texi:4302 zsh.texi:4320 zsh.texi:6364 zsh.texi:6583
#: zsh.texi:6585
#, no-wrap
msgid "Filename Generation"
msgstr ""

#. type: subsection
#: zsh.texi:158 zsh.texi:4264 zsh.texi:7702 zsh.texi:7704 zsh.texi:7800
#: zsh.texi:8391 zsh.texi:8423 zsh.texi:8468 zsh.texi:8930 zsh.texi:9690
#: zsh.texi:28767 zsh.texi:30803 zsh.texi:31584
#, no-wrap
msgid "Parameters"
msgstr ""

#. type: menuentry
#: zsh.texi:165 zsh.texi:7799
msgid "Array Parameters::"
msgstr ""

#. type: menuentry
#: zsh.texi:165 zsh.texi:7799
msgid "Positional Parameters::"
msgstr ""

#. type: menuentry
#: zsh.texi:165 zsh.texi:7799
msgid "Local Parameters::"
msgstr ""

#. type: menuentry
#: zsh.texi:165 zsh.texi:7799
msgid "Parameters Set By The Shell::"
msgstr ""

#. type: section
#: zsh.texi:165 zsh.texi:7799 zsh.texi:8468 zsh.texi:8930 zsh.texi:8932
#, no-wrap
msgid "Parameters Used By The Shell"
msgstr ""

#. type: subsection
#: zsh.texi:168 zsh.texi:652 zsh.texi:7702 zsh.texi:9690 zsh.texi:9692
#: zsh.texi:9701 zsh.texi:9746 zsh.texi:12428 zsh.texi:12533 zsh.texi:12712
#: zsh.texi:36024
#, no-wrap
msgid "Options"
msgstr ""

#. type: menuentry
#: zsh.texi:174 zsh.texi:9700
msgid "Specifying Options::"
msgstr ""

#. type: menuentry
#: zsh.texi:174 zsh.texi:9700
msgid "Description of Options::"
msgstr ""

#. type: menuentry
#: zsh.texi:174 zsh.texi:9700
msgid "Option Aliases::"
msgstr ""

#. type: section
#: zsh.texi:174 zsh.texi:9700 zsh.texi:12428 zsh.texi:12533 zsh.texi:12535
#, no-wrap
msgid "Single Letter Options"
msgstr ""

#. type: node
#: zsh.texi:177 zsh.texi:12712 zsh.texi:16079 zsh.texi:16081 zsh.texi:16152
#: zsh.texi:16273 zsh.texi:16937 zsh.texi:16964 zsh.texi:17475 zsh.texi:18972
#: zsh.texi:19221
#, no-wrap
msgid "Zsh Line Editor"
msgstr ""

#. type: menuentry
#: zsh.texi:185 zsh.texi:16149
msgid "Keymaps::"
msgstr ""

#. type: menuentry
#: zsh.texi:185 zsh.texi:16149
msgid "Zle Builtins::"
msgstr ""

#. type: menuentry
#: zsh.texi:185 zsh.texi:16149
msgid "Zle Widgets::"
msgstr ""

#. type: menuentry
#: zsh.texi:185 zsh.texi:16149
msgid "User-Defined Widgets::"
msgstr ""

#. type: menuentry
#: zsh.texi:185 zsh.texi:16149
msgid "Standard Widgets::"
msgstr ""

#. type: section
#: zsh.texi:185 zsh.texi:16149 zsh.texi:17475 zsh.texi:18972 zsh.texi:18974
#, no-wrap
msgid "Character Highlighting"
msgstr ""

#. type: node
#: zsh.texi:188 zsh.texi:16079 zsh.texi:19221 zsh.texi:19223 zsh.texi:19284
#: zsh.texi:19692 zsh.texi:20146 zsh.texi:20177 zsh.texi:20508 zsh.texi:20546
#, no-wrap
msgid "Completion Widgets"
msgstr ""

#. type: menuentry
#: zsh.texi:195 zsh.texi:19281
msgid "Completion Special Parameters::"
msgstr ""

#. type: menuentry
#: zsh.texi:195 zsh.texi:19281
msgid "Completion Builtin Commands::"
msgstr ""

#. type: menuentry
#: zsh.texi:195 zsh.texi:19281
msgid "Completion Condition Codes::"
msgstr ""

#. type: menuentry
#: zsh.texi:195 zsh.texi:19281
msgid "Completion Matching Control::"
msgstr ""

#. type: section
#: zsh.texi:195 zsh.texi:19281 zsh.texi:20177 zsh.texi:20508 zsh.texi:20510
#, no-wrap
msgid "Completion Widget Example"
msgstr ""

#. type: node
#: zsh.texi:198 zsh.texi:19221 zsh.texi:20546 zsh.texi:20548 zsh.texi:20656
#: zsh.texi:21171 zsh.texi:23839 zsh.texi:24336 zsh.texi:24562 zsh.texi:26735
#: zsh.texi:26776 zsh.texi:26821
#, no-wrap
msgid "Completion System"
msgstr ""

#. type: menuentry
#: zsh.texi:206 zsh.texi:20653
msgid "Initialization::"
msgstr ""

#. type: menuentry
#: zsh.texi:206 zsh.texi:20653
msgid "Completion System Configuration::"
msgstr ""

#. type: menuentry
#: zsh.texi:206 zsh.texi:20653
msgid "Control Functions::"
msgstr ""

#. type: menuentry
#: zsh.texi:206 zsh.texi:20653
msgid "Bindable Commands::"
msgstr ""

#. type: menuentry
#: zsh.texi:206 zsh.texi:20653
msgid "Completion Functions::"
msgstr ""

#. type: section
#: zsh.texi:206 zsh.texi:26735 zsh.texi:26776 zsh.texi:26778
#, no-wrap
msgid "Completion Directories"
msgstr ""

#. type: node
#: zsh.texi:209 zsh.texi:20546 zsh.texi:26821 zsh.texi:26823 zsh.texi:26870
#: zsh.texi:26980 zsh.texi:27421 zsh.texi:27440 zsh.texi:27568 zsh.texi:27603
#, no-wrap
msgid "Completion Using compctl"
msgstr ""

#. type: menuentry
#: zsh.texi:216 zsh.texi:26867
msgid "Command Flags::"
msgstr ""

#. type: menuentry
#: zsh.texi:216 zsh.texi:26867
msgid "Option Flags::"
msgstr ""

#. type: menuentry
#: zsh.texi:216 zsh.texi:26867
msgid "Alternative Completion::"
msgstr ""

#. type: menuentry
#: zsh.texi:216 zsh.texi:26867
msgid "Extended Completion::"
msgstr ""

#. type: subsection
#: zsh.texi:216 zsh.texi:26867 zsh.texi:27440 zsh.texi:27568 zsh.texi:27570
#: zsh.texi:31019 zsh.texi:32185 zsh.texi:32985
#, no-wrap
msgid "Example"
msgstr ""

#. type: node
#: zsh.texi:219 zsh.texi:26821 zsh.texi:27603 zsh.texi:27605 zsh.texi:27780
#: zsh.texi:27827 zsh.texi:27861 zsh.texi:27928 zsh.texi:27941 zsh.texi:27951
#: zsh.texi:28401 zsh.texi:28494 zsh.texi:28812 zsh.texi:28919 zsh.texi:28994
#: zsh.texi:29018 zsh.texi:29041 zsh.texi:29264 zsh.texi:29309 zsh.texi:29381
#: zsh.texi:29499 zsh.texi:29545 zsh.texi:29601 zsh.texi:29883 zsh.texi:29989
#: zsh.texi:30108 zsh.texi:30164 zsh.texi:30245 zsh.texi:30342 zsh.texi:30526
#: zsh.texi:30847 zsh.texi:31068 zsh.texi:31098 zsh.texi:31128 zsh.texi:31291
#: zsh.texi:31845 zsh.texi:31854 zsh.texi:31888 zsh.texi:31959 zsh.texi:32064
#: zsh.texi:32146 zsh.texi:32609
#, no-wrap
msgid "Zsh Modules"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/attr Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/cap Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/clone Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/compctl Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/complete Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/complist Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/computil Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/curses Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/datetime Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/db/gdbm Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/deltochar Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/example Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/files Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/langinfo Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/mapfile Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/mathfunc Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/nearcolor Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/newuser Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/parameter Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/pcre Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/param/private Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/regex Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/sched Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/net/socket Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/stat Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/system Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/net/tcp Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/termcap Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/terminfo Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/watch Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/zftp Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/zle Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/zleparameter Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/zprof Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/zpty Module::"
msgstr ""

#. type: menuentry
#: zsh.texi:260 zsh.texi:27778
msgid "The zsh/zselect Module::"
msgstr ""

#. type: section
#: zsh.texi:260 zsh.texi:27778 zsh.texi:32064 zsh.texi:32146 zsh.texi:32148
#, no-wrap
msgid "The zsh/zutil Module"
msgstr ""

#. type: node
#: zsh.texi:263 zsh.texi:27603 zsh.texi:32609 zsh.texi:32611 zsh.texi:32652
#: zsh.texi:33013 zsh.texi:33496 zsh.texi:33569 zsh.texi:33688 zsh.texi:33721
#, no-wrap
msgid "Calendar Function System"
msgstr ""

#. type: menuentry
#: zsh.texi:270 zsh.texi:32649
msgid "Calendar File and Date Formats::"
msgstr ""

#. type: menuentry
#: zsh.texi:270 zsh.texi:32649
msgid "Calendar System User Functions::"
msgstr ""

#. type: menuentry
#: zsh.texi:270 zsh.texi:32649
msgid "Calendar Styles::"
msgstr ""

#. type: menuentry
#: zsh.texi:270 zsh.texi:32649
msgid "Calendar Utility Functions::"
msgstr ""

#. type: node
#: zsh.texi:270 zsh.texi:32649 zsh.texi:33569 zsh.texi:33688
#, no-wrap
msgid "Calendar Bugs"
msgstr ""

#. type: node
#: zsh.texi:273 zsh.texi:32609 zsh.texi:33721 zsh.texi:33723 zsh.texi:33768
#: zsh.texi:34402 zsh.texi:34617 zsh.texi:34674 zsh.texi:34690
#, no-wrap
msgid "TCP Function System"
msgstr ""

#. type: menuentry
#: zsh.texi:279 zsh.texi:33765
msgid "TCP Functions::"
msgstr ""

#. type: menuentry
#: zsh.texi:279 zsh.texi:33765
msgid "TCP Parameters::"
msgstr ""

#. type: menuentry
#: zsh.texi:279 zsh.texi:33765
msgid "TCP Examples::"
msgstr ""

#. type: section
#: zsh.texi:279 zsh.texi:33765 zsh.texi:34617 zsh.texi:34674 zsh.texi:34676
#, no-wrap
msgid "TCP Bugs"
msgstr ""

#. type: node
#: zsh.texi:282 zsh.texi:33721 zsh.texi:34690 zsh.texi:34692 zsh.texi:34736
#: zsh.texi:34768 zsh.texi:35266 zsh.texi:35454
#, no-wrap
msgid "Zftp Function System"
msgstr ""

#. type: menuentry
#: zsh.texi:287 zsh.texi:34733
msgid "Installation::"
msgstr ""

#. type: menuentry
#: zsh.texi:287 zsh.texi:34733
msgid "Zftp Functions::"
msgstr ""

#. type: section
#: zsh.texi:287 zsh.texi:34733 zsh.texi:34768 zsh.texi:35266 zsh.texi:35268
#, no-wrap
msgid "Miscellaneous Features"
msgstr ""

#. type: menuentry
#: zsh.texi:303 zsh.texi:35483
msgid "Utilities::"
msgstr ""

#. type: menuentry
#: zsh.texi:303 zsh.texi:35483
msgid "Recent Directories::"
msgstr ""

#. type: menuentry
#: zsh.texi:303 zsh.texi:35483
msgid "Other Directory Functions::"
msgstr ""

#. type: menuentry
#: zsh.texi:303 zsh.texi:35483
msgid "Version Control Information::"
msgstr ""

#. type: menuentry
#: zsh.texi:303 zsh.texi:35483
msgid "Prompt Themes::"
msgstr ""

#. type: menuentry
#: zsh.texi:303 zsh.texi:35483
msgid "ZLE Functions::"
msgstr ""

#. type: menuentry
#: zsh.texi:303 zsh.texi:35483
msgid "Exception Handling::"
msgstr ""

#. type: menuentry
#: zsh.texi:303 zsh.texi:35483
msgid "MIME Functions::"
msgstr ""

#. type: menuentry
#: zsh.texi:303 zsh.texi:35483
msgid "Mathematical Functions::"
msgstr ""

#. type: menuentry
#: zsh.texi:303 zsh.texi:35483
msgid "User Configuration Functions::"
msgstr ""

#. type: section
#: zsh.texi:303 zsh.texi:35483 zsh.texi:40615 zsh.texi:40673 zsh.texi:40675
#, no-wrap
msgid "Other Functions"
msgstr ""

#. type: Plain text
#: zsh.texi:312
msgid ""
"This document has been produced from the texinfo file @t{zsh.texi}, included "
"in the @t{Doc} sub-directory of the Zsh distribution."
msgstr ""

#. type: section
#: zsh.texi:313
#, no-wrap
msgid "Producing documentation from zsh.texi"
msgstr ""

#. type: Plain text
#: zsh.texi:316
msgid "The texinfo source may be converted into several formats:"
msgstr ""

#. type: item
#: zsh.texi:319
#, no-wrap
msgid "The Info manual"
msgstr ""

#. type: table
#: zsh.texi:323
msgid ""
"The Info format allows searching for topics, commands, functions, etc.  from "
"the many Indices. The command `@t{makeinfo zsh.texi}' is used to produce the "
"Info documentation."
msgstr ""

#. type: item
#: zsh.texi:324
#, no-wrap
msgid "The printed manual"
msgstr ""

#. type: table
#: zsh.texi:328
msgid ""
"The command `@t{texi2dvi zsh.texi}' will output @t{zsh.dvi} which can then "
"be processed with @cite{dvips} and optionally @cite{gs} (Ghostscript) to "
"produce a nicely formatted printed manual."
msgstr ""

#. type: item
#: zsh.texi:329
#, no-wrap
msgid "The HTML manual"
msgstr ""

#. type: table
#: zsh.texi:331
msgid "An HTML version of this manual is available at the Zsh web site via:"
msgstr ""

#. type: table
#: zsh.texi:334
msgid "@t{@uref{https://zsh.sourceforge.io/Doc/}}."
msgstr ""

#. type: table
#: zsh.texi:340
msgid ""
"(The HTML version is produced with @cite{texi2html}, which may be obtained "
"from @t{@uref{http://www.nongnu.org/texi2html/}}. The command is "
"`@t{texi2html --output .  --ifinfo --split=chapter --node-files zsh.texi}'.  "
"If necessary, upgrade to version 1.78 of texi2html.)"
msgstr ""

#. type: Plain text
#: zsh.texi:350
msgid ""
"For those who do not have the necessary tools to process texinfo, "
"precompiled documentation (PostScript, dvi, PDF, info and HTML formats)  is "
"available from the zsh archive site or its mirrors, in the file "
"@t{zsh-doc.tar.gz}. (See @ref{Availability} for a list of sites.)"
msgstr ""

#. type: node
#: zsh.texi:350 zsh.texi:515 zsh.texi:517 zsh.texi:753
#, no-wrap
msgid "Roadmap"
msgstr ""

#. type: cindex
#: zsh.texi:354
#, no-wrap
msgid "introduction"
msgstr ""

#. type: Plain text
#: zsh.texi:361
msgid ""
"Zsh is a UNIX command interpreter (shell) usable as an interactive login "
"shell and as a shell script command processor.  Of the standard shells, zsh "
"most closely resembles @cite{ksh} but includes many enhancements.  It does "
"not provide compatibility with POSIX or other shells in its default "
"operating mode: see the section @ref{Compatibility}."
msgstr ""

#. type: Plain text
#: zsh.texi:367
msgid ""
"Zsh has command line editing, builtin spelling correction, programmable "
"command completion, shell functions (with autoloading), a history mechanism, "
"and a host of other features."
msgstr ""

#. type: node
#: zsh.texi:376 zsh.texi:378 zsh.texi:387
#, no-wrap
msgid "Author"
msgstr ""

#. type: node
#: zsh.texi:376 zsh.texi:387 zsh.texi:389 zsh.texi:407
#, no-wrap
msgid "Availability"
msgstr ""

#. type: cindex
#: zsh.texi:380
#, no-wrap
msgid "author"
msgstr ""

#. type: Plain text
#: zsh.texi:387
msgid ""
"Zsh was originally written by Paul Falstad.  Zsh is now maintained by the "
"members of the zsh-workers mailing list @t{<zsh-workers@@zsh.org>}.  The "
"development is currently coordinated by Peter Stephenson "
"@t{<pws@@zsh.org>}.  The coordinator can be contacted at "
"@t{<coordinator@@zsh.org>}, but matters relating to the code should "
"generally go to the mailing list."
msgstr ""

#. type: node
#: zsh.texi:387 zsh.texi:407 zsh.texi:409 zsh.texi:467
#, no-wrap
msgid "Mailing Lists"
msgstr ""

#. type: Plain text
#: zsh.texi:392
msgid "Zsh is available from the following HTTP and anonymous FTP site."
msgstr ""

#. type: cindex
#: zsh.texi:394
#, no-wrap
msgid "FTP sites for zsh"
msgstr ""

#. type: cindex
#: zsh.texi:395
#, no-wrap
msgid "acquiring zsh by FTP"
msgstr ""

#. type: cindex
#: zsh.texi:396
#, no-wrap
msgid "availability of zsh"
msgstr ""

#. type: Plain text
#: zsh.texi:399
msgid "@t{@uref{ftp://ftp.zsh.org/pub/}}@* @t{@uref{https://www.zsh.org/pub/}}"
msgstr ""

#. type: Plain text
#: zsh.texi:405
msgid ""
"The up-to-date source code is available via Git from Sourceforge.  See "
"@t{@uref{https://sourceforge.net/projects/zsh/}} for details.  A summary of "
"instructions for the archive can be found at "
"@t{@uref{https://zsh.sourceforge.io/}}."
msgstr ""

#. type: node
#: zsh.texi:407 zsh.texi:467 zsh.texi:469 zsh.texi:477
#, no-wrap
msgid "The Zsh FAQ"
msgstr ""

#. type: cindex
#: zsh.texi:411
#, no-wrap
msgid "mailing lists"
msgstr ""

#. type: Plain text
#: zsh.texi:413
msgid "Zsh has several mailing lists:"
msgstr ""

#. type: t{#1}
#: zsh.texi:416
#, no-wrap
msgid "<zsh-announce@@zsh.org>"
msgstr ""

#. type: table
#: zsh.texi:419
msgid ""
"Announcements about releases, major changes in the shell and the monthly "
"posting of the Zsh FAQ.  (moderated)"
msgstr ""

#. type: t{#1}
#: zsh.texi:420
#, no-wrap
msgid "<zsh-users@@zsh.org>"
msgstr ""

#. type: table
#: zsh.texi:422
msgid "User discussions."
msgstr ""

#. type: t{#1}
#: zsh.texi:423
#, no-wrap
msgid "<zsh-workers@@zsh.org>"
msgstr ""

#. type: table
#: zsh.texi:425
msgid "Hacking, development, bug reports and patches."
msgstr ""

#. type: t{#1}
#: zsh.texi:426
#, no-wrap
msgid "<zsh-security@@zsh.org>"
msgstr ""

#. type: table
#: zsh.texi:429
msgid ""
"Private mailing list (the general public cannot subscribe to it) for "
"discussing bug reports with security implications, i.e., potential "
"vulnerabilities."
msgstr ""

#. type: table
#: zsh.texi:432
msgid "If you find a security problem in zsh itself, please mail this address."
msgstr ""

#. type: Plain text
#: zsh.texi:438
msgid ""
"To subscribe or unsubscribe, send mail to the associated administrative "
"address for the mailing list."
msgstr ""

#. type: t{#1}
#: zsh.texi:441
#, no-wrap
msgid "<zsh-announce-subscribe@@zsh.org>"
msgstr ""

#. type: t{#1}
#: zsh.texi:442
#, no-wrap
msgid "<zsh-users-subscribe@@zsh.org>"
msgstr ""

#. type: t{#1}
#: zsh.texi:443
#, no-wrap
msgid "<zsh-workers-subscribe@@zsh.org>"
msgstr ""

#. type: t{#1}
#: zsh.texi:446
#, no-wrap
msgid "<zsh-announce-unsubscribe@@zsh.org>"
msgstr ""

#. type: t{#1}
#: zsh.texi:447
#, no-wrap
msgid "<zsh-users-unsubscribe@@zsh.org>"
msgstr ""

#. type: t{#1}
#: zsh.texi:448
#, no-wrap
msgid "<zsh-workers-unsubscribe@@zsh.org>"
msgstr ""

#. type: Plain text
#: zsh.texi:457
msgid ""
"YOU ONLY NEED TO JOIN ONE OF THE MAILING LISTS AS THEY ARE NESTED.  All "
"submissions to @cite{zsh-announce} are automatically forwarded to "
"@cite{zsh-users}.  All submissions to @cite{zsh-users} are automatically "
"forwarded to @cite{zsh-workers}."
msgstr ""

#. type: Plain text
#: zsh.texi:461
msgid ""
"If you have problems subscribing/unsubscribing to any of the mailing lists, "
"send mail to @t{<listmaster@@zsh.org>}."
msgstr ""

#. type: Plain text
#: zsh.texi:467
msgid ""
"The mailing lists are archived; the archives can be accessed via the "
"administrative addresses listed above.  There is also a hypertext archive "
"available at @t{@uref{https://www.zsh.org/mla/}}."
msgstr ""

#. type: node
#: zsh.texi:467 zsh.texi:477 zsh.texi:479 zsh.texi:483
#, no-wrap
msgid "The Zsh Web Page"
msgstr ""

#. type: Plain text
#: zsh.texi:477
msgid ""
"Zsh has a list of Frequently Asked Questions (FAQ), maintained by Peter "
"Stephenson @t{<pws@@zsh.org>}.  It is regularly posted to the newsgroup "
"@cite{comp.unix.shell} and the @cite{zsh-announce} mailing list.  The latest "
"version can be found at any of the Zsh FTP sites, or at "
"@t{@uref{https://www.zsh.org/FAQ/}}.  The contact address for FAQ-related "
"matters is @t{<faqmaster@@zsh.org>}."
msgstr ""

#. type: node
#: zsh.texi:477 zsh.texi:483 zsh.texi:485 zsh.texi:496
#, no-wrap
msgid "The Zsh Userguide"
msgstr ""

#. type: Plain text
#: zsh.texi:483
msgid ""
"Zsh has a web page which is located at @t{@uref{https://www.zsh.org/}}.  The "
"contact address for web-related matters is @t{<webmaster@@zsh.org>}."
msgstr ""

#. type: Plain text
#: zsh.texi:496
msgid ""
"A userguide is currently in preparation.  It is intended to complement the "
"manual, with explanations and hints on issues where the manual can be "
"cabbalistic, hierographic, or downright mystifying (for example, the word "
"`hierographic' does not exist).  It can be viewed in its current state at "
"@t{@uref{https://zsh.sourceforge.io/Guide/}}.  At the time of writing, "
"chapters dealing with startup files and their contents and the new "
"completion system were essentially complete."
msgstr ""

#. type: Plain text
#: zsh.texi:506
msgid "sh(1), csh(1), tcsh(1), rc(1), bash(1), ksh(1)"
msgstr ""

#. type: Plain text
#: zsh.texi:515
msgid ""
"@cite{IEEE Standard for information Technology - Portable Operating System "
"Interface (POSIX) - Part 2: Shell and Utilities}, IEEE Inc, 1993, ISBN "
"1-55937-255-9."
msgstr ""

#. type: cindex
#: zsh.texi:519
#, no-wrap
msgid "roadmap"
msgstr ""

#. type: Plain text
#: zsh.texi:524
msgid ""
"The Zsh Manual, like the shell itself, is large and often complicated.  This "
"section of the manual provides some pointers to areas of the shell that are "
"likely to be of particular interest to new users, and indicates where in the "
"rest of the manual the documentation is to be found."
msgstr ""

#. type: section
#: zsh.texi:527
#, no-wrap
msgid "When the shell starts"
msgstr ""

#. type: Plain text
#: zsh.texi:533
msgid ""
"When it starts, the shell reads commands from various files.  These can be "
"created or edited to customize the shell.  See @ref{Files}."
msgstr ""

#. type: Plain text
#: zsh.texi:542
msgid ""
"If no personal initialization files exist for the current user, a function "
"is run to help you change some of the most common settings.  It won't appear "
"if your administrator has disabled the @t{zsh/newuser} module.  The function "
"is designed to be self-explanatory.  You can run it by hand with "
"`@t{autoload -Uz zsh-newuser-install; zsh-newuser-install -f}'.  See also "
"@ref{User Configuration Functions}."
msgstr ""

#. type: section
#: zsh.texi:545
#, no-wrap
msgid "Interactive Use"
msgstr ""

#. type: Plain text
#: zsh.texi:551
msgid ""
"Interaction with the shell uses the builtin Zsh Line Editor, ZLE.  This is "
"described in detail in @ref{Zsh Line Editor}."
msgstr ""

#. type: Plain text
#: zsh.texi:557
msgid ""
"The first decision a user must make is whether to use the Emacs or Vi "
"editing mode as the keys for editing are substantially different.  Emacs "
"editing mode is probably more natural for beginners and can be selected "
"explicitly with the command @t{bindkey -e}."
msgstr ""

#. type: Plain text
#: zsh.texi:568
msgid ""
"A history mechanism for retrieving previously typed lines (most simply with "
"the Up or Down arrow keys) is available; note that, unlike other shells, zsh "
"will not save these lines when the shell exits unless you set appropriate "
"variables, and the number of history lines retained by default is quite "
"small (30 lines).  See the description of the shell variables (referred to "
"in the documentation as parameters) @t{HISTFILE}, @t{HISTSIZE} and "
"@t{SAVEHIST} in @ref{Parameters Used By The Shell}.  Note that it's "
"currently only possible to read and write files saving history when the "
"shell is interactive, i.e. it does not work from scripts."
msgstr ""

#. type: Plain text
#: zsh.texi:586
msgid ""
"The shell now supports the UTF-8 character set (and also others if supported "
"by the operating system).  This is (mostly) handled transparently by the "
"shell, but the degree of support in terminal emulators is variable.  There "
"is some discussion of this in the shell FAQ, "
"@t{@uref{https://www.zsh.org/FAQ/}}.  Note in particular that for combining "
"characters to be handled the option @t{COMBINING_CHARS} needs to be set.  "
"Because the shell is now more sensitive to the definition of the character "
"set, note that if you are upgrading from an older version of the shell you "
"should ensure that the appropriate variable, either @t{LANG} (to affect all "
"aspects of the shell's operation) or @t{LC_CTYPE} (to affect only the "
"handling of character sets) is set to an appropriate value.  This is true "
"even if you are using a single-byte character set including extensions of "
"ASCII such as @t{ISO-8859-1} or @t{ISO-8859-15}.  See the description of "
"@t{LC_CTYPE} in @ref{Parameters}."
msgstr ""

#. type: subsection
#: zsh.texi:589 zsh.texi:9907 zsh.texi:18366 zsh.texi:18422 zsh.texi:18424
#: zsh.texi:18499 zsh.texi:35442
#, no-wrap
msgid "Completion"
msgstr ""

#. type: Plain text
#: zsh.texi:601
msgid ""
"Completion is a feature present in many shells. It allows the user to type "
"only a part (usually the prefix) of a word and have the shell fill in the "
"rest.  The completion system in zsh is programmable.  For example, the shell "
"can be set to complete email addresses in arguments to the mail command from "
"your @t{~/.abook/addressbook}; usernames, hostnames, and even remote paths "
"in arguments to scp, and so on.  Anything that can be written in or glued "
"together with zsh can be the source of what the line editor offers as "
"possible completions."
msgstr ""

#. type: Plain text
#: zsh.texi:611
msgid ""
"Zsh has two completion systems, an old, so called @t{compctl} completion "
"(named after the builtin command that serves as its complete and only user "
"interface), and a new one, referred to as @t{compsys}, organized as library "
"of builtin and user-defined functions.  The two systems differ in their "
"interface for specifying the completion behavior.  The new system is more "
"customizable and is supplied with completions for many commonly used "
"commands; it is therefore to be preferred."
msgstr ""

#. type: Plain text
#: zsh.texi:616
msgid ""
"The completion system must be enabled explicitly when the shell starts.  For "
"more information see @ref{Completion System}."
msgstr ""

#. type: subsection
#: zsh.texi:619
#, no-wrap
msgid "Extending the line editor"
msgstr ""

#. type: Plain text
#: zsh.texi:626
msgid ""
"Apart from completion, the line editor is highly extensible by means of "
"shell functions.  Some useful functions are provided with the shell; they "
"provide facilities such as:"
msgstr ""

#. type: t{#1}
#: zsh.texi:629 zsh.texi:38722 zsh.texi:38723
#, no-wrap
msgid "insert-composed-char"
msgstr ""

#. type: table
#: zsh.texi:631
msgid "composing characters not found on the keyboard"
msgstr ""

#. type: tindex
#: zsh.texi:632 zsh.texi:38133
#, no-wrap
msgid "match-words-by-style"
msgstr ""

#. type: table
#: zsh.texi:635
msgid ""
"configuring what the line editor considers a word when moving or deleting by "
"word"
msgstr ""

#. type: item
#: zsh.texi:636
#, no-wrap
msgid "@t{history-beginning-search-backward-end}, etc."
msgstr ""

#. type: table
#: zsh.texi:638
msgid "alternative ways of searching the shell history"
msgstr ""

#. type: item
#: zsh.texi:639 zsh.texi:39241
#, no-wrap
msgid "@t{replace-string}, @t{replace-pattern}"
msgstr ""

#. type: table
#: zsh.texi:641
msgid "functions for replacing strings or patterns globally in the command line"
msgstr ""

#. type: t{#1}
#: zsh.texi:642 zsh.texi:38587 zsh.texi:38588
#, no-wrap
msgid "edit-command-line"
msgstr ""

#. type: table
#: zsh.texi:644
msgid "edit the command line with an external editor."
msgstr ""

#. type: Plain text
#: zsh.texi:649
msgid "See @ref{ZLE Functions} for descriptions of these."
msgstr ""

#. type: Plain text
#: zsh.texi:660
msgid ""
"The shell has a large number of options for changing its behaviour.  These "
"cover all aspects of the shell; browsing the full documentation is the only "
"good way to become acquainted with the many possibilities.  See "
"@ref{Options}."
msgstr ""

#. type: section
#: zsh.texi:663
#, no-wrap
msgid "Pattern Matching"
msgstr ""

#. type: Plain text
#: zsh.texi:671
msgid ""
"The shell has a rich set of patterns which are available for file matching "
"(described in the documentation as `filename generation' and also known for "
"historical reasons as `globbing') and for use when programming.  These are "
"described in @ref{Filename Generation}."
msgstr ""

#. type: Plain text
#: zsh.texi:675
msgid ""
"Of particular interest are the following patterns that are not commonly "
"supported by other systems of pattern matching:"
msgstr ""

#. type: t{#1}
#: zsh.texi:678 zsh.texi:3359 zsh.texi:3396
#, no-wrap
msgid "**"
msgstr ""

#. type: table
#: zsh.texi:680
msgid "for matching over multiple directories"
msgstr ""

#. type: t{#1}
#: zsh.texi:681 zsh.texi:3357 zsh.texi:3412
#, no-wrap
msgid "|"
msgstr ""

#. type: table
#: zsh.texi:683
msgid "for matching either of two alternatives"
msgstr ""

#. type: item
#: zsh.texi:684
#, no-wrap
msgid "@t{~}, @t{^}"
msgstr ""

#. type: table
#: zsh.texi:687
msgid ""
"the ability to exclude patterns from matching when the @t{EXTENDED_GLOB} "
"option is set"
msgstr ""

#. type: item
#: zsh.texi:688
#, no-wrap
msgid "@t{(}@var{...}@t{)}"
msgstr ""

#. type: table
#: zsh.texi:692
msgid ""
"glob qualifiers, included in parentheses at the end of the pattern, which "
"select files by type (such as directories) or attribute (such as size)."
msgstr ""

#. type: section
#: zsh.texi:697
#, no-wrap
msgid "General Comments on Syntax"
msgstr ""

#. type: Plain text
#: zsh.texi:705
msgid ""
"Although the syntax of zsh is in ways similar to the Korn shell, and "
"therefore more remotely to the original UNIX shell, the Bourne shell, its "
"default behaviour does not entirely correspond to those shells.  General "
"shell syntax is introduced in @ref{Shell Grammar}."
msgstr ""

#. type: Plain text
#: zsh.texi:714
msgid ""
"One commonly encountered difference is that variables substituted onto the "
"command line are not split into words.  See the description of the shell "
"option @t{SH_WORD_SPLIT} in @ref{Parameter Expansion}.  In zsh, you can "
"either explicitly request the splitting (e.g. @t{$@{=foo@}})  or use an "
"array when you want a variable to expand to more than one word.  See "
"@ref{Array Parameters}."
msgstr ""

#. type: section
#: zsh.texi:717
#, no-wrap
msgid "Programming"
msgstr ""

#. type: Plain text
#: zsh.texi:726
msgid ""
"The most convenient way of adding enhancements to the shell is typically by "
"writing a shell function and arranging for it to be autoloaded.  Functions "
"are described in @ref{Functions}.  Users changing from the C shell and its "
"relatives should notice that aliases are less used in zsh as they don't "
"perform argument substitution, only simple text replacement."
msgstr ""

#. type: Plain text
#: zsh.texi:731
msgid ""
"A few general functions, other than those for the line editor described "
"above, are provided with the shell and are described in @ref{User "
"Contributions}.  Features include:"
msgstr ""

#. type: t{#1}
#: zsh.texi:734
#, no-wrap
msgid "promptinit"
msgstr ""

#. type: table
#: zsh.texi:736
msgid "a prompt theme system for changing prompts easily, see @ref{Prompt Themes}"
msgstr ""

#. type: findex
#: zsh.texi:737 zsh.texi:39920
#, no-wrap
msgid "zsh-mime-setup"
msgstr ""

#. type: table
#: zsh.texi:740
msgid ""
"a MIME-handling system which dispatches commands according to the suffix of "
"a file as done by graphical file managers"
msgstr ""

#. type: findex
#: zsh.texi:741 zsh.texi:40333
#, no-wrap
msgid "zcalc"
msgstr ""

#. type: table
#: zsh.texi:743
msgid "a calculator"
msgstr ""

#. type: findex
#: zsh.texi:744 zsh.texi:40941
#, no-wrap
msgid "zargs"
msgstr ""

#. type: table
#: zsh.texi:746
msgid "a version of @t{xargs} that makes the @t{find} command redundant"
msgstr ""

#. type: findex
#: zsh.texi:747 zsh.texi:41096
#, no-wrap
msgid "zmv"
msgstr ""

#. type: table
#: zsh.texi:749
msgid "a command for renaming files by means of shell patterns."
msgstr ""

#. type: node
#: zsh.texi:753 zsh.texi:1086 zsh.texi:1088 zsh.texi:1153 zsh.texi:1179
#, no-wrap
msgid "Files"
msgstr ""

#. type: cindex
#: zsh.texi:757
#, no-wrap
msgid "invocation"
msgstr ""

#. type: cindex
#: zsh.texi:761
#, no-wrap
msgid "shell options"
msgstr ""

#. type: cindex
#: zsh.texi:762
#, no-wrap
msgid "options, shell"
msgstr ""

#. type: cindex
#: zsh.texi:763
#, no-wrap
msgid "shell flags"
msgstr ""

#. type: cindex
#: zsh.texi:764
#, no-wrap
msgid "flags, shell"
msgstr ""

#. type: Plain text
#: zsh.texi:767
msgid ""
"The following flags are interpreted by the shell when invoked to determine "
"where the shell will read commands from:"
msgstr ""

#. type: t{#1}
#: zsh.texi:770 zsh.texi:12701 zsh.texi:13124 zsh.texi:14208 zsh.texi:14474
#: zsh.texi:15345 zsh.texi:15543 zsh.texi:25755 zsh.texi:27023 zsh.texi:37969
#: zsh.texi:38388
#, no-wrap
msgid "-c"
msgstr ""

#. type: table
#: zsh.texi:775
msgid ""
"Take the first argument as a command to execute, rather than reading "
"commands from a script or standard input.  If any further arguments are "
"given, the first one is assigned to @t{$0}, rather than being used as a "
"positional parameter."
msgstr ""

#. type: t{#1}
#: zsh.texi:776 zsh.texi:12623 zsh.texi:12670 zsh.texi:13612 zsh.texi:14220
#: zsh.texi:15351 zsh.texi:41136
#, no-wrap
msgid "-i"
msgstr ""

#. type: table
#: zsh.texi:779
msgid ""
"Force shell to be interactive.  It is still possible to specify a script to "
"execute."
msgstr ""

#. type: t{#1}
#: zsh.texi:780 zsh.texi:12637 zsh.texi:12682 zsh.texi:12707 zsh.texi:14268
#: zsh.texi:14436 zsh.texi:15369 zsh.texi:15575 zsh.texi:24719 zsh.texi:30509
#: zsh.texi:33105 zsh.texi:33658 zsh.texi:37979 zsh.texi:38386 zsh.texi:41148
#, no-wrap
msgid "-s"
msgstr ""

#. type: table
#: zsh.texi:785
msgid ""
"Force shell to read commands from the standard input.  If the @t{-s} flag is "
"not present and an argument is given, the first argument is taken to be the "
"pathname of a script to execute."
msgstr ""

#. type: Plain text
#: zsh.texi:797
msgid ""
"If there are any remaining arguments after option processing, and neither of "
"the options @t{-c} or @t{-s} was supplied, the first argument is taken as "
"the file name of a script containing shell commands to be executed.  If the "
"option @t{PATH_SCRIPT} is set, and the file name does not contain a "
"directory path (i.e. there is no `@t{/}' in the name), first the current "
"directory and then the command path given by the variable @t{PATH} are "
"searched for the script.  If the option is not set or the file name contains "
"a `@t{/}' it is used directly."
msgstr ""

#. type: Plain text
#: zsh.texi:801
msgid ""
"After the first one or two arguments have been appropriated as described "
"above, the remaining arguments are assigned to the positional parameters."
msgstr ""

#. type: Plain text
#: zsh.texi:806
msgid ""
"For further options, which are common to invocation and the @t{set} builtin, "
"see @ref{Options}."
msgstr ""

#. type: Plain text
#: zsh.texi:820
msgid ""
"The long option `@t{-}@t{-emulate}' followed (in a separate word) by an "
"emulation mode may be passed to the shell.  The emulation modes are those "
"described for the @t{emulate} builtin, see @ref{Shell Builtin Commands}.  "
"The `@t{-}@t{-emulate}' option must precede any other options (which might "
"otherwise be overridden), but following options are honoured, so may be used "
"to modify the requested emulation mode.  Note that certain extra steps are "
"taken to ensure a smooth emulation when this option is used compared with "
"the @t{emulate} command within the shell: for example, variables that "
"conflict with POSIX usage such as @t{path} are not defined within the shell."
msgstr ""

#. type: Plain text
#: zsh.texi:825
msgid ""
"Options may be specified by name using the @t{-o} option.  @t{-o} acts like "
"a single-letter option, but takes a following string as the option name.  "
"For example,"
msgstr ""

#. type: example
#: zsh.texi:829
#, no-wrap
msgid "zsh -x -o shwordsplit scr\n"
msgstr ""

#. type: Plain text
#: zsh.texi:838
msgid ""
"runs the script @t{scr}, setting the @t{XTRACE} option by the corresponding "
"letter `@t{-x}' and the @t{SH_WORD_SPLIT} option by name.  Options may be "
"turned @emph{off} by name by using @t{+o} instead of @t{-o}.  @t{-o} can be "
"stacked up with preceding single-letter options, so for example `@t{-xo "
"shwordsplit}' or `@t{-xoshwordsplit}' is equivalent to `@t{-x -o "
"shwordsplit}'."
msgstr ""

#. type: cindex
#: zsh.texi:840
#, no-wrap
msgid "long option"
msgstr ""

#. type: Plain text
#: zsh.texi:851
msgid ""
"Options may also be specified by name in GNU long option style, "
"`@t{-}@t{-}@var{option-name}'.  When this is done, `@t{-}' characters in the "
"option name are permitted: they are translated into `@t{_}', and thus "
"ignored.  So, for example, `@t{zsh -}@t{-sh-word-split}' invokes zsh with "
"the @t{SH_WORD_SPLIT} option turned on.  Like other option syntaxes, options "
"can be turned off by replacing the initial `@t{-}' with a `@t{+}'; thus "
"`@t{+-sh-word-split}' is equivalent to `@t{-}@t{-no-sh-word-split}'.  Unlike "
"other option syntaxes, GNU-style long options cannot be stacked with any "
"other options, so for example `@t{-x-shwordsplit}' is an error, rather than "
"being treated like `@t{-x -}@t{-shwordsplit}'."
msgstr ""

#. type: cindex
#: zsh.texi:853
#, no-wrap
msgid "--version"
msgstr ""

#. type: cindex
#: zsh.texi:854
#, no-wrap
msgid "--help"
msgstr ""

#. type: Plain text
#: zsh.texi:859
msgid ""
"The special GNU-style option `@t{-}@t{-version}' is handled; it sends to "
"standard output the shell's version information, then exits successfully.  "
"`@t{-}@t{-help}' is also handled; it sends to standard output a list of "
"options that can be used when invoking the shell, then exits successfully."
msgstr ""

#. type: Plain text
#: zsh.texi:871
msgid ""
"Option processing may be finished, allowing following arguments that start "
"with `@t{-}' or `@t{+}' to be treated as normal arguments, in two ways.  "
"Firstly, a lone `@t{-}' (or `@t{+}') as an argument by itself ends option "
"processing.  Secondly, a special option `@t{-}@t{-}' (or `@t{+-}'), which "
"may be specified on its own (which is the standard POSIX usage) or may be "
"stacked with preceding options (so `@t{-x-}' is equivalent to `@t{-x "
"-}@t{-}').  Options are not permitted to be stacked after `@t{-}@t{-}' (so "
"`@t{-x-f}' is an error), but note the GNU-style option form discussed above, "
"where `@t{-}@t{-shwordsplit}' is permitted and does not end option "
"processing."
msgstr ""

#. type: Plain text
#: zsh.texi:877
msgid ""
"Except when the @cite{sh}/@cite{ksh} emulation single-letter options are in "
"effect, the option `@t{-b}' (or `@t{+b}') ends option processing.  `@t{-b}' "
"is like `@t{-}@t{-}', except that further single-letter options can be "
"stacked after the `@t{-b}' and will take effect as normal."
msgstr ""

#. type: node
#: zsh.texi:886 zsh.texi:888 zsh.texi:975
#, no-wrap
msgid "Compatibility"
msgstr ""

#. type: cindex
#: zsh.texi:890
#, no-wrap
msgid "compatibility"
msgstr ""

#. type: cindex
#: zsh.texi:891
#, no-wrap
msgid "sh compatibility"
msgstr ""

#. type: cindex
#: zsh.texi:892
#, no-wrap
msgid "ksh compatibility"
msgstr ""

#. type: Plain text
#: zsh.texi:901
msgid ""
"Zsh tries to emulate @cite{sh} or @cite{ksh} when it is invoked as @t{sh} or "
"@t{ksh} respectively; more precisely, it looks at the first letter of the "
"name by which it was invoked, excluding any initial `@t{r}' (assumed to "
"stand for `restricted'), and if that is `@t{b}', `@t{s}' or `@t{k}' it will "
"emulate @cite{sh} or @cite{ksh}.  Furthermore, if invoked as @t{su} (which "
"happens on certain systems when the shell is executed by the @t{su} "
"command), the shell will try to find an alternative name from the @t{SHELL} "
"environment variable and perform emulation based on that."
msgstr ""

#. type: Plain text
#: zsh.texi:922
msgid ""
"In @cite{sh} and @cite{ksh} compatibility modes the following parameters are "
"not special and not initialized by the shell: @t{ARGC}, @t{argv}, "
"@t{cdpath}, @t{fignore}, @t{fpath}, @t{HISTCHARS}, @t{mailpath}, "
"@t{MANPATH}, @t{manpath}, @t{path}, @t{prompt}, @t{PROMPT}, @t{PROMPT2}, "
"@t{PROMPT3}, @t{PROMPT4}, @t{psvar}, @t{status}."
msgstr ""

#. type: vindex
#: zsh.texi:924
#, no-wrap
msgid "ENV, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:932
msgid ""
"The usual zsh startup/shutdown scripts are not executed.  Login shells "
"source @t{/etc/profile} followed by @t{$HOME/.profile}.  If the @t{ENV} "
"environment variable is set on invocation, @t{$ENV} is sourced after the "
"profile scripts.  The value of @t{ENV} is subjected to parameter expansion, "
"command substitution, and arithmetic expansion before being interpreted as a "
"pathname.  Note that the @t{PRIVILEGED} option also affects the execution of "
"startup files."
msgstr ""

#. type: Plain text
#: zsh.texi:966
msgid ""
"The following options are set if the shell is invoked as @t{sh} or @t{ksh}: "
"@t{NO_BAD_PATTERN}, @t{NO_BANG_HIST}, @t{NO_BG_NICE}, @t{NO_EQUALS}, "
"@t{NO_FUNCTION_ARGZERO}, @t{GLOB_SUBST}, @t{NO_GLOBAL_EXPORT}, @t{NO_HUP}, "
"@t{INTERACTIVE_COMMENTS}, @t{KSH_ARRAYS}, @t{NO_MULTIOS}, @t{NO_NOMATCH}, "
"@t{NO_NOTIFY}, @t{POSIX_BUILTINS}, @t{NO_PROMPT_PERCENT}, "
"@t{RM_STAR_SILENT}, @t{SH_FILE_EXPANSION}, @t{SH_GLOB}, "
"@t{SH_OPTION_LETTERS}, @t{SH_WORD_SPLIT}.  Additionally the @t{BSD_ECHO} and "
"@t{IGNORE_BRACES} options are set if zsh is invoked as @t{sh}.  Also, the "
"@t{KSH_OPTION_PRINT}, @t{LOCAL_OPTIONS}, @t{PROMPT_BANG}, @t{PROMPT_SUBST} "
"and @t{SINGLE_LINE_ZLE} options are set if zsh is invoked as @t{ksh}."
msgstr ""

#. type: Plain text
#: zsh.texi:975
msgid ""
"Please note that, whilst reasonable efforts are taken to address "
"incompatibilities when they arise, zsh does not guarantee complete emulation "
"of other shells, nor POSIX compliance. For more information on the "
"differences between zsh and other shells, please refer to chapter 2 of the "
"shell FAQ, @t{@uref{https://www.zsh.org/FAQ/}}."
msgstr ""

#. type: cindex
#: zsh.texi:979 zsh.texi:12295
#, no-wrap
msgid "restricted shell"
msgstr ""

#. type: table
#: zsh.texi:980 zsh.texi:12292 zsh.texi:12637 zsh.texi:12682
#, no-wrap
msgid "RESTRICTED"
msgstr ""

#. type: Plain text
#: zsh.texi:986
msgid ""
"When the basename of the command used to invoke zsh starts with the letter "
"`@t{r}' or the `@t{-r}' command line option is supplied at invocation, the "
"shell becomes restricted.  Emulation mode is determined after stripping the "
"letter `@t{r}' from the invocation name.  The following are disabled in "
"restricted mode:"
msgstr ""

#. type: itemize
#: zsh.texi:992
msgid "changing directories with the @t{cd} builtin"
msgstr ""

#. type: itemize
#: zsh.texi:998
msgid ""
"changing or unsetting the @t{EGID}, @t{EUID}, @t{GID}, @t{HISTFILE}, "
"@t{HISTSIZE}, @t{IFS}, @t{LD_AOUT_LIBRARY_PATH}, @t{LD_AOUT_PRELOAD}, "
"@t{LD_LIBRARY_PATH}, @t{LD_PRELOAD}, @t{MODULE_PATH}, @t{module_path}, "
"@t{PATH}, @t{path}, @t{SHELL}, @t{UID} and @t{USERNAME} parameters"
msgstr ""

#. type: itemize
#: zsh.texi:1000
msgid "specifying command names containing @t{/}"
msgstr ""

#. type: itemize
#: zsh.texi:1002
msgid "specifying command pathnames using @t{hash}"
msgstr ""

#. type: itemize
#: zsh.texi:1004
msgid "redirecting output to files"
msgstr ""

#. type: itemize
#: zsh.texi:1007
msgid "using the @t{exec} builtin command to replace the shell with another command"
msgstr ""

#. type: itemize
#: zsh.texi:1010
msgid ""
"using @t{jobs -Z} to overwrite the shell process' argument and environment "
"space"
msgstr ""

#. type: itemize
#: zsh.texi:1013
msgid "using the @t{ARGV0} parameter to override @t{argv[0]} for external commands"
msgstr ""

#. type: itemize
#: zsh.texi:1016
msgid "turning off restricted mode with @t{set +r} or @t{unsetopt RESTRICTED}"
msgstr ""

#. type: Plain text
#: zsh.texi:1023
msgid ""
"These restrictions are enforced after processing the startup files.  The "
"startup files should set up @t{PATH} to point to a directory of commands "
"which can be safely invoked in the restricted environment.  They may also "
"add further restrictions by disabling selected builtins."
msgstr ""

#. type: Plain text
#: zsh.texi:1029
msgid ""
"Restricted mode can also be activated any time by setting the @t{RESTRICTED} "
"option.  This immediately enables all the restrictions described above even "
"if the shell still has not processed all startup files."
msgstr ""

#. type: Plain text
#: zsh.texi:1035
msgid ""
"A shell @emph{Restricted Mode} is an outdated way to restrict what users may "
"do: modern systems have better, safer and more reliable ways to confine user "
"actions, such as @emph{chroot jails}, @emph{containers} and @emph{zones}."
msgstr ""

#. type: Plain text
#: zsh.texi:1039
msgid ""
"A restricted shell is very difficult to implement safely.  The feature may "
"be removed in a future version of zsh."
msgstr ""

#. type: Plain text
#: zsh.texi:1046
msgid ""
"It is important to realise that the restrictions only apply to the shell, "
"not to the commands it runs (except for some shell builtins).  While a "
"restricted shell can only run the restricted list of commands accessible via "
"the predefined `@t{PATH}' variable, it does not prevent those commands from "
"running any other command."
msgstr ""

#. type: Plain text
#: zsh.texi:1051
msgid ""
"As an example, if `@t{env}' is among the list of @emph{allowed} commands, "
"then it allows the user to run any command as `@t{env}' is not a shell "
"builtin command and can run arbitrary executables."
msgstr ""

#. type: Plain text
#: zsh.texi:1056
msgid ""
"So when implementing a restricted shell framework it is important to be "
"fully aware of what actions each of the @emph{allowed} commands or features "
"(which may be regarded as @emph{modules}) can perform."
msgstr ""

#. type: Plain text
#: zsh.texi:1061
msgid ""
"Many commands can have their behaviour affected by environment variables.  "
"Except for the few listed above, zsh does not restrict the setting of "
"environment variables."
msgstr ""

#. type: Plain text
#: zsh.texi:1071
msgid ""
"If a `@t{perl}', `@t{python}', `@t{bash}', or other general purpose "
"interpreted script it treated as a restricted command, the user can work "
"around the restriction by setting specially crafted `@t{PERL5LIB}', "
"`@t{PYTHONPATH}', `@t{BASHENV}' (etc.) environment variables. On GNU "
"systems, any command can be made to run arbitrary code when performing "
"character set conversion (including zsh itself) by setting a "
"`@t{GCONV_PATH}' environment variable.  Those are only a few examples."
msgstr ""

#. type: Plain text
#: zsh.texi:1076
msgid ""
"Bear in mind that, contrary to some other shells, `@t{readonly}' is not a "
"security feature in zsh as it can be undone and so cannot be used to "
"mitigate the above."
msgstr ""

#. type: Plain text
#: zsh.texi:1086
msgid ""
"A restricted shell only works if the allowed commands are few and carefully "
"written so as not to grant more access to users than intended.  It is also "
"important to restrict what zsh module the user may load as some of them, "
"such as `@t{zsh/system}', `@t{zsh/mapfile}' and `@t{zsh/files}', allow "
"bypassing most of the restrictions."
msgstr ""

#. type: section
#: zsh.texi:1091
#, no-wrap
msgid "Startup/Shutdown Files"
msgstr ""

#. type: cindex
#: zsh.texi:1093
#, no-wrap
msgid "files, startup"
msgstr ""

#. type: cindex
#: zsh.texi:1094
#, no-wrap
msgid "startup files"
msgstr ""

#. type: cindex
#: zsh.texi:1095
#, no-wrap
msgid "files, shutdown"
msgstr ""

#. type: cindex
#: zsh.texi:1096
#, no-wrap
msgid "shutdown files"
msgstr ""

#. type: pindex
#: zsh.texi:1097
#, no-wrap
msgid "RCS, use of"
msgstr ""

#. type: pindex
#: zsh.texi:1098
#, no-wrap
msgid "GLOBAL_RCS, use of"
msgstr ""

#. type: pindex
#: zsh.texi:1099
#, no-wrap
msgid "NO_RCS, use of"
msgstr ""

#. type: pindex
#: zsh.texi:1100
#, no-wrap
msgid "NO_GLOBAL_RCS, use of"
msgstr ""

#. type: vindex
#: zsh.texi:1101
#, no-wrap
msgid "ZDOTDIR, use of"
msgstr ""

#. type: cindex
#: zsh.texi:1102
#, no-wrap
msgid "zshenv"
msgstr ""

#. type: Plain text
#: zsh.texi:1113
msgid ""
"Commands are first read from @t{/etc/zshenv}; this cannot be overridden.  "
"Subsequent behaviour is modified by the @t{RCS} and @t{GLOBAL_RCS} options; "
"the former affects all startup files, while the second only affects global "
"startup files (those shown here with an path starting with a @t{/}).  If one "
"of the options is unset at any point, any subsequent startup file(s)  of the "
"corresponding type will not be read.  It is also possible for a file in "
"@t{$ZDOTDIR} to re-enable @t{GLOBAL_RCS}. Both @t{RCS} and @t{GLOBAL_RCS} "
"are set by default."
msgstr ""

#. type: Plain text
#: zsh.texi:1116
msgid "Commands are then read from @t{$ZDOTDIR/.zshenv}."
msgstr ""

#. type: pindex
#: zsh.texi:1116
#, no-wrap
msgid "LOGIN, use of"
msgstr ""

#. type: cindex
#: zsh.texi:1117
#, no-wrap
msgid "zprofile"
msgstr ""

#. type: Plain text
#: zsh.texi:1120
msgid ""
"If the shell is a login shell, commands are read from @t{/etc/zprofile} and "
"then @t{$ZDOTDIR/.zprofile}."
msgstr ""

#. type: cindex
#: zsh.texi:1120
#, no-wrap
msgid "zshrc"
msgstr ""

#. type: Plain text
#: zsh.texi:1123
msgid ""
"Then, if the shell is interactive, commands are read from @t{/etc/zshrc} and "
"then @t{$ZDOTDIR/.zshrc}."
msgstr ""

#. type: cindex
#: zsh.texi:1123
#, no-wrap
msgid "zlogin"
msgstr ""

#. type: Plain text
#: zsh.texi:1126
msgid ""
"Finally, if the shell is a login shell, @t{/etc/zlogin} and "
"@t{$ZDOTDIR/.zlogin} are read."
msgstr ""

#. type: cindex
#: zsh.texi:1128
#, no-wrap
msgid "zlogout"
msgstr ""

#. type: Plain text
#: zsh.texi:1138
msgid ""
"When a login shell exits, the files @t{$ZDOTDIR/.zlogout} and then "
"@t{/etc/zlogout} are read.  This happens with either an explicit exit via "
"the @t{exit} or @t{logout} commands, or an implicit exit by reading "
"end-of-file from the terminal.  However, if the shell terminates due to "
"@t{exec}'ing another process, the logout files are not read.  These are also "
"affected by the @t{RCS} and @t{GLOBAL_RCS} options.  Note also that the "
"@t{RCS} option affects the saving of history files, i.e. if @t{RCS} is unset "
"when the shell exits, no history file will be saved."
msgstr ""

#. type: vindex
#: zsh.texi:1140
#, no-wrap
msgid "HOME, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:1144
msgid ""
"If @t{ZDOTDIR} is unset, @t{HOME} is used instead.  Files listed above as "
"being in @t{/etc} may be in another directory, depending on the "
"installation."
msgstr ""

#. type: Plain text
#: zsh.texi:1152
msgid ""
"As @t{/etc/zshenv} is run for all instances of zsh, it is important that it "
"be kept as small as possible.  In particular, it is a good idea to put code "
"that does not need to be run for every single shell behind a test of the "
"form `@t{if [[ -o rcs ]]; then ...}' so that it will not be executed when "
"zsh is invoked with the `@t{-f}' option."
msgstr ""

#. type: cindex
#: zsh.texi:1155
#, no-wrap
msgid "files used"
msgstr ""

#. type: t{#1}
#: zsh.texi:1157
#, no-wrap
msgid "$ZDOTDIR/.zshenv"
msgstr ""

#. type: t{#1}
#: zsh.texi:1158
#, no-wrap
msgid "$ZDOTDIR/.zprofile"
msgstr ""

#. type: t{#1}
#: zsh.texi:1159
#, no-wrap
msgid "$ZDOTDIR/.zshrc"
msgstr ""

#. type: t{#1}
#: zsh.texi:1160
#, no-wrap
msgid "$ZDOTDIR/.zlogin"
msgstr ""

#. type: t{#1}
#: zsh.texi:1161
#, no-wrap
msgid "$ZDOTDIR/.zlogout"
msgstr ""

#. type: item
#: zsh.texi:1162
#, no-wrap
msgid "@t{$@{TMPPREFIX@}*}   (default is /tmp/zsh*)"
msgstr ""

#. type: t{#1}
#: zsh.texi:1163
#, no-wrap
msgid "/etc/zshenv"
msgstr ""

#. type: t{#1}
#: zsh.texi:1164
#, no-wrap
msgid "/etc/zprofile"
msgstr ""

#. type: t{#1}
#: zsh.texi:1165
#, no-wrap
msgid "/etc/zshrc"
msgstr ""

#. type: t{#1}
#: zsh.texi:1166
#, no-wrap
msgid "/etc/zlogin"
msgstr ""

#. type: item
#: zsh.texi:1167
#, no-wrap
msgid "@t{/etc/zlogout}    (installation-specific - @t{/etc} is the default)"
msgstr ""

#. type: Plain text
#: zsh.texi:1179
msgid ""
"Any of these files may be pre-compiled with the @t{zcompile} builtin command "
"(@ref{Shell Builtin Commands}).  If a compiled file exists (named for the "
"original file plus the @t{.zwc} extension) and it is newer than the original "
"file, the compiled file will be used instead."
msgstr ""

#. type: node
#: zsh.texi:1179 zsh.texi:2014 zsh.texi:2016 zsh.texi:2470
#, no-wrap
msgid "Redirection"
msgstr ""

#. type: cindex
#: zsh.texi:1183
#, no-wrap
msgid "shell grammar"
msgstr ""

#. type: cindex
#: zsh.texi:1184
#, no-wrap
msgid "grammar, shell"
msgstr ""

#. type: menuentry
#: zsh.texi:1195
msgid "Errors::"
msgstr ""

#. type: node
#: zsh.texi:1196 zsh.texi:1198 zsh.texi:1302
#, no-wrap
msgid "Simple Commands & Pipelines"
msgstr ""

#. type: node
#: zsh.texi:1196 zsh.texi:1302 zsh.texi:1304 zsh.texi:1370
#, no-wrap
msgid "Precommand Modifiers"
msgstr ""

#. type: cindex
#: zsh.texi:1200
#, no-wrap
msgid "simple commands"
msgstr ""

#. type: cindex
#: zsh.texi:1201
#, no-wrap
msgid "commands, simple"
msgstr ""

#. type: Plain text
#: zsh.texi:1207
msgid ""
"A @emph{simple command} is a sequence of optional parameter assignments "
"followed by blank-separated words, with optional redirections interspersed.  "
"For a description of assignment, see the beginning of @ref{Parameters}."
msgstr ""

#. type: Plain text
#: zsh.texi:1216
msgid ""
"The first word is the command to be executed, and the remaining words, if "
"any, are arguments to the command.  If a command name is given, the "
"parameter assignments modify the environment of the command when it is "
"executed.  The value of a simple command is its exit status, or 128 plus the "
"signal number if terminated by a signal.  For example,"
msgstr ""

#. type: example
#: zsh.texi:1220
#, no-wrap
msgid "echo foo\n"
msgstr ""

#. type: Plain text
#: zsh.texi:1224
msgid "is a simple command with arguments."
msgstr ""

#. type: cindex
#: zsh.texi:1226
#, no-wrap
msgid "pipeline"
msgstr ""

#. type: Plain text
#: zsh.texi:1238
msgid ""
"A @emph{pipeline} is either a simple command, or a sequence of two or more "
"simple commands where each command is separated from the next by `@t{|}' or "
"`@t{|&}'.  Where commands are separated by `@t{|}', the standard output of "
"the first command is connected to the standard input of the next.  `@t{|&}' "
"is shorthand for `@t{2>&1 |}', which connects both the standard output and "
"the standard error of the command to the standard input of the next.  The "
"value of a pipeline is the value of the last command, unless the pipeline is "
"preceded by `@t{!}' in which case the value is the logical inverse of the "
"value of the last command.  For example,"
msgstr ""

#. type: example
#: zsh.texi:1242
#, no-wrap
msgid "echo foo | sed 's/foo/bar/'\n"
msgstr ""

#. type: Plain text
#: zsh.texi:1247
msgid ""
"is a pipeline, where the output (`@t{foo}' plus a newline) of the first "
"command will be passed to the input of the second."
msgstr ""

#. type: findex
#: zsh.texi:1249
#, no-wrap
msgid "coproc"
msgstr ""

#. type: cindex
#: zsh.texi:1250
#, no-wrap
msgid "coprocess"
msgstr ""

#. type: Plain text
#: zsh.texi:1258
msgid ""
"If a pipeline is preceded by `@t{coproc}', it is executed as a coprocess; a "
"two-way pipe is established between it and the parent shell.  The shell can "
"read from or write to the coprocess by means of the `@t{>&p}' and `@t{<&p}' "
"redirection operators or with `@t{print -p}' and `@t{read -p}'.  A pipeline "
"cannot be preceded by both `@t{coproc}' and `@t{!}'.  If job control is "
"active, the coprocess can be treated in other than input and output as an "
"ordinary background job."
msgstr ""

#. type: cindex
#: zsh.texi:1260
#, no-wrap
msgid "sublist"
msgstr ""

#. type: Plain text
#: zsh.texi:1269
msgid ""
"A @emph{sublist} is either a single pipeline, or a sequence of two or more "
"pipelines separated by `@t{&&}' or `@t{||}'.  If two pipelines are separated "
"by `@t{&&}', the second pipeline is executed only if the first succeeds "
"(returns a zero status).  If two pipelines are separated by `@t{||}', the "
"second is executed only if the first fails (returns a nonzero status).  Both "
"operators have equal precedence and are left associative.  The value of the "
"sublist is the value of the last pipeline executed.  For example,"
msgstr ""

#. type: example
#: zsh.texi:1273
#, no-wrap
msgid "dmesg | grep panic && print yes\n"
msgstr ""

#. type: Plain text
#: zsh.texi:1280
msgid ""
"is a sublist consisting of two pipelines, the second just a simple command "
"which will be executed if and only if the @t{grep} command returns a zero "
"status.  If it does not, the value of the sublist is that return status, "
"else it is the status returned by the @t{print} (almost certainly zero)."
msgstr ""

#. type: t{#1}
#: zsh.texi:1282 zsh.texi:19512 zsh.texi:22733 zsh.texi:39682
#, no-wrap
msgid "list"
msgstr ""

#. type: Plain text
#: zsh.texi:1296
msgid ""
"A @emph{list} is a sequence of zero or more sublists, in which each sublist "
"is terminated by `@t{;}', `@t{&}', `@t{&|}', `@t{&!}', or a newline.  This "
"terminator may optionally be omitted from the last sublist in the list when "
"the list appears as a complex command inside `@t{(}...@t{)}' or "
"`@t{@{}...@t{@}}'.  When a sublist is terminated by `@t{;}' or newline, the "
"shell waits for it to finish before executing the next sublist.  If a "
"sublist is terminated by a `@t{&}', `@t{&|}', or `@t{&!}', the shell "
"executes the last pipeline in it in the background, and does not wait for it "
"to finish (note the difference from other shells which execute the whole "
"sublist in the background).  A backgrounded pipeline returns a status of "
"zero."
msgstr ""

#. type: Plain text
#: zsh.texi:1302
msgid ""
"More generally, a list can be seen as a set of any shell commands "
"whatsoever, including the complex commands below; this is implied wherever "
"the word `list' appears in later descriptions.  For example, the commands in "
"a shell function form a special sort of list."
msgstr ""

#. type: node
#: zsh.texi:1302 zsh.texi:1370 zsh.texi:1372 zsh.texi:1644
#, no-wrap
msgid "Complex Commands"
msgstr ""

#. type: cindex
#: zsh.texi:1306
#, no-wrap
msgid "precommand modifiers"
msgstr ""

#. type: cindex
#: zsh.texi:1307
#, no-wrap
msgid "modifiers, precommand"
msgstr ""

#. type: Plain text
#: zsh.texi:1312
msgid ""
"A simple command may be preceded by a @emph{precommand modifier}, which will "
"alter how the command is interpreted.  These modifiers are shell builtin "
"commands with the exception of @t{nocorrect} which is a reserved word."
msgstr ""

#. type: t{#1}
#: zsh.texi:1315 zsh.texi:1316 zsh.texi:5515 zsh.texi:7493 zsh.texi:8515
#: zsh.texi:20012 zsh.texi:23558 zsh.texi:28597 zsh.texi:28600 zsh.texi:28603
#: zsh.texi:28685 zsh.texi:28688 zsh.texi:28693 zsh.texi:28698 zsh.texi:28700
#: zsh.texi:28702 zsh.texi:38783
#, no-wrap
msgid "-"
msgstr ""

#. type: table
#: zsh.texi:1319
msgid "The command is executed with a `@t{-}' prepended to its @t{argv[0]} string."
msgstr ""

#. type: findex
#: zsh.texi:1320 zsh.texi:1321 zsh.texi:12973
#, no-wrap
msgid "builtin"
msgstr ""

#. type: table
#: zsh.texi:1324
msgid ""
"The command word is taken to be the name of a builtin command, rather than a "
"shell function or external command."
msgstr ""

#. type: t{#1}
#: zsh.texi:1325 zsh.texi:13055 zsh.texi:16185 zsh.texi:19409 zsh.texi:21953
#: zsh.texi:36730 zsh.texi:36876 zsh.texi:36877 zsh.texi:37020 zsh.texi:40307
#, no-wrap
msgid "command"
msgstr ""

#. type: item
#: zsh.texi:1326
#, no-wrap
msgid "@t{command} [ @t{-pvV} ]"
msgstr ""

#. type: table
#: zsh.texi:1334
msgid ""
"The command word is taken to be the name of an external command, rather than "
"a shell function or builtin.  If the @t{POSIX_BUILTINS} option is set, "
"builtins will also be executed but certain special properties of them are "
"suppressed. The @t{-p} flag causes a default path to be searched instead of "
"that in @t{$path}. With the @t{-v} flag, @t{command} is similar to "
"@t{whence} and with @t{-V}, it is equivalent to @t{whence -v}."
msgstr ""

#. type: findex
#: zsh.texi:1335
#, no-wrap
msgid "exec"
msgstr ""

#. type: item
#: zsh.texi:1336
#, no-wrap
msgid "@t{exec} [ @t{-cl} ] [ @t{-a} @var{argv0} ]"
msgstr ""

#. type: table
#: zsh.texi:1342
msgid ""
"The following command together with any arguments is run in place of the "
"current process, rather than as a sub-process.  The shell does not fork and "
"is replaced.  The shell does not invoke @t{TRAPEXIT}, nor does it source "
"@t{zlogout} files.  The options are provided for compatibility with other "
"shells."
msgstr ""

#. type: table
#: zsh.texi:1345
msgid "The @t{-c} option clears the environment."
msgstr ""

#. type: table
#: zsh.texi:1351
msgid ""
"The @t{-l} option is equivalent to the @t{-} precommand modifier, to treat "
"the replacement command as a login shell; the command is executed with a "
"@t{-} prepended to its @t{argv[0]} string.  This flag has no effect if used "
"together with the @t{-a} option."
msgstr ""

#. type: table
#: zsh.texi:1357
msgid ""
"The @t{-a} option is used to specify explicitly the @t{argv[0]} string (the "
"name of the command as seen by the process itself) to be used by the "
"replacement command and is directly equivalent to setting a value for the "
"@t{ARGV0} environment variable."
msgstr ""

#. type: t{#1}
#: zsh.texi:1358 zsh.texi:1359
#, no-wrap
msgid "nocorrect"
msgstr ""

#. type: table
#: zsh.texi:1363
msgid ""
"Spelling correction is not done on any of the words.  This must appear "
"before any other precommand modifier, as it is interpreted immediately, "
"before any parsing is done.  It has no effect in non-interactive shells."
msgstr ""

#. type: t{#1}
#: zsh.texi:1364 zsh.texi:1365
#, no-wrap
msgid "noglob"
msgstr ""

#. type: table
#: zsh.texi:1368
msgid "Filename generation (globbing) is not performed on any of the words."
msgstr ""

#. type: node
#: zsh.texi:1370 zsh.texi:1644 zsh.texi:1646 zsh.texi:1733
#, no-wrap
msgid "Alternate Forms For Complex Commands"
msgstr ""

#. type: cindex
#: zsh.texi:1374
#, no-wrap
msgid "complex commands"
msgstr ""

#. type: cindex
#: zsh.texi:1375
#, no-wrap
msgid "commands, complex"
msgstr ""

#. type: Plain text
#: zsh.texi:1377
msgid "A @emph{complex command} in zsh is one of the following:"
msgstr ""

#. type: findex
#: zsh.texi:1380
#, no-wrap
msgid "if"
msgstr ""

#. type: cindex
#: zsh.texi:1381
#, no-wrap
msgid "if construct"
msgstr ""

#. type: item
#: zsh.texi:1382
#, no-wrap
msgid ""
"@t{if} @var{list} @t{then} @var{list} [ @t{elif} @var{list} @t{then} "
"@var{list} ] ... [ @t{else} @var{list} ] @t{fi}"
msgstr ""

#. type: table
#: zsh.texi:1389
msgid ""
"The @t{if} @var{list} is executed, and if it returns a zero exit status, the "
"@t{then} @var{list} is executed.  Otherwise, the @t{elif} @var{list} is "
"executed and if its status is zero, the @t{then} @var{list} is executed.  If "
"each @t{elif} @var{list} returns nonzero status, the @t{else} @var{list} is "
"executed."
msgstr ""

#. type: findex
#: zsh.texi:1390
#, no-wrap
msgid "for"
msgstr ""

#. type: cindex
#: zsh.texi:1391
#, no-wrap
msgid "for loops"
msgstr ""

#. type: cindex
#: zsh.texi:1392
#, no-wrap
msgid "loops, for"
msgstr ""

#. type: item
#: zsh.texi:1393
#, no-wrap
msgid ""
"@t{for} @var{name} ... [ @t{in} @var{word} ... ] @var{term} @t{do} "
"@var{list} @t{done}"
msgstr ""

#. type: table
#: zsh.texi:1398
msgid ""
"Expand the list of @var{word}s, and set the parameter @var{name} to each of "
"them in turn, executing @var{list} each time.  If the `@t{in} @var{word}' is "
"omitted, use the positional parameters instead of the @var{word}s."
msgstr ""

#. type: table
#: zsh.texi:1403
msgid ""
"The @var{term} consists of one or more newline or @t{;} which terminate the "
"@var{word}s, and are optional when the `@t{in} @var{word}' is omitted."
msgstr ""

#. type: table
#: zsh.texi:1413
msgid ""
"More than one parameter @var{name} can appear before the list of "
"@var{word}s.  If @var{N} @var{name}s are given, then on each execution of "
"the loop the next @var{N} @var{word}s are assigned to the corresponding "
"parameters.  If there are more @var{name}s than remaining @var{word}s, the "
"remaining parameters are each set to the empty string.  Execution of the "
"loop ends when there is no remaining @var{word} to assign to the first "
"@var{name}.  It is only possible for @t{in} to appear as the first "
"@var{name} in the list, else it will be treated as marking the end of the "
"list."
msgstr ""

#. type: item
#: zsh.texi:1414
#, no-wrap
msgid ""
"@t{for ((} [@var{expr1}] @t{;} [@var{expr2}] @t{;} [@var{expr3}] @t{)) do} "
"@var{list} @t{done}"
msgstr ""

#. type: table
#: zsh.texi:1421
msgid ""
"The arithmetic expression @var{expr1} is evaluated first (see "
"@ref{Arithmetic Evaluation}).  The arithmetic expression @var{expr2} is "
"repeatedly evaluated until it evaluates to zero and when non-zero, "
"@var{list} is executed and the arithmetic expression @var{expr3} evaluated.  "
"If any expression is omitted, then it behaves as if it evaluated to 1."
msgstr ""

#. type: findex
#: zsh.texi:1422
#, no-wrap
msgid "while"
msgstr ""

#. type: cindex
#: zsh.texi:1423
#, no-wrap
msgid "while loops"
msgstr ""

#. type: cindex
#: zsh.texi:1424
#, no-wrap
msgid "loops, while"
msgstr ""

#. type: item
#: zsh.texi:1425
#, no-wrap
msgid "@t{while} @var{list} @t{do} @var{list} @t{done}"
msgstr ""

#. type: table
#: zsh.texi:1428
msgid ""
"Execute the @t{do} @var{list} as long as the @t{while} @var{list} returns a "
"zero exit status."
msgstr ""

#. type: findex
#: zsh.texi:1429
#, no-wrap
msgid "until"
msgstr ""

#. type: cindex
#: zsh.texi:1430
#, no-wrap
msgid "until loops"
msgstr ""

#. type: cindex
#: zsh.texi:1431
#, no-wrap
msgid "loops, until"
msgstr ""

#. type: item
#: zsh.texi:1432
#, no-wrap
msgid "@t{until} @var{list} @t{do} @var{list} @t{done}"
msgstr ""

#. type: table
#: zsh.texi:1435
msgid ""
"Execute the @t{do} @var{list} as long as @t{until} @var{list} returns a "
"nonzero exit status."
msgstr ""

#. type: findex
#: zsh.texi:1436
#, no-wrap
msgid "repeat"
msgstr ""

#. type: cindex
#: zsh.texi:1437
#, no-wrap
msgid "repeat loops"
msgstr ""

#. type: cindex
#: zsh.texi:1438
#, no-wrap
msgid "loops, repeat"
msgstr ""

#. type: item
#: zsh.texi:1439
#, no-wrap
msgid "@t{repeat} @var{word} @t{do} @var{list} @t{done}"
msgstr ""

#. type: table
#: zsh.texi:1443
msgid ""
"@var{word} is expanded and treated as an arithmetic expression, which must "
"evaluate to a number @var{n}.  @var{list} is then executed @var{n} times."
msgstr ""

#. type: table
#: zsh.texi:1448
msgid ""
"The @t{repeat} syntax is disabled by default when the shell starts in a mode "
"emulating another shell.  It can be enabled with the command `@t{enable -r "
"repeat}'"
msgstr ""

#. type: findex
#: zsh.texi:1449
#, no-wrap
msgid "case"
msgstr ""

#. type: cindex
#: zsh.texi:1450
#, no-wrap
msgid "case selection"
msgstr ""

#. type: cindex
#: zsh.texi:1451
#, no-wrap
msgid "selection, case"
msgstr ""

#. type: item
#: zsh.texi:1452
#, no-wrap
msgid ""
"@t{case} @var{word} @t{in} [ [@t{(}] @var{pattern} [ @t{|} @var{pattern} ] "
"... @t{)} @var{list} (@t{;;}|@t{;&}|@t{;|}) ] ... @t{esac}"
msgstr ""

#. type: table
#: zsh.texi:1457
msgid ""
"Execute the @var{list} associated with the first @var{pattern} that matches "
"@var{word}, if any.  The form of the patterns is the same as that used for "
"filename generation.  See @ref{Filename Generation}."
msgstr ""

#. type: table
#: zsh.texi:1468
msgid ""
"Note further that, unless the @t{SH_GLOB} option is set, the whole pattern "
"with alternatives is treated by the shell as equivalent to a group of "
"patterns within parentheses, although white space may appear about the "
"parentheses and the vertical bar and will be stripped from the pattern at "
"those points.  White space may appear elsewhere in the pattern; this is not "
"stripped.  If the @t{SH_GLOB} option is set, so that an opening parenthesis "
"can be unambiguously treated as part of the case syntax, the expression is "
"parsed into separate words and these are treated as strict alternatives (as "
"in other shells)."
msgstr ""

#. type: table
#: zsh.texi:1474
msgid ""
"If the @var{list} that is executed is terminated with @t{;&} rather than "
"@t{;;}, the following list is also executed.  The rule for the terminator of "
"the following list @t{;;}, @t{;&} or @t{;|} is applied unless the @t{esac} "
"is reached."
msgstr ""

#. type: table
#: zsh.texi:1482
msgid ""
"If the @var{list} that is executed is terminated with @t{;|} the shell "
"continues to scan the @var{pattern}s looking for the next match, executing "
"the corresponding @var{list}, and applying the rule for the corresponding "
"terminator @t{;;}, @t{;&} or @t{;|}.  Note that @var{word} is not "
"re-expanded; all applicable @var{pattern}s are tested with the same "
"@var{word}."
msgstr ""

#. type: t{#1}
#: zsh.texi:1483 zsh.texi:17037
#, no-wrap
msgid "select"
msgstr ""

#. type: cindex
#: zsh.texi:1484
#, no-wrap
msgid "user selection"
msgstr ""

#. type: cindex
#: zsh.texi:1485
#, no-wrap
msgid "selection, user"
msgstr ""

#. type: item
#: zsh.texi:1486
#, no-wrap
msgid ""
"@t{select} @var{name} [ @t{in} @var{word} ... @var{term} ] @t{do} @var{list} "
"@t{done}"
msgstr ""

#. type: table
#: zsh.texi:1488
msgid ""
"where @var{term} is one or more newline or @t{;} to terminate the "
"@var{word}s."
msgstr ""

#. type: vindex
#: zsh.texi:1488 zsh.texi:7387 zsh.texi:14419
#, no-wrap
msgid "REPLY, use of"
msgstr ""

#. type: table
#: zsh.texi:1501
msgid ""
"Print the set of @var{word}s, each preceded by a number.  If the @t{in} "
"@var{word} is omitted, use the positional parameters.  The @t{PROMPT3} "
"prompt is printed and a line is read from the line editor if the shell is "
"interactive and that is active, or else standard input.  If this line "
"consists of the number of one of the listed @var{word}s, then the parameter "
"@var{name} is set to the @var{word} corresponding to this number.  If this "
"line is empty, the selection list is printed again.  Otherwise, the value of "
"the parameter @var{name} is set to null.  The contents of the line read from "
"standard input is saved in the parameter @t{REPLY}.  @var{list} is executed "
"for each selection until a break or end-of-file is encountered."
msgstr ""

#. type: cindex
#: zsh.texi:1502
#, no-wrap
msgid "subshell"
msgstr ""

#. type: item
#: zsh.texi:1503
#, no-wrap
msgid "@t{(} @var{list} @t{)}"
msgstr ""

#. type: table
#: zsh.texi:1508
msgid ""
"Execute @var{list} in a subshell.  Traps set by the @t{trap} builtin are "
"reset to their default values while executing @var{list}; an exception is "
"that ignored signals will continue to be ignored if the option "
"@t{POSIXTRAPS} is set."
msgstr ""

#. type: item
#: zsh.texi:1509
#, no-wrap
msgid "@t{@{} @var{list} @t{@}}"
msgstr ""

#. type: table
#: zsh.texi:1511
msgid "Execute @var{list}."
msgstr ""

#. type: findex
#: zsh.texi:1512
#, no-wrap
msgid "always"
msgstr ""

#. type: cindex
#: zsh.texi:1513
#, no-wrap
msgid "always blocks"
msgstr ""

#. type: cindex
#: zsh.texi:1514
#, no-wrap
msgid "try blocks"
msgstr ""

#. type: item
#: zsh.texi:1515
#, no-wrap
msgid "@t{@{} @var{try-list} @t{@} always @{} @var{always-list} @t{@}}"
msgstr ""

#. type: table
#: zsh.texi:1523
msgid ""
"First execute @var{try-list}.  Regardless of errors, or @t{break} or "
"@t{continue} commands encountered within @var{try-list}, execute "
"@var{always-list}.  Execution then continues from the result of the "
"execution of @var{try-list}; in other words, any error, or @t{break} or "
"@t{continue} command is treated in the normal way, as if @var{always-list} "
"were not present.  The two chunks of code are referred to as the `try block' "
"and the `always block'."
msgstr ""

#. type: table
#: zsh.texi:1528
msgid ""
"Optional newlines or semicolons may appear after the @t{always}; note, "
"however, that they may @emph{not} appear between the preceding closing brace "
"and the @t{always}."
msgstr ""

#. type: table
#: zsh.texi:1538
msgid ""
"An `error' in this context is a condition such as a syntax error which "
"causes the shell to abort execution of the current function, script, or "
"list.  Syntax errors encountered while the shell is parsing the code do not "
"cause the @var{always-list} to be executed.  For example, an erroneously "
"constructed @t{if} block in @var{try-list} would cause the shell to abort "
"during parsing, so that @var{always-list} would not be executed, while an "
"erroneous substitution such as @t{$@{*foo*@}} would cause a run-time error, "
"after which @var{always-list} would be executed."
msgstr ""

#. type: table
#: zsh.texi:1549
msgid ""
"An error condition can be tested and reset with the special integer variable "
"@t{TRY_BLOCK_ERROR}.  Outside an @var{always-list} the value is irrelevant, "
"but it is initialised to @t{-1}.  Inside @var{always-list}, the value is 1 "
"if an error occurred in the @var{try-list}, else 0.  If @t{TRY_BLOCK_ERROR} "
"is set to 0 during the @var{always-list}, the error condition caused by the "
"@var{try-list} is reset, and shell execution continues normally after the "
"end of @var{always-list}.  Altering the value during the @var{try-list} is "
"not useful (unless this forms part of an enclosing @t{always} block)."
msgstr ""

#. type: table
#: zsh.texi:1555
msgid ""
"Regardless of @t{TRY_BLOCK_ERROR}, after the end of @var{always-list} the "
"normal shell status @t{$?} is the value returned from @var{try-list}.  This "
"will be non-zero if there was an error, even if @t{TRY_BLOCK_ERROR} was set "
"to zero."
msgstr ""

#. type: table
#: zsh.texi:1560
msgid ""
"The following executes the given code, ignoring any errors it causes.  This "
"is an alternative to the usual convention of protecting code by executing it "
"in a subshell."
msgstr ""

#. type: example
#: zsh.texi:1570
#, no-wrap
msgid ""
"@{\n"
"    # code which may cause an error\n"
"  @} always @{\n"
"    # This code is executed regardless of the error.\n"
"    (( TRY_BLOCK_ERROR = 0 ))\n"
"@}\n"
"# The error condition has been reset.\n"
msgstr ""

#. type: table
#: zsh.texi:1579
msgid ""
"When a @t{try} block occurs outside of any function, a @t{return} or a "
"@t{exit} encountered in @var{try-list} does @emph{not} cause the execution "
"of @var{always-list}.  Instead, the shell exits immediately after any "
"@t{EXIT} trap has been executed.  Otherwise, a @t{return} command "
"encountered in @var{try-list} will cause the execution of @var{always-list}, "
"just like @t{break} and @t{continue}."
msgstr ""

#. type: findex
#: zsh.texi:1583
#, no-wrap
msgid "function"
msgstr ""

#. type: item
#: zsh.texi:1584
#, no-wrap
msgid ""
"@t{function} [ @t{-T} ] @var{word} ... [ @t{()} ] [ @var{term} ] @t{@{} "
"@var{list} @t{@}}"
msgstr ""

#. type: itemx
#: zsh.texi:1585
#, no-wrap
msgid "@var{word} ... @t{()} [ @var{term} ] @t{@{} @var{list} @t{@}}"
msgstr ""

#. type: itemx
#: zsh.texi:1586
#, no-wrap
msgid "@var{word} ... @t{()} [ @var{term} ] @var{command}"
msgstr ""

#. type: table
#: zsh.texi:1593
msgid ""
"where @var{term} is one or more newline or @t{;}.  Define a function which "
"is referenced by any one of @var{word}.  Normally, only one @var{word} is "
"provided; multiple @var{word}s are usually only useful for setting traps.  "
"The body of the function is the @var{list} between the @t{@{} and @t{@}}.  "
"See @ref{Functions}."
msgstr ""

#. type: table
#: zsh.texi:1596
msgid "The options of @t{function} have the following meanings:"
msgstr ""

#. type: t{#1}
#: zsh.texi:1599 zsh.texi:12599 zsh.texi:12658 zsh.texi:15371 zsh.texi:16852
#: zsh.texi:26919 zsh.texi:30519
#, no-wrap
msgid "-T"
msgstr ""

#. type: table
#: zsh.texi:1603
msgid ""
"Enable tracing for this function, as though with @t{functions -T}.  See the "
"documentation of the @t{-f} option to the @t{typeset} builtin, in @ref{Shell "
"Builtin Commands}."
msgstr ""

#. type: table
#: zsh.texi:1611
msgid ""
"If the option @t{SH_GLOB} is set for compatibility with other shells, then "
"whitespace may appear between the left and right parentheses when there is a "
"single @var{word}; otherwise, the parentheses will be treated as forming a "
"globbing pattern in that case."
msgstr ""

#. type: table
#: zsh.texi:1615
msgid ""
"In any of the forms above, a redirection may appear outside the function "
"body, for example"
msgstr ""

#. type: example
#: zsh.texi:1619
#, no-wrap
msgid "func() @{ ... @} 2>&1\n"
msgstr ""

#. type: table
#: zsh.texi:1625
msgid ""
"The redirection is stored with the function and applied whenever the "
"function is executed.  Any variables in the redirection are expanded at the "
"point the function is executed, but outside the function scope."
msgstr ""

#. type: cindex
#: zsh.texi:1626
#, no-wrap
msgid "timing"
msgstr ""

#. type: t{#1}
#: zsh.texi:1627 zsh.texi:33294
#, no-wrap
msgid "time"
msgstr ""

#. type: item
#: zsh.texi:1628
#, no-wrap
msgid "@t{time} [ @var{pipeline} ]"
msgstr ""

#. type: table
#: zsh.texi:1634
msgid ""
"The @var{pipeline} is executed, and timing statistics are reported on the "
"standard error in the form specified by the @t{TIMEFMT} parameter.  If "
"@var{pipeline} is omitted, print statistics about the shell process and its "
"children."
msgstr ""

#. type: cindex
#: zsh.texi:1635
#, no-wrap
msgid "conditional expression"
msgstr ""

#. type: findex
#: zsh.texi:1636
#, no-wrap
msgid "[["
msgstr ""

#. type: item
#: zsh.texi:1637
#, no-wrap
msgid "@t{[[} @var{exp} @t{]]}"
msgstr ""

#. type: table
#: zsh.texi:1642
msgid ""
"Evaluates the conditional expression @var{exp} and return a zero exit status "
"if it is true.  See @ref{Conditional Expressions} for a description of "
"@var{exp}."
msgstr ""

#. type: node
#: zsh.texi:1644 zsh.texi:1733 zsh.texi:1735 zsh.texi:1751
#, no-wrap
msgid "Reserved Words"
msgstr ""

#. type: cindex
#: zsh.texi:1648
#, no-wrap
msgid "alternate forms for complex commands"
msgstr ""

#. type: cindex
#: zsh.texi:1649
#, no-wrap
msgid "commands, alternate forms for complex"
msgstr ""

#. type: Plain text
#: zsh.texi:1654
msgid ""
"Many of zsh's complex commands have alternate forms.  These are non-standard "
"and are likely not to be obvious even to seasoned shell programmers; they "
"should not be used anywhere that portability of shell code is a concern."
msgstr ""

#. type: Plain text
#: zsh.texi:1667
msgid ""
"The short versions below only work if @var{sublist} is of the form `@t{@{} "
"@var{list} @t{@}}' or if the @t{SHORT_LOOPS} option is set.  For the @t{if}, "
"@t{while} and @t{until} commands, in both these cases the test part of the "
"loop must also be suitably delimited, such as by `@t{[[} @var{...} @t{]]}' "
"or `@t{((} @var{...} @t{))}', else the end of the test will not be "
"recognized.  For the @t{for}, @t{repeat}, @t{case} and @t{select} commands "
"no such special form for the arguments is necessary, but the other condition "
"(the special form of @var{sublist} or use of the @t{SHORT_LOOPS} option) "
"still applies.  The @t{SHORT_REPEAT} option is available to enable the short "
"version only for the @t{repeat} command."
msgstr ""

#. type: item
#: zsh.texi:1670
#, no-wrap
msgid ""
"@t{if} @var{list} @t{@{} @var{list} @t{@}} [ @t{elif} @var{list} @t{@{} "
"@var{list} @t{@}} ] ... [ @t{else @{} @var{list} @t{@}} ]"
msgstr ""

#. type: table
#: zsh.texi:1672
msgid "An alternate form of @t{if}.  The rules mean that"
msgstr ""

#. type: example
#: zsh.texi:1678
#, no-wrap
msgid ""
"if [[ -o ignorebraces ]] @{\n"
"  print yes\n"
"@}\n"
msgstr ""

#. type: table
#: zsh.texi:1682
msgid "works, but"
msgstr ""

#. type: example
#: zsh.texi:1688
#, no-wrap
msgid ""
"if true @{  # Does not work!\n"
"  print yes\n"
"@}\n"
msgstr ""

#. type: table
#: zsh.texi:1692
msgid "does @emph{not}, since the test is not suitably delimited."
msgstr ""

#. type: item
#: zsh.texi:1693
#, no-wrap
msgid "@t{if} @var{list} @var{sublist}"
msgstr ""

#. type: table
#: zsh.texi:1696
msgid ""
"A short form of the alternate @t{if}.  The same limitations on the form of "
"@var{list} apply as for the previous form."
msgstr ""

#. type: item
#: zsh.texi:1697
#, no-wrap
msgid "@t{for} @var{name} ... @t{(} @var{word} ... @t{)} @var{sublist}"
msgstr ""

#. type: table
#: zsh.texi:1699
msgid "A short form of @t{for}."
msgstr ""

#. type: item
#: zsh.texi:1700
#, no-wrap
msgid "@t{for} @var{name} ... [ @t{in} @var{word} ... ] @var{term} @var{sublist}"
msgstr ""

#. type: table
#: zsh.texi:1703
msgid ""
"where @var{term} is at least one newline or @t{;}.  Another short form of "
"@t{for}."
msgstr ""

#. type: item
#: zsh.texi:1704
#, no-wrap
msgid ""
"@t{for ((} [@var{expr1}] @t{;} [@var{expr2}] @t{;} [@var{expr3}] @t{))} "
"@var{sublist}"
msgstr ""

#. type: table
#: zsh.texi:1706
msgid "A short form of the arithmetic @t{for} command."
msgstr ""

#. type: findex
#: zsh.texi:1707
#, no-wrap
msgid "foreach"
msgstr ""

#. type: item
#: zsh.texi:1708
#, no-wrap
msgid "@t{foreach} @var{name} ... @t{(} @var{word} ... @t{)} @var{list} @t{end}"
msgstr ""

#. type: table
#: zsh.texi:1710
msgid "Another form of @t{for}."
msgstr ""

#. type: item
#: zsh.texi:1711
#, no-wrap
msgid "@t{while} @var{list} @t{@{} @var{list} @t{@}}"
msgstr ""

#. type: table
#: zsh.texi:1714
msgid ""
"An alternative form of @t{while}.  Note the limitations on the form of "
"@var{list} mentioned above."
msgstr ""

#. type: item
#: zsh.texi:1715
#, no-wrap
msgid "@t{until} @var{list} @t{@{} @var{list} @t{@}}"
msgstr ""

#. type: table
#: zsh.texi:1718
msgid ""
"An alternative form of @t{until}.  Note the limitations on the form of "
"@var{list} mentioned above."
msgstr ""

#. type: item
#: zsh.texi:1719
#, no-wrap
msgid "@t{repeat} @var{word} @var{sublist}"
msgstr ""

#. type: table
#: zsh.texi:1721
msgid "This is a short form of @t{repeat}."
msgstr ""

#. type: item
#: zsh.texi:1722
#, no-wrap
msgid ""
"@t{case} @var{word} @t{@{} [ [@t{(}] @var{pattern} [ @t{|} @var{pattern} ] "
"... @t{)} @var{list} (@t{;;}|@t{;&}|@t{;|}) ] ... @t{@}}"
msgstr ""

#. type: table
#: zsh.texi:1724
msgid "An alternative form of @t{case}."
msgstr ""

#. type: item
#: zsh.texi:1725
#, no-wrap
msgid "@t{select} @var{name} [ @t{in} @var{word} ... @var{term} ] @var{sublist}"
msgstr ""

#. type: table
#: zsh.texi:1728
msgid ""
"where @var{term} is at least one newline or @t{;}.  A short form of "
"@t{select}."
msgstr ""

#. type: item
#: zsh.texi:1729
#, no-wrap
msgid "@t{function} @var{word} ... [ @t{()} ] [ @var{term} ] @var{sublist}"
msgstr ""

#. type: table
#: zsh.texi:1731
msgid "This is a short form of @t{function}."
msgstr ""

#. type: node
#: zsh.texi:1733 zsh.texi:1751 zsh.texi:1753 zsh.texi:1831
#, no-wrap
msgid "Errors"
msgstr ""

#. type: cindex
#: zsh.texi:1737
#, no-wrap
msgid "reserved words"
msgstr ""

#. type: findex
#: zsh.texi:1738
#, no-wrap
msgid "disable, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:1741
msgid ""
"The following words are recognized as reserved words when used as the first "
"word of a command unless quoted or disabled using @t{disable -r}:"
msgstr ""

#. type: t{#1}
#: zsh.texi:1747
msgid ""
"do done esac then elif else fi for case if while function repeat time until "
"select coproc nocorrect foreach end ! [[ @{ @} declare export float integer "
"local readonly typeset"
msgstr ""

#. type: Plain text
#: zsh.texi:1751
msgid ""
"Additionally, `@t{@}}' is recognized in any position if neither the "
"@t{IGNORE_BRACES} option nor the @t{IGNORE_CLOSE_BRACES} option is set."
msgstr ""

#. type: node
#: zsh.texi:1751 zsh.texi:1831 zsh.texi:1833 zsh.texi:1843
#, no-wrap
msgid "Comments"
msgstr ""

#. type: cindex
#: zsh.texi:1755
#, no-wrap
msgid "errors, handling of"
msgstr ""

#. type: Plain text
#: zsh.texi:1764
msgid ""
"Certain errors are treated as fatal by the shell: in an interactive shell, "
"they cause control to return to the command line, and in a non-interactive "
"shell they cause the shell to be aborted.  In older versions of zsh, a "
"non-interactive shell running a script would not abort completely, but would "
"resume execution at the next command to be read from the script, skipping "
"the remainder of any functions or shell constructs such as loops or "
"conditions; this somewhat illogical behaviour can be recovered by setting "
"the option @t{CONTINUE_ON_ERROR}."
msgstr ""

#. type: Plain text
#: zsh.texi:1767
msgid "Fatal errors found in non-interactive shells include:"
msgstr ""

#. type: itemize
#: zsh.texi:1773
msgid "Failure to parse shell options passed when invoking the shell"
msgstr ""

#. type: itemize
#: zsh.texi:1775
msgid "Failure to change options with the @t{set} builtin"
msgstr ""

#. type: itemize
#: zsh.texi:1778
msgid ""
"Parse errors of all sorts, including failures to parse mathematical "
"expressions"
msgstr ""

#. type: itemize
#: zsh.texi:1781
msgid ""
"Failures to set or modify variable behaviour with @t{typeset}, @t{local}, "
"@t{declare}, @t{export}, @t{integer}, @t{float}"
msgstr ""

#. type: itemize
#: zsh.texi:1784
msgid ""
"Execution of incorrectly positioned loop control structures (@t{continue}, "
"@t{break})"
msgstr ""

#. type: itemize
#: zsh.texi:1787
msgid ""
"Attempts to use regular expression with no regular expression module "
"available"
msgstr ""

#. type: itemize
#: zsh.texi:1789
msgid "Disallowed operations when the @t{RESTRICTED} options is set"
msgstr ""

#. type: itemize
#: zsh.texi:1791
msgid "Failure to create a pipe needed for a pipeline"
msgstr ""

#. type: itemize
#: zsh.texi:1793
msgid "Failure to create a multio"
msgstr ""

#. type: itemize
#: zsh.texi:1795
msgid "Failure to autoload a module needed for a declared shell feature"
msgstr ""

#. type: itemize
#: zsh.texi:1797
msgid "Errors creating command or process substitutions"
msgstr ""

#. type: itemize
#: zsh.texi:1799
msgid "Syntax errors in glob qualifiers"
msgstr ""

#. type: itemize
#: zsh.texi:1801
msgid "File generation errors where not caught by the option @t{BAD_PATTERN}"
msgstr ""

#. type: itemize
#: zsh.texi:1803
msgid "All bad patterns used for matching within case statements"
msgstr ""

#. type: itemize
#: zsh.texi:1806
msgid "File generation failures where not caused by @t{NO_MATCH} or similar options"
msgstr ""

#. type: itemize
#: zsh.texi:1809
msgid "All file generation errors where the pattern was used to create a multio"
msgstr ""

#. type: itemize
#: zsh.texi:1811
msgid "Memory errors where detected by the shell"
msgstr ""

#. type: itemize
#: zsh.texi:1813
msgid "Invalid subscripts to shell variables"
msgstr ""

#. type: itemize
#: zsh.texi:1815
msgid "Attempts to assign read-only variables"
msgstr ""

#. type: itemize
#: zsh.texi:1817
msgid "Logical errors with variables such as assignment to the wrong type"
msgstr ""

#. type: itemize
#: zsh.texi:1819
msgid "Use of invalid variable names"
msgstr ""

#. type: itemize
#: zsh.texi:1821
msgid "Errors in variable substitution syntax"
msgstr ""

#. type: itemize
#: zsh.texi:1823
msgid "Failure to convert characters in @t{$'}...@t{'} expressions"
msgstr ""

#. type: Plain text
#: zsh.texi:1829
msgid ""
"If the @t{POSIX_BUILTINS} option is set, more errors associated with shell "
"builtin commands are treated as fatal, as specified by the POSIX standard."
msgstr ""

#. type: node
#: zsh.texi:1831 zsh.texi:1843 zsh.texi:1845 zsh.texi:1975
#, no-wrap
msgid "Aliasing"
msgstr ""

#. type: cindex
#: zsh.texi:1835
#, no-wrap
msgid "comments"
msgstr ""

#. type: pindex
#: zsh.texi:1836
#, no-wrap
msgid "INTERACTIVE_COMMENTS, use of"
msgstr ""

#. type: vindex
#: zsh.texi:1837 zsh.texi:4353
#, no-wrap
msgid "histchars, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:1843
msgid ""
"In non-interactive shells, or in interactive shells with the "
"@t{INTERACTIVE_COMMENTS} option set, a word beginning with the third "
"character of the @t{histchars} parameter (`@t{#}' by default) causes that "
"word and all the following characters up to a newline to be ignored."
msgstr ""

#. type: cindex
#: zsh.texi:1847
#, no-wrap
msgid "aliasing"
msgstr ""

#. type: Plain text
#: zsh.texi:1855
msgid ""
"Every eligible @emph{word} in the shell input is checked to see if there is "
"an alias defined for it.  If so, it is replaced by the text of the alias if "
"it is in command position (if it could be the first word of a simple "
"command), or if the alias is global.  If the replacement text ends with a "
"space, the next word in the shell input is always eligible for purposes of "
"alias expansion."
msgstr ""

#. type: Plain text
#: zsh.texi:1860
msgid ""
"It is an error for the function name, @var{word}, in the sh-compatible "
"function definition syntax `@var{word} @t{()} ...' to be a word that "
"resulted from alias expansion, unless the @t{ALIAS_FUNC_DEF} option is set."
msgstr ""

#. type: findex
#: zsh.texi:1862
#, no-wrap
msgid "alias, use of"
msgstr ""

#. type: cindex
#: zsh.texi:1863
#, no-wrap
msgid "aliases, global"
msgstr ""

#. type: Plain text
#: zsh.texi:1866
msgid ""
"An alias is defined using the @t{alias} builtin; global aliases may be "
"defined using the @t{-g} option to that builtin."
msgstr ""

#. type: Plain text
#: zsh.texi:1869
msgid "A @emph{word} is defined as:"
msgstr ""

#. type: itemize
#: zsh.texi:1875
msgid "Any plain string or glob pattern"
msgstr ""

#. type: itemize
#: zsh.texi:1878
msgid ""
"Any quoted string, using any quoting method (note that the quotes must be "
"part of the alias definition for this to be eligible)"
msgstr ""

#. type: itemize
#: zsh.texi:1880
msgid "Any parameter reference or command substitution"
msgstr ""

#. type: itemize
#: zsh.texi:1883
msgid ""
"Any series of the foregoing, concatenated without whitespace or other tokens "
"between them"
msgstr ""

#. type: itemize
#: zsh.texi:1885
msgid "Any reserved word (@t{case}, @t{do}, @t{else}, etc.)"
msgstr ""

#. type: itemize
#: zsh.texi:1888
msgid ""
"With global aliasing, any command separator, any redirection operator, and "
"`@t{(}' or `@t{)}' when not part of a glob pattern"
msgstr ""

#. type: Plain text
#: zsh.texi:1897
msgid ""
"Alias expansion is done on the shell input before any other expansion except "
"history expansion.  Therefore, if an alias is defined for the word @t{foo}, "
"alias expansion may be avoided by quoting part of the word, e.g. @t{\\foo}.  "
"Any form of quoting works, although there is nothing to prevent an alias "
"being defined for the quoted form such as @t{\\foo} as well."
msgstr ""

#. type: Plain text
#: zsh.texi:1901
msgid ""
"In particular, note that quoting must be used when using @t{unalias} to "
"remove global aliases:"
msgstr ""

#. type: example
#: zsh.texi:1909
#, no-wrap
msgid ""
"% alias -g foo=bar\n"
"% unalias foo\n"
"unalias: no such hash table element: bar\n"
"% unalias \\foo\n"
"% \n"
msgstr ""

#. type: Plain text
#: zsh.texi:1915
msgid ""
"When @t{POSIX_ALIASES} is set, only plain unquoted strings are eligible for "
"aliasing.  The @t{alias} builtin does not reject ineligible aliases, but "
"they are not expanded."
msgstr ""

#. type: Plain text
#: zsh.texi:1921
msgid ""
"For use with completion, which would remove an initial backslash followed by "
"a character that isn't special, it may be more convenient to quote the word "
"by starting with a single quote, i.e. @t{'foo}; completion will "
"automatically add the trailing single quote."
msgstr ""

#. type: subsection
#: zsh.texi:1924
#, no-wrap
msgid "Alias difficulties"
msgstr ""

#. type: Plain text
#: zsh.texi:1930
msgid ""
"Although aliases can be used in ways that bend normal shell syntax, not "
"every string of non-white-space characters can be used as an alias."
msgstr ""

#. type: Plain text
#: zsh.texi:1939
msgid ""
"Any set of characters not listed as a word above is not a word, hence no "
"attempt is made to expand it as an alias, no matter how it is defined "
"(i.e. via the builtin or the special parameter @t{aliases} described in "
"@ref{The zsh/parameter Module}).  However, as noted in the case of "
"@t{POSIX_ALIASES} above, the shell does not attempt to deduce whether the "
"string corresponds to a word at the time the alias is created."
msgstr ""

#. type: Plain text
#: zsh.texi:1946
msgid ""
"For example, an expression containing an @t{=} at the start of a command "
"line is an assignment and cannot be expanded as an alias; a lone @t{=} is "
"not an assignment but can only be set as an alias using the parameter, as "
"otherwise the @t{=} is taken part of the syntax of the builtin command."
msgstr ""

#. type: Plain text
#: zsh.texi:1955
msgid ""
"It is not presently possible to alias the `@t{((}' token that introduces "
"arithmetic expressions, because until a full statement has been parsed, it "
"cannot be distinguished from two consecutive `@t{(}' tokens introducing "
"nested subshells.  Also, if a separator such as @t{&&} is aliased, @t{\\&&} "
"turns into the two tokens @t{\\&} and @t{&}, each of which may have been "
"aliased separately.  Similarly for @t{\\<<}, @t{\\>|}, etc."
msgstr ""

#. type: Plain text
#: zsh.texi:1959
msgid ""
"There is a commonly encountered problem with aliases illustrated by the "
"following code:"
msgstr ""

#. type: example
#: zsh.texi:1963
#, no-wrap
msgid "alias echobar='echo bar'; echobar\n"
msgstr ""

#. type: Plain text
#: zsh.texi:1973
msgid ""
"This prints a message that the command @t{echobar} could not be found.  This "
"happens because aliases are expanded when the code is read in; the entire "
"line is read in one go, so that when @t{echobar} is executed it is too late "
"to expand the newly defined alias.  This is often a problem in shell "
"scripts, functions, and code executed with `@t{source}' or `@t{.}'.  "
"Consequently, use of functions rather than aliases is recommended in "
"non-interactive code."
msgstr ""

#. type: t{#1}
#: zsh.texi:1979 zsh.texi:19622
#, no-wrap
msgid "quoting"
msgstr ""

#. type: Plain text
#: zsh.texi:1983
msgid ""
"A character may be @emph{quoted} (that is, made to stand for itself) by "
"preceding it with a `@t{\\}'.  `@t{\\}' followed by a newline is ignored."
msgstr ""

#. type: Plain text
#: zsh.texi:1990
msgid ""
"A string enclosed between `@t{$'}' and `@t{'}' is processed the same way as "
"the string arguments of the @t{print} builtin, and the resulting string is "
"considered to be entirely quoted.  A literal `@t{'}' character can be "
"included in the string by using the `@t{\\'}' escape."
msgstr ""

#. type: pindex
#: zsh.texi:1992
#, no-wrap
msgid "RC_QUOTES, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:1997
msgid ""
"All characters enclosed between a pair of single quotes (@t{@value{dsq}}) "
"that is not preceded by a `@t{$}' are quoted.  A single quote cannot appear "
"within single quotes unless the option @t{RC_QUOTES} is set, in which case a "
"pair of single quotes are turned into a single quote.  For example,"
msgstr ""

#. type: example
#: zsh.texi:2001
#, no-wrap
msgid "print @value{dsq}@value{dsq}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2006
msgid ""
"outputs nothing apart from a newline if @t{RC_QUOTES} is not set, but one "
"single quote if it is set."
msgstr ""

#. type: Plain text
#: zsh.texi:2014
msgid ""
"Inside double quotes (@t{\"\"}), parameter and command substitution occur, "
"and `@t{\\}' quotes the characters `@t{\\}', `@t{`}', `@t{\"}', `@t{$}', and "
"the first character of @t{$histchars} (default `@t{!}')."
msgstr ""

#. type: node
#: zsh.texi:2014 zsh.texi:2470 zsh.texi:2472 zsh.texi:2523
#, no-wrap
msgid "Command Execution"
msgstr ""

#. type: cindex
#: zsh.texi:2018
#, no-wrap
msgid "redirection"
msgstr ""

#. type: cindex
#: zsh.texi:2019
#, no-wrap
msgid "file descriptors"
msgstr ""

#. type: cindex
#: zsh.texi:2020
#, no-wrap
msgid "descriptors, file"
msgstr ""

#. type: Plain text
#: zsh.texi:2028
msgid ""
"If a command is followed by @t{&} and job control is not active, then the "
"default standard input for the command is the empty file @t{/dev/null}.  "
"Otherwise, the environment for the execution of a command contains the file "
"descriptors of the invoking shell as modified by input/output "
"specifications."
msgstr ""

#. type: Plain text
#: zsh.texi:2038
msgid ""
"The following may appear anywhere in a simple command or may precede or "
"follow a complex command.  Expansion occurs before @var{word} or @var{digit} "
"is used except as noted below.  If the result of substitution on @var{word} "
"produces more than one filename, redirection occurs for each separate "
"filename in turn."
msgstr ""

#. type: item
#: zsh.texi:2041
#, no-wrap
msgid "@t{<} @var{word}"
msgstr ""

#. type: table
#: zsh.texi:2044
msgid ""
"Open file @var{word} for reading as standard input.  It is an error to open "
"a file in this fashion if it does not exist."
msgstr ""

#. type: item
#: zsh.texi:2045
#, no-wrap
msgid "@t{<>} @var{word}"
msgstr ""

#. type: table
#: zsh.texi:2048
msgid ""
"Open file @var{word} for reading and writing as standard input.  If the file "
"does not exist then it is created."
msgstr ""

#. type: item
#: zsh.texi:2049
#, no-wrap
msgid "@t{>} @var{word}"
msgstr ""

#. type: table
#: zsh.texi:2055
msgid ""
"Open file @var{word} for writing as standard output.  If the file does not "
"exist then it is created.  If the file exists, and the @t{CLOBBER} option is "
"unset, this causes an error; otherwise, it is truncated to zero length."
msgstr ""

#. type: item
#: zsh.texi:2056
#, no-wrap
msgid "@t{>|} @var{word}"
msgstr ""

#. type: itemx
#: zsh.texi:2057
#, no-wrap
msgid "@t{>!} @var{word}"
msgstr ""

#. type: table
#: zsh.texi:2060
msgid ""
"Same as @t{>}, except that the file is truncated to zero length if it "
"exists, regardless of @t{CLOBBER}."
msgstr ""

#. type: item
#: zsh.texi:2061
#, no-wrap
msgid "@t{>>} @var{word}"
msgstr ""

#. type: table
#: zsh.texi:2066
msgid ""
"Open file @var{word} for writing in append mode as standard output.  If the "
"file does not exist, and the @t{CLOBBER} and @t{APPEND_CREATE} options are "
"both unset, this causes an error; otherwise, the file is created."
msgstr ""

#. type: item
#: zsh.texi:2067
#, no-wrap
msgid "@t{>>|} @var{word}"
msgstr ""

#. type: itemx
#: zsh.texi:2068
#, no-wrap
msgid "@t{>>!} @var{word}"
msgstr ""

#. type: table
#: zsh.texi:2071
msgid ""
"Same as @t{>>}, except that the file is created if it does not exist, "
"regardless of @t{CLOBBER} and @t{APPEND_CREATE}."
msgstr ""

#. type: item
#: zsh.texi:2072
#, no-wrap
msgid "@t{<<}[@t{-}] @var{word}"
msgstr ""

#. type: table
#: zsh.texi:2079
msgid ""
"The shell input is read up to a line that is the same as @var{word}, or to "
"an end-of-file.  No parameter expansion, command substitution or filename "
"generation is performed on @var{word}.  The resulting document, called a "
"@emph{here-document}, becomes the standard input."
msgstr ""

#. type: table
#: zsh.texi:2088
msgid ""
"If any character of @var{word} is quoted with single or double quotes or a "
"`@t{\\}', no interpretation is placed upon the characters of the document.  "
"Otherwise, parameter and command substitution occurs, `@t{\\}' followed by a "
"newline is removed, and `@t{\\}' must be used to quote the characters "
"`@t{\\}', `@t{$}', `@t{`}' and the first character of @var{word}."
msgstr ""

#. type: table
#: zsh.texi:2097
msgid ""
"Note that @var{word} itself does not undergo shell expansion.  Backquotes in "
"@var{word} do not have their usual effect; instead they behave similarly to "
"double quotes, except that the backquotes themselves are passed through "
"unchanged.  (This information is given for completeness and it is not "
"recommended that backquotes be used.)  Quotes in the form "
"@t{$'}@var{...}@t{'} have their standard effect of expanding backslashed "
"references to special characters."
msgstr ""

#. type: table
#: zsh.texi:2101
msgid ""
"If @t{<<-} is used, then all leading tabs are stripped from @var{word} and "
"from the document."
msgstr ""

#. type: item
#: zsh.texi:2102
#, no-wrap
msgid "@t{<<<} @var{word}"
msgstr ""

#. type: table
#: zsh.texi:2108
msgid ""
"Perform shell expansion on @var{word} and pass the result to standard "
"input.  This is known as a @emph{here-string}.  Compare the use of "
"@var{word} in here-documents above, where @var{word} does not undergo shell "
"expansion.  The result will have a trailing newline after it."
msgstr ""

#. type: item
#: zsh.texi:2109
#, no-wrap
msgid "@t{<&} @var{number}"
msgstr ""

#. type: itemx
#: zsh.texi:2110
#, no-wrap
msgid "@t{>&} @var{number}"
msgstr ""

#. type: table
#: zsh.texi:2113
msgid ""
"The standard input/output is duplicated from file descriptor @var{number} "
"(see dup2(2))."
msgstr ""

#. type: t{#1}
#: zsh.texi:2114
#, no-wrap
msgid "<& -"
msgstr ""

#. type: t{#1}
#: zsh.texi:2115
#, no-wrap
msgid ">& -"
msgstr ""

#. type: table
#: zsh.texi:2117
msgid "Close the standard input/output."
msgstr ""

#. type: t{#1}
#: zsh.texi:2118
#, no-wrap
msgid "<& p"
msgstr ""

#. type: t{#1}
#: zsh.texi:2119
#, no-wrap
msgid ">& p"
msgstr ""

#. type: table
#: zsh.texi:2121
msgid ""
"The input/output from/to the coprocess is moved to the standard "
"input/output."
msgstr ""

#. type: item
#: zsh.texi:2122
#, no-wrap
msgid "@t{>&} @var{word}"
msgstr ""

#. type: itemx
#: zsh.texi:2123
#, no-wrap
msgid "@t{&>} @var{word}"
msgstr ""

#. type: table
#: zsh.texi:2130
msgid ""
"(Except where `@t{>&} @var{word}' matches one of the above syntaxes; "
"`@t{&>}' can always be used to avoid this ambiguity.)  Redirects both "
"standard output and standard error (file descriptor 2)  in the manner of "
"`@t{>} @var{word}'.  Note that this does @emph{not} have the same effect as "
"`@t{>} @var{word} @t{2>&1}' in the presence of multios (see the section "
"below)."
msgstr ""

#. type: item
#: zsh.texi:2131
#, no-wrap
msgid "@t{>&|} @var{word}"
msgstr ""

#. type: itemx
#: zsh.texi:2132
#, no-wrap
msgid "@t{>&!} @var{word}"
msgstr ""

#. type: itemx
#: zsh.texi:2133
#, no-wrap
msgid "@t{&>|} @var{word}"
msgstr ""

#. type: itemx
#: zsh.texi:2134
#, no-wrap
msgid "@t{&>!} @var{word}"
msgstr ""

#. type: table
#: zsh.texi:2137
msgid ""
"Redirects both standard output and standard error (file descriptor 2)  in "
"the manner of `@t{>|} @var{word}'."
msgstr ""

#. type: item
#: zsh.texi:2138
#, no-wrap
msgid "@t{>>&} @var{word}"
msgstr ""

#. type: itemx
#: zsh.texi:2139
#, no-wrap
msgid "@t{&>>} @var{word}"
msgstr ""

#. type: table
#: zsh.texi:2142
msgid ""
"Redirects both standard output and standard error (file descriptor 2)  in "
"the manner of `@t{>>} @var{word}'."
msgstr ""

#. type: item
#: zsh.texi:2143
#, no-wrap
msgid "@t{>>&|} @var{word}"
msgstr ""

#. type: itemx
#: zsh.texi:2144
#, no-wrap
msgid "@t{>>&!} @var{word}"
msgstr ""

#. type: itemx
#: zsh.texi:2145
#, no-wrap
msgid "@t{&>>|} @var{word}"
msgstr ""

#. type: itemx
#: zsh.texi:2146
#, no-wrap
msgid "@t{&>>!} @var{word}"
msgstr ""

#. type: table
#: zsh.texi:2149
msgid ""
"Redirects both standard output and standard error (file descriptor 2)  in "
"the manner of `@t{>>|} @var{word}'."
msgstr ""

#. type: Plain text
#: zsh.texi:2161
msgid ""
"If one of the above is preceded by a digit, then the file descriptor "
"referred to is that specified by the digit instead of the default 0 or 1.  "
"The order in which redirections are specified is significant.  The shell "
"evaluates each redirection in terms of the (@emph{file descriptor}, "
"@emph{file})  association at the time of evaluation.  For example:"
msgstr ""

#. type: quotation
#: zsh.texi:2165
msgid "... @t{1>}@var{fname} @t{2>&1}"
msgstr ""

#. type: Plain text
#: zsh.texi:2175
msgid ""
"first associates file descriptor 1 with file @var{fname}.  It then "
"associates file descriptor 2 with the file associated with file descriptor 1 "
"(that is, @var{fname}).  If the order of redirections were reversed, file "
"descriptor 2 would be associated with the terminal (assuming file descriptor "
"1 had been)  and then file descriptor 1 would be associated with file "
"@var{fname}."
msgstr ""

#. type: Plain text
#: zsh.texi:2180
msgid ""
"The `@t{|&}' command separator described in @ref{Simple Commands & "
"Pipelines} is a shorthand for `@t{2>&1 |}'."
msgstr ""

#. type: Plain text
#: zsh.texi:2189
msgid ""
"The various forms of process substitution, `@t{<(}@var{list}@t{)}', and "
"`@t{=(}@var{list}@t{)}' for input and `@t{>(}@var{list}@t{)}' for output, "
"are often used together with redirection.  For example, if @var{word} in an "
"output redirection is of the form `@t{>(}@var{list}@t{)}' then the output is "
"piped to the command represented by @var{list}.  See @ref{Process "
"Substitution}."
msgstr ""

#. type: section
#: zsh.texi:2190
#, no-wrap
msgid "Opening file descriptors using parameters"
msgstr ""

#. type: cindex
#: zsh.texi:2192
#, no-wrap
msgid "file descriptors, use with parameters"
msgstr ""

#. type: cindex
#: zsh.texi:2193
#, no-wrap
msgid "parameters, for using file descriptors"
msgstr ""

#. type: Plain text
#: zsh.texi:2203
msgid ""
"When the shell is parsing arguments to a command, and the shell option "
"@t{IGNORE_BRACES} is not set, a different form of redirection is allowed: "
"instead of a digit before the operator there is a valid shell identifier "
"enclosed in braces.  The shell will open a new file descriptor that is "
"guaranteed to be at least 10 and set the parameter named by the identifier "
"to the file descriptor opened.  No whitespace is allowed between the closing "
"brace and the redirection character.  For example:"
msgstr ""

#. type: quotation
#: zsh.texi:2207
msgid "... @t{@{myfd@}>&1}"
msgstr ""

#. type: Plain text
#: zsh.texi:2215
msgid ""
"This opens a new file descriptor that is a duplicate of file descriptor 1 "
"and sets the parameter @t{myfd} to the number of the file descriptor, which "
"will be at least 10.  The new file descriptor can be written to using the "
"syntax @t{>&$myfd}.  The file descriptor remains open in subshells and "
"forked external executables."
msgstr ""

#. type: Plain text
#: zsh.texi:2221
msgid ""
"The syntax @t{@{}@var{varid}@t{@}>&-}, for example @t{@{myfd@}>&-}, may be "
"used to close a file descriptor opened in this fashion.  Note that the "
"parameter given by @var{varid} must previously be set to a file descriptor "
"in this case."
msgstr ""

#. type: Plain text
#: zsh.texi:2227
msgid ""
"It is an error to open or close a file descriptor in this fashion when the "
"parameter is readonly.  However, it is not an error to read or write a file "
"descriptor using @t{<&$}@var{param} or @t{>&$}@var{param} if @var{param} is "
"readonly."
msgstr ""

#. type: Plain text
#: zsh.texi:2233
msgid ""
"If the option @t{CLOBBER} is unset, it is an error to open a file descriptor "
"using a parameter that is already set to an open file descriptor previously "
"allocated by this mechanism.  Unsetting the parameter before using it for "
"allocating a file descriptor avoids the error."
msgstr ""

#. type: Plain text
#: zsh.texi:2241
msgid ""
"Note that this mechanism merely allocates or closes a file descriptor; it "
"does not perform any redirections from or to it.  It is usually convenient "
"to allocate a file descriptor prior to use as an argument to @t{exec}.  The "
"syntax does not in any case work when used around complex commands such as "
"parenthesised subshells or loops, where the opening brace is interpreted as "
"part of a command list to be executed in the current shell."
msgstr ""

#. type: Plain text
#: zsh.texi:2245
msgid ""
"The following shows a typical sequence of allocation, use, and closing of a "
"file descriptor:"
msgstr ""

#. type: example
#: zsh.texi:2252
#, no-wrap
msgid ""
"integer myfd\n"
"exec @{myfd@}>~/logs/mylogfile.txt\n"
"print This is a log message. >&$myfd\n"
"exec @{myfd@}>&-\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2259
msgid ""
"Note that the expansion of the variable in the expression @t{>&$myfd} occurs "
"at the point the redirection is opened.  This is after the expansion of "
"command arguments and after any redirections to the left on the command line "
"have been processed."
msgstr ""

#. type: section
#: zsh.texi:2260
#, no-wrap
msgid "Multios"
msgstr ""

#. type: cindex
#: zsh.texi:2262
#, no-wrap
msgid "multios"
msgstr ""

#. type: pindex
#: zsh.texi:2263
#, no-wrap
msgid "MULTIOS, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:2268
msgid ""
"If the user tries to open a file descriptor for writing more than once, the "
"shell opens the file descriptor as a pipe to a process that copies its input "
"to all the specified outputs, similar to @cite{tee}, provided the "
"@t{MULTIOS} option is set, as it is by default.  Thus:"
msgstr ""

#. type: example
#: zsh.texi:2272
#, no-wrap
msgid "date >foo >bar\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2277
msgid ""
"writes the date to two files, named `@t{foo}' and `@t{bar}'.  Note that a "
"pipe is an implicit redirection; thus"
msgstr ""

#. type: example
#: zsh.texi:2281
#, no-wrap
msgid "date >foo | cat\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2285
msgid "writes the date to the file `@t{foo}', and also pipes it to cat."
msgstr ""

#. type: Plain text
#: zsh.texi:2289
msgid ""
"Note that the shell opens all the files to be used in the multio process "
"immediately, not at the point they are about to be written."
msgstr ""

#. type: Plain text
#: zsh.texi:2296
msgid ""
"Note also that redirections are always expanded in order.  This happens "
"regardless of the setting of the @t{MULTIOS} option, but with the option in "
"effect there are additional consequences. For example, the meaning of the "
"expression @t{>&1} will change after a previous redirection:"
msgstr ""

#. type: example
#: zsh.texi:2300
#, no-wrap
msgid "date >&1 >output\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2306
msgid ""
"In the case above, the @t{>&1} refers to the standard output at the start of "
"the line; the result is similar to the @t{tee} command.  However, consider:"
msgstr ""

#. type: example
#: zsh.texi:2310
#, no-wrap
msgid "date >output >&1\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2317
msgid ""
"As redirections are evaluated in order, when the @t{>&1} is encountered the "
"standard output is set to the file @t{output} and another copy of the output "
"is therefore sent to that file.  This is unlikely to be what is intended."
msgstr ""

#. type: Plain text
#: zsh.texi:2322
msgid ""
"If the @t{MULTIOS} option is set, the word after a redirection operator is "
"also subjected to filename generation (globbing).  Thus"
msgstr ""

#. type: example
#: zsh.texi:2326
#, no-wrap
msgid ": > *\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2333
msgid ""
"will truncate all files in the current directory, assuming there's at least "
"one.  (Without the @t{MULTIOS} option, it would create an empty file called "
"`@t{*}'.)  Similarly, you can do"
msgstr ""

#. type: example
#: zsh.texi:2337
#, no-wrap
msgid "echo exit 0 >> *.sh\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2347
msgid ""
"If the user tries to open a file descriptor for reading more than once, the "
"shell opens the file descriptor as a pipe to a process that copies all the "
"specified inputs to its output in the order specified, provided the "
"@t{MULTIOS} option is set.  It should be noted that each file is opened "
"immediately, not at the point where it is about to be read: this behaviour "
"differs from @t{cat}, so if strictly standard behaviour is needed, @t{cat} "
"should be used instead."
msgstr ""

#. type: Plain text
#: zsh.texi:2350
msgid "Thus"
msgstr ""

#. type: example
#: zsh.texi:2354
#, no-wrap
msgid "sort <foo <fubar\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2358
msgid "or even"
msgstr ""

#. type: example
#: zsh.texi:2362
#, no-wrap
msgid "sort <f@{oo,ubar@}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2366
msgid "is equivalent to `@t{cat foo fubar | sort}'."
msgstr ""

#. type: Plain text
#: zsh.texi:2371
msgid ""
"Expansion of the redirection argument occurs at the point the redirection is "
"opened, at the point described above for the expansion of the variable in "
"@t{>&$myfd}."
msgstr ""

#. type: Plain text
#: zsh.texi:2374
msgid "Note that a pipe is an implicit redirection; thus"
msgstr ""

#. type: example
#: zsh.texi:2378
#, no-wrap
msgid "cat bar | sort <foo\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2382
msgid "is equivalent to `@t{cat bar foo | sort}' (note the order of the inputs)."
msgstr ""

#. type: Plain text
#: zsh.texi:2387
msgid ""
"If the @t{MULTIOS} option is @emph{un}set, each redirection replaces the "
"previous redirection for that file descriptor.  However, all files "
"redirected to are actually opened, so"
msgstr ""

#. type: example
#: zsh.texi:2391
#, no-wrap
msgid "echo Hello > bar > baz\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2396
msgid ""
"when @t{MULTIOS} is unset will truncate `@t{bar}', and write `@t{Hello}' "
"into `@t{baz}'."
msgstr ""

#. type: Plain text
#: zsh.texi:2400
msgid ""
"There is a problem when an output multio is attached to an external "
"program.  A simple example shows this:"
msgstr ""

#. type: example
#: zsh.texi:2405
#, no-wrap
msgid ""
"cat file >file1 >file2\n"
"cat file1 file2\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2411
msgid ""
"Here, it is possible that the second `@t{cat}' will not display the full "
"contents of @t{file1} and @t{file2} (i.e. the original contents of @t{file} "
"repeated twice)."
msgstr ""

#. type: Plain text
#: zsh.texi:2419
msgid ""
"The reason for this is that the multios are spawned after the @t{cat} "
"process is forked from the parent shell, so the parent shell does not wait "
"for the multios to finish writing data.  This means the command as shown can "
"exit before @t{file1} and @t{file2} are completely written.  As a "
"workaround, it is possible to run the @t{cat} process as part of a job in "
"the current shell:"
msgstr ""

#. type: example
#: zsh.texi:2423
#, no-wrap
msgid "@{ cat file @} >file >file2\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2428
msgid ""
"Here, the @t{@{}@var{...}@t{@}} job will pause to wait for both files to be "
"written."
msgstr ""

#. type: section
#: zsh.texi:2431
#, no-wrap
msgid "Redirections with no command"
msgstr ""

#. type: Plain text
#: zsh.texi:2436
msgid ""
"When a simple command consists of one or more redirection operators and zero "
"or more parameter assignments, but no command name, zsh can behave in "
"several ways."
msgstr ""

#. type: vindex
#: zsh.texi:2438
#, no-wrap
msgid "NULLCMD, use of"
msgstr ""

#. type: pindex
#: zsh.texi:2439
#, no-wrap
msgid "CSH_NULLCMD, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:2443
msgid ""
"If the parameter @t{NULLCMD} is not set or the option @t{CSH_NULLCMD} is "
"set, an error is caused.  This is the @cite{csh} behavior and "
"@t{CSH_NULLCMD} is set by default when emulating @cite{csh}."
msgstr ""

#. type: pindex
#: zsh.texi:2445
#, no-wrap
msgid "SH_NULLCMD, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:2449
msgid ""
"If the option @t{SH_NULLCMD} is set, the builtin `@t{:}' is inserted as a "
"command with the given redirections.  This is the default when emulating "
"@cite{sh} or @cite{ksh}."
msgstr ""

#. type: vindex
#: zsh.texi:2451
#, no-wrap
msgid "READNULLCMD, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:2457
msgid ""
"Otherwise, if the parameter @t{NULLCMD} is set, its value will be used as a "
"command with the given redirections.  If both @t{NULLCMD} and "
"@t{READNULLCMD} are set, then the value of the latter will be used instead "
"of that of the former when the redirection is an input.  The default for "
"@t{NULLCMD} is `@t{cat}' and for @t{READNULLCMD} is `@t{more}'. Thus"
msgstr ""

#. type: example
#: zsh.texi:2461
#, no-wrap
msgid "< file\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2466
msgid ""
"shows the contents of @t{file} on standard output, with paging if that is a "
"terminal.  @t{NULLCMD} and @t{READNULLCMD} may refer to shell functions."
msgstr ""

#. type: section
#: zsh.texi:2470 zsh.texi:2523 zsh.texi:2525 zsh.texi:3018 zsh.texi:21061
#: zsh.texi:31751 zsh.texi:34770
#, no-wrap
msgid "Functions"
msgstr ""

#. type: cindex
#: zsh.texi:2474
#, no-wrap
msgid "command execution"
msgstr ""

#. type: cindex
#: zsh.texi:2475
#, no-wrap
msgid "execution, of commands"
msgstr ""

#. type: cindex
#: zsh.texi:2476
#, no-wrap
msgid "command not found, handling of"
msgstr ""

#. type: findex
#: zsh.texi:2477
#, no-wrap
msgid "command_not_found_handler"
msgstr ""

#. type: Plain text
#: zsh.texi:2482
msgid ""
"If a command name contains no slashes, the shell attempts to locate it.  If "
"there exists a shell function by that name, the function is invoked as "
"described in @ref{Functions}.  If there exists a shell builtin by that name, "
"the builtin is invoked."
msgstr ""

#. type: vindex
#: zsh.texi:2484
#, no-wrap
msgid "path, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:2487
msgid ""
"Otherwise, the shell searches each element of @t{$path} for a directory "
"containing an executable file by that name."
msgstr ""

#. type: Plain text
#: zsh.texi:2491
msgid ""
"If execution fails: an error message is printed, and one of the following "
"values is returned."
msgstr ""

#. type: item
#: zsh.texi:2494
#, no-wrap
msgid "127"
msgstr ""

#. type: table
#: zsh.texi:2497
msgid ""
"The search was unsuccessful.  The error message is `@t{command not found:} "
"@var{cmd}'."
msgstr ""

#. type: item
#: zsh.texi:2497
#, no-wrap
msgid "126"
msgstr ""

#. type: table
#: zsh.texi:2503
msgid ""
"The executable file has insufficient permissions, is a directory or special "
"file, or is not a script and is in a format unrecognized by the operating "
"system.  The exact conditions and error message are operating "
"system-dependent; see execve(2)."
msgstr ""

#. type: Plain text
#: zsh.texi:2513
msgid ""
"If execution fails because the file is not in executable format, and the "
"file is not a directory, it is assumed to be a shell script.  @t{/bin/sh} is "
"spawned to execute it.  If the program is a file beginning with `@t{#!}', "
"the remainder of the first line specifies an interpreter for the program.  "
"The shell will execute the specified interpreter on operating systems that "
"do not handle this executable format in the kernel."
msgstr ""

#. type: Plain text
#: zsh.texi:2523
msgid ""
"If no external command is found but a function @t{command_not_found_handler} "
"exists the shell executes this function with all command line arguments.  "
"The return status of the function becomes the status of the command.  Note "
"that the handler is executed in a subshell forked to execute an external "
"command, hence changes to directories, shell parameters, etc. have no effect "
"on the main shell."
msgstr ""

#. type: node
#: zsh.texi:2523 zsh.texi:3018 zsh.texi:3020 zsh.texi:3186
#, no-wrap
msgid "Jobs & Signals"
msgstr ""

#. type: t{#1}
#: zsh.texi:2527 zsh.texi:13687 zsh.texi:21555 zsh.texi:29633 zsh.texi:29634
#: zsh.texi:35798
#, no-wrap
msgid "functions"
msgstr ""

#. type: findex
#: zsh.texi:2528
#, no-wrap
msgid "function, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:2536
msgid ""
"Shell functions are defined with the @t{function} reserved word or the "
"special syntax `@var{funcname} @t{()}'.  Shell functions are read in and "
"stored internally.  Alias names are resolved when the function is read.  "
"Functions are executed like commands with the arguments passed as positional "
"parameters.  (See @ref{Command Execution}.)"
msgstr ""

#. type: Plain text
#: zsh.texi:2544
msgid ""
"Functions execute in the same process as the caller and share all files and "
"present working directory with the caller.  A trap on @t{EXIT} set inside a "
"function is executed after the function completes in the environment of the "
"caller."
msgstr ""

#. type: findex
#: zsh.texi:2546
#, no-wrap
msgid "return, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:2548
msgid "The @t{return} builtin is used to return from function calls."
msgstr ""

#. type: findex
#: zsh.texi:2550
#, no-wrap
msgid "functions, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:2552
msgid "Function identifiers can be listed with the @t{functions} builtin."
msgstr ""

#. type: findex
#: zsh.texi:2552
#, no-wrap
msgid "unfunction, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:2554
msgid "Functions can be undefined with the @t{unfunction} builtin."
msgstr ""

#. type: section
#: zsh.texi:2555
#, no-wrap
msgid "Autoloading Functions"
msgstr ""

#. type: cindex
#: zsh.texi:2557 zsh.texi:12861
#, no-wrap
msgid "autoloading functions"
msgstr ""

#. type: cindex
#: zsh.texi:2558 zsh.texi:12860
#, no-wrap
msgid "functions, autoloading"
msgstr ""

#. type: findex
#: zsh.texi:2561
#, no-wrap
msgid "autoload, use of"
msgstr ""

#. type: vindex
#: zsh.texi:2562
#, no-wrap
msgid "fpath, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:2568
msgid ""
"A function can be marked as @emph{undefined} using the @t{autoload} builtin "
"(or `@t{functions -u}' or `@t{typeset -fu}').  Such a function has no body.  "
"When the function is first executed, the shell searches for its definition "
"using the elements of the @t{fpath} variable.  Thus to define functions for "
"autoloading, a typical sequence is:"
msgstr ""

#. type: example
#: zsh.texi:2573
#, no-wrap
msgid ""
"fpath=(~/myfuncs $fpath)\n"
"autoload myfunc1 myfunc2 ...\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2579
msgid ""
"The usual alias expansion during reading will be suppressed if the "
"@t{autoload} builtin or its equivalent is given the option @t{-U}. This is "
"recommended for the use of functions supplied with the zsh distribution."
msgstr ""

#. type: findex
#: zsh.texi:2579
#, no-wrap
msgid "zcompile, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:2583
msgid ""
"Note that for functions precompiled with the @t{zcompile} builtin command "
"the flag @t{-U} must be provided when the @t{.zwc} file is created, as the "
"corresponding information is compiled into the latter."
msgstr ""

#. type: Plain text
#: zsh.texi:2587
msgid ""
"For each @var{element} in @t{fpath}, the shell looks for three possible "
"files, the newest of which is used to load the definition for the function:"
msgstr ""

#. type: item
#: zsh.texi:2590
#, no-wrap
msgid "@var{element}@t{.zwc}"
msgstr ""

#. type: table
#: zsh.texi:2597
msgid ""
"A file created with the @t{zcompile} builtin command, which is expected to "
"contain the definitions for all functions in the directory named "
"@var{element}.  The file is treated in the same manner as a directory "
"containing files for functions and is searched for the definition of the "
"function.  If the definition is not found, the search for a definition "
"proceeds with the other two possibilities described below."
msgstr ""

#. type: table
#: zsh.texi:2607
msgid ""
"If @var{element} already includes a @t{.zwc} extension (i.e. the extension "
"was explicitly given by the user), @var{element} is searched for the "
"definition of the function without comparing its age to that of other files; "
"in fact, there does not need to be any directory named @var{element} without "
"the suffix.  Thus including an element such as `@t{/usr/local/funcs.zwc}' in "
"@t{fpath} will speed up the search for functions, with the disadvantage that "
"functions included must be explicitly recompiled by hand before the shell "
"notices any changes."
msgstr ""

#. type: item
#: zsh.texi:2608
#, no-wrap
msgid "@var{element}@t{/}@var{function}@t{.zwc}"
msgstr ""

#. type: table
#: zsh.texi:2613
msgid ""
"A file created with @t{zcompile}, which is expected to contain the "
"definition for @var{function}.  It may include other function definitions as "
"well, but those are neither loaded nor executed; a file found in this way is "
"searched @emph{only} for the definition of @var{function}."
msgstr ""

#. type: item
#: zsh.texi:2614
#, no-wrap
msgid "@var{element}@t{/}@var{function}"
msgstr ""

#. type: table
#: zsh.texi:2616
msgid "A file of zsh command text, taken to be the definition for @var{function}."
msgstr ""

#. type: Plain text
#: zsh.texi:2626
msgid ""
"In summary, the order of searching is, first, in the @emph{parents of} "
"directories in @t{fpath} for the newer of either a compiled directory or a "
"directory in @t{fpath}; second, if more than one of these contains a "
"definition for the function that is sought, the leftmost in the @t{fpath} is "
"chosen; and third, within a directory, the newer of either a compiled "
"function or an ordinary function definition is used."
msgstr ""

#. type: pindex
#: zsh.texi:2628
#, no-wrap
msgid "KSH_AUTOLOAD, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:2635
msgid ""
"If the @t{KSH_AUTOLOAD} option is set, or the file contains only a simple "
"definition of the function, the file's contents will be executed.  This will "
"normally define the function in question, but may also perform "
"initialization, which is executed in the context of the function execution, "
"and may therefore define local parameters.  It is an error if the function "
"is not defined by loading the file."
msgstr ""

#. type: Plain text
#: zsh.texi:2647
msgid ""
"Otherwise, the function body (with no surrounding `@var{funcname}@t{()  "
"@{}@var{...}@t{@}}') is taken to be the complete contents of the file.  This "
"form allows the file to be used directly as an executable shell script.  If "
"processing of the file results in the function being re-defined, the "
"function itself is not re-executed.  To force the shell to perform "
"initialization and then call the function defined, the file should contain "
"initialization code (which will be executed then discarded) in addition to a "
"complete function definition (which will be retained for subsequent calls to "
"the function), and a call to the shell function, including any arguments, at "
"the end."
msgstr ""

#. type: Plain text
#: zsh.texi:2650
msgid "For example, suppose the autoload file @t{func} contains"
msgstr ""

#. type: example
#: zsh.texi:2655
#, no-wrap
msgid ""
"func() @{ print This is func; @}\n"
"print func is initialized\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2663
msgid ""
"then `@t{func; func}' with @t{KSH_AUTOLOAD} set will produce both messages "
"on the first call, but only the message `@t{This is func}' on the second and "
"subsequent calls.  Without @t{KSH_AUTOLOAD} set, it will produce the "
"initialization message on the first call, and the other message on the "
"second and subsequent calls."
msgstr ""

#. type: Plain text
#: zsh.texi:2669
msgid ""
"It is also possible to create a function that is not marked as autoloaded, "
"but which loads its own definition by searching @t{fpath}, by using "
"`@t{autoload -X}' within a shell function.  For example, the following are "
"equivalent:"
msgstr ""

#. type: example
#: zsh.texi:2676
#, no-wrap
msgid ""
"myfunc() @{\n"
"  autoload -X\n"
"@}\n"
"myfunc args...\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2680
msgid "and"
msgstr ""

#. type: example
#: zsh.texi:2686
#, no-wrap
msgid ""
"unfunction myfunc   # if myfunc was defined\n"
"autoload myfunc\n"
"myfunc args...\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2691
msgid ""
"In fact, the @t{functions} command outputs `@t{builtin autoload -X}' as the "
"body of an autoloaded function.  This is done so that"
msgstr ""

#. type: example
#: zsh.texi:2695
#, no-wrap
msgid "eval \"$(functions)\"\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2701
msgid ""
"produces a reasonable result.  A true autoloaded function can be identified "
"by the presence of the comment `@t{# undefined}' in the body, because all "
"comments are discarded from defined functions."
msgstr ""

#. type: Plain text
#: zsh.texi:2705
msgid ""
"To load the definition of an autoloaded function @t{myfunc} without "
"executing @t{myfunc}, use:"
msgstr ""

#. type: example
#: zsh.texi:2709
#, no-wrap
msgid "autoload +X myfunc\n"
msgstr ""

#. type: section
#: zsh.texi:2713
#, no-wrap
msgid "Anonymous Functions"
msgstr ""

#. type: cindex
#: zsh.texi:2715
#, no-wrap
msgid "anonymous functions"
msgstr ""

#. type: cindex
#: zsh.texi:2716
#, no-wrap
msgid "functions, anonymous"
msgstr ""

#. type: Plain text
#: zsh.texi:2724
msgid ""
"If no name is given for a function, it is `anonymous' and is handled "
"specially.  Either form of function definition may be used: a `@t{()}' with "
"no preceding name, or a `@t{function}' with an immediately following open "
"brace.  The function is executed immediately at the point of definition and "
"is not stored for future use.  The function name is set to `@t{(anon)}'."
msgstr ""

#. type: Plain text
#: zsh.texi:2733
msgid ""
"Arguments to the function may be specified as words following the closing "
"brace defining the function, hence if there are none no arguments (other "
"than @t{$0}) are set.  This is a difference from the way other functions are "
"parsed: normal function definitions may be followed by certain keywords such "
"as `@t{else}' or `@t{fi}', which will be treated as arguments to anonymous "
"functions, so that a newline or semicolon is needed to force keyword "
"interpretation."
msgstr ""

#. type: Plain text
#: zsh.texi:2738
msgid ""
"Note also that the argument list of any enclosing script or function is "
"hidden (as would be the case for any other function called at this point)."
msgstr ""

#. type: Plain text
#: zsh.texi:2745
msgid ""
"Redirections may be applied to the anonymous function in the same manner as "
"to a current-shell structure enclosed in braces.  The main use of anonymous "
"functions is to provide a scope for local variables.  This is particularly "
"convenient in start-up files as these do not provide their own local "
"variable scope."
msgstr ""

#. type: Plain text
#: zsh.texi:2748 zsh.texi:3768 zsh.texi:5232 zsh.texi:5715 zsh.texi:6903
#: zsh.texi:6979 zsh.texi:13989 zsh.texi:17242 zsh.texi:23330 zsh.texi:23731
#: zsh.texi:29972 zsh.texi:30131 zsh.texi:31405 zsh.texi:32545 zsh.texi:33162
#: zsh.texi:36379
msgid "For example,"
msgstr ""

#. type: example
#: zsh.texi:2757
#, no-wrap
msgid ""
"variable=outside\n"
"function @{\n"
"  local variable=inside\n"
"  print \"I am $variable with arguments $*\"\n"
"@} this and that\n"
"print \"I am $variable\"\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2761
msgid "outputs the following:"
msgstr ""

#. type: example
#: zsh.texi:2766
#, no-wrap
msgid ""
"I am inside with arguments this and that\n"
"I am outside\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2773
msgid ""
"Note that function definitions with arguments that expand to nothing, for "
"example `@t{name=; function $name @{ }@var{...}@t{ @}}', are not treated as "
"anonymous functions.  Instead, they are treated as normal function "
"definitions where the definition is silently discarded."
msgstr ""

#. type: section
#: zsh.texi:2776
#, no-wrap
msgid "Special Functions"
msgstr ""

#. type: Plain text
#: zsh.texi:2779
msgid "Certain functions, if defined, have special meaning to the shell."
msgstr ""

#. type: subsection
#: zsh.texi:2782
#, no-wrap
msgid "Hook Functions"
msgstr ""

#. type: findex
#: zsh.texi:2784
#, no-wrap
msgid "functions, hook"
msgstr ""

#. type: findex
#: zsh.texi:2785
#, no-wrap
msgid "hook functions"
msgstr ""

#. type: Plain text
#: zsh.texi:2802
msgid ""
"For the functions below, it is possible to define an array that has the same "
"name as the function with `@t{_functions}' appended.  Any element in such an "
"array is taken as the name of a function to execute; it is executed in the "
"same context and with the same arguments and same initial value of @t{$?} as "
"the basic function.  For example, if @t{$chpwd_functions} is an array "
"containing the values `@t{mychpwd}', `@t{chpwd_save_dirstack}', then the "
"shell attempts to execute the functions `@t{chpwd}', `@t{mychpwd}' and "
"`@t{chpwd_save_dirstack}', in that order.  Any function that does not exist "
"is silently ignored.  A function found by this mechanism is referred to "
"elsewhere as a @emph{hook function}.  An error in any function causes "
"subsequent functions not to be run.  Note further that an error in a "
"@t{precmd} hook causes an immediately following @t{periodic} function not to "
"run (though it may run at the next opportunity)."
msgstr ""

#. type: t{#1}
#: zsh.texi:2805 zsh.texi:2807 zsh.texi:35339
#, no-wrap
msgid "chpwd"
msgstr ""

#. type: vindex
#: zsh.texi:2806
#, no-wrap
msgid "chpwd_functions"
msgstr ""

#. type: table
#: zsh.texi:2809
msgid "Executed whenever the current working directory is changed."
msgstr ""

#. type: t{#1}
#: zsh.texi:2810 zsh.texi:2812
#, no-wrap
msgid "periodic"
msgstr ""

#. type: vindex
#: zsh.texi:2811
#, no-wrap
msgid "periodic_functions"
msgstr ""

#. type: vindex
#: zsh.texi:2813
#, no-wrap
msgid "PERIOD"
msgstr ""

#. type: table
#: zsh.texi:2821
msgid ""
"If the parameter @t{PERIOD} is set, this function is executed every "
"@t{$PERIOD} seconds, just before a prompt.  Note that if multiple functions "
"are defined using the array @t{periodic_functions} only one period is "
"applied to the complete set of functions, and the scheduled time is not "
"reset if the list of functions is altered.  Hence the set of functions is "
"always called together."
msgstr ""

#. type: t{#1}
#: zsh.texi:2822 zsh.texi:2824
#, no-wrap
msgid "precmd"
msgstr ""

#. type: vindex
#: zsh.texi:2823
#, no-wrap
msgid "precmd_functions"
msgstr ""

#. type: table
#: zsh.texi:2828
msgid ""
"Executed before each prompt.  Note that precommand functions are not "
"re-executed simply because the command line is redrawn, as happens, for "
"example, when a notification about an exiting job is displayed."
msgstr ""

#. type: t{#1}
#: zsh.texi:2829 zsh.texi:2831
#, no-wrap
msgid "preexec"
msgstr ""

#. type: vindex
#: zsh.texi:2830
#, no-wrap
msgid "preexec_functions"
msgstr ""

#. type: table
#: zsh.texi:2841
msgid ""
"Executed just after a command has been read and is about to be executed.  If "
"the history mechanism is active (regardless of whether the line was "
"discarded from the history buffer), the string that the user typed is passed "
"as the first argument, otherwise it is an empty string.  The actual command "
"that will be executed (including expanded aliases) is passed in two "
"different forms: the second argument is a single-line, size-limited version "
"of the command (with things like function bodies elided); the third argument "
"contains the full text that is being executed."
msgstr ""

#. type: t{#1}
#: zsh.texi:2842 zsh.texi:2844
#, no-wrap
msgid "zshaddhistory"
msgstr ""

#. type: vindex
#: zsh.texi:2843
#, no-wrap
msgid "zshaddhistory_functions"
msgstr ""

#. type: cindex
#: zsh.texi:2845
#, no-wrap
msgid "history, hook when line is saved"
msgstr ""

#. type: table
#: zsh.texi:2849
msgid ""
"Executed when a history line has been read interactively, but before it is "
"executed.  The sole argument is the complete history line (so that any "
"terminating newline will still be present)."
msgstr ""

#. type: table
#: zsh.texi:2856
msgid ""
"If any of the hook functions returns status 1 (or any non-zero value other "
"than 2, though this is not guaranteed for future versions of the shell) the "
"history line will not be saved, although it lingers in the history until the "
"next line is executed, allowing you to reuse or edit it immediately."
msgstr ""

#. type: table
#: zsh.texi:2862
msgid ""
"If any of the hook functions returns status 2 the history line will be saved "
"on the internal history list, but not written to the history file.  In case "
"of a conflict, the first non-zero status value is taken."
msgstr ""

#. type: table
#: zsh.texi:2869
msgid ""
"A hook function may call `@t{fc -p} @var{...}' to switch the history context "
"so that the history is saved in a different file from that in the global "
"@t{HISTFILE} parameter.  This is handled specially: the history context is "
"automatically restored after the processing of the history line is finished."
msgstr ""

#. type: table
#: zsh.texi:2878
msgid ""
"The following example function works with one of the options "
"@t{INC_APPEND_HISTORY} or @t{SHARE_HISTORY} set, in order that the line is "
"written out immediately after the history entry is added.  It first adds the "
"history line to the normal history with the newline stripped, which is "
"usually the correct behaviour.  Then it switches the history context so that "
"the line will be written to a history file in the current directory."
msgstr ""

#. type: example
#: zsh.texi:2885
#, no-wrap
msgid ""
"zshaddhistory() @{\n"
"  print -sr -- $@{1%%$'\\n'@}\n"
"  fc -p .zsh_local_history\n"
"@}\n"
msgstr ""

#. type: t{#1}
#: zsh.texi:2887 zsh.texi:2889
#, no-wrap
msgid "zshexit"
msgstr ""

#. type: vindex
#: zsh.texi:2888
#, no-wrap
msgid "zshexit_functions"
msgstr ""

#. type: table
#: zsh.texi:2894
msgid ""
"Executed at the point where the main shell is about to exit normally.  This "
"is not called by exiting subshells, nor when the @t{exec} precommand "
"modifier is used before an external command.  Also, unlike @t{TRAPEXIT}, it "
"is not called when functions exit."
msgstr ""

#. type: subsection
#: zsh.texi:2899
#, no-wrap
msgid "Trap Functions"
msgstr ""

#. type: Plain text
#: zsh.texi:2905
msgid ""
"The functions below are treated specially but do not have corresponding hook "
"arrays."
msgstr ""

#. type: item
#: zsh.texi:2908
#, no-wrap
msgid "@t{TRAP}@var{NAL}"
msgstr ""

#. type: cindex
#: zsh.texi:2909 zsh.texi:14743
#, no-wrap
msgid "signals, trapping"
msgstr ""

#. type: cindex
#: zsh.texi:2910 zsh.texi:14744
#, no-wrap
msgid "trapping signals"
msgstr ""

#. type: table
#: zsh.texi:2916
msgid ""
"If defined and non-null, this function will be executed whenever the shell "
"catches a signal @t{SIG}@var{NAL}, where @var{NAL} is a signal name as "
"specified for the @t{kill} builtin.  The signal number will be passed as the "
"first parameter to the function."
msgstr ""

#. type: table
#: zsh.texi:2920
msgid ""
"If a function of this form is defined and null, the shell and processes "
"spawned by it will ignore @t{SIG}@var{NAL}."
msgstr ""

#. type: table
#: zsh.texi:2926
msgid ""
"The return status from the function is handled specially.  If it is zero, "
"the signal is assumed to have been handled, and execution continues "
"normally.  Otherwise, the shell will behave as interrupted except that the "
"return status of the trap is retained."
msgstr ""

#. type: table
#: zsh.texi:2931
msgid ""
"Programs terminated by uncaught signals typically return the status 128 plus "
"the signal number.  Hence the following causes the handler for @t{SIGINT} to "
"print a message, then mimic the usual effect of the signal."
msgstr ""

#. type: example
#: zsh.texi:2938
#, no-wrap
msgid ""
"TRAPINT() @{\n"
"  print \"Caught SIGINT, aborting.\"\n"
"  return $(( 128 + $1 ))\n"
"@}\n"
msgstr ""

#. type: table
#: zsh.texi:2943
msgid ""
"The functions @t{TRAPZERR}, @t{TRAPDEBUG} and @t{TRAPEXIT} are never "
"executed inside other traps."
msgstr ""

#. type: t{#1}
#: zsh.texi:2944 zsh.texi:2945
#, no-wrap
msgid "TRAPDEBUG"
msgstr ""

#. type: table
#: zsh.texi:2951
msgid ""
"If the option @t{DEBUG_BEFORE_CMD} is set (as it is by default), executed "
"before each command; otherwise executed after each command.  See the "
"description of the @t{trap} builtin in @ref{Shell Builtin Commands} for "
"details of additional features provided in debug traps."
msgstr ""

#. type: t{#1}
#: zsh.texi:2952 zsh.texi:2953
#, no-wrap
msgid "TRAPEXIT"
msgstr ""

#. type: table
#: zsh.texi:2958
msgid ""
"Executed when the shell exits, or when the current function exits if defined "
"inside a function.  The value of @t{$?} at the start of execution is the "
"exit status of the shell or the return status of the function exiting."
msgstr ""

#. type: t{#1}
#: zsh.texi:2959 zsh.texi:2961
#, no-wrap
msgid "TRAPZERR"
msgstr ""

#. type: findex
#: zsh.texi:2960
#, no-wrap
msgid "TRAPERR"
msgstr ""

#. type: table
#: zsh.texi:2968
msgid ""
"Executed whenever a command has a non-zero exit status.  However, the "
"function is not executed if the command occurred in a sublist followed by "
"`@t{&&}' or `@t{||}'; only the final command in a sublist of this type "
"causes the trap to be executed.  The function @t{TRAPERR} acts the same as "
"@t{TRAPZERR} on systems where there is no @t{SIGERR} (this is the usual "
"case)."
msgstr ""

#. type: findex
#: zsh.texi:2972
#, no-wrap
msgid "trap, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:2978
msgid ""
"The functions beginning `@t{TRAP}' may alternatively be defined with the "
"@t{trap} builtin: this may be preferable for some uses.  Setting a trap with "
"one form removes any trap of the other form for the same signal; removing a "
"trap in either form removes all traps for the same signal.  The forms"
msgstr ""

#. type: example
#: zsh.texi:2984
#, no-wrap
msgid ""
"TRAPNAL() @{ \n"
" # code\n"
"@}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2988
msgid "('function traps') and"
msgstr ""

#. type: example
#: zsh.texi:2994
#, no-wrap
msgid ""
"trap '\n"
" # code\n"
"' NAL\n"
msgstr ""

#. type: Plain text
#: zsh.texi:2999
msgid ""
"('list traps') are equivalent in most ways, the exceptions being the "
"following:"
msgstr ""

#. type: itemize
#: zsh.texi:3007
msgid ""
"Function traps have all the properties of normal functions, appearing in the "
"list of functions and being called with their own function context rather "
"than the context where the trap was triggered."
msgstr ""

#. type: itemize
#: zsh.texi:3011
msgid ""
"The return status from function traps is special, whereas a return from a "
"list trap causes the surrounding context to return with the given status."
msgstr ""

#. type: itemize
#: zsh.texi:3015
msgid ""
"Function traps are not reset within subshells, in accordance with zsh "
"behaviour; list traps are reset, in accordance with POSIX behaviour."
msgstr ""

#. type: node
#: zsh.texi:3018 zsh.texi:3186 zsh.texi:3188 zsh.texi:3535
#, no-wrap
msgid "Arithmetic Evaluation"
msgstr ""

#. type: section
#: zsh.texi:3023
#, no-wrap
msgid "Jobs"
msgstr ""

#. type: t{#1}
#: zsh.texi:3025 zsh.texi:13959 zsh.texi:21584
#, no-wrap
msgid "jobs"
msgstr ""

#. type: pindex
#: zsh.texi:3026
#, no-wrap
msgid "MONITOR, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:3033
msgid ""
"If the @t{MONITOR} option is set, an interactive shell associates a "
"@emph{job} with each pipeline.  It keeps a table of current jobs, printed by "
"the @t{jobs} command, and assigns them small integer numbers.  When a job is "
"started asynchronously with `@t{&}', the shell prints a line to standard "
"error which looks like:"
msgstr ""

#. type: example
#: zsh.texi:3037
#, no-wrap
msgid "[1] 1234\n"
msgstr ""

#. type: Plain text
#: zsh.texi:3042
msgid ""
"indicating that the job which was started asynchronously was job number 1 "
"and had one (top-level) process, whose process ID was 1234."
msgstr ""

#. type: Plain text
#: zsh.texi:3048
msgid ""
"If a job is started with `@t{&|}' or `@t{&!}', then that job is immediately "
"disowned.  After startup, it does not have a place in the job table, and is "
"not subject to the job control features described here."
msgstr ""

#. type: Plain text
#: zsh.texi:3053
msgid ""
"If you are running a job and wish to do something else you may hit the key "
"^Z (control-Z) which sends a @t{TSTP} signal to the current job: this key "
"may be redefined by the @t{susp} option of the external @t{stty} command."
msgstr ""

#. type: cindex
#: zsh.texi:3053
#, no-wrap
msgid "jobs, suspending"
msgstr ""

#. type: cindex
#: zsh.texi:3054
#, no-wrap
msgid "suspending jobs"
msgstr ""

#. type: Plain text
#: zsh.texi:3057
msgid ""
"The shell will then normally indicate that the job has been `suspended', and "
"print another prompt.  You can then manipulate the state of this job,"
msgstr ""

#. type: findex
#: zsh.texi:3057
#, no-wrap
msgid "bg, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:3060
msgid ""
"putting it in the background with the @t{bg} command, or run some other "
"commands and then eventually bring the job back into the foreground with"
msgstr ""

#. type: findex
#: zsh.texi:3060
#, no-wrap
msgid "fg, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:3064
msgid ""
"the foreground command @t{fg}.  A ^Z takes effect immediately and is like an "
"interrupt in that pending output and unread input are discarded when it is "
"typed."
msgstr ""

#. type: Plain text
#: zsh.texi:3068
msgid ""
"A job being run in the background will suspend if it tries to read from the "
"terminal."
msgstr ""

#. type: Plain text
#: zsh.texi:3080
msgid ""
"Note that if the job running in the foreground is a shell function, then "
"suspending it will have the effect of causing the shell to fork.  This is "
"necessary to separate the function's state from that of the parent shell "
"performing the job control, so that the latter can return to the command "
"line prompt.  As a result, even if @t{fg} is used to continue the job the "
"function will no longer be part of the parent shell, and any variables set "
"by the function will not be visible in the parent shell.  Thus the behaviour "
"is different from the case where the function was never suspended.  Zsh is "
"different from many other shells in this regard."
msgstr ""

#. type: Plain text
#: zsh.texi:3087
msgid ""
"One additional side effect is that use of @t{disown} with a job created by "
"suspending shell code in this fashion is delayed: the job can only be "
"disowned once any process started from the parent shell has terminated.  At "
"that point, the disowned job disappears silently from the job list."
msgstr ""

#. type: Plain text
#: zsh.texi:3093
msgid ""
"The same behaviour is found when the shell is executing code as the right "
"hand side of a pipeline or any complex shell construct such as @t{if}, "
"@t{for}, etc., in order that the entire block of code can be managed as a "
"single job."
msgstr ""

#. type: cindex
#: zsh.texi:3093
#, no-wrap
msgid "background jobs, I/O"
msgstr ""

#. type: cindex
#: zsh.texi:3094
#, no-wrap
msgid "jobs, background, I/O"
msgstr ""

#. type: Plain text
#: zsh.texi:3100
msgid ""
"Background jobs are normally allowed to produce output, but this can be "
"disabled by giving the command `@t{stty tostop}'.  If you set this tty "
"option, then background jobs will suspend when they try to produce output "
"like they do when they try to read input."
msgstr ""

#. type: Plain text
#: zsh.texi:3106
msgid ""
"When a command is suspended and continued later with the @t{fg} or @t{wait} "
"builtins, zsh restores tty modes that were in effect when it was suspended.  "
"This (intentionally) does not apply if the command is continued via `@t{kill "
"-CONT}', nor when it is continued with @t{bg}."
msgstr ""

#. type: cindex
#: zsh.texi:3108
#, no-wrap
msgid "jobs, referring to"
msgstr ""

#. type: cindex
#: zsh.texi:3109
#, no-wrap
msgid "referring to jobs"
msgstr ""

#. type: Plain text
#: zsh.texi:3113
msgid ""
"There are several ways to refer to jobs in the shell.  A job can be referred "
"to by the process ID of any process of the job or by one of the following:"
msgstr ""

#. type: item
#: zsh.texi:3116
#, no-wrap
msgid "@t{%}@var{number}"
msgstr ""

#. type: table
#: zsh.texi:3118
msgid "The job with the given number."
msgstr ""

#. type: item
#: zsh.texi:3118
#, no-wrap
msgid "@t{%}@var{string}"
msgstr ""

#. type: table
#: zsh.texi:3120
msgid "The last job whose command line begins with @var{string}."
msgstr ""

#. type: item
#: zsh.texi:3120
#, no-wrap
msgid "@t{%?}@var{string}"
msgstr ""

#. type: table
#: zsh.texi:3122
msgid "The last job whose command line contains @var{string}."
msgstr ""

#. type: t{#1}
#: zsh.texi:3122 zsh.texi:3864 zsh.texi:9488 zsh.texi:34386
#, no-wrap
msgid "%%"
msgstr ""

#. type: table
#: zsh.texi:3124
msgid "Current job."
msgstr ""

#. type: t{#1}
#: zsh.texi:3124
#, no-wrap
msgid "%+"
msgstr ""

#. type: table
#: zsh.texi:3126
msgid "Equivalent to `@t{%%}'."
msgstr ""

#. type: t{#1}
#: zsh.texi:3126
#, no-wrap
msgid "%-"
msgstr ""

#. type: table
#: zsh.texi:3128
msgid "Previous job."
msgstr ""

#. type: Plain text
#: zsh.texi:3132
msgid "The shell learns immediately whenever a process changes state."
msgstr ""

#. type: pindex
#: zsh.texi:3132
#, no-wrap
msgid "NOTIFY, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:3138
msgid ""
"It normally informs you whenever a job becomes blocked so that no further "
"progress is possible.  If the @t{NOTIFY} option is not set, it waits until "
"just before it prints a prompt before it informs you.  All such "
"notifications are sent directly to the terminal, not to the standard output "
"or standard error."
msgstr ""

#. type: Plain text
#: zsh.texi:3142
msgid ""
"When the monitor mode is on, each background job that completes triggers any "
"trap set for @t{CHLD}."
msgstr ""

#. type: Plain text
#: zsh.texi:3151
msgid ""
"When you try to leave the shell while jobs are running or suspended, you "
"will be warned that `You have suspended (running) jobs'.  You may use the "
"@t{jobs} command to see what they are.  If you do this or immediately try to "
"exit again, the shell will not warn you a second time; the suspended jobs "
"will be terminated, and the running jobs will be sent a @t{SIGHUP} signal, "
"if the @t{HUP} option is set."
msgstr ""

#. type: pindex
#: zsh.texi:3151
#, no-wrap
msgid "HUP, use of"
msgstr ""

#. type: cindex
#: zsh.texi:3154 zsh.texi:13238
#, no-wrap
msgid "jobs, disowning"
msgstr ""

#. type: cindex
#: zsh.texi:3155
#, no-wrap
msgid "disowning jobs"
msgstr ""

#. type: findex
#: zsh.texi:3156
#, no-wrap
msgid "disown, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:3160
msgid ""
"To avoid having the shell terminate the running jobs, either use the "
"nohup(1) command or the @t{disown} builtin."
msgstr ""

#. type: section
#: zsh.texi:3161
#, no-wrap
msgid "Signals"
msgstr ""

#. type: Plain text
#: zsh.texi:3170
msgid ""
"The @t{INT} and @t{QUIT} signals for an invoked command are ignored if the "
"command is followed by `@t{&}' and the @t{MONITOR} option is not active.  "
"The shell itself always ignores the @t{QUIT} signal.  Otherwise, signals "
"have the values inherited by the shell from its parent (but see the "
"@t{TRAP}@var{NAL} special functions in @ref{Functions})."
msgstr ""

#. type: cindex
#: zsh.texi:3172
#, no-wrap
msgid "exiting shell, and asynchronous jobs"
msgstr ""

#. type: cindex
#: zsh.texi:3173
#, no-wrap
msgid "asynchronous jobs, and exiting shell"
msgstr ""

#. type: cindex
#: zsh.texi:3174
#, no-wrap
msgid "jobs, asynchronous, and exiting shell"
msgstr ""

#. type: Plain text
#: zsh.texi:3186
msgid ""
"Certain jobs are run asynchronously by the shell other than those explicitly "
"put into the background; even in cases where the shell would usually wait "
"for such jobs, an explicit @t{exit} command or exit due to the option "
"@t{ERR_EXIT} will cause the shell to exit without waiting.  Examples of such "
"asynchronous jobs are process substitution, see @ref{Process Substitution}, "
"and the handler processes for multios, see the section @emph{Multios} in "
"@ref{Redirection}."
msgstr ""

#. type: node
#: zsh.texi:3186 zsh.texi:3535 zsh.texi:3537 zsh.texi:3814
#, no-wrap
msgid "Conditional Expressions"
msgstr ""

#. type: cindex
#: zsh.texi:3190
#, no-wrap
msgid "arithmetic evaluation"
msgstr ""

#. type: cindex
#: zsh.texi:3191
#, no-wrap
msgid "evaluation, arithmetic"
msgstr ""

#. type: findex
#: zsh.texi:3192
#, no-wrap
msgid "let, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:3202
msgid ""
"The shell can perform integer and floating point arithmetic, either using "
"the builtin @t{let}, or via a substitution of the form "
"@t{$((}@var{...}@t{))}.  For integers, the shell is usually compiled to use "
"8-byte precision where this is available, otherwise precision is 4 bytes.  "
"This can be tested, for example, by giving the command `@t{print - $(( "
"12345678901 ))}'; if the number appears unchanged, the precision is at least "
"8 bytes.  Floating point arithmetic always uses the `double' type with "
"whatever corresponding precision is provided by the compiler and the "
"library."
msgstr ""

#. type: Plain text
#: zsh.texi:3213
msgid ""
"The @t{let} builtin command takes arithmetic expressions as arguments; each "
"is evaluated separately.  Since many of the arithmetic operators, as well as "
"spaces, require quoting, an alternative form is provided: for any command "
"which begins with a `@t{((}', all the characters until a matching `@t{))}' "
"are treated as a double-quoted expression and arithmetic expansion performed "
"as for an argument of @t{let}.  More precisely, `@t{((}@var{...}@t{))}' is "
"equivalent to `@t{let \"}@var{...}@t{\"}'.  The return status is 0 if the "
"arithmetic value of the expression is non-zero, 1 if it is zero, and 2 if an "
"error occurred."
msgstr ""

#. type: Plain text
#: zsh.texi:3216
msgid "For example, the following statement"
msgstr ""

#. type: example
#: zsh.texi:3220
#, no-wrap
msgid "(( val = 2 + 1 ))\n"
msgstr ""

#. type: Plain text
#: zsh.texi:3224 zsh.texi:7203
msgid "is equivalent to"
msgstr ""

#. type: example
#: zsh.texi:3228
#, no-wrap
msgid "let \"val = 2 + 1\"\n"
msgstr ""

#. type: Plain text
#: zsh.texi:3233
msgid ""
"both assigning the value 3 to the shell variable @t{val} and returning a "
"zero status."
msgstr ""

#. type: cindex
#: zsh.texi:3235
#, no-wrap
msgid "arithmetic base"
msgstr ""

#. type: cindex
#: zsh.texi:3236
#, no-wrap
msgid "bases, in arithmetic"
msgstr ""

#. type: Plain text
#: zsh.texi:3247
msgid ""
"Integers can be in bases other than 10.  A leading `@t{0x}' or `@t{0X}' "
"denotes hexadecimal and a leading `@t{0b}' or `@t{0B}' binary.  Integers may "
"also be of the form `@var{base}@t{#}@var{n}', where @var{base} is a decimal "
"number between two and thirty-six representing the arithmetic base and "
"@var{n} is a number in that base (for example, `@t{16#ff}' is 255 in "
"hexadecimal).  The @var{base}@t{#} may also be omitted, in which case base "
"10 is used.  For backwards compatibility the form "
"`@t{[}@var{base}@t{]}@var{n}' is also accepted."
msgstr ""

#. type: Plain text
#: zsh.texi:3254
msgid ""
"An integer expression or a base given in the form `@var{base}@t{#}@var{n}' "
"may contain underscores (`@t{_}') after the leading digit for visual "
"guidance; these are ignored in computation.  Examples are @t{1_000_000} or "
"@t{0xffff_ffff} which are equivalent to @t{1000000} and @t{0xffffffff} "
"respectively."
msgstr ""

#. type: Plain text
#: zsh.texi:3267
msgid ""
"It is also possible to specify a base to be used for output in the form "
"`@t{[#}@var{base}@t{]}', for example `@t{[#16]}'.  This is used when "
"outputting arithmetical substitutions or when assigning to scalar "
"parameters, but an explicitly defined integer or floating point parameter "
"will not be affected.  If an integer variable is implicitly defined by an "
"arithmetic expression, any base specified in this way will be set as the "
"variable's output arithmetic base as if the option `@t{-i} @var{base}' to "
"the @t{typeset} builtin had been used.  The expression has no precedence and "
"if it occurs more than once in a mathematical expression, the last "
"encountered is used.  For clarity it is recommended that it appear at the "
"beginning of an expression.  As an example:"
msgstr ""

#. type: example
#: zsh.texi:3273
#, no-wrap
msgid ""
"typeset -i 16 y\n"
"print $(( [#8] x = 32, y = 32 ))\n"
"print $x $y\n"
msgstr ""

#. type: Plain text
#: zsh.texi:3281
msgid ""
"outputs first `@t{8#40}', the rightmost value in the given output base, and "
"then `@t{8#40 16#20}', because @t{y} has been explicitly declared to have "
"output base 16, while @t{x} (assuming it does not already exist) is "
"implicitly typed by the arithmetic evaluation, where it acquires the output "
"base 8."
msgstr ""

#. type: Plain text
#: zsh.texi:3288
msgid ""
"The @var{base} may be replaced or followed by an underscore, which may "
"itself be followed by a positive integer (if it is missing the value 3 is "
"used).  This indicates that underscores should be inserted into the output "
"string, grouping the number for visual clarity.  The following integer "
"specifies the number of digits to group together.  For example:"
msgstr ""

#. type: example
#: zsh.texi:3293
#, no-wrap
msgid ""
"setopt cbases\n"
"print $(( [#16_4] 65536 ** 2 ))\n"
msgstr ""

#. type: Plain text
#: zsh.texi:3297
msgid "outputs `@t{0x1_0000_0000}'."
msgstr ""

#. type: Plain text
#: zsh.texi:3302
msgid ""
"The feature can be used with floating point numbers, in which case the base "
"must be omitted; grouping is away from the decimal point.  For example,"
msgstr ""

#. type: example
#: zsh.texi:3307
#, no-wrap
msgid ""
"zmodload zsh/mathfunc\n"
"print $(( [#_] sqrt(1e7) ))\n"
msgstr ""

#. type: Plain text
#: zsh.texi:3312
msgid ""
"outputs `@t{3_162.277_660_168_379_5}' (the number of decimal places shown "
"may vary)."
msgstr ""

#. type: pindex
#: zsh.texi:3314
#, no-wrap
msgid "C_BASES, use of"
msgstr ""

#. type: pindex
#: zsh.texi:3315
#, no-wrap
msgid "OCTAL_ZEROES, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:3322
msgid ""
"If the @t{C_BASES} option is set, hexadecimal numbers are output in the "
"standard C format, for example `@t{0xFF}' instead of the usual `@t{16#FF}'.  "
"If the option @t{OCTAL_ZEROES} is also set (it is not by default), octal "
"numbers will be treated similarly and hence appear as `@t{077}' instead of "
"`@t{8#77}'.  This option has no effect on the output of bases other than "
"hexadecimal and octal, and these formats are always understood on input."
msgstr ""

#. type: Plain text
#: zsh.texi:3328
msgid ""
"When an output base is specified using the `@t{[#}@var{base}@t{]}' syntax, "
"an appropriate base prefix will be output if necessary, so that the value "
"output is valid syntax for input.  If the @t{#} is doubled, for example "
"`@t{[##16]}', then no base prefix is output."
msgstr ""

#. type: Plain text
#: zsh.texi:3336
msgid ""
"Floating point constants are recognized by the presence of a decimal point "
"or an exponent.  The decimal point may be the first character of the "
"constant, but the exponent character @t{e} or @t{E} may not, as it will be "
"taken for a parameter name.  All numeric parts (before and after the decimal "
"point and in the exponent) may contain underscores after the leading digit "
"for visual guidance; these are ignored in computation."
msgstr ""

#. type: cindex
#: zsh.texi:3338
#, no-wrap
msgid "arithmetic operators"
msgstr ""

#. type: cindex
#: zsh.texi:3339
#, no-wrap
msgid "operators, arithmetic"
msgstr ""

#. type: Plain text
#: zsh.texi:3342
msgid ""
"An arithmetic expression uses nearly the same syntax and associativity of "
"expressions as in C."
msgstr ""

#. type: Plain text
#: zsh.texi:3346
msgid ""
"In the native mode of operation, the following operators are supported "
"(listed in decreasing order of precedence):"
msgstr ""

#. type: t{#1}
#: zsh.texi:3349 zsh.texi:3394
#, no-wrap
msgid "+ - ! ~ ++ --"
msgstr ""

#. type: table
#: zsh.texi:3351 zsh.texi:3396
msgid "unary plus/minus, logical NOT, complement, @{pre,post@}@{in,de@}crement"
msgstr ""

#. type: t{#1}
#: zsh.texi:3351 zsh.texi:3402
#, no-wrap
msgid "<< >>"
msgstr ""

#. type: table
#: zsh.texi:3353 zsh.texi:3404
msgid "bitwise shift left, right"
msgstr ""

#. type: t{#1}
#: zsh.texi:3353 zsh.texi:3408 zsh.texi:4630
#, no-wrap
msgid "&"
msgstr ""

#. type: table
#: zsh.texi:3355 zsh.texi:3410
msgid "bitwise AND"
msgstr ""

#. type: t{#1}
#: zsh.texi:3355 zsh.texi:3410 zsh.texi:4482 zsh.texi:7490
#, no-wrap
msgid "^"
msgstr ""

#. type: table
#: zsh.texi:3357 zsh.texi:3412
msgid "bitwise XOR"
msgstr ""

#. type: table
#: zsh.texi:3359 zsh.texi:3414
msgid "bitwise OR"
msgstr ""

#. type: table
#: zsh.texi:3361 zsh.texi:3398
msgid "exponentiation"
msgstr ""

#. type: t{#1}
#: zsh.texi:3361 zsh.texi:3398
#, no-wrap
msgid "* / %"
msgstr ""

#. type: table
#: zsh.texi:3363 zsh.texi:3400
msgid "multiplication, division, modulus (remainder)"
msgstr ""

#. type: t{#1}
#: zsh.texi:3363 zsh.texi:3400
#, no-wrap
msgid "+ -"
msgstr ""

#. type: table
#: zsh.texi:3365 zsh.texi:3402
msgid "addition, subtraction"
msgstr ""

#. type: t{#1}
#: zsh.texi:3365 zsh.texi:3404
#, no-wrap
msgid "< > <= >="
msgstr ""

#. type: table
#: zsh.texi:3367 zsh.texi:3406
msgid "comparison"
msgstr ""

#. type: t{#1}
#: zsh.texi:3367 zsh.texi:3406
#, no-wrap
msgid "== !="
msgstr ""

#. type: table
#: zsh.texi:3369 zsh.texi:3408
msgid "equality and inequality"
msgstr ""

#. type: t{#1}
#: zsh.texi:3369 zsh.texi:3414
#, no-wrap
msgid "&&"
msgstr ""

#. type: table
#: zsh.texi:3371 zsh.texi:3416
msgid "logical AND"
msgstr ""

#. type: t{#1}
#: zsh.texi:3371
#, no-wrap
msgid "|| ^^"
msgstr ""

#. type: table
#: zsh.texi:3373
msgid "logical OR, XOR"
msgstr ""

#. type: t{#1}
#: zsh.texi:3373 zsh.texi:3420
#, no-wrap
msgid "? :"
msgstr ""

#. type: table
#: zsh.texi:3375 zsh.texi:3422
msgid "ternary operator"
msgstr ""

#. type: t{#1}
#: zsh.texi:3375 zsh.texi:3422
#, no-wrap
msgid "= += -= *= /= %= &= ^= |= <<= >>= &&= ||= ^^= **="
msgstr ""

#. type: cindex
#: zsh.texi:3377 zsh.texi:3424 zsh.texi:7761
#, no-wrap
msgid "assignment"
msgstr ""

#. type: t{#1}
#: zsh.texi:3377 zsh.texi:3424
#, no-wrap
msgid ","
msgstr ""

#. type: table
#: zsh.texi:3379 zsh.texi:3426
msgid "comma operator"
msgstr ""

#. type: Plain text
#: zsh.texi:3386
msgid ""
"The operators `@t{&&}', `@t{||}', `@t{&&=}', and `@t{||=}' are "
"short-circuiting, and only one of the latter two expressions in a ternary "
"operator is evaluated.  Note the precedence of the bitwise AND, OR, and XOR "
"operators."
msgstr ""

#. type: Plain text
#: zsh.texi:3391
msgid ""
"With the option @t{C_PRECEDENCES} the precedences (but no other properties) "
"of the operators are altered to be the same as those in most other languages "
"that support the relevant operators:"
msgstr ""

#. type: t{#1}
#: zsh.texi:3416
#, no-wrap
msgid "^^"
msgstr ""

#. type: table
#: zsh.texi:3418
msgid "logical XOR"
msgstr ""

#. type: t{#1}
#: zsh.texi:3418
#, no-wrap
msgid "||"
msgstr ""

#. type: table
#: zsh.texi:3420
msgid "logical OR"
msgstr ""

#. type: Plain text
#: zsh.texi:3433
msgid ""
"Note the precedence of exponentiation in both cases is below that of unary "
"operators, hence `@t{-3**2}' evaluates as `@t{9}', not `@t{-9}'.  Use "
"parentheses where necessary: `@t{-(3**2)}'.  This is for compatibility with "
"other shells."
msgstr ""

#. type: cindex
#: zsh.texi:3435
#, no-wrap
msgid "mathematical functions, use of"
msgstr ""

#. type: cindex
#: zsh.texi:3436
#, no-wrap
msgid "functions, math, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:3444
msgid ""
"Mathematical functions can be called with the syntax "
"`@var{func}@t{(}@var{args}@t{)}', where the function decides if the "
"@var{args} is used as a string or a comma-separated list of arithmetic "
"expressions. The shell currently defines no mathematical functions by "
"default, but the module @t{zsh/mathfunc} may be loaded with the @t{zmodload} "
"builtin to provide standard floating point mathematical functions."
msgstr ""

#. type: Plain text
#: zsh.texi:3455
msgid ""
"An expression of the form `@t{##}@var{x}' where @var{x} is any character "
"sequence such as `@t{a}', `@t{^A}', or `@t{\\M-\\C-x}' gives the value of "
"this character and an expression of the form `@t{#}@var{name}' gives the "
"value of the first character of the contents of the parameter @var{name}.  "
"Character values are according to the character set used in the current "
"locale; for multibyte character handling the option @t{MULTIBYTE} must be "
"set.  Note that this form is different from `@t{$#}@var{name}', a standard "
"parameter substitution which gives the length of the parameter @var{name}.  "
"`@t{#\\}' is accepted instead of `@t{##}', but its use is deprecated."
msgstr ""

#. type: Plain text
#: zsh.texi:3460
msgid ""
"Named parameters and subscripted arrays can be referenced by name within an "
"arithmetic expression without using the parameter expansion syntax.  For "
"example,"
msgstr ""

#. type: example
#: zsh.texi:3464
#, no-wrap
msgid "((val2 = val1 * 2))\n"
msgstr ""

#. type: Plain text
#: zsh.texi:3468
msgid "assigns twice the value of @t{$val1} to the parameter named @t{val2}."
msgstr ""

#. type: Plain text
#: zsh.texi:3472
msgid ""
"An internal integer representation of a named parameter can be specified "
"with the @t{integer} builtin."
msgstr ""

#. type: cindex
#: zsh.texi:3472
#, no-wrap
msgid "parameters, integer"
msgstr ""

#. type: cindex
#: zsh.texi:3473
#, no-wrap
msgid "integer parameters"
msgstr ""

#. type: findex
#: zsh.texi:3474
#, no-wrap
msgid "integer, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:3479
msgid ""
"Arithmetic evaluation is performed on the value of each assignment to a "
"named parameter declared integer in this manner.  Assigning a floating point "
"number to an integer results in rounding towards zero."
msgstr ""

#. type: cindex
#: zsh.texi:3481
#, no-wrap
msgid "parameters, floating point"
msgstr ""

#. type: cindex
#: zsh.texi:3482
#, no-wrap
msgid "floating point parameters"
msgstr ""

#. type: findex
#: zsh.texi:3483
#, no-wrap
msgid "float, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:3491
msgid ""
"Likewise, floating point numbers can be declared with the @t{float} builtin; "
"there are two types, differing only in their output format, as described for "
"the @t{typeset} builtin.  The output format can be bypassed by using "
"arithmetic substitution instead of the parameter substitution, "
"i.e. `@t{$@{}@var{float}@t{@}}' uses the defined format, but "
"`@t{$((}@var{float}@t{))}' uses a generic floating point format."
msgstr ""

#. type: Plain text
#: zsh.texi:3498
msgid ""
"Promotion of integer to floating point values is performed where necessary.  "
"In addition, if any operator which requires an integer (`@t{&}', `@t{|}', "
"`@t{^}', `@t{<<}', `@t{>>}' and their equivalents with assignment) is given "
"a floating point argument, it will be silently rounded towards zero except "
"for `@t{~}' which rounds down."
msgstr ""

#. type: Plain text
#: zsh.texi:3508
msgid ""
"Users should beware that, in common with many other programming languages "
"but not software designed for calculation, the evaluation of an expression "
"in zsh is taken a term at a time and promotion of integers to floating point "
"does not occur in terms only containing integers.  A typical result of this "
"is that a division such as @t{6/8} is truncated, in this being rounded "
"towards 0.  The @t{FORCE_FLOAT} shell option can be used in scripts or "
"functions where floating point evaluation is required throughout."
msgstr ""

#. type: Plain text
#: zsh.texi:3512
msgid ""
"Scalar variables can hold integer or floating point values at different "
"times; there is no memory of the numeric type in this case."
msgstr ""

#. type: Plain text
#: zsh.texi:3519
msgid ""
"If a variable is first assigned in a numeric context without previously "
"being declared, it will be implicitly typed as @t{integer} or @t{float} and "
"retain that type either until the type is explicitly changed or until the "
"end of the scope.  This can have unforeseen consequences.  For example, in "
"the loop"
msgstr ""

#. type: example
#: zsh.texi:3525
#, no-wrap
msgid ""
"for (( f = 0; f < 1; f += 0.1 )); do\n"
"# use $f\n"
"done\n"
msgstr ""

#. type: Plain text
#: zsh.texi:3535
msgid ""
"if @t{f} has not already been declared, the first assignment will cause it "
"to be created as an integer, and consequently the operation `@t{f += 0.1}' "
"will always cause the result to be truncated to zero, so that the loop will "
"fail.  A simple fix would be to turn the initialization into `@t{f = 0.0}'.  "
"It is therefore best to declare numeric variables with explicit types."
msgstr ""

#. type: node
#: zsh.texi:3535 zsh.texi:3814 zsh.texi:3816 zsh.texi:4264
#, no-wrap
msgid "Prompt Expansion"
msgstr ""

#. type: cindex
#: zsh.texi:3539
#, no-wrap
msgid "conditional expressions"
msgstr ""

#. type: cindex
#: zsh.texi:3540
#, no-wrap
msgid "expressions, conditional"
msgstr ""

#. type: Plain text
#: zsh.texi:3545
msgid ""
"A @emph{conditional expression} is used with the @t{[[} compound command to "
"test attributes of files and to compare strings.  Each expression can be "
"constructed from one or more of the following unary or binary expressions:"
msgstr ""

#. type: item
#: zsh.texi:3548
#, no-wrap
msgid "@t{-a} @var{file}"
msgstr ""

#. type: table
#: zsh.texi:3550 zsh.texi:3562
msgid "true if @var{file} exists."
msgstr ""

#. type: item
#: zsh.texi:3551
#, no-wrap
msgid "@t{-b} @var{file}"
msgstr ""

#. type: table
#: zsh.texi:3553
msgid "true if @var{file} exists and is a block special file."
msgstr ""

#. type: item
#: zsh.texi:3554
#, no-wrap
msgid "@t{-c} @var{file}"
msgstr ""

#. type: table
#: zsh.texi:3556
msgid "true if @var{file} exists and is a character special file."
msgstr ""

#. type: item
#: zsh.texi:3557
#, no-wrap
msgid "@t{-d} @var{file}"
msgstr ""

#. type: table
#: zsh.texi:3559
msgid "true if @var{file} exists and is a directory."
msgstr ""

#. type: item
#: zsh.texi:3560
#, no-wrap
msgid "@t{-e} @var{file}"
msgstr ""

#. type: item
#: zsh.texi:3563
#, no-wrap
msgid "@t{-f} @var{file}"
msgstr ""

#. type: table
#: zsh.texi:3565
msgid "true if @var{file} exists and is a regular file."
msgstr ""

#. type: item
#: zsh.texi:3566
#, no-wrap
msgid "@t{-g} @var{file}"
msgstr ""

#. type: table
#: zsh.texi:3568
msgid "true if @var{file} exists and has its setgid bit set."
msgstr ""

#. type: item
#: zsh.texi:3569
#, no-wrap
msgid "@t{-h} @var{file}"
msgstr ""

#. type: table
#: zsh.texi:3571 zsh.texi:3621
msgid "true if @var{file} exists and is a symbolic link."
msgstr ""

#. type: item
#: zsh.texi:3572
#, no-wrap
msgid "@t{-k} @var{file}"
msgstr ""

#. type: table
#: zsh.texi:3574
msgid "true if @var{file} exists and has its sticky bit set."
msgstr ""

#. type: item
#: zsh.texi:3575
#, no-wrap
msgid "@t{-n} @var{string}"
msgstr ""

#. type: table
#: zsh.texi:3577
msgid "true if length of @var{string} is non-zero."
msgstr ""

#. type: item
#: zsh.texi:3578
#, no-wrap
msgid "@t{-o} @var{option}"
msgstr ""

#. type: table
#: zsh.texi:3582
msgid ""
"true if option named @var{option} is on.  @var{option} may be a single "
"character, in which case it is a single letter option name.  (See "
"@ref{Specifying Options}.)"
msgstr ""

#. type: table
#: zsh.texi:3587
msgid ""
"When no option named @var{option} exists, and the @t{POSIX_BUILTINS} option "
"hasn't been set, return 3 with a warning.  If that option is set, return 1 "
"with no warning."
msgstr ""

#. type: item
#: zsh.texi:3588
#, no-wrap
msgid "@t{-p} @var{file}"
msgstr ""

#. type: table
#: zsh.texi:3590
msgid "true if @var{file} exists and is a FIFO special file (named pipe)."
msgstr ""

#. type: item
#: zsh.texi:3591
#, no-wrap
msgid "@t{-r} @var{file}"
msgstr ""

#. type: table
#: zsh.texi:3593
msgid "true if @var{file} exists and is readable by current process."
msgstr ""

#. type: item
#: zsh.texi:3594
#, no-wrap
msgid "@t{-s} @var{file}"
msgstr ""

#. type: table
#: zsh.texi:3596
msgid "true if @var{file} exists and has size greater than zero."
msgstr ""

#. type: item
#: zsh.texi:3597
#, no-wrap
msgid "@t{-t} @var{fd}"
msgstr ""

#. type: table
#: zsh.texi:3601
msgid ""
"true if file descriptor number @var{fd} is open and associated with a "
"terminal device.  (note: @var{fd} is not optional)"
msgstr ""

#. type: item
#: zsh.texi:3602
#, no-wrap
msgid "@t{-u} @var{file}"
msgstr ""

#. type: table
#: zsh.texi:3604
msgid "true if @var{file} exists and has its setuid bit set."
msgstr ""

#. type: item
#: zsh.texi:3605
#, no-wrap
msgid "@t{-v} @var{varname}"
msgstr ""

#. type: table
#: zsh.texi:3607
msgid "true if shell variable @var{varname} is set."
msgstr ""

#. type: item
#: zsh.texi:3608
#, no-wrap
msgid "@t{-w} @var{file}"
msgstr ""

#. type: table
#: zsh.texi:3610
msgid "true if @var{file} exists and is writable by current process."
msgstr ""

#. type: item
#: zsh.texi:3611
#, no-wrap
msgid "@t{-x} @var{file}"
msgstr ""

#. type: table
#: zsh.texi:3615
msgid ""
"true if @var{file} exists and is executable by current process.  If "
"@var{file} exists and is a directory, then the current process has "
"permission to search in the directory."
msgstr ""

#. type: item
#: zsh.texi:3616
#, no-wrap
msgid "@t{-z} @var{string}"
msgstr ""

#. type: table
#: zsh.texi:3618
msgid "true if length of @var{string} is zero."
msgstr ""

#. type: item
#: zsh.texi:3619
#, no-wrap
msgid "@t{-L} @var{file}"
msgstr ""

#. type: item
#: zsh.texi:3622
#, no-wrap
msgid "@t{-O} @var{file}"
msgstr ""

#. type: table
#: zsh.texi:3624
msgid ""
"true if @var{file} exists and is owned by the effective user ID of this "
"process."
msgstr ""

#. type: item
#: zsh.texi:3625
#, no-wrap
msgid "@t{-G} @var{file}"
msgstr ""

#. type: table
#: zsh.texi:3628
msgid ""
"true if @var{file} exists and its group matches the effective group ID of "
"this process."
msgstr ""

#. type: item
#: zsh.texi:3629
#, no-wrap
msgid "@t{-S} @var{file}"
msgstr ""

#. type: table
#: zsh.texi:3631
msgid "true if @var{file} exists and is a socket."
msgstr ""

#. type: item
#: zsh.texi:3632
#, no-wrap
msgid "@t{-N} @var{file}"
msgstr ""

#. type: table
#: zsh.texi:3635
msgid ""
"true if @var{file} exists and its access time is not newer than its "
"modification time."
msgstr ""

#. type: item
#: zsh.texi:3636
#, no-wrap
msgid "@var{file1} @t{-nt} @var{file2}"
msgstr ""

#. type: table
#: zsh.texi:3638
msgid "true if @var{file1} exists and is newer than @var{file2}."
msgstr ""

#. type: item
#: zsh.texi:3639
#, no-wrap
msgid "@var{file1} @t{-ot} @var{file2}"
msgstr ""

#. type: table
#: zsh.texi:3641
msgid "true if @var{file1} exists and is older than @var{file2}."
msgstr ""

#. type: item
#: zsh.texi:3642
#, no-wrap
msgid "@var{file1} @t{-ef} @var{file2}"
msgstr ""

#. type: table
#: zsh.texi:3644
msgid "true if @var{file1} and @var{file2} exist and refer to the same file."
msgstr ""

#. type: item
#: zsh.texi:3645
#, no-wrap
msgid "@var{string} @t{=} @var{pattern}"
msgstr ""

#. type: itemx
#: zsh.texi:3646
#, no-wrap
msgid "@var{string} @t{==} @var{pattern}"
msgstr ""

#. type: table
#: zsh.texi:3652
msgid ""
"true if @var{string} matches @var{pattern}.  The two forms are exactly "
"equivalent.  The `@t{=}' form is the traditional shell syntax (and hence the "
"only one generally used with the @t{test} and @t{[} builtins); the `@t{==}' "
"form provides compatibility with other sorts of computer language."
msgstr ""

#. type: item
#: zsh.texi:3653
#, no-wrap
msgid "@var{string} @t{!=} @var{pattern}"
msgstr ""

#. type: table
#: zsh.texi:3655
msgid "true if @var{string} does not match @var{pattern}."
msgstr ""

#. type: item
#: zsh.texi:3656
#, no-wrap
msgid "@var{string} @t{=~} @var{regexp}"
msgstr ""

#. type: table
#: zsh.texi:3664
msgid ""
"true if @var{string} matches the regular expression @var{regexp}.  If the "
"option @t{RE_MATCH_PCRE} is set @var{regexp} is tested as a PCRE regular "
"expression using the @t{zsh/pcre} module, else it is tested as a POSIX "
"extended regular expression using the @t{zsh/regex} module.  Upon successful "
"match, some variables will be updated; no variables are changed if the "
"matching fails."
msgstr ""

#. type: table
#: zsh.texi:3683
msgid ""
"If the option @t{BASH_REMATCH} is not set the scalar parameter @t{MATCH} is "
"set to the substring that matched the pattern and the integer parameters "
"@t{MBEGIN} and @t{MEND} to the index of the start and end, respectively, of "
"the match in @var{string}, such that if @var{string} is contained in "
"variable @t{var} the expression `@t{$@{var[$MBEGIN,$MEND]@}}' is identical "
"to `@t{$MATCH}'.  The setting of the option @t{KSH_ARRAYS} is respected.  "
"Likewise, the array @t{match} is set to the substrings that matched "
"parenthesised subexpressions and the arrays @t{mbegin} and @t{mend} to the "
"indices of the start and end positions, respectively, of the substrings "
"within @var{string}.  The arrays are not set if there were no parenthesised "
"subexpressions.  For example, if the string `@t{a short string}' is matched "
"against the regular expression `@t{s(...)t}', then (assuming the option "
"@t{KSH_ARRAYS} is not set) @t{MATCH}, @t{MBEGIN} and @t{MEND} are "
"`@t{short}', @t{3} and @t{7}, respectively, while @t{match}, @t{mbegin} and "
"@t{mend} are single entry arrays containing the strings `@t{hor}', `@t{4}' "
"and `@t{6}', respectively."
msgstr ""

#. type: table
#: zsh.texi:3689
msgid ""
"If the option @t{BASH_REMATCH} is set the array @t{BASH_REMATCH} is set to "
"the substring that matched the pattern followed by the substrings that "
"matched parenthesised subexpressions within the pattern."
msgstr ""

#. type: item
#: zsh.texi:3690
#, no-wrap
msgid "@var{string1} @t{<} @var{string2}"
msgstr ""

#. type: table
#: zsh.texi:3693
msgid ""
"true if @var{string1} comes before @var{string2} based on ASCII value of "
"their characters."
msgstr ""

#. type: item
#: zsh.texi:3694
#, no-wrap
msgid "@var{string1} @t{>} @var{string2}"
msgstr ""

#. type: table
#: zsh.texi:3697
msgid ""
"true if @var{string1} comes after @var{string2} based on ASCII value of "
"their characters."
msgstr ""

#. type: item
#: zsh.texi:3698
#, no-wrap
msgid "@var{exp1} @t{-eq} @var{exp2}"
msgstr ""

#. type: table
#: zsh.texi:3704
msgid ""
"true if @var{exp1} is numerically equal to @var{exp2}.  Note that for purely "
"numeric comparisons use of the @t{((}@var{...}@t{))} builtin described in "
"@ref{Arithmetic Evaluation} is more convenient than conditional expressions."
msgstr ""

#. type: item
#: zsh.texi:3705
#, no-wrap
msgid "@var{exp1} @t{-ne} @var{exp2}"
msgstr ""

#. type: table
#: zsh.texi:3707
msgid "true if @var{exp1} is numerically not equal to @var{exp2}."
msgstr ""

#. type: item
#: zsh.texi:3708
#, no-wrap
msgid "@var{exp1} @t{-lt} @var{exp2}"
msgstr ""

#. type: table
#: zsh.texi:3710
msgid "true if @var{exp1} is numerically less than @var{exp2}."
msgstr ""

#. type: item
#: zsh.texi:3711
#, no-wrap
msgid "@var{exp1} @t{-gt} @var{exp2}"
msgstr ""

#. type: table
#: zsh.texi:3713
msgid "true if @var{exp1} is numerically greater than @var{exp2}."
msgstr ""

#. type: item
#: zsh.texi:3714
#, no-wrap
msgid "@var{exp1} @t{-le} @var{exp2}"
msgstr ""

#. type: table
#: zsh.texi:3716
msgid "true if @var{exp1} is numerically less than or equal to @var{exp2}."
msgstr ""

#. type: item
#: zsh.texi:3717
#, no-wrap
msgid "@var{exp1} @t{-ge} @var{exp2}"
msgstr ""

#. type: table
#: zsh.texi:3719
msgid "true if @var{exp1} is numerically greater than or equal to @var{exp2}."
msgstr ""

#. type: item
#: zsh.texi:3720
#, no-wrap
msgid "@t{(} @var{exp} @t{)}"
msgstr ""

#. type: table
#: zsh.texi:3722
msgid "true if @var{exp} is true."
msgstr ""

#. type: item
#: zsh.texi:3723
#, no-wrap
msgid "@t{!} @var{exp}"
msgstr ""

#. type: table
#: zsh.texi:3725
msgid "true if @var{exp} is false."
msgstr ""

#. type: item
#: zsh.texi:3726
#, no-wrap
msgid "@var{exp1} @t{&&} @var{exp2}"
msgstr ""

#. type: table
#: zsh.texi:3728
msgid "true if @var{exp1} and @var{exp2} are both true."
msgstr ""

#. type: item
#: zsh.texi:3729
#, no-wrap
msgid "@var{exp1} @t{||} @var{exp2}"
msgstr ""

#. type: table
#: zsh.texi:3731
msgid "true if either @var{exp1} or @var{exp2} is true."
msgstr ""

#. type: Plain text
#: zsh.texi:3741
msgid ""
"For compatibility, if there is a single argument that is not syntactically "
"significant, typically a variable, the condition is treated as a test for "
"whether the expression expands as a string of non-zero length.  In other "
"words, @t{[[ $var ]]} is the same as @t{[[ -n $var ]]}.  It is recommended "
"that the second, explicit, form be used where possible."
msgstr ""

#. type: Plain text
#: zsh.texi:3746
msgid ""
"Normal shell expansion is performed on the @var{file}, @var{string} and "
"@var{pattern} arguments, but the result of each expansion is constrained to "
"be a single word, similar to the effect of double quotes."
msgstr ""

#. type: Plain text
#: zsh.texi:3757
msgid ""
"Filename generation is not performed on any form of argument to conditions.  "
"However, it can be forced in any case where normal shell expansion is valid "
"and when the option @t{EXTENDED_GLOB} is in effect by using an explicit glob "
"qualifier of the form @t{(#q)} at the end of the string.  A normal glob "
"qualifier expression may appear between the `@t{q}' and the closing "
"parenthesis; if none appears the expression has no effect beyond causing "
"filename generation.  The results of filename generation are joined together "
"to form a single word, as with the results of other forms of expansion."
msgstr ""

#. type: Plain text
#: zsh.texi:3765
msgid ""
"This special use of filename generation is only available with the @t{[[} "
"syntax.  If the condition occurs within the @t{[} or @t{test} builtin "
"commands then globbing occurs instead as part of normal command line "
"expansion before the condition is evaluated.  In this case it may generate "
"multiple words which are likely to confuse the syntax of the test command."
msgstr ""

#. type: example
#: zsh.texi:3772
#, no-wrap
msgid "[[ -n file*(#qN) ]]\n"
msgstr ""

#. type: Plain text
#: zsh.texi:3779
msgid ""
"produces status zero if and only if there is at least one file in the "
"current directory beginning with the string `@t{file}'.  The globbing "
"qualifier @t{N} ensures that the expression is empty if there is no matching "
"file."
msgstr ""

#. type: Plain text
#: zsh.texi:3785
msgid ""
"Pattern metacharacters are active for the @var{pattern} arguments; the "
"patterns are the same as those used for filename generation, see "
"@ref{Filename Generation}, but there is no special behaviour of `@t{/}' nor "
"initial dots, and no glob qualifiers are allowed."
msgstr ""

#. type: Plain text
#: zsh.texi:3794
msgid ""
"In each of the above expressions, if @var{file} is of the form "
"`@t{/dev/fd/}@var{n}', where @var{n} is an integer, then the test applied to "
"the open file whose descriptor number is @var{n}, even if the underlying "
"system does not support the @t{/dev/fd} directory."
msgstr ""

#. type: Plain text
#: zsh.texi:3799
msgid ""
"In the forms which do numeric comparison, the expressions @var{exp} undergo "
"arithmetic expansion as if they were enclosed in @t{$((}@var{...}@t{))}."
msgstr ""

#. type: Plain text
#: zsh.texi:3802
msgid "For example, the following:"
msgstr ""

#. type: example
#: zsh.texi:3806
#, no-wrap
msgid "[[ ( -f foo || -f bar ) && $report = y* ]] && print File exists.\n"
msgstr ""

#. type: Plain text
#: zsh.texi:3814
msgid ""
"tests if either file @t{foo} or file @t{bar} exists, and if so, if the value "
"of the parameter @t{report} begins with `@t{y}'; if the complete condition "
"is true, the message `@t{File exists.}' is printed."
msgstr ""

#. type: section
#: zsh.texi:3819
#, no-wrap
msgid "Expansion of Prompt Sequences"
msgstr ""

#. type: cindex
#: zsh.texi:3821
#, no-wrap
msgid "prompt expansion"
msgstr ""

#. type: cindex
#: zsh.texi:3822
#, no-wrap
msgid "expansion, prompt"
msgstr ""

#. type: Plain text
#: zsh.texi:3825
msgid ""
"Prompt sequences undergo a special form of expansion.  This type of "
"expansion is also available using the @t{-P} option to the @t{print} "
"builtin."
msgstr ""

#. type: pindex
#: zsh.texi:3827
#, no-wrap
msgid "PROMPT_SUBST, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:3834
msgid ""
"If the @t{PROMPT_SUBST} option is set, the prompt string is first subjected "
"to @emph{parameter expansion}, @emph{command substitution} and "
"@emph{arithmetic expansion}.  See @ref{Expansion}."
msgstr ""

#. type: Plain text
#: zsh.texi:3837
msgid "Certain escape sequences may be recognised in the prompt string."
msgstr ""

#. type: pindex
#: zsh.texi:3839
#, no-wrap
msgid "PROMPT_BANG, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:3843
msgid ""
"If the @t{PROMPT_BANG} option is set, a `@t{!}' in the prompt is replaced by "
"the current history event number.  A literal `@t{!}' may then be represented "
"as `@t{!!}'."
msgstr ""

#. type: pindex
#: zsh.texi:3845
#, no-wrap
msgid "PROMPT_PERCENT, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:3853
msgid ""
"If the @t{PROMPT_PERCENT} option is set, certain escape sequences that start "
"with `@t{%}' are expanded.  Many escapes are followed by a single character, "
"although some of these take an optional integer argument that should appear "
"between the `@t{%}' and the next character of the sequence.  More "
"complicated escape sequences are available to provide conditional expansion."
msgstr ""

#. type: section
#: zsh.texi:3856
#, no-wrap
msgid "Simple Prompt Escapes"
msgstr ""

#. type: subsection
#: zsh.texi:3861
#, no-wrap
msgid "Special characters"
msgstr ""

#. type: table
#: zsh.texi:3866 zsh.texi:9490
msgid "A `@t{%}'."
msgstr ""

#. type: t{#1}
#: zsh.texi:3867
#, no-wrap
msgid "%)"
msgstr ""

#. type: table
#: zsh.texi:3869
msgid "A `@t{)}'."
msgstr ""

#. type: subsection
#: zsh.texi:3874
#, no-wrap
msgid "Login information"
msgstr ""

#. type: t{#1}
#: zsh.texi:3877 zsh.texi:31191 zsh.texi:39738
#, no-wrap
msgid "%l"
msgstr ""

#. type: table
#: zsh.texi:3880
msgid ""
"The line (tty) the user is logged in on, without `@t{/dev/}' prefix.  If the "
"name starts with `@t{/dev/tty}', that prefix is stripped."
msgstr ""

#. type: t{#1}
#: zsh.texi:3881 zsh.texi:9508 zsh.texi:31194
#, no-wrap
msgid "%M"
msgstr ""

#. type: table
#: zsh.texi:3883
msgid "The full machine hostname."
msgstr ""

#. type: t{#1}
#: zsh.texi:3884 zsh.texi:31197 zsh.texi:37086
#, no-wrap
msgid "%m"
msgstr ""

#. type: table
#: zsh.texi:3889
msgid ""
"The hostname up to the first `@t{.}'.  An integer may follow the `@t{%}' to "
"specify how many components of the hostname are desired.  With a negative "
"integer, trailing components of the hostname are shown."
msgstr ""

#. type: t{#1}
#: zsh.texi:3890 zsh.texi:31185 zsh.texi:37153 zsh.texi:39744
#, no-wrap
msgid "%n"
msgstr ""

#. type: table
#: zsh.texi:3892
msgid "@t{$USERNAME}."
msgstr ""

#. type: t{#1}
#: zsh.texi:3893
#, no-wrap
msgid "%y"
msgstr ""

#. type: table
#: zsh.texi:3896
msgid ""
"The line (tty) the user is logged in on, without `@t{/dev/}' prefix.  This "
"does not treat `@t{/dev/tty}' names specially."
msgstr ""

#. type: subsection
#: zsh.texi:3901
#, no-wrap
msgid "Shell state"
msgstr ""

#. type: t{#1}
#: zsh.texi:3904
#, no-wrap
msgid "%#"
msgstr ""

#. type: table
#: zsh.texi:3911
msgid ""
"A `@t{#}' if the shell is running with privileges, a `@t{%}' if not.  "
"Equivalent to `@t{%(!.#.%%)}'.  The definition of `privileged', for these "
"purposes, is that either the effective user ID is zero, or, if POSIX.1e "
"capabilities are supported, that at least one capability is raised in either "
"the Effective or Inheritable capability vectors."
msgstr ""

#. type: t{#1}
#: zsh.texi:3912
#, no-wrap
msgid "%?"
msgstr ""

#. type: table
#: zsh.texi:3914
msgid "The return status of the last command executed just before the prompt."
msgstr ""

#. type: t{#1}
#: zsh.texi:3915
#, no-wrap
msgid "%_"
msgstr ""

#. type: table
#: zsh.texi:3922
msgid ""
"The status of the parser, i.e. the shell constructs (like `@t{if}' and "
"`@t{for}') that have been started on the command line. If given an integer "
"number that many strings will be printed; zero or negative or no integer "
"means print as many as there are.  This is most useful in prompts @t{PS2} "
"for continuation lines and @t{PS4} for debugging with the @t{XTRACE} option; "
"in the latter case it will also work non-interactively."
msgstr ""

#. type: t{#1}
#: zsh.texi:3923
#, no-wrap
msgid "%^"
msgstr ""

#. type: table
#: zsh.texi:3926
msgid ""
"The status of the parser in reverse. This is the same as `@t{%_}' other than "
"the order of strings.  It is often used in @t{RPS2}."
msgstr ""

#. type: t{#1}
#: zsh.texi:3927
#, no-wrap
msgid "%d"
msgstr ""

#. type: t{#1}
#: zsh.texi:3928
#, no-wrap
msgid "%/"
msgstr ""

#. type: table
#: zsh.texi:3933
msgid ""
"Current working directory.  If an integer follows the `@t{%}', it specifies "
"a number of trailing components of the current working directory to show; "
"zero means the whole path.  A negative integer specifies leading components, "
"i.e. @t{%-1d} specifies the first component."
msgstr ""

#. type: t{#1}
#: zsh.texi:3934
#, no-wrap
msgid "%~"
msgstr ""

#. type: table
#: zsh.texi:3941
msgid ""
"As @t{%d} and @t{%/}, but if the current working directory starts with "
"@t{$HOME}, that part is replaced by a `@t{~}'. Furthermore, if it has a "
"named directory as its prefix, that part is replaced by a `@t{~}' followed "
"by the name of the directory, but only if the result is shorter than the "
"full path; @ref{Filename Expansion}."
msgstr ""

#. type: t{#1}
#: zsh.texi:3942
#, no-wrap
msgid "%e"
msgstr ""

#. type: table
#: zsh.texi:3947
msgid ""
"Evaluation depth of the current sourced file, shell function, or @t{eval}.  "
"This is incremented or decremented every time the value of @t{%N} is set or "
"reverted to a previous value, respectively.  This is most useful for "
"debugging as part of @t{$PS4}."
msgstr ""

#. type: t{#1}
#: zsh.texi:3948 zsh.texi:37140
#, no-wrap
msgid "%h"
msgstr ""

#. type: t{#1}
#: zsh.texi:3949
#, no-wrap
msgid "%!"
msgstr ""

#. type: table
#: zsh.texi:3951
msgid "Current history event number."
msgstr ""

#. type: t{#1}
#: zsh.texi:3952 zsh.texi:37067
#, no-wrap
msgid "%i"
msgstr ""

#. type: table
#: zsh.texi:3956
msgid ""
"The line number currently being executed in the script, sourced file, or "
"shell function given by @t{%N}.  This is most useful for debugging as part "
"of @t{$PS4}."
msgstr ""

#. type: t{#1}
#: zsh.texi:3957 zsh.texi:9516
#, no-wrap
msgid "%I"
msgstr ""

#. type: table
#: zsh.texi:3961
msgid ""
"The line number currently being executed in the file @t{%x}.  This is "
"similar to @t{%i}, but the line number is always a line number in the file "
"where the code was defined, even if the code is a shell function."
msgstr ""

#. type: t{#1}
#: zsh.texi:3962
#, no-wrap
msgid "%j"
msgstr ""

#. type: table
#: zsh.texi:3964
msgid "The number of jobs."
msgstr ""

#. type: t{#1}
#: zsh.texi:3965 zsh.texi:4028
#, no-wrap
msgid "%L"
msgstr ""

#. type: table
#: zsh.texi:3967
msgid "The current value of @t{$SHLVL}."
msgstr ""

#. type: t{#1}
#: zsh.texi:3968
#, no-wrap
msgid "%N"
msgstr ""

#. type: table
#: zsh.texi:3974
msgid ""
"The name of the script, sourced file, or shell function that zsh is "
"currently executing, whichever was started most recently.  If there is none, "
"this is equivalent to the parameter @t{$0}.  An integer may follow the "
"`@t{%}' to specify a number of trailing path components to show; zero means "
"the full path.  A negative integer specifies leading components."
msgstr ""

#. type: t{#1}
#: zsh.texi:3975
#, no-wrap
msgid "%x"
msgstr ""

#. type: table
#: zsh.texi:3979
msgid ""
"The name of the file containing the source code currently being executed.  "
"This behaves as @t{%N} except that function and eval command names are not "
"shown, instead the file where they were defined."
msgstr ""

#. type: t{#1}
#: zsh.texi:3980 zsh.texi:7285 zsh.texi:9528 zsh.texi:34375 zsh.texi:37070
#: zsh.texi:37155 zsh.texi:39734
#, no-wrap
msgid "%c"
msgstr ""

#. type: t{#1}
#: zsh.texi:3981
#, no-wrap
msgid "%."
msgstr ""

#. type: t{#1}
#: zsh.texi:3982
#, no-wrap
msgid "%C"
msgstr ""

#. type: table
#: zsh.texi:3989
msgid ""
"Trailing component of the current working directory.  An integer may follow "
"the `@t{%}' to get more than one component.  Unless `@t{%C}' is used, tilde "
"contraction is performed first.  These are deprecated as @t{%c} and @t{%C} "
"are equivalent to @t{%1~} and @t{%1/}, respectively, while explicit positive "
"integers have the same effect as for the latter two sequences."
msgstr ""

#. type: subsection
#: zsh.texi:3994
#, no-wrap
msgid "Date and time"
msgstr ""

#. type: t{#1}
#: zsh.texi:3997 zsh.texi:9503 zsh.texi:31236
#, no-wrap
msgid "%D"
msgstr ""

#. type: table
#: zsh.texi:3999
msgid "The date in @var{yy}@t{-}@var{mm}@t{-}@var{dd} format."
msgstr ""

#. type: t{#1}
#: zsh.texi:4000 zsh.texi:31227
#, no-wrap
msgid "%T"
msgstr ""

#. type: table
#: zsh.texi:4002
msgid "Current time of day, in 24-hour format."
msgstr ""

#. type: t{#1}
#: zsh.texi:4003 zsh.texi:31223
#, no-wrap
msgid "%t"
msgstr ""

#. type: t{#1}
#: zsh.texi:4004 zsh.texi:31224
#, no-wrap
msgid "%@@"
msgstr ""

#. type: table
#: zsh.texi:4006
msgid "Current time of day, in 12-hour, am/pm format."
msgstr ""

#. type: t{#1}
#: zsh.texi:4007
#, no-wrap
msgid "%*"
msgstr ""

#. type: table
#: zsh.texi:4009
msgid "Current time of day in 24-hour format, with seconds."
msgstr ""

#. type: t{#1}
#: zsh.texi:4010 zsh.texi:9526 zsh.texi:31230
#, no-wrap
msgid "%w"
msgstr ""

#. type: table
#: zsh.texi:4012
msgid "The date in @var{day}@t{-}@var{dd} format."
msgstr ""

#. type: t{#1}
#: zsh.texi:4013 zsh.texi:9499 zsh.texi:31233
#, no-wrap
msgid "%W"
msgstr ""

#. type: table
#: zsh.texi:4015
msgid "The date in @var{mm}@t{/}@var{dd}@t{/}@var{yy} format."
msgstr ""

#. type: item
#: zsh.texi:4016 zsh.texi:31239
#, no-wrap
msgid "@t{%D@{}@var{string}@t{@}}"
msgstr ""

#. type: table
#: zsh.texi:4021
msgid ""
"@var{string} is formatted using the @t{strftime} function.  See strftime(3) "
"for more details.  Various zsh extensions provide numbers with no leading "
"zero or space if the number is a single digit:"
msgstr ""

#. type: t{#1}
#: zsh.texi:4024 zsh.texi:34380
#, no-wrap
msgid "%f"
msgstr ""

#. type: table
#: zsh.texi:4026
msgid "a day of the month"
msgstr ""

#. type: t{#1}
#: zsh.texi:4026 zsh.texi:9506
#, no-wrap
msgid "%K"
msgstr ""

#. type: table
#: zsh.texi:4028
msgid "the hour of the day on the 24-hour clock"
msgstr ""

#. type: table
#: zsh.texi:4030
msgid "the hour of the day on the 12-hour clock"
msgstr ""

#. type: table
#: zsh.texi:4041
msgid ""
"In addition, if the system supports the POSIX @t{gettimeofday} system call, "
"@t{%.} provides decimal fractions of a second since the epoch with leading "
"zeroes.  By default three decimal places are provided, but a number of "
"digits up to 9 may be given following the @t{%}; hence @t{%6.} outputs "
"microseconds, and @t{%9.} outputs nanoseconds.  (The latter requires a "
"nanosecond-precision @t{clock_gettime}; systems lacking this will return a "
"value multiplied by the appropriate power of 10.)  A typical example of this "
"is the format `@t{%D@{%H:%M:%S.%.@}}'."
msgstr ""

#. type: table
#: zsh.texi:4044
msgid "The GNU extension @t{%N} is handled as a synonym for @t{%9.}."
msgstr ""

#. type: table
#: zsh.texi:4054
msgid ""
"Additionally, the GNU extension that a `@t{-}' between the @t{%} and the "
"format character causes a leading zero or space to be stripped is handled "
"directly by the shell for the format characters @t{d}, @t{f}, @t{H}, @t{k}, "
"@t{l}, @t{m}, @t{M}, @t{S} and @t{y}; any other format characters are "
"provided to the system's strftime(3)  with any leading `@t{-}' present, so "
"the handling is system dependent.  Further GNU (or other) extensions are "
"also passed to strftime(3)  and may work if the system supports them."
msgstr ""

#. type: subsection
#: zsh.texi:4059
#, no-wrap
msgid "Visual effects"
msgstr ""

#. type: item
#: zsh.texi:4062 zsh.texi:31220
#, no-wrap
msgid "@t{%B} (@t{%b})"
msgstr ""

#. type: table
#: zsh.texi:4064 zsh.texi:31222
msgid "Start (stop) boldface mode."
msgstr ""

#. type: t{#1}
#: zsh.texi:4065 zsh.texi:9494
#, no-wrap
msgid "%E"
msgstr ""

#. type: table
#: zsh.texi:4067
msgid "Clear to end of line."
msgstr ""

#. type: item
#: zsh.texi:4068 zsh.texi:31217
#, no-wrap
msgid "@t{%U} (@t{%u})"
msgstr ""

#. type: table
#: zsh.texi:4070 zsh.texi:31219
msgid "Start (stop) underline mode."
msgstr ""

#. type: item
#: zsh.texi:4071 zsh.texi:31214
#, no-wrap
msgid "@t{%S} (@t{%s})"
msgstr ""

#. type: table
#: zsh.texi:4073 zsh.texi:31216
msgid "Start (stop) standout mode."
msgstr ""

#. type: item
#: zsh.texi:4074
#, no-wrap
msgid "@t{%F} (@t{%f})"
msgstr ""

#. type: table
#: zsh.texi:4083
msgid ""
"Start (stop) using a different foreground colour, if supported by the "
"terminal.  The colour may be specified two ways: either as a numeric "
"argument, as normal, or by a sequence in braces following the @t{%F}, for "
"example @t{%F@{red@}}.  In the latter case the values allowed are as "
"described for the @t{fg} @t{zle_highlight} attribute; @ref{Character "
"Highlighting}.  This means that numeric colours are allowed in the second "
"format also."
msgstr ""

#. type: item
#: zsh.texi:4084
#, no-wrap
msgid "@t{%K} (@t{%k})"
msgstr ""

#. type: table
#: zsh.texi:4087
msgid ""
"Start (stop) using a different bacKground colour.  The syntax is identical "
"to that for @t{%F} and @t{%f}."
msgstr ""

#. type: item
#: zsh.texi:4088
#, no-wrap
msgid "@t{%@{}...@t{%@}}"
msgstr ""

#. type: table
#: zsh.texi:4092
msgid ""
"Include a string as a literal escape sequence.  The string within the braces "
"should not change the cursor position.  Brace pairs can nest."
msgstr ""

#. type: table
#: zsh.texi:4096
msgid ""
"A positive numeric argument between the @t{%} and the @t{@{} is treated as "
"described for @t{%G} below."
msgstr ""

#. type: t{#1}
#: zsh.texi:4097 zsh.texi:37161
#, no-wrap
msgid "%G"
msgstr ""

#. type: table
#: zsh.texi:4108
msgid ""
"Within a @t{%@{}...@t{%@}} sequence, include a `glitch': that is, assume "
"that a single character width will be output.  This is useful when "
"outputting characters that otherwise cannot be correctly handled by the "
"shell, such as the alternate character set on some terminals.  The "
"characters in question can be included within a @t{%@{}...@t{%@}} sequence "
"together with the appropriate number of @t{%G} sequences to indicate the "
"correct width.  An integer between the `@t{%}' and `@t{G}' indicates a "
"character width other than one.  Hence @t{%@{}@var{seq}@t{%2G%@}} outputs "
"@var{seq} and assumes it takes up the width of two standard characters."
msgstr ""

#. type: table
#: zsh.texi:4112
msgid ""
"Multiple uses of @t{%G} accumulate in the obvious fashion; the position of "
"the @t{%G} is unimportant.  Negative integers are not handled."
msgstr ""

#. type: table
#: zsh.texi:4117
msgid ""
"Note that when prompt truncation is in use it is advisable to divide up "
"output into single characters within each @t{%@{}...@t{%@}} group so that "
"the correct truncation point can be found."
msgstr ""

#. type: section
#: zsh.texi:4122
#, no-wrap
msgid "Conditional Substrings in Prompts"
msgstr ""

#. type: t{#1}
#: zsh.texi:4125
#, no-wrap
msgid "%v"
msgstr ""

#. type: vindex
#: zsh.texi:4126
#, no-wrap
msgid "psvar, use of"
msgstr ""

#. type: table
#: zsh.texi:4130
msgid ""
"The value of the first element of the @t{psvar} array parameter.  Following "
"the `@t{%}' with an integer gives that element of the array.  Negative "
"integers count from the end of the array."
msgstr ""

#. type: item
#: zsh.texi:4131
#, no-wrap
msgid "@t{%(}@var{x}@t{.}@var{true-text}@t{.}@var{false-text}@t{)}"
msgstr ""

#. type: table
#: zsh.texi:4141
msgid ""
"Specifies a ternary expression.  The character following the @var{x} is "
"arbitrary; the same character is used to separate the text for the `true' "
"result from that for the `false' result.  This separator may not appear in "
"the @var{true-text}, except as part of a %-escape sequence.  A `@t{)}' may "
"appear in the @var{false-text} as `@t{%)}'.  @var{true-text} and "
"@var{false-text} may both contain arbitrarily-nested escape sequences, "
"including further ternary expressions."
msgstr ""

#. type: table
#: zsh.texi:4147
msgid ""
"The left parenthesis may be preceded or followed by a positive integer "
"@var{n}, which defaults to zero.  A negative integer will be multiplied by "
"-1, except as noted below for `@t{l}'.  The test character @var{x} may be "
"any of the following:"
msgstr ""

#. type: t{#1}
#: zsh.texi:4150 zsh.texi:4429 zsh.texi:8490 zsh.texi:38774
#, no-wrap
msgid "!"
msgstr ""

#. type: table
#: zsh.texi:4152
msgid "True if the shell is running with privileges."
msgstr ""

#. type: vindex
#: zsh.texi:4152 zsh.texi:5368 zsh.texi:8495
#, no-wrap
msgid "#"
msgstr ""

#. type: table
#: zsh.texi:4154
msgid "True if the effective uid of the current process is @var{n}."
msgstr ""

#. type: t{#1}
#: zsh.texi:4154 zsh.texi:6624 zsh.texi:8536 zsh.texi:38780
#, no-wrap
msgid "?"
msgstr ""

#. type: table
#: zsh.texi:4156
msgid "True if the exit status of the last command was @var{n}."
msgstr ""

#. type: t{#1}
#: zsh.texi:4156 zsh.texi:8557 zsh.texi:38794
#, no-wrap
msgid "_"
msgstr ""

#. type: table
#: zsh.texi:4158
msgid "True if at least @var{n} shell constructs were started."
msgstr ""

#. type: t{#1}
#: zsh.texi:4158 zsh.texi:5456
#, no-wrap
msgid "C"
msgstr ""

#. type: t{#1}
#: zsh.texi:4159 zsh.texi:7255 zsh.texi:38796
#, no-wrap
msgid "/"
msgstr ""

#. type: table
#: zsh.texi:4162
msgid ""
"True if the current absolute path has at least @var{n} elements relative to "
"the root directory, hence @t{/} is counted as 0 elements."
msgstr ""

#. type: t{#1}
#: zsh.texi:4162 zsh.texi:4548 zsh.texi:5450 zsh.texi:7543 zsh.texi:38792
#, no-wrap
msgid "c"
msgstr ""

#. type: t{#1}
#: zsh.texi:4163 zsh.texi:7264 zsh.texi:12761 zsh.texi:38787
#, no-wrap
msgid "."
msgstr ""

#. type: t{#1}
#: zsh.texi:4164 zsh.texi:5726
#, no-wrap
msgid "~"
msgstr ""

#. type: table
#: zsh.texi:4168
msgid ""
"True if the current path, with prefix replacement, has at least @var{n} "
"elements relative to the root directory, hence @t{/} is counted as 0 "
"elements."
msgstr ""

#. type: t{#1}
#: zsh.texi:4168 zsh.texi:5461 zsh.texi:7511 zsh.texi:31685
#, no-wrap
msgid "D"
msgstr ""

#. type: table
#: zsh.texi:4170
msgid "True if the month is equal to @var{n} (January = 0)."
msgstr ""

#. type: t{#1}
#: zsh.texi:4170 zsh.texi:7545
#, no-wrap
msgid "d"
msgstr ""

#. type: table
#: zsh.texi:4172
msgid "True if the day of the month is equal to @var{n}."
msgstr ""

#. type: t{#1}
#: zsh.texi:4172 zsh.texi:4555 zsh.texi:5469 zsh.texi:8245
#, no-wrap
msgid "e"
msgstr ""

#. type: table
#: zsh.texi:4174
msgid "True if the evaluation depth is at least @var{n}."
msgstr ""

#. type: t{#1}
#: zsh.texi:4174 zsh.texi:36301
#, no-wrap
msgid "g"
msgstr ""

#. type: table
#: zsh.texi:4176
msgid "True if the effective gid of the current process is @var{n}."
msgstr ""

#. type: t{#1}
#: zsh.texi:4176
#, no-wrap
msgid "j"
msgstr ""

#. type: table
#: zsh.texi:4178
msgid "True if the number of jobs is at least @var{n}."
msgstr ""

#. type: t{#1}
#: zsh.texi:4178 zsh.texi:5503 zsh.texi:7535 zsh.texi:30890
#, no-wrap
msgid "L"
msgstr ""

#. type: table
#: zsh.texi:4180
msgid "True if the @t{SHLVL} parameter is at least @var{n}."
msgstr ""

#. type: t{#1}
#: zsh.texi:4180 zsh.texi:4579 zsh.texi:6875 zsh.texi:7537
#, no-wrap
msgid "l"
msgstr ""

#. type: table
#: zsh.texi:4185
msgid ""
"True if at least @var{n} characters have already been printed on the current "
"line.  When @var{n} is negative, true if at least @t{abs}@t{(}@var{n}@t{)} "
"characters remain before the opposite margin (thus the left margin for "
"@t{RPROMPT})."
msgstr ""

#. type: t{#1}
#: zsh.texi:4185 zsh.texi:5881 zsh.texi:7318 zsh.texi:31680
#, no-wrap
msgid "S"
msgstr ""

#. type: table
#: zsh.texi:4187
msgid "True if the @t{SECONDS} parameter is at least @var{n}."
msgstr ""

#. type: t{#1}
#: zsh.texi:4187 zsh.texi:7503
#, no-wrap
msgid "T"
msgstr ""

#. type: table
#: zsh.texi:4189
msgid "True if the time in hours is equal to @var{n}."
msgstr ""

#. type: t{#1}
#: zsh.texi:4189 zsh.texi:5587 zsh.texi:7321
#, no-wrap
msgid "t"
msgstr ""

#. type: table
#: zsh.texi:4191
msgid "True if the time in minutes is equal to @var{n}."
msgstr ""

#. type: t{#1}
#: zsh.texi:4191 zsh.texi:5651
#, no-wrap
msgid "v"
msgstr ""

#. type: table
#: zsh.texi:4193
msgid "True if the array @t{psvar} has at least @var{n} elements."
msgstr ""

#. type: t{#1}
#: zsh.texi:4193 zsh.texi:5657
#, no-wrap
msgid "V"
msgstr ""

#. type: table
#: zsh.texi:4196
msgid "True if element @var{n} of the array @t{psvar} is set and non-empty."
msgstr ""

#. type: t{#1}
#: zsh.texi:4196 zsh.texi:4744 zsh.texi:5660 zsh.texi:7291 zsh.texi:8125
#, no-wrap
msgid "w"
msgstr ""

#. type: table
#: zsh.texi:4198
msgid "True if the day of the week is equal to @var{n} (Sunday = 0)."
msgstr ""

#. type: item
#: zsh.texi:4200
#, no-wrap
msgid "@t{%<}@var{string}@t{<}"
msgstr ""

#. type: itemx
#: zsh.texi:4201
#, no-wrap
msgid "@t{%>}@var{string}@t{>}"
msgstr ""

#. type: itemx
#: zsh.texi:4202
#, no-wrap
msgid "@t{%[}@var{xstring}@t{]}"
msgstr ""

#. type: table
#: zsh.texi:4209
msgid ""
"Specifies truncation behaviour for the remainder of the prompt string.  The "
"third, deprecated, form is equivalent to `@t{%}@var{xstringx}', i.e. @var{x} "
"may be `@t{<}' or `@t{>}'.  The @var{string} will be displayed in place of "
"the truncated portion of any string; note this does not undergo prompt "
"expansion."
msgstr ""

#. type: table
#: zsh.texi:4221
msgid ""
"The numeric argument, which in the third form may appear immediately after "
"the `@t{[}', specifies the maximum permitted length of the various strings "
"that can be displayed in the prompt.  In the first two forms, this numeric "
"argument may be negative, in which case the truncation length is determined "
"by subtracting the absolute value of the numeric argument from the number of "
"character positions remaining on the current prompt line.  If this results "
"in a zero or negative length, a length of 1 is used.  In other words, a "
"negative argument arranges that after truncation at least @var{n} characters "
"remain before the right margin (left margin for @t{RPROMPT})."
msgstr ""

#. type: table
#: zsh.texi:4233
msgid ""
"The forms with `@t{<}' truncate at the left of the string, and the forms "
"with `@t{>}' truncate at the right of the string.  For example, if the "
"current directory is `@t{/home/pike}', the prompt `@t{%8<..<%/}' will expand "
"to `@t{..e/pike}'.  In this string, the terminating character (`@t{<}', "
"`@t{>}' or `@t{]}'), or in fact any character, may be quoted by a preceding "
"`@t{\\}'; note when using @t{print -P}, however, that this must be doubled "
"as the string is also subject to standard @t{print} processing, in addition "
"to any backslashes removed by a double quoted string: the worst case is "
"therefore `@t{print -P \"%<\\\\\\\\<<...\"}'."
msgstr ""

#. type: table
#: zsh.texi:4237
msgid ""
"If the @var{string} is longer than the specified truncation length, it will "
"appear in full, completely replacing the truncated string."
msgstr ""

#. type: table
#: zsh.texi:4251
msgid ""
"The part of the prompt string to be truncated runs to the end of the string, "
"or to the end of the next enclosing group of the `@t{%(}' construct, or to "
"the next truncation encountered at the same grouping level (i.e. truncations "
"inside a `@t{%(}' are separate), which ever comes first.  In particular, a "
"truncation with argument zero (e.g., `@t{%<<}') marks the end of the range "
"of the string to be truncated while turning off truncation from there "
"on. For example, the prompt `@t{%10<...<%~%<<%# }' will print a truncated "
"representation of the current directory, followed by a `@t{%}' or `@t{#}', "
"followed by a space.  Without the `@t{%<<}', those two characters would be "
"included in the string to be truncated.  Note that `@t{%-0<<}' is not "
"equivalent to `@t{%<<}' but specifies that the prompt is truncated at the "
"right margin."
msgstr ""

#. type: table
#: zsh.texi:4260
msgid ""
"Truncation applies only within each individual line of the prompt, as "
"delimited by embedded newlines (if any).  If the total length of any line of "
"the prompt after truncation is greater than the terminal width, or if the "
"part to be truncated contains embedded newlines, truncation behavior is "
"undefined and may change in a future version of the shell.  Use "
"`@t{%-}@var{n}@t{(l.}@var{true-text}@t{.}@var{false-text}@t{)}' to remove "
"parts of the prompt when the available space is less than @var{n}."
msgstr ""

#. type: cindex
#: zsh.texi:4269
#, no-wrap
msgid "expansion"
msgstr ""

#. type: Plain text
#: zsh.texi:4272
msgid ""
"The following types of expansions are performed in the indicated order in "
"five steps:"
msgstr ""

#. type: node
#: zsh.texi:4275 zsh.texi:4321 zsh.texi:4323 zsh.texi:4349 zsh.texi:4416
#: zsh.texi:4463 zsh.texi:4503 zsh.texi:4754
#, no-wrap
msgid "History Expansion"
msgstr ""

#. type: table
#: zsh.texi:4277
msgid "This is performed only in interactive shells."
msgstr ""

#. type: emph{#1}
#: zsh.texi:4278
#, no-wrap
msgid "Alias Expansion"
msgstr ""

#. type: table
#: zsh.texi:4282
msgid ""
"Aliases are expanded immediately before the command line is parsed as "
"explained in @ref{Aliasing}."
msgstr ""

#. type: node
#: zsh.texi:4283 zsh.texi:4321 zsh.texi:4754 zsh.texi:4756 zsh.texi:4919
#, no-wrap
msgid "Process Substitution"
msgstr ""

#. type: node
#: zsh.texi:4284 zsh.texi:4754 zsh.texi:4919 zsh.texi:4921 zsh.texi:6249
#, no-wrap
msgid "Parameter Expansion"
msgstr ""

#. type: node
#: zsh.texi:4285 zsh.texi:4919 zsh.texi:6249 zsh.texi:6251 zsh.texi:6276
#, no-wrap
msgid "Command Substitution"
msgstr ""

#. type: node
#: zsh.texi:4286 zsh.texi:6249 zsh.texi:6276 zsh.texi:6278 zsh.texi:6288
#, no-wrap
msgid "Arithmetic Expansion"
msgstr ""

#. type: node
#: zsh.texi:4287 zsh.texi:6276 zsh.texi:6288 zsh.texi:6290 zsh.texi:6364
#, no-wrap
msgid "Brace Expansion"
msgstr ""

#. type: table
#: zsh.texi:4294
msgid ""
"These five are performed in left-to-right fashion.  On each argument, any of "
"the five steps that are needed are performed one after the other.  Hence, "
"for example, all the parts of parameter expansion are completed before "
"command substitution is started.  After these expansions, all unquoted "
"occurrences of the characters `@t{\\}',`@t{'}' and `@t{\"}' are removed."
msgstr ""

#. type: node
#: zsh.texi:4295 zsh.texi:6288 zsh.texi:6364 zsh.texi:6366 zsh.texi:6408
#: zsh.texi:6516 zsh.texi:6548 zsh.texi:6562 zsh.texi:6583
#, no-wrap
msgid "Filename Expansion"
msgstr ""

#. type: table
#: zsh.texi:4300
msgid ""
"If the @t{SH_FILE_EXPANSION} option is set, the order of expansion is "
"modified for compatibility with @cite{sh} and @cite{ksh}.  In that case "
"@emph{filename expansion} is performed immediately after @emph{alias "
"expansion}, preceding the set of five expansions mentioned above."
msgstr ""

#. type: cindex
#: zsh.texi:4301
#, no-wrap
msgid "globbing"
msgstr ""

#. type: table
#: zsh.texi:4304
msgid ""
"This expansion, commonly referred to as @cite{globbing}, is always done "
"last."
msgstr ""

#. type: Plain text
#: zsh.texi:4309
msgid "The following sections explain the types of expansion in detail."
msgstr ""

#. type: t{#1}
#: zsh.texi:4325 zsh.texi:13950 zsh.texi:13951 zsh.texi:29750 zsh.texi:29751
#, no-wrap
msgid "history"
msgstr ""

#. type: cindex
#: zsh.texi:4326
#, no-wrap
msgid "history expansion"
msgstr ""

#. type: cindex
#: zsh.texi:4327
#, no-wrap
msgid "expansion, history"
msgstr ""

#. type: Plain text
#: zsh.texi:4331
msgid ""
"History expansion allows you to use words from previous command lines in the "
"command line you are typing.  This simplifies spelling corrections and the "
"repetition of complicated commands or arguments."
msgstr ""

#. type: vindex
#: zsh.texi:4333
#, no-wrap
msgid "HISTSIZE, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:4341
msgid ""
"Immediately before execution, each command is saved in the history list, the "
"size of which is controlled by the @t{HISTSIZE} parameter.  The one most "
"recent command is always retained in any case.  Each saved command in the "
"history list is called a history @emph{event} and is assigned a number, "
"beginning with 1 (one) when the shell starts up.  The history number that "
"you may see in your prompt (see @ref{Prompt Expansion}) is the number that "
"is to be assigned to the @emph{next} command."
msgstr ""

#. type: menuentry
#: zsh.texi:4348
msgid "Overview::"
msgstr ""

#. type: menuentry
#: zsh.texi:4348
msgid "Event Designators::"
msgstr ""

#. type: menuentry
#: zsh.texi:4348
msgid "Word Designators::"
msgstr ""

#. type: subsection
#: zsh.texi:4348 zsh.texi:4463 zsh.texi:4503 zsh.texi:4505
#, no-wrap
msgid "Modifiers"
msgstr ""

#. type: subsection
#: zsh.texi:4349 zsh.texi:4351 zsh.texi:4416 zsh.texi:21184
#, no-wrap
msgid "Overview"
msgstr ""

#. type: node
#: zsh.texi:4349 zsh.texi:4416 zsh.texi:4418 zsh.texi:4463
#, no-wrap
msgid "Event Designators"
msgstr ""

#. type: Plain text
#: zsh.texi:4358
msgid ""
"A history expansion begins with the first character of the @t{histchars} "
"parameter, which is `@t{!}' by default, and may occur anywhere on the "
"command line, including inside double quotes (but not inside single quotes "
"@t{'...'} or C-style quotes @t{$'...'} nor when escaped with a backslash)."
msgstr ""

#. type: Plain text
#: zsh.texi:4364
msgid ""
"The first character is followed by an optional event designator (@ref{Event "
"Designators}) and then an optional word designator (@ref{Word Designators}); "
"if neither of these designators is present, no history expansion occurs."
msgstr ""

#. type: Plain text
#: zsh.texi:4370
msgid ""
"Input lines containing history expansions are echoed after being expanded, "
"but before any other expansions take place and before the command is "
"executed.  It is this expanded form that is recorded as the history event "
"for later references."
msgstr ""

#. type: Plain text
#: zsh.texi:4373
msgid "History expansions do not nest."
msgstr ""

#. type: Plain text
#: zsh.texi:4379
msgid ""
"By default, a history reference with no event designator refers to the same "
"event as any preceding history reference on that command line; if it is the "
"only history reference in a command, it refers to the previous command."
msgstr ""

#. type: pindex
#: zsh.texi:4379
#, no-wrap
msgid "CSH_JUNKIE_HISTORY, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:4383
msgid ""
"However, if the option @t{CSH_JUNKIE_HISTORY} is set, then every history "
"reference with no event specification @emph{always} refers to the previous "
"command."
msgstr ""

#. type: Plain text
#: zsh.texi:4394
msgid ""
"For example, `@t{!}' is the event designator for the previous command, so "
"`@t{!!:1}' always refers to the first word of the previous command, and "
"`@t{!!$}' always refers to the last word of the previous command.  With "
"@t{CSH_JUNKIE_HISTORY} set, then `@t{!:1}' and `@t{!$}' function in the same "
"manner as `@t{!!:1}' and `@t{!!$}', respectively.  Conversely, if "
"@t{CSH_JUNKIE_HISTORY} is unset, then `@t{!:1}' and `@t{!$}' refer to the "
"first and last words, respectively, of the same event referenced by the "
"nearest other history reference preceding them on the current command line, "
"or to the previous command if there is no preceding reference."
msgstr ""

#. type: Plain text
#: zsh.texi:4404
msgid ""
"The character sequence `@t{^}@var{foo}@t{^}@var{bar}' (where `@t{^}' is "
"actually the second character of the @t{histchars} parameter)  repeats the "
"last command, replacing the string @var{foo} with @var{bar}.  More "
"precisely, the sequence `@t{^}@var{foo}@t{^}@var{bar}@t{^}' is synonymous "
"with `@t{!!:s}@t{^}@var{foo}@t{^}@var{bar}@t{^}', hence other modifiers (see "
"@ref{Modifiers}) may follow the final `@t{^}'.  In particular, "
"`@t{^}@var{foo}@t{^}@var{bar}@t{^:G}' performs a global substitution."
msgstr ""

#. type: Plain text
#: zsh.texi:4411
msgid ""
"If the shell encounters the character sequence `@t{!\"}' in the input, the "
"history mechanism is temporarily disabled until the current list (see "
"@ref{Shell Grammar}) is fully parsed.  The `@t{!\"}' is removed from the "
"input, and any subsequent `@t{!}' characters have no special significance."
msgstr ""

#. type: findex
#: zsh.texi:4413
#, no-wrap
msgid "fc, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:4416
msgid ""
"A less convenient but more comprehensible form of command history support is "
"provided by the @t{fc} builtin."
msgstr ""

#. type: node
#: zsh.texi:4416 zsh.texi:4463 zsh.texi:4465 zsh.texi:4503
#, no-wrap
msgid "Word Designators"
msgstr ""

#. type: cindex
#: zsh.texi:4420
#, no-wrap
msgid "history event designators"
msgstr ""

#. type: cindex
#: zsh.texi:4421
#, no-wrap
msgid "event designators, history"
msgstr ""

#. type: Plain text
#: zsh.texi:4426
msgid ""
"An event designator is a reference to a command-line entry in the history "
"list.  In the list below, remember that the initial @t{`!'} in each item may "
"be changed to another character by setting the @t{histchars} parameter."
msgstr ""

#. type: table
#: zsh.texi:4434
msgid ""
"Start a history expansion, except when followed by a blank, newline, `@t{=}' "
"or `@t{(}'.  If followed immediately by a word designator (@ref{Word "
"Designators}), this forms a history reference with no event designator "
"(@ref{Overview})."
msgstr ""

#. type: t{#1}
#: zsh.texi:4435 zsh.texi:38837
#, no-wrap
msgid "!!"
msgstr ""

#. type: table
#: zsh.texi:4439
msgid ""
"Refer to the previous command.  By itself, this expansion repeats the "
"previous command."
msgstr ""

#. type: item
#: zsh.texi:4440
#, no-wrap
msgid "@t{!}@var{n}"
msgstr ""

#. type: table
#: zsh.texi:4442
msgid "Refer to command-line @var{n}."
msgstr ""

#. type: item
#: zsh.texi:4443
#, no-wrap
msgid "@t{!-}@var{n}"
msgstr ""

#. type: table
#: zsh.texi:4445
msgid "Refer to the current command-line minus @var{n}."
msgstr ""

#. type: item
#: zsh.texi:4446
#, no-wrap
msgid "@t{!}@var{str}"
msgstr ""

#. type: table
#: zsh.texi:4448
msgid "Refer to the most recent command starting with @var{str}."
msgstr ""

#. type: item
#: zsh.texi:4449
#, no-wrap
msgid "@t{!?}@var{str}[@t{?}]"
msgstr ""

#. type: table
#: zsh.texi:4453
msgid ""
"Refer to the most recent command containing @var{str}.  The trailing `@t{?}' "
"is necessary if this reference is to be followed by a modifier or followed "
"by any text that is not to be considered part of @var{str}."
msgstr ""

#. type: t{#1}
#: zsh.texi:4454
#, no-wrap
msgid "!#"
msgstr ""

#. type: table
#: zsh.texi:4458
msgid ""
"Refer to the current command line typed in so far.  The line is treated as "
"if it were complete up to and including the word before the one with the "
"`@t{!#}' reference."
msgstr ""

#. type: item
#: zsh.texi:4459
#, no-wrap
msgid "@t{!@{}...@t{@}}"
msgstr ""

#. type: table
#: zsh.texi:4461
msgid "Insulate a history reference from adjacent characters (if necessary)."
msgstr ""

#. type: cindex
#: zsh.texi:4467
#, no-wrap
msgid "history word designators"
msgstr ""

#. type: cindex
#: zsh.texi:4468
#, no-wrap
msgid "word designators, history"
msgstr ""

#. type: Plain text
#: zsh.texi:4475
msgid ""
"A word designator indicates which word or words of a given command line are "
"to be included in a history reference.  A `@t{:}' usually separates the "
"event specification from the word designator.  It may be omitted only if the "
"word designator begins with a `@t{^}', `@t{$}', `@t{*}', `@t{-}' or "
"`@t{%}'.  Word designators include:"
msgstr ""

#. type: t{#1}
#: zsh.texi:4478 zsh.texi:5687 zsh.texi:8540 zsh.texi:30662 zsh.texi:38805
#, no-wrap
msgid "0"
msgstr ""

#. type: table
#: zsh.texi:4480
msgid "The first input word (command)."
msgstr ""

#. type: t{#1}
#: zsh.texi:4480 zsh.texi:5506 zsh.texi:7515 zsh.texi:7533
#, no-wrap
msgid "n"
msgstr ""

#. type: table
#: zsh.texi:4482
msgid "The @var{n}th argument."
msgstr ""

#. type: table
#: zsh.texi:4484
msgid "The first argument.  That is, @t{1}."
msgstr ""

#. type: vindex
#: zsh.texi:4484 zsh.texi:8507
#, no-wrap
msgid "$"
msgstr ""

#. type: table
#: zsh.texi:4486
msgid "The last argument."
msgstr ""

#. type: t{#1}
#: zsh.texi:4486 zsh.texi:5378 zsh.texi:7279
#, no-wrap
msgid "%"
msgstr ""

#. type: table
#: zsh.texi:4488
msgid "The word matched by (the most recent) @t{?}@var{str} search."
msgstr ""

#. type: item
#: zsh.texi:4488
#, no-wrap
msgid "@var{x}@t{-}@var{y}"
msgstr ""

#. type: table
#: zsh.texi:4490
msgid "A range of words; @var{x} defaults to @t{0}."
msgstr ""

#. type: vindex
#: zsh.texi:4490 zsh.texi:5959 zsh.texi:6621 zsh.texi:7276 zsh.texi:8520
#, no-wrap
msgid "*"
msgstr ""

#. type: table
#: zsh.texi:4492
msgid "All the arguments, or a null value if there are none."
msgstr ""

#. type: item
#: zsh.texi:4492
#, no-wrap
msgid "@var{x}@t{*}"
msgstr ""

#. type: table
#: zsh.texi:4494
msgid "Abbreviates `@var{x}@t{-$}'."
msgstr ""

#. type: item
#: zsh.texi:4494
#, no-wrap
msgid "@var{x}@t{-}"
msgstr ""

#. type: table
#: zsh.texi:4496
msgid "Like `@var{x}@t{*}' but omitting word @t{$}."
msgstr ""

#. type: Plain text
#: zsh.texi:4503
msgid ""
"Note that a `@t{%}' word designator works only when used in one of `@t{!%}', "
"`@t{!:%}' or `@t{!?}@var{str}@t{?:%}', and only when used after a @t{!?} "
"expansion (possibly in an earlier command).  Anything else results in an "
"error, although the error may not be the most obvious one."
msgstr ""

#. type: t{#1}
#: zsh.texi:4507 zsh.texi:21627
#, no-wrap
msgid "modifiers"
msgstr ""

#. type: cindex
#: zsh.texi:4508
#, no-wrap
msgid "colon modifiers"
msgstr ""

#. type: cindex
#: zsh.texi:4509
#, no-wrap
msgid "history modifiers"
msgstr ""

#. type: cindex
#: zsh.texi:4510
#, no-wrap
msgid "globbing modifiers"
msgstr ""

#. type: cindex
#: zsh.texi:4511
#, no-wrap
msgid "parameter modifiers"
msgstr ""

#. type: Plain text
#: zsh.texi:4517
msgid ""
"After the optional word designator, you can add a sequence of one or more of "
"the following modifiers, each preceded by a `@t{:}'.  These modifiers also "
"work on the result of @emph{filename generation} and @emph{parameter "
"expansion}, except where noted."
msgstr ""

#. type: t{#1}
#: zsh.texi:4520 zsh.texi:5416 zsh.texi:7539
#, no-wrap
msgid "a"
msgstr ""

#. type: table
#: zsh.texi:4524
msgid ""
"Turn a file name into an absolute path: prepends the current directory, if "
"necessary; remove `@t{.}' path segments; and remove `@t{..}' path segments "
"and the segments that immediately precede them."
msgstr ""

#. type: table
#: zsh.texi:4533
msgid ""
"This transformation is agnostic about what is in the filesystem, i.e. is on "
"the logical, not the physical directory.  It takes place in the same manner "
"as when changing directories when neither of the options @t{CHASE_DOTS} or "
"@t{CHASE_LINKS} is set.  For example, `@t{/before/here/../after}' is always "
"transformed to `@t{/before/after}', regardless of whether `@t{/before/here}' "
"exists or what kind of object (dir, file, symlink, etc.) it is."
msgstr ""

#. type: t{#1}
#: zsh.texi:4534 zsh.texi:5393 zsh.texi:7297
#, no-wrap
msgid "A"
msgstr ""

#. type: table
#: zsh.texi:4538
msgid ""
"Turn a file name into an absolute path as the `@t{a}' modifier does, and "
"@emph{then} pass the result through the @t{realpath(3)} library function to "
"resolve symbolic links."
msgstr ""

#. type: table
#: zsh.texi:4543
msgid ""
"Note: on systems that do not have a @t{realpath(3)} library function, "
"symbolic links are not resolved, so on those systems `@t{a}' and `@t{A}' are "
"equivalent."
msgstr ""

#. type: table
#: zsh.texi:4547
msgid ""
"Note: @t{foo:A} and @t{realpath(foo)} are different on some inputs.  For "
"@t{realpath(foo)} semantics, see the `@t{P}` modifier."
msgstr ""

#. type: table
#: zsh.texi:4554
msgid ""
"Resolve a command name into an absolute path by searching the command path "
"given by the @t{PATH} variable.  This does not work for commands containing "
"directory parts.  Note also that this does not usually work as a glob "
"qualifier unless a file of the same name is found in the current directory."
msgstr ""

#. type: table
#: zsh.texi:4560
msgid ""
"Remove all but the part of the filename extension following the `@t{.}'; see "
"the definition of the filename extension in the description of the @t{r} "
"modifier below.  Note that according to that definition the result will be "
"empty if the string ends with a `@t{.}'."
msgstr ""

#. type: item
#: zsh.texi:4561
#, no-wrap
msgid "@t{h} [ @var{digits} ]"
msgstr ""

#. type: table
#: zsh.texi:4578
msgid ""
"Remove a trailing pathname component, shortening the path by one directory "
"level: this is the `head' of the pathname.  This works like `@t{dirname}'.  "
"If the @t{h} is followed immediately (with no spaces or other separator) by "
"any number of decimal digits, and the value of the resulting number is "
"non-zero, that number of leading components is preserved instead of the "
"final component being removed.  In an absolute path the leading `@t{/}' is "
"the first component, so, for example, if @t{var=/my/path/to/something}, then "
"@t{$@{var:h3@}} substitutes @t{/my/path}.  Consecutive `/'s are treated the "
"same as a single `/'.  In parameter substitution, digits may only be used if "
"the expression is in braces, so for example the short form substitution "
"@t{$var:h2} is treated as @t{$@{var:h@}2}, not as @t{$@{var:h2@}}.  No "
"restriction applies to the use of digits in history substitution or globbing "
"qualifiers.  If more components are requested than are present, the entire "
"path is substituted (so this does not trigger a `failed modifier' error in "
"history expansion)."
msgstr ""

#. type: table
#: zsh.texi:4581
msgid "Convert the words to all lowercase."
msgstr ""

#. type: t{#1}
#: zsh.texi:4582 zsh.texi:5702 zsh.texi:7273 zsh.texi:8137 zsh.texi:36306
#, no-wrap
msgid "p"
msgstr ""

#. type: table
#: zsh.texi:4585
msgid ""
"Print the new command but do not execute it.  Only works with history "
"expansion."
msgstr ""

#. type: t{#1}
#: zsh.texi:4586 zsh.texi:5535 zsh.texi:31674
#, no-wrap
msgid "P"
msgstr ""

#. type: table
#: zsh.texi:4592
msgid ""
"Turn a file name into an absolute path, like @t{realpath(3)}.  The resulting "
"path will be absolute, will refer to the same directory entry as the input "
"filename, and none of its components will be symbolic links or equal to "
"`@t{.}' or `@t{..}'."
msgstr ""

#. type: table
#: zsh.texi:4596
msgid ""
"Unlike @t{realpath(3)}, non-existent trailing components are permitted and "
"preserved."
msgstr ""

#. type: t{#1}
#: zsh.texi:4597 zsh.texi:5558 zsh.texi:7031
#, no-wrap
msgid "q"
msgstr ""

#. type: table
#: zsh.texi:4602
msgid ""
"Quote the substituted words, escaping further substitutions.  Works with "
"history expansion and parameter expansion, though for parameters it is only "
"useful if the resulting text is to be re-evaluated such as by @t{eval}."
msgstr ""

#. type: t{#1}
#: zsh.texi:4603 zsh.texi:5584
#, no-wrap
msgid "Q"
msgstr ""

#. type: table
#: zsh.texi:4605
msgid "Remove one level of quotes from the substituted words."
msgstr ""

#. type: t{#1}
#: zsh.texi:4606 zsh.texi:7288 zsh.texi:8146 zsh.texi:14410 zsh.texi:14411
#, no-wrap
msgid "r"
msgstr ""

#. type: table
#: zsh.texi:4613
msgid ""
"Remove a filename extension leaving the root name.  Strings with no filename "
"extension are not altered.  A filename extension is a `@t{.}' followed by "
"any number of characters (including zero) that are neither `@t{.}' nor "
"`@t{/}' and that continue to the end of the string.  For example, the "
"extension of `@t{foo.orig.c}' is `@t{.c}', and `@t{dir.c/foo}' has no "
"extension."
msgstr ""

#. type: item
#: zsh.texi:4614
#, no-wrap
msgid "@t{s/}@var{l}@t{/}@var{r}[@t{/}]"
msgstr ""

#. type: table
#: zsh.texi:4620
msgid ""
"Substitute @var{r} for @var{l} as described below.  The substitution is done "
"only for the first string that matches @var{l}.  For arrays and for filename "
"generation, this applies to each word of the expanded text.  See below for "
"further notes on substitutions."
msgstr ""

#. type: table
#: zsh.texi:4626
msgid ""
"The forms `@t{gs/}@var{l}@t{/}@var{r}' and "
"`@t{s/}@var{l}@t{/}@var{r}@t{/:G}' perform global substitution, "
"i.e. substitute every occurrence of @var{r} for @var{l}.  Note that the "
"@t{g} or @t{:G} must appear in exactly the position shown."
msgstr ""

#. type: table
#: zsh.texi:4629
msgid "See further notes on this form of substitution below."
msgstr ""

#. type: table
#: zsh.texi:4635
msgid ""
"Repeat the previous @t{s} substitution.  Like @t{s}, may be preceded "
"immediately by a @t{g}.  In parameter expansion the @t{&} must appear inside "
"braces, and in filename generation it must be quoted with a backslash."
msgstr ""

#. type: item
#: zsh.texi:4636
#, no-wrap
msgid "@t{t} [ @var{digits} ]"
msgstr ""

#. type: table
#: zsh.texi:4642
msgid ""
"Remove all leading pathname components, leaving the final component (tail).  "
"This works like `@t{basename}'.  Any trailing slashes are first removed.  "
"Decimal digits are handled as described above for (h), but in this case that "
"number of trailing components is preserved instead of the default 1; 0 is "
"treated the same as 1."
msgstr ""

#. type: t{#1}
#: zsh.texi:4643 zsh.texi:5645 zsh.texi:7043
#, no-wrap
msgid "u"
msgstr ""

#. type: table
#: zsh.texi:4645
msgid "Convert the words to all uppercase."
msgstr ""

#. type: t{#1}
#: zsh.texi:4646 zsh.texi:7294 zsh.texi:40267
#, no-wrap
msgid "x"
msgstr ""

#. type: table
#: zsh.texi:4649
msgid ""
"Like @t{q}, but break into words at whitespace.  Does not work with "
"parameter expansion."
msgstr ""

#. type: Plain text
#: zsh.texi:4665
msgid ""
"The @t{s/}@var{l}@t{/}@var{r}@t{/} substitution works as follows.  By "
"default the left-hand side of substitutions are not patterns, but character "
"strings.  Any character can be used as the delimiter in place of `@t{/}'.  A "
"backslash quotes the delimiter character.  The character `@t{&}', in the "
"right-hand-side @var{r}, is replaced by the text from the left-hand-side "
"@var{l}.  The `@t{&}' can be quoted with a backslash.  A null @var{l} uses "
"the previous string either from the previous @var{l} or from the contextual "
"scan string @var{s} from `@t{!?}@var{s}'.  You can omit the rightmost "
"delimiter if a newline immediately follows @var{r}; the rightmost `@t{?}' in "
"a context scan can similarly be omitted.  Note the same record of the last "
"@var{l} and @var{r} is maintained across all forms of expansion."
msgstr ""

#. type: Plain text
#: zsh.texi:4669
msgid ""
"Note that if a `@t{&}' is used within glob qualifiers an extra backslash is "
"needed as a @t{&} is a special character in this case."
msgstr ""

#. type: Plain text
#: zsh.texi:4683
msgid ""
"Also note that the order of expansions affects the interpretation of @var{l} "
"and @var{r}.  When used in a history expansion, which occurs before any "
"other expansions, @var{l} and @var{r} are treated as literal strings (except "
"as explained for @t{HIST_SUBST_PATTERN} below).  When used in parameter "
"expansion, the replacement of @var{r} into the parameter's value is done "
"first, and then any additional process, parameter, command, arithmetic, or "
"brace references are applied, which may evaluate those substitutions and "
"expansions more than once if @var{l} appears more than once in the starting "
"value.  When used in a glob qualifier, any substitutions or expansions are "
"performed once at the time the qualifier is parsed, even before the `@t{:s}' "
"expression itself is divided into @var{l} and @var{r} sides."
msgstr ""

#. type: Plain text
#: zsh.texi:4698
msgid ""
"If the option @t{HIST_SUBST_PATTERN} is set, @var{l} is treated as a pattern "
"of the usual form described in @ref{Filename Generation}.  This can be used "
"in all the places where modifiers are available; note, however, that in "
"globbing qualifiers parameter substitution has already taken place, so "
"parameters in the replacement string should be quoted to ensure they are "
"replaced at the correct time.  Note also that complicated patterns used in "
"globbing qualifiers may need the extended glob qualifier notation "
"@t{(#q:s/}@var{...}@t{/}@var{...}@t{/)} in order for the shell to recognize "
"the expression as a glob qualifier.  Further, note that bad patterns in the "
"substitution are not subject to the @t{NO_BAD_PATTERN} option so will cause "
"an error."
msgstr ""

#. type: Plain text
#: zsh.texi:4706
msgid ""
"When @t{HIST_SUBST_PATTERN} is set, @var{l} may start with a @t{#} to "
"indicate that the pattern must match at the start of the string to be "
"substituted, and a @t{%} may appear at the start or after an @t{#} to "
"indicate that the pattern must match at the end of the string to be "
"substituted.  The @t{%} or @t{#} may be quoted with two backslashes."
msgstr ""

#. type: Plain text
#: zsh.texi:4710
msgid ""
"For example, the following piece of filename generation code with the "
"@t{EXTENDED_GLOB} option:"
msgstr ""

#. type: example
#: zsh.texi:4714
#, no-wrap
msgid "print -r -- *.c(#q:s/#%(#b)s(*).c/'S$@{match[1]@}.C'/)\n"
msgstr ""

#. type: Plain text
#: zsh.texi:4724
msgid ""
"takes the expansion of @t{*.c} and applies the glob qualifiers in the "
"@t{(#q}@var{...}@t{)} expression, which consists of a substitution modifier "
"anchored to the start and end of each word (@t{#%}).  This turns on "
"backreferences (@t{(#b)}), so that the parenthesised subexpression is "
"available in the replacement string as @t{$@{match[1]@}}.  The replacement "
"string is quoted so that the parameter is not substituted before the start "
"of filename generation."
msgstr ""

#. type: Plain text
#: zsh.texi:4729
msgid ""
"The following @t{f}, @t{F}, @t{w} and @t{W} modifiers work only with "
"parameter expansion and filename generation.  They are listed here to "
"provide a single point of reference for all modifiers."
msgstr ""

#. type: t{#1}
#: zsh.texi:4732 zsh.texi:5475 zsh.texi:8141
#, no-wrap
msgid "f"
msgstr ""

#. type: table
#: zsh.texi:4735
msgid ""
"Repeats the immediately (without a colon) following modifier until the "
"resulting word doesn't change any more."
msgstr ""

#. type: item
#: zsh.texi:4736
#, no-wrap
msgid "@t{F:}@var{expr}@t{:}"
msgstr ""

#. type: table
#: zsh.texi:4743
msgid ""
"Like @t{f}, but repeats only @var{n} times if the expression @var{expr} "
"evaluates to @var{n}.  Any character can be used instead of the `@t{:}'; if "
"`@t{(}', `@t{[}', or `@t{@{}' is used as the opening delimiter, the closing "
"delimiter should be '@t{)}', `@t{]}', or `@t{@}}', respectively."
msgstr ""

#. type: table
#: zsh.texi:4747
msgid "Makes the immediately following modifier work on each word in the string."
msgstr ""

#. type: item
#: zsh.texi:4748
#, no-wrap
msgid "@t{W:}@var{sep}@t{:}"
msgstr ""

#. type: table
#: zsh.texi:4752
msgid ""
"Like @t{w} but words are considered to be the parts of the string that are "
"separated by @var{sep}. Any character can be used instead of the `@t{:}'; "
"opening parentheses are handled specially, see above."
msgstr ""

#. type: cindex
#: zsh.texi:4758
#, no-wrap
msgid "process substitution"
msgstr ""

#. type: cindex
#: zsh.texi:4759
#, no-wrap
msgid "substitution, process"
msgstr ""

#. type: Plain text
#: zsh.texi:4771
msgid ""
"Each part of a command argument that takes the form `@t{<(}@var{list}@t{)}', "
"`@t{>(}@var{list}@t{)}' or `@t{=(}@var{list}@t{)}' is subject to process "
"substitution.  The expression may be preceded or followed by other strings "
"except that, to prevent clashes with commonly occurring strings and "
"patterns, the last form must occur at the start of a command argument, and "
"the forms are only expanded when first parsing command or assignment "
"arguments.  Process substitutions may be used following redirection "
"operators; in this case, the substitution must appear with no trailing "
"string."
msgstr ""

#. type: Plain text
#: zsh.texi:4778
msgid ""
"Note that `@t{<<(}@var{list}@t{)}' is not a special syntax; it is equivalent "
"to `@t{< <(}@var{list}@t{)}', redirecting standard input from the result of "
"process substitution.  Hence all the following documentation applies.  The "
"second form (with the space)  is recommended for clarity."
msgstr ""

#. type: Plain text
#: zsh.texi:4789
msgid ""
"In the case of the @t{<} or @t{>} forms, the shell runs the commands in "
"@var{list} as a subprocess of the job executing the shell command line.  If "
"the system supports the @t{/dev/fd} mechanism, the command argument is the "
"name of the device file corresponding to a file descriptor; otherwise, if "
"the system supports named pipes (FIFOs), the command argument will be a "
"named pipe.  If the form with @t{>} is selected then writing on this special "
"file will provide input for @var{list}.  If @t{<} is used, then the file "
"passed as an argument will be connected to the output of the @var{list} "
"process.  For example,"
msgstr ""

#. type: example
#: zsh.texi:4794
#, no-wrap
msgid ""
"@t{paste <(cut -f1} @var{file1}@t{) <(cut -f3} @var{file2}@t{) |\n"
"tee >(}@var{process1}@t{) >(}@var{process2}@t{) >/dev/null}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:4800
msgid ""
"cuts fields 1 and 3 from the files @var{file1} and @var{file2} respectively, "
"pastes the results together, and sends it to the processes @var{process1} "
"and @var{process2}."
msgstr ""

#. type: Plain text
#: zsh.texi:4809
msgid ""
"If @t{=(}@var{...}@t{)} is used instead of @t{<(}@var{...}@t{)}, then the "
"file passed as an argument will be the name of a temporary file containing "
"the output of the @var{list} process.  This may be used instead of the @t{<} "
"form for a program that expects to lseek (see lseek(2))  on the input file."
msgstr ""

#. type: Plain text
#: zsh.texi:4819
msgid ""
"There is an optimisation for substitutions of the form "
"@t{=(<<<}@var{arg}@t{)}, where @var{arg} is a single-word argument to the "
"here-string redirection @t{<<<}.  This form produces a file name containing "
"the value of @var{arg} after any substitutions have been performed.  This is "
"handled entirely within the current shell.  This is effectively the reverse "
"of the special form @t{$(<}@var{arg}@t{)} which treats @var{arg} as a file "
"name and replaces it with the file's contents."
msgstr ""

#. type: Plain text
#: zsh.texi:4833
msgid ""
"The @t{=} form is useful as both the @t{/dev/fd} and the named pipe "
"implementation of @t{<(}@var{...}@t{)} have drawbacks.  In the former case, "
"some programmes may automatically close the file descriptor in question "
"before examining the file on the command line, particularly if this is "
"necessary for security reasons such as when the programme is running "
"setuid.  In the second case, if the programme does not actually open the "
"file, the subshell attempting to read from or write to the pipe will (in a "
"typical implementation, different operating systems may have different "
"behaviour) block for ever and have to be killed explicitly.  In both cases, "
"the shell actually supplies the information using a pipe, so that programmes "
"that expect to lseek (see lseek(2)) on the file will not work."
msgstr ""

#. type: Plain text
#: zsh.texi:4837
msgid ""
"Also note that the previous example can be more compactly and efficiently "
"written (provided the @t{MULTIOS} option is set) as:"
msgstr ""

#. type: example
#: zsh.texi:4841
#, no-wrap
msgid ""
"@t{paste <(cut -f1} @var{file1}@t{) <(cut -f3} @var{file2}@t{)} @t{> "
">(}@var{process1}@t{) > >(}@var{process2}@t{)}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:4846
msgid ""
"The shell uses pipes instead of FIFOs to implement the latter two process "
"substitutions in the above example."
msgstr ""

#. type: Plain text
#: zsh.texi:4855
msgid ""
"There is an additional problem with @t{>(}@var{process}@t{)}; when this is "
"attached to an external command, the parent shell does not wait for "
"@var{process} to finish and hence an immediately following command cannot "
"rely on the results being complete.  The problem and solution are the same "
"as described in the section @emph{MULTIOS} in @ref{Redirection}.  Hence in a "
"simplified version of the example above:"
msgstr ""

#. type: example
#: zsh.texi:4859
#, no-wrap
msgid ""
"@t{paste <(cut -f1} @var{file1}@t{) <(cut -f3} @var{file2}@t{)} @t{> "
">(}@var{process}@t{)}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:4864
msgid ""
"(note that no @t{MULTIOS} are involved), @var{process} will be run "
"asynchronously as far as the parent shell is concerned.  The workaround is:"
msgstr ""

#. type: example
#: zsh.texi:4868
#, no-wrap
msgid ""
"@t{@{ paste <(cut -f1} @var{file1}@t{) <(cut -f3} @var{file2}@t{) @}} @t{> "
">(}@var{process}@t{)}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:4873
msgid ""
"The extra processes here are spawned from the parent shell which will wait "
"for their completion."
msgstr ""

#. type: Plain text
#: zsh.texi:4881
msgid ""
"Another problem arises any time a job with a substitution that requires a "
"temporary file is disowned by the shell, including the case where `@t{&!}' "
"or `@t{&|}' appears at the end of a command containing a substitution.  In "
"that case the temporary file will not be cleaned up as the shell no longer "
"has any memory of the job.  A workaround is to use a subshell, for example,"
msgstr ""

#. type: example
#: zsh.texi:4885
#, no-wrap
msgid "(mycmd =(myoutput)) &!\n"
msgstr ""

#. type: Plain text
#: zsh.texi:4890
msgid ""
"as the forked subshell will wait for the command to finish then remove the "
"temporary file."
msgstr ""

#. type: Plain text
#: zsh.texi:4896
msgid ""
"A general workaround to ensure a process substitution endures for an "
"appropriate length of time is to pass it as a parameter to an anonymous "
"shell function (a piece of shell code that is run immediately with function "
"scope).  For example, this code:"
msgstr ""

#. type: example
#: zsh.texi:4903
#, no-wrap
msgid ""
"() @{\n"
"   print File $1:\n"
"   cat $1\n"
"@} =(print This be the verse)\n"
msgstr ""

#. type: Plain text
#: zsh.texi:4907
msgid "outputs something resembling the following"
msgstr ""

#. type: example
#: zsh.texi:4912
#, no-wrap
msgid ""
"File /tmp/zsh6nU0kS:\n"
"This be the verse\n"
msgstr ""

#. type: Plain text
#: zsh.texi:4917
msgid ""
"The temporary file created by the process substitution will be deleted when "
"the function exits."
msgstr ""

#. type: cindex
#: zsh.texi:4923
#, no-wrap
msgid "parameter expansion"
msgstr ""

#. type: cindex
#: zsh.texi:4924
#, no-wrap
msgid "expansion, parameter"
msgstr ""

#. type: Plain text
#: zsh.texi:4930
msgid ""
"The character `@t{$}' is used to introduce parameter expansions.  See "
"@ref{Parameters} for a description of parameters, including arrays, "
"associative arrays, and subscript notation to access individual array "
"elements."
msgstr ""

#. type: Plain text
#: zsh.texi:4937
msgid ""
"Note in particular the fact that words of unquoted parameters are not "
"automatically split on whitespace unless the option @t{SH_WORD_SPLIT} is "
"set; see references to this option below for more details.  This is an "
"important difference from other shells.  However, as in other shells, null "
"words are elided from unquoted parameters' expansions."
msgstr ""

#. type: Plain text
#: zsh.texi:4940
msgid "With default options, after the assignments:"
msgstr ""

#. type: example
#: zsh.texi:4945
#, no-wrap
msgid ""
"array=(\"first word\" \"\" \"third word\")\n"
"scalar=\"only word\"\n"
msgstr ""

#. type: Plain text
#: zsh.texi:4954
msgid ""
"then @t{$array} substitutes two words, `@t{first word}' and `@t{third "
"word}', and @t{$scalar} substitutes a single word `@t{only word}'.  Note "
"that second element of @t{array} was elided.  Scalar parameters can be "
"elided too if their value is null (empty).  To avoid elision, use quoting as "
"follows: @t{\"$scalar\"} for scalars and @t{\"$@{array[@@]@}\"} or "
"@t{\"$@{(@@)array@}\"} for arrays.  (The last two forms are equivalent.)"
msgstr ""

#. type: Plain text
#: zsh.texi:4960
msgid ""
"Parameter expansions can involve @emph{flags}, as in "
"`@t{$@{(@@kv)aliases@}}', and other operators, such as "
"`@t{$@{PREFIX:-\"/usr/local\"@}}'.  Parameter expansions can also be "
"nested.  These topics will be introduced below.  The full rules are "
"complicated and are noted at the end."
msgstr ""

#. type: Plain text
#: zsh.texi:4971
msgid ""
"In the expansions discussed below that require a pattern, the form of the "
"pattern is the same as that used for filename generation; see @ref{Filename "
"Generation}.  Note that these patterns, along with the replacement text of "
"any substitutions, are themselves subject to parameter expansion, command "
"substitution, and arithmetic expansion.  In addition to the following "
"operations, the colon modifiers described in @ref{Modifiers} in @ref{History "
"Expansion} can be applied: for example, @t{$@{i:s/foo/bar/@}} performs "
"string substitution on the expansion of parameter @t{$i}."
msgstr ""

#. type: Plain text
#: zsh.texi:4975
msgid ""
"In the following descriptions, `@var{word}' refers to a single word "
"substituted on the command line, not necessarily a space delimited word."
msgstr ""

#. type: item
#: zsh.texi:4978
#, no-wrap
msgid "@t{$@{}@var{name}@t{@}}"
msgstr ""

#. type: table
#: zsh.texi:4988
msgid ""
"The value, if any, of the parameter @var{name} is substituted.  The braces "
"are required if the expansion is to be followed by a letter, digit, or "
"underscore that is not to be interpreted as part of @var{name}.  In "
"addition, more complicated forms of substitution usually require the braces "
"to be present; exceptions, which only apply if the option @t{KSH_ARRAYS} is "
"not set, are a single subscript or any colon modifiers appearing after the "
"name, or any of the characters `@t{^}', `@t{=}', `@t{~}', `@t{#}' or `@t{+}' "
"appearing before the name, all of which work with or without braces."
msgstr ""

#. type: table
#: zsh.texi:4997
msgid ""
"If @var{name} is an array parameter, and the @t{KSH_ARRAYS} option is not "
"set, then the value of each element of @var{name} is substituted, one "
"element per word.  Otherwise, the expansion results in one word only; with "
"@t{KSH_ARRAYS}, this is the first element of an array.  No field splitting "
"is done on the result unless the @t{SH_WORD_SPLIT} option is set.  See also "
"the flags @t{=} and @t{s:}@var{string}@t{:}."
msgstr ""

#. type: item
#: zsh.texi:4998
#, no-wrap
msgid "@t{$@{+}@var{name}@t{@}}"
msgstr ""

#. type: table
#: zsh.texi:5001
msgid ""
"If @var{name} is the name of a set parameter `@t{1}' is substituted, "
"otherwise `@t{0}' is substituted."
msgstr ""

#. type: item
#: zsh.texi:5002
#, no-wrap
msgid "@t{$@{}@var{name}@t{-}@var{word}@t{@}}"
msgstr ""

#. type: itemx
#: zsh.texi:5003
#, no-wrap
msgid "@t{$@{}@var{name}@t{:-}@var{word}@t{@}}"
msgstr ""

#. type: table
#: zsh.texi:5007
msgid ""
"If @var{name} is set, or in the second form is non-null, then substitute its "
"value; otherwise substitute @var{word}.  In the second form @var{name} may "
"be omitted, in which case @var{word} is always substituted."
msgstr ""

#. type: item
#: zsh.texi:5008
#, no-wrap
msgid "@t{$@{}@var{name}@t{+}@var{word}@t{@}}"
msgstr ""

#. type: itemx
#: zsh.texi:5009
#, no-wrap
msgid "@t{$@{}@var{name}@t{:+}@var{word}@t{@}}"
msgstr ""

#. type: table
#: zsh.texi:5012
msgid ""
"If @var{name} is set, or in the second form is non-null, then substitute "
"@var{word}; otherwise substitute nothing."
msgstr ""

#. type: item
#: zsh.texi:5013
#, no-wrap
msgid "@t{$@{}@var{name}@t{=}@var{word}@t{@}}"
msgstr ""

#. type: itemx
#: zsh.texi:5014
#, no-wrap
msgid "@t{$@{}@var{name}@t{:=}@var{word}@t{@}}"
msgstr ""

#. type: itemx
#: zsh.texi:5015
#, no-wrap
msgid "@t{$@{}@var{name}@t{::=}@var{word}@t{@}}"
msgstr ""

#. type: table
#: zsh.texi:5020
msgid ""
"In the first form, if @var{name} is unset then set it to @var{word}; in the "
"second form, if @var{name} is unset or null then set it to @var{word}; and "
"in the third form, unconditionally set @var{name} to @var{word}.  In all "
"forms, the value of the parameter is then substituted."
msgstr ""

#. type: item
#: zsh.texi:5021
#, no-wrap
msgid "@t{$@{}@var{name}@t{?}@var{word}@t{@}}"
msgstr ""

#. type: itemx
#: zsh.texi:5022
#, no-wrap
msgid "@t{$@{}@var{name}@t{:?}@var{word}@t{@}}"
msgstr ""

#. type: table
#: zsh.texi:5027
msgid ""
"In the first form, if @var{name} is set, or in the second form if @var{name} "
"is both set and non-null, then substitute its value; otherwise, print "
"@var{word} and exit from the shell.  Interactive shells instead return to "
"the prompt.  If @var{word} is omitted, then a standard message is printed."
msgstr ""

#. type: Plain text
#: zsh.texi:5036
msgid ""
"In any of the above expressions that test a variable and substitute an "
"alternate @var{word}, note that you can use standard shell quoting in the "
"@var{word} value to selectively override the splitting done by the "
"@t{SH_WORD_SPLIT} option and the @t{=} flag, but not splitting by the "
"@t{s:}@var{string}@t{:} flag."
msgstr ""

#. type: Plain text
#: zsh.texi:5042
msgid ""
"In the following expressions, when @var{name} is an array and the "
"substitution is not quoted, or if the `@t{(@@)}' flag or the "
"@var{name}@t{[@@]} syntax is used, matching and replacement is performed on "
"each array element separately."
msgstr ""

#. type: item
#: zsh.texi:5045
#, no-wrap
msgid "@t{$@{}@var{name}@t{#}@var{pattern}@t{@}}"
msgstr ""

#. type: itemx
#: zsh.texi:5046
#, no-wrap
msgid "@t{$@{}@var{name}@t{##}@var{pattern}@t{@}}"
msgstr ""

#. type: table
#: zsh.texi:5054
msgid ""
"If the @var{pattern} matches the beginning of the value of @var{name}, then "
"substitute the value of @var{name} with the matched portion deleted; "
"otherwise, just substitute the value of @var{name}.  In the first form, the "
"smallest matching pattern is preferred; in the second form, the largest "
"matching pattern is preferred."
msgstr ""

#. type: item
#: zsh.texi:5055
#, no-wrap
msgid "@t{$@{}@var{name}@t{%}@var{pattern}@t{@}}"
msgstr ""

#. type: itemx
#: zsh.texi:5056
#, no-wrap
msgid "@t{$@{}@var{name}@t{%%}@var{pattern}@t{@}}"
msgstr ""

#. type: table
#: zsh.texi:5064
msgid ""
"If the @var{pattern} matches the end of the value of @var{name}, then "
"substitute the value of @var{name} with the matched portion deleted; "
"otherwise, just substitute the value of @var{name}.  In the first form, the "
"smallest matching pattern is preferred; in the second form, the largest "
"matching pattern is preferred."
msgstr ""

#. type: item
#: zsh.texi:5065
#, no-wrap
msgid "@t{$@{}@var{name}@t{:#}@var{pattern}@t{@}}"
msgstr ""

#. type: table
#: zsh.texi:5071
msgid ""
"If the @var{pattern} matches the value of @var{name}, then substitute the "
"empty string; otherwise, just substitute the value of @var{name}.  If "
"@var{name} is an array the matching array elements are removed (use the "
"`@t{(M)}' flag to remove the non-matched elements)."
msgstr ""

#. type: item
#: zsh.texi:5072
#, no-wrap
msgid "@t{$@{}@var{name}@t{:|}@var{arrayname}@t{@}}"
msgstr ""

#. type: table
#: zsh.texi:5079
msgid ""
"If @var{arrayname} is the name (N.B., not contents) of an array variable, "
"then any elements contained in @var{arrayname} are removed from the "
"substitution of @var{name}.  If the substitution is scalar, either because "
"@var{name} is a scalar variable or the expression is quoted, the elements of "
"@var{arrayname} are instead tested against the entire expression."
msgstr ""

#. type: item
#: zsh.texi:5080
#, no-wrap
msgid "@t{$@{}@var{name}@t{:*}@var{arrayname}@t{@}}"
msgstr ""

#. type: table
#: zsh.texi:5084
msgid ""
"Similar to the preceding substitution, but in the opposite sense, so that "
"entries present in both the original substitution and as elements of "
"@var{arrayname} are retained and others removed."
msgstr ""

#. type: item
#: zsh.texi:5085
#, no-wrap
msgid "@t{$@{}@var{name}@t{:^}@var{arrayname}@t{@}}"
msgstr ""

#. type: itemx
#: zsh.texi:5086
#, no-wrap
msgid "@t{$@{}@var{name}@t{:^^}@var{arrayname}@t{@}}"
msgstr ""

#. type: table
#: zsh.texi:5092
msgid ""
"Zips two arrays, such that the output array is twice as long as the shortest "
"(longest for `@t{:^^}') of @t{name} and @t{arrayname}, with the elements "
"alternatingly being picked from them. For `@t{:^}', if one of the input "
"arrays is longer, the output will stop when the end of the shorter array is "
"reached.  Thus,"
msgstr ""

#. type: example
#: zsh.texi:5096
#, no-wrap
msgid "a=(1 2 3 4); b=(a b); print $@{a:^b@}\n"
msgstr ""

#. type: table
#: zsh.texi:5102
msgid ""
"will output `@t{1 a 2 b}'.  For `@t{:^^}', then the input is repeated until "
"all of the longer array has been used up and the above will output `@t{1 a 2 "
"b 3 a 4 b}'."
msgstr ""

#. type: table
#: zsh.texi:5107
msgid ""
"Either or both inputs may be a scalar, they will be treated as an array of "
"length 1 with the scalar as the only element. If either array is empty, the "
"other array is output with no extra elements inserted."
msgstr ""

#. type: table
#: zsh.texi:5112
msgid ""
"Currently the following code will output `@t{a b}' and `@t{1}' as two "
"separate elements, which can be unexpected. The second print provides a "
"workaround which should continue to work if this is changed."
msgstr ""

#. type: example
#: zsh.texi:5116
#, no-wrap
msgid "a=(a b); b=(1 2); print -l \"$@{a:^b@}\"; print -l \"$@{$@{a:^b@}@}\"\n"
msgstr ""

#. type: item
#: zsh.texi:5118
#, no-wrap
msgid "@t{$@{}@var{name}@t{:}@var{offset}@t{@}}"
msgstr ""

#. type: itemx
#: zsh.texi:5119
#, no-wrap
msgid "@t{$@{}@var{name}@t{:}@var{offset}@t{:}@var{length}@t{@}}"
msgstr ""

#. type: table
#: zsh.texi:5124
msgid ""
"This syntax gives effects similar to parameter subscripting in the form "
"@t{$}@var{name}@t{[}@var{start}@t{,}@var{end}@t{]}, but is compatible with "
"other shells; note that both @var{offset} and @var{length} are interpreted "
"differently from the components of a subscript."
msgstr ""

#. type: table
#: zsh.texi:5132
msgid ""
"If @var{offset} is non-negative, then if the variable @var{name} is a scalar "
"substitute the contents starting @var{offset} characters from the first "
"character of the string, and if @var{name} is an array substitute elements "
"starting @var{offset} elements from the first element.  If @var{length} is "
"given, substitute that many characters or elements, otherwise the entire "
"rest of the scalar or array."
msgstr ""

#. type: table
#: zsh.texi:5139
msgid ""
"A positive @var{offset} is always treated as the offset of a character or "
"element in @var{name} from the first character or element of the array (this "
"is different from native zsh subscript notation).  Hence 0 refers to the "
"first character or element regardless of the setting of the option "
"@t{KSH_ARRAYS}."
msgstr ""

#. type: table
#: zsh.texi:5143
msgid ""
"A negative offset counts backwards from the end of the scalar or array, so "
"that -1 corresponds to the last character or element, and so on."
msgstr ""

#. type: table
#: zsh.texi:5149
msgid ""
"When positive, @var{length} counts from the @var{offset} position toward the "
"end of the scalar or array.  When negative, @var{length} counts back from "
"the end.  If this results in a position smaller than @var{offset}, a "
"diagnostic is printed and nothing is substituted."
msgstr ""

#. type: table
#: zsh.texi:5153
msgid ""
"The option @t{MULTIBYTE} is obeyed, i.e. the offset and length count "
"multibyte characters where appropriate."
msgstr ""

#. type: table
#: zsh.texi:5158
msgid ""
"@var{offset} and @var{length} undergo the same set of shell substitutions as "
"for scalar assignment; in addition, they are then subject to arithmetic "
"evaluation.  Hence, for example"
msgstr ""

#. type: example
#: zsh.texi:5165
#, no-wrap
msgid ""
"print $@{foo:3@}\n"
"print $@{foo: 1 + 2@}\n"
"print $@{foo:$(( 1 + 2))@}\n"
"print $@{foo:$(echo 1 + 2)@}\n"
msgstr ""

#. type: table
#: zsh.texi:5175
msgid ""
"all have the same effect, extracting the string starting at the fourth "
"character of @t{$foo} if the substitution would otherwise return a scalar, "
"or the array starting at the fourth element if @t{$foo} would return an "
"array.  Note that with the option @t{KSH_ARRAYS} @t{$foo} always returns a "
"scalar (regardless of the use of the offset syntax) and a form such as "
"@t{$@{foo[*]:3@}} is required to extract elements of an array named @t{foo}."
msgstr ""

#. type: table
#: zsh.texi:5188
msgid ""
"If @var{offset} is negative, the @t{-} may not appear immediately after the "
"@t{:} as this indicates the @t{$@{}@var{name}@t{:-}@var{word}@t{@}} form of "
"substitution.  Instead, a space may be inserted before the @t{-}.  "
"Furthermore, neither @var{offset} nor @var{length} may begin with an "
"alphabetic character or @t{&} as these are used to indicate history-style "
"modifiers.  To substitute a value from a variable, the recommended approach "
"is to precede it with a @t{$} as this signifies the intention (parameter "
"substitution can easily be rendered unreadable); however, as arithmetic "
"substitution is performed, the expression @t{$@{var: offs@}} does work, "
"retrieving the offset from @t{$offs}."
msgstr ""

#. type: table
#: zsh.texi:5198
msgid ""
"For further compatibility with other shells there is a special case for "
"array offset 0.  This usually accesses the first element of the array.  "
"However, if the substitution refers to the positional parameter array, "
"e.g. @t{$@@} or @t{$*}, then offset 0 instead refers to @t{$0}, offset 1 "
"refers to @t{$1}, and so on.  In other words, the positional parameter array "
"is effectively extended by prepending @t{$0}.  Hence @t{$@{*:0:1@}} "
"substitutes @t{$0} and @t{$@{*:1:1@}} substitutes @t{$1}."
msgstr ""

#. type: item
#: zsh.texi:5199
#, no-wrap
msgid "@t{$@{}@var{name}@t{/}@var{pattern}@t{/}@var{repl}@t{@}}"
msgstr ""

#. type: itemx
#: zsh.texi:5200
#, no-wrap
msgid "@t{$@{}@var{name}@t{//}@var{pattern}@t{/}@var{repl}@t{@}}"
msgstr ""

#. type: itemx
#: zsh.texi:5201
#, no-wrap
msgid "@t{$@{}@var{name}@t{:/}@var{pattern}@t{/}@var{repl}@t{@}}"
msgstr ""

#. type: table
#: zsh.texi:5211
msgid ""
"Replace the longest possible match of @var{pattern} in the expansion of "
"parameter @var{name} by string @var{repl}.  The first form replaces just the "
"first occurrence, the second form all occurrences, and the third form "
"replaces only if @var{pattern} matches the entire string.  Both "
"@var{pattern} and @var{repl} are subject to double-quoted substitution, so "
"that expressions like @t{$@{name/$opat/$npat@}} will work, but obey the "
"usual rule that pattern characters in @t{$opat} are not treated specially "
"unless either the option @t{GLOB_SUBST} is set, or @t{$opat} is instead "
"substituted as @t{$@{~opat@}}."
msgstr ""

#. type: table
#: zsh.texi:5223
msgid ""
"The @var{pattern} may begin with a `@t{#}', in which case the @var{pattern} "
"must match at the start of the string, or `@t{%}', in which case it must "
"match at the end of the string, or `@t{#%}' in which case the @var{pattern} "
"must match the entire string.  The @var{repl} may be an empty string, in "
"which case the final `@t{/}' may also be omitted.  To quote the final "
"`@t{/}' in other cases it should be preceded by a single backslash; this is "
"not necessary if the `@t{/}' occurs inside a substituted parameter.  Note "
"also that the `@t{#}', `@t{%}' and `@t{#%} are not active if they occur "
"inside a substituted parameter, even at the start."
msgstr ""

#. type: table
#: zsh.texi:5229
msgid ""
"If, after quoting rules apply, @t{$@{}@var{name}@t{@}} expands to an array, "
"the replacements act on each element individually.  Note also the effect of "
"the @t{I} and @t{S} parameter expansion flags below; however, the flags "
"@t{M}, @t{R}, @t{B}, @t{E} and @t{N} are not useful."
msgstr ""

#. type: example
#: zsh.texi:5238
#, no-wrap
msgid ""
"foo=\"twinkle twinkle little star\" sub=\"t*e\" rep=\"spy\"\n"
"print $@{foo//$@{~sub@}/$rep@}\n"
"print $@{(S)foo//$@{~sub@}/$rep@}\n"
msgstr ""

#. type: table
#: zsh.texi:5246
msgid ""
"Here, the `@t{~}' ensures that the text of @t{$sub} is treated as a pattern "
"rather than a plain string.  In the first case, the longest match for "
"@t{t*e} is substituted and the result is `@t{spy star}', while in the second "
"case, the shortest matches are taken and the result is `@t{spy spy lispy "
"star}'."
msgstr ""

#. type: item
#: zsh.texi:5247
#, no-wrap
msgid "@t{$@{#}@var{spec}@t{@}}"
msgstr ""

#. type: table
#: zsh.texi:5256
msgid ""
"If @var{spec} is one of the above substitutions, substitute the length in "
"characters of the result instead of the result itself.  If @var{spec} is an "
"array expression, substitute the number of elements of the result.  This has "
"the side-effect that joining is skipped even in quoted forms, which may "
"affect other sub-expressions in @var{spec}.  Note that `@t{^}', `@t{=}', and "
"`@t{~}', below, must appear to the left of `@t{#}' when these forms are "
"combined."
msgstr ""

#. type: table
#: zsh.texi:5264
msgid ""
"If the option @t{POSIX_IDENTIFIERS} is not set, and @var{spec} is a simple "
"name, then the braces are optional; this is true even for special parameters "
"so e.g. @t{$#-} and @t{$#*} take the length of the string @t{$-} and the "
"array @t{$*} respectively.  If @t{POSIX_IDENTIFIERS} is set, then braces are "
"required for the @t{#} to be treated in this fashion."
msgstr ""

#. type: item
#: zsh.texi:5265
#, no-wrap
msgid "@t{$@{^}@var{spec}@t{@}}"
msgstr ""

#. type: itemx
#: zsh.texi:5266
#, no-wrap
msgid "@t{$@{^^}@var{spec}@t{@}}"
msgstr ""

#. type: pindex
#: zsh.texi:5267
#, no-wrap
msgid "RC_EXPAND_PARAM, toggle"
msgstr ""

#. type: cindex
#: zsh.texi:5268
#, no-wrap
msgid "array expansion style, rc"
msgstr ""

#. type: cindex
#: zsh.texi:5269
#, no-wrap
msgid "rc, array expansion style"
msgstr ""

#. type: table
#: zsh.texi:5279
msgid ""
"Turn on the @t{RC_EXPAND_PARAM} option for the evaluation of @var{spec}; if "
"the `@t{^}' is doubled, turn it off.  When this option is set, array "
"expansions of the form @var{foo}@t{$@{}@var{xx}@t{@}}@var{bar}, where the "
"parameter @var{xx} is set to @t{(}@var{a b c}@t{)}, are substituted with "
"`@var{fooabar foobbar foocbar}' instead of the default `@var{fooa b cbar}'.  "
"Note that an empty array will therefore cause all arguments to be removed."
msgstr ""

#. type: table
#: zsh.texi:5289
msgid ""
"Internally, each such expansion is converted into the equivalent list for "
"brace expansion.  E.g., @t{$@{^var@}} becomes "
"@t{@{$var[1],$var[2],}...@t{@}}, and is processed as described in @ref{Brace "
"Expansion} below: note, however, the expansion happens immediately, with any "
"explicit brace expansion happening later.  If word splitting is also in "
"effect the @t{$var[}@var{N}@t{]} may themselves be split into different list "
"elements."
msgstr ""

#. type: item
#: zsh.texi:5290
#, no-wrap
msgid "@t{$@{=}@var{spec}@t{@}}"
msgstr ""

#. type: itemx
#: zsh.texi:5291
#, no-wrap
msgid "@t{$@{==}@var{spec}@t{@}}"
msgstr ""

#. type: pindex
#: zsh.texi:5292
#, no-wrap
msgid "SH_WORD_SPLIT, toggle"
msgstr ""

#. type: cindex
#: zsh.texi:5293
#, no-wrap
msgid "field splitting, sh style, parameter"
msgstr ""

#. type: cindex
#: zsh.texi:5294
#, no-wrap
msgid "sh, field splitting style, parameter"
msgstr ""

#. type: table
#: zsh.texi:5298
msgid ""
"Perform word splitting using the rules for @t{SH_WORD_SPLIT} during the "
"evaluation of @var{spec}, but regardless of whether the parameter appears in "
"double quotes; if the `@t{=}' is doubled, turn it off."
msgstr ""

#. type: vindex
#: zsh.texi:5298 zsh.texi:6261 zsh.texi:14415
#, no-wrap
msgid "IFS, use of"
msgstr ""

#. type: table
#: zsh.texi:5302
msgid ""
"This forces parameter expansions to be split into separate words before "
"substitution, using @t{IFS} as a delimiter.  This is done by default in most "
"other shells."
msgstr ""

#. type: table
#: zsh.texi:5307
msgid ""
"Note that splitting is applied to @var{word} in the assignment forms of "
"@var{spec} @emph{before} the assignment to @var{name} is performed.  This "
"affects the result of array assignments with the @t{A} flag."
msgstr ""

#. type: item
#: zsh.texi:5308
#, no-wrap
msgid "@t{$@{~}@var{spec}@t{@}}"
msgstr ""

#. type: itemx
#: zsh.texi:5309
#, no-wrap
msgid "@t{$@{~~}@var{spec}@t{@}}"
msgstr ""

#. type: pindex
#: zsh.texi:5310
#, no-wrap
msgid "GLOB_SUBST, toggle"
msgstr ""

#. type: table
#: zsh.texi:5317
msgid ""
"Turn on the @t{GLOB_SUBST} option for the evaluation of @var{spec}; if the "
"`@t{~}' is doubled, turn it off.  When this option is set, the string "
"resulting from the expansion will be interpreted as a pattern anywhere that "
"is possible, such as in filename expansion and filename generation and "
"pattern-matching contexts like the right hand side of the `@t{=}' and "
"`@t{!=}' operators in conditions."
msgstr ""

#. type: table
#: zsh.texi:5326
msgid ""
"In nested substitutions, note that the effect of the @t{~} applies to the "
"result of the current level of substitution.  A surrounding pattern "
"operation on the result may cancel it.  Hence, for example, if the parameter "
"@t{foo} is set to @t{*}, @t{$@{~foo//\\*/*.c@}} is substituted by the "
"pattern @t{*.c}, which may be expanded by filename generation, but "
"@t{$@{$@{~foo@}//\\*/*.c@}} substitutes to the string @t{*.c}, which will "
"not be further expanded."
msgstr ""

#. type: Plain text
#: zsh.texi:5341
msgid ""
"If a @t{$@{}...@t{@}} type parameter expression or a @t{$(}...@t{)} type "
"command substitution is used in place of @var{name} above, it is expanded "
"first and the result is used as if it were the value of @var{name}.  Thus it "
"is possible to perform nested operations: @t{$@{$@{foo#head@}%tail@}} "
"substitutes the value of @t{$foo} with both `@t{head}' and `@t{tail}' "
"deleted.  The form with @t{$(}...@t{)} is often useful in combination with "
"the flags described next; see the examples below.  Each @var{name} or nested "
"@t{$@{}...@t{@}} in a parameter expansion may also be followed by a "
"subscript expression as described in @ref{Array Parameters}."
msgstr ""

#. type: Plain text
#: zsh.texi:5351
msgid ""
"Note that double quotes may appear around nested expressions, in which case "
"only the part inside is treated as quoted; for example, "
"@t{$@{(f)\"$(foo)\"@}} quotes the result of @t{$(foo)}, but the flag "
"`@t{(f)}' (see below) is applied using the rules for unquoted expansions.  "
"Note further that quotes are themselves nested in this context; for example, "
"in @t{\"$@{(@@f)\"$(foo)\"@}\"}, there are two sets of quotes, one "
"surrounding the whole expression, the other (redundant) surrounding the "
"@t{$(foo)} as before."
msgstr ""

#. type: subsection
#: zsh.texi:5354
#, no-wrap
msgid "Parameter Expansion Flags"
msgstr ""

#. type: cindex
#: zsh.texi:5356
#, no-wrap
msgid "parameter expansion flags"
msgstr ""

#. type: cindex
#: zsh.texi:5357
#, no-wrap
msgid "flags, parameter expansion"
msgstr ""

#. type: cindex
#: zsh.texi:5358
#, no-wrap
msgid "substitution, parameter, flags"
msgstr ""

#. type: Plain text
#: zsh.texi:5365
msgid ""
"If the opening brace is directly followed by an opening parenthesis, the "
"string up to the matching closing parenthesis will be taken as a list of "
"flags.  In cases where repeating a flag is meaningful, the repetitions need "
"not be consecutive; for example, `(@t{q%q%q})' means the same thing as the "
"more readable `(@t{%%qqq})'.  The following flags are supported:"
msgstr ""

#. type: table
#: zsh.texi:5373
msgid ""
"Evaluate the resulting words as numeric expressions and interpret these as "
"character codes.  Output the corresponding characters.  Note that this form "
"is entirely distinct from use of the @t{#} without parentheses."
msgstr ""

#. type: table
#: zsh.texi:5377
msgid ""
"If the @t{MULTIBYTE} option is set and the number is greater than 127 "
"(i.e. not an ASCII character) it is treated as a Unicode character."
msgstr ""

#. type: table
#: zsh.texi:5385
msgid ""
"Expand all @t{%} escapes in the resulting words in the same way as in "
"prompts (see @ref{Prompt Expansion}). If this flag is given twice, full "
"prompt expansion is done on the resulting words, depending on the setting of "
"the @t{PROMPT_PERCENT}, @t{PROMPT_SUBST} and @t{PROMPT_BANG} options."
msgstr ""

#. type: vindex
#: zsh.texi:5386 zsh.texi:7267 zsh.texi:8532
#, no-wrap
msgid "@@"
msgstr ""

#. type: table
#: zsh.texi:5392
msgid ""
"In double quotes, array elements are put into separate words.  E.g., "
"`@t{\"$@{(@@)foo@}\"}' is equivalent to `@t{\"$@{foo[@@]@}\"}' and "
"`@t{\"$@{(@@)foo[1,2]@}\"}' is the same as `@t{\"$foo[1]\" \"$foo[2]\"}'.  "
"This is distinct from @emph{field splitting} by the @t{f}, @t{s} or @t{z} "
"flags, which still applies within each array element."
msgstr ""

#. type: table
#: zsh.texi:5399
msgid ""
"Convert the substitution into an array expression, even if it otherwise "
"would be scalar.  This has lower precedence than subscripting, so one level "
"of nested expansion is required in order that subscripts apply to array "
"elements.  Thus @t{$@{$@{(A}@t{)}@var{name}@t{@}[1]@}} yields the full value "
"of @var{name} when @var{name} is scalar."
msgstr ""

#. type: table
#: zsh.texi:5410
msgid ""
"This assigns an array parameter with `@t{$@{}...@t{=}...@t{@}}', "
"`@t{$@{}...@t{:=}...@t{@}}' or `@t{$@{}...@t{::=}...@t{@}}'.  If this flag "
"is repeated (as in `@t{AA}'), assigns an associative array parameter.  "
"Assignment is made before sorting or padding; if field splitting is active, "
"the @var{word} part is split before assignment.  The @var{name} part may be "
"a subscripted range for ordinary arrays; when assigning an associative "
"array, the @var{word} part @emph{must} be converted to an array, for example "
"by using `@t{$@{(AA)=}@var{name}@t{=}...@t{@}}' to activate field splitting."
msgstr ""

#. type: table
#: zsh.texi:5415
msgid ""
"Surrounding context such as additional nesting or use of the value in a "
"scalar assignment may cause the array to be joined back into a single string "
"again."
msgstr ""

#. type: table
#: zsh.texi:5421
msgid ""
"Sort in array index order; when combined with `@t{O}' sort in reverse array "
"index order.  Note that `@t{a}' is therefore equivalent to the default but "
"`@t{Oa}' is useful for obtaining an array's elements in reverse order."
msgstr ""

#. type: t{#1}
#: zsh.texi:5422 zsh.texi:6887
#, no-wrap
msgid "b"
msgstr ""

#. type: table
#: zsh.texi:5426
msgid ""
"Quote with backslashes only characters that are special to pattern "
"matching. This is useful when the contents of the variable are to be tested "
"using @t{GLOB_SUBST}, including the @t{$@{~}@var{...}@t{@}} switch."
msgstr ""

#. type: table
#: zsh.texi:5431
msgid ""
"Quoting using one of the @t{q} family of flags does not work for this "
"purpose since quotes are not stripped from non-pattern characters by "
"@t{GLOB_SUBST}.  In other words,"
msgstr ""

#. type: example
#: zsh.texi:5436
#, no-wrap
msgid ""
"pattern=$@{(q)str@}\n"
"[[ $str = $@{~pattern@} ]]\n"
msgstr ""

#. type: table
#: zsh.texi:5440
msgid "works if @t{$str} is `@t{a*b}' but not if it is `@t{a b}', whereas"
msgstr ""

#. type: example
#: zsh.texi:5445
#, no-wrap
msgid ""
"pattern=$@{(b)str@}\n"
"[[ $str = $@{~pattern@} ]]\n"
msgstr ""

#. type: table
#: zsh.texi:5449
msgid "is always true for any possible value of @t{$str}."
msgstr ""

#. type: table
#: zsh.texi:5455
msgid ""
"With @t{$@{#}@var{name}@t{@}}, count the total number of characters in an "
"array, as if the elements were concatenated with spaces between them.  This "
"is not a true join of the array, so other expressions used with this flag "
"may have an effect on the elements of the array before it is counted."
msgstr ""

#. type: table
#: zsh.texi:5460
msgid ""
"Capitalize the resulting words.  `Words' in this case refers to sequences of "
"alphanumeric characters separated by non-alphanumerics, @emph{not} to words "
"that result from field splitting."
msgstr ""

#. type: table
#: zsh.texi:5468
msgid ""
"Assume the string or array elements contain directories and attempt to "
"substitute the leading part of these by names.  The remainder of the path "
"(the whole of it if the leading part was not substituted)  is then quoted so "
"that the whole string can be used as a shell argument.  This is the reverse "
"of `@t{~}' substitution: see @ref{Filename Expansion}."
msgstr ""

#. type: table
#: zsh.texi:5474
msgid ""
"Perform single word shell expansions, namely @emph{parameter expansion}, "
"@emph{command substitution} and @emph{arithmetic expansion}, on the "
"result. Such expansions can be nested but too deep recursion may have "
"unpredictable effects."
msgstr ""

#. type: table
#: zsh.texi:5478
msgid ""
"Split the result of the expansion at newlines. This is a shorthand for "
"`@t{ps:\\n:}'."
msgstr ""

#. type: t{#1}
#: zsh.texi:5479 zsh.texi:7258
#, no-wrap
msgid "F"
msgstr ""

#. type: table
#: zsh.texi:5482
msgid ""
"Join the words of arrays together using newline as a separator.  This is a "
"shorthand for `@t{pj:\\n:}'."
msgstr ""

#. type: item
#: zsh.texi:5483
#, no-wrap
msgid "@t{g:}@var{opts}@t{:}"
msgstr ""

#. type: table
#: zsh.texi:5490
msgid ""
"Process escape sequences like the echo builtin when no options are given "
"(@t{g::}).  With the @t{o} option, octal escapes don't take a leading zero.  "
"With the @t{c} option, sequences like `@t{^X}' are also processed.  With the "
"@t{e} option, processes `@t{\\M-t}' and similar sequences like the print "
"builtin.  With both of the @t{o} and @t{e} options, behaves like the print "
"builtin except that in none of these modes is `@t{\\c}' interpreted."
msgstr ""

#. type: t{#1}
#: zsh.texi:5491 zsh.texi:6871 zsh.texi:8194
#, no-wrap
msgid "i"
msgstr ""

#. type: table
#: zsh.texi:5493
msgid "Sort case-insensitively.  May be combined with `@t{n}' or `@t{O}'."
msgstr ""

#. type: t{#1}
#: zsh.texi:5494 zsh.texi:8220
#, no-wrap
msgid "k"
msgstr ""

#. type: table
#: zsh.texi:5502
msgid ""
"If @var{name} refers to an associative array, substitute the @emph{keys} "
"(element names) rather than the values of the elements.  Used with "
"subscripts (including ordinary arrays), force indices or keys to be "
"substituted even if the subscript form refers to values.  However, this flag "
"may not be combined with subscript ranges.  With the @t{KSH_ARRAYS} option a "
"subscript `@t{[*]}' or `@t{[@@]}' is needed to operate on the whole array, "
"as usual."
msgstr ""

#. type: table
#: zsh.texi:5505
msgid "Convert all letters in the result to lower case."
msgstr ""

#. type: table
#: zsh.texi:5514
msgid ""
"Sort decimal integers numerically; if the first differing characters of two "
"test strings are not digits, sorting is lexical.  `@t{+}' and `@t{-}' are "
"not treated specially; they are treated as any other non-digit.  Integers "
"with more initial zeroes are sorted before those with fewer or none.  Hence "
"the array `@t{foo+24 foo1 foo02 foo2 foo3 foo20 foo23}' is sorted into the "
"order shown.  May be combined with `@t{i}' or `@t{O}'."
msgstr ""

#. type: table
#: zsh.texi:5521
msgid ""
"As @t{n}, but a leading minus sign indicates a negative decimal integer.  A "
"leading minus sign not followed by an integer does not trigger numeric "
"sorting.  Note that `@t{+}' signs are not handled specially (this may change "
"in the future)."
msgstr ""

#. type: t{#1}
#: zsh.texi:5522
#, no-wrap
msgid "o"
msgstr ""

#. type: table
#: zsh.texi:5528
msgid ""
"Sort the resulting words in ascending order; if this appears on its own the "
"sorting is lexical and case-sensitive (unless the locale renders it "
"case-insensitive).  Sorting in ascending order is the default for other "
"forms of sorting, so this is ignored if combined with `@t{a}', `@t{i}', "
"`@t{n}' or `@t{-}'."
msgstr ""

#. type: t{#1}
#: zsh.texi:5529 zsh.texi:30896
#, no-wrap
msgid "O"
msgstr ""

#. type: table
#: zsh.texi:5534
msgid ""
"Sort the resulting words in descending order; `@t{O}' without `@t{a}', "
"`@t{i}', `@t{n}' or `@t{-}' sorts in reverse lexical order.  May be combined "
"with `@t{a}', `@t{i}', `@t{n}' or `@t{-}' to reverse the order of sorting."
msgstr ""

#. type: table
#: zsh.texi:5541
msgid ""
"This forces the value of the parameter @var{name} to be interpreted as a "
"further parameter name, whose value will be used where appropriate.  Note "
"that flags set with one of the @t{typeset} family of commands (in particular "
"case transformations) are not applied to the value of @var{name} used in "
"this fashion."
msgstr ""

#. type: table
#: zsh.texi:5548
msgid ""
"If used with a nested parameter or command substitution, the result of that "
"will be taken as a parameter name in the same way.  For example, if you have "
"`@t{foo=bar}' and `@t{bar=baz}', the strings @t{$@{(P)foo@}}, "
"@t{$@{(P)$@{foo@}@}}, and @t{$@{(P)$(echo bar)@}} will be expanded to "
"`@t{baz}'."
msgstr ""

#. type: table
#: zsh.texi:5557
msgid ""
"Likewise, if the reference is itself nested, the expression with the flag is "
"treated as if it were directly replaced by the parameter name.  It is an "
"error if this nested substitution produces an array with more than one "
"word.  For example, if `@t{name=assoc}' where the parameter @t{assoc} is an "
"associative array, then `@t{$@{$@{(P)name@}[elt]@}}' refers to the element "
"of the associative subscripted `@t{elt}'."
msgstr ""

#. type: table
#: zsh.texi:5562
msgid ""
"Quote characters that are special to the shell in the resulting words with "
"backslashes; unprintable or invalid characters are quoted using the "
"@t{$'\\}@var{NNN}@t{'} form, with separate quotes for each octet."
msgstr ""

#. type: table
#: zsh.texi:5571
msgid ""
"If this flag is given twice, the resulting words are quoted in single quotes "
"and if it is given three times, the words are quoted in double quotes; in "
"these forms no special handling of unprintable or invalid characters is "
"attempted.  If the flag is given four times, the words are quoted in single "
"quotes preceded by a @t{$}.  Note that in all three of these forms quoting "
"is done unconditionally, even if this does not change the way the resulting "
"string would be interpreted by the shell."
msgstr ""

#. type: table
#: zsh.texi:5577
msgid ""
"If a @t{q-} is given (only a single @t{q} may appear), a minimal form of "
"single quoting is used that only quotes the string if needed to protect "
"special characters.  Typically this form gives the most readable output."
msgstr ""

#. type: table
#: zsh.texi:5583
msgid ""
"If a @t{q+} is given, an extended form of minimal quoting is used that "
"causes unprintable characters to be rendered using @t{$'}@var{...}@t{'}.  "
"This quoting is similar to that used by the output of values by the "
"@t{typeset} family of commands."
msgstr ""

#. type: table
#: zsh.texi:5586
msgid "Remove one level of quotes from the resulting words."
msgstr ""

#. type: table
#: zsh.texi:5594
msgid ""
"Use a string describing the type of the parameter where the value of the "
"parameter would usually appear. This string consists of keywords separated "
"by hyphens (`@t{-}'). The first keyword in the string describes the main "
"type, it can be one of `@t{scalar}', `@t{array}', `@t{integer}', `@t{float}' "
"or `@t{association}'. The other keywords describe the type in more detail:"
msgstr ""

#. type: t{#1}
#: zsh.texi:5597 zsh.texi:14151 zsh.texi:22848
#, no-wrap
msgid "local"
msgstr ""

#. type: table
#: zsh.texi:5599
msgid "for local parameters"
msgstr ""

#. type: t{#1}
#: zsh.texi:5600
#, no-wrap
msgid "left"
msgstr ""

#. type: table
#: zsh.texi:5602
msgid "for left justified parameters"
msgstr ""

#. type: t{#1}
#: zsh.texi:5603
#, no-wrap
msgid "right_blanks"
msgstr ""

#. type: table
#: zsh.texi:5605
msgid "for right justified parameters with leading blanks"
msgstr ""

#. type: t{#1}
#: zsh.texi:5606
#, no-wrap
msgid "right_zeros"
msgstr ""

#. type: table
#: zsh.texi:5608
msgid "for right justified parameters with leading zeros"
msgstr ""

#. type: t{#1}
#: zsh.texi:5609
#, no-wrap
msgid "lower"
msgstr ""

#. type: table
#: zsh.texi:5612
msgid ""
"for parameters whose value is converted to all lower case when it is "
"expanded"
msgstr ""

#. type: t{#1}
#: zsh.texi:5613
#, no-wrap
msgid "upper"
msgstr ""

#. type: table
#: zsh.texi:5616
msgid ""
"for parameters whose value is converted to all upper case when it is "
"expanded"
msgstr ""

#. type: t{#1}
#: zsh.texi:5617 zsh.texi:14546
#, no-wrap
msgid "readonly"
msgstr ""

#. type: table
#: zsh.texi:5619
msgid "for readonly parameters"
msgstr ""

#. type: t{#1}
#: zsh.texi:5620
#, no-wrap
msgid "tag"
msgstr ""

#. type: table
#: zsh.texi:5622
msgid "for tagged parameters"
msgstr ""

#. type: t{#1}
#: zsh.texi:5623
#, no-wrap
msgid "tied"
msgstr ""

#. type: table
#: zsh.texi:5627
msgid ""
"for parameters tied to another parameter in the manner of @t{PATH} "
"(colon-separated list) and @t{path} (array), whether these are special "
"parameters or user-defined with `@t{typeset -T}'"
msgstr ""

#. type: findex
#: zsh.texi:5628 zsh.texi:7733 zsh.texi:13525
#, no-wrap
msgid "export"
msgstr ""

#. type: table
#: zsh.texi:5630
msgid "for exported parameters"
msgstr ""

#. type: t{#1}
#: zsh.texi:5631
#, no-wrap
msgid "unique"
msgstr ""

#. type: table
#: zsh.texi:5633
msgid "for arrays which keep only the first occurrence of duplicated values"
msgstr ""

#. type: t{#1}
#: zsh.texi:5634
#, no-wrap
msgid "hide"
msgstr ""

#. type: table
#: zsh.texi:5636
msgid "for parameters with the `hide' flag"
msgstr ""

#. type: t{#1}
#: zsh.texi:5637
#, no-wrap
msgid "hideval"
msgstr ""

#. type: table
#: zsh.texi:5639
msgid "for parameters with the `hideval' flag"
msgstr ""

#. type: t{#1}
#: zsh.texi:5640 zsh.texi:19019
#, no-wrap
msgid "special"
msgstr ""

#. type: table
#: zsh.texi:5642
msgid "for special parameters defined by the shell"
msgstr ""

#. type: table
#: zsh.texi:5647
msgid "Expand only the first occurrence of each unique word."
msgstr ""

#. type: t{#1}
#: zsh.texi:5648 zsh.texi:7052 zsh.texi:7427
#, no-wrap
msgid "U"
msgstr ""

#. type: table
#: zsh.texi:5650
msgid "Convert all letters in the result to upper case."
msgstr ""

#. type: table
#: zsh.texi:5656
msgid ""
"Used with @t{k}, substitute (as two consecutive words) both the key and the "
"value of each associative array element.  Used with subscripts, force values "
"to be substituted even if the subscript form refers to indices or keys."
msgstr ""

#. type: table
#: zsh.texi:5659
msgid "Make any special characters in the resulting words visible."
msgstr ""

#. type: table
#: zsh.texi:5663
msgid ""
"With @t{$@{#}@var{name}@t{@}}, count words in arrays or strings; the @t{s} "
"flag may be used to set a word delimiter."
msgstr ""

#. type: t{#1}
#: zsh.texi:5664 zsh.texi:7309
#, no-wrap
msgid "W"
msgstr ""

#. type: table
#: zsh.texi:5667
msgid ""
"Similar to @t{w} with the difference that empty words between repeated "
"delimiters are also counted."
msgstr ""

#. type: t{#1}
#: zsh.texi:5668 zsh.texi:7312
#, no-wrap
msgid "X"
msgstr ""

#. type: table
#: zsh.texi:5673
msgid ""
"With this flag, parsing errors occurring with the @t{Q}, @t{e} and @t{#} "
"flags or the pattern matching forms such as "
"`@t{$@{}@var{name}@t{#}@var{pattern}@t{@}}' are reported.  Without the flag, "
"errors are silently ignored."
msgstr ""

#. type: t{#1}
#: zsh.texi:5674
#, no-wrap
msgid "z"
msgstr ""

#. type: table
#: zsh.texi:5680
msgid ""
"Split the result of the expansion into words using shell parsing to find the "
"words, i.e. taking into account any quoting in the value.  Comments are not "
"treated specially but as ordinary strings, similar to interactive shells "
"with the @t{INTERACTIVE_COMMENTS} option unset (however, see the @t{Z} flag "
"below for related options)"
msgstr ""

#. type: table
#: zsh.texi:5686
msgid ""
"Note that this is done very late, even later than the `@t{(s)}' flag. So to "
"access single words in the result use nested expansions as in "
"`@t{$@{$@{(z)foo@}[2]@}}'. Likewise, to remove the quotes in the resulting "
"words use `@t{$@{(Q)$@{(z)foo@}@}}'."
msgstr ""

#. type: table
#: zsh.texi:5690
msgid ""
"Split the result of the expansion on null bytes.  This is a shorthand for "
"`@t{ps:\\0:}'."
msgstr ""

#. type: Plain text
#: zsh.texi:5699
msgid ""
"The following flags (except @t{p}) are followed by one or more arguments as "
"shown.  Any character, or the matching pairs `@t{(}...@t{)}', "
"`@t{@{}...@t{@}}', `@t{[}...@t{]}', or `@t{<}...@t{>}', may be used in place "
"of a colon as delimiters, but note that when a flag takes more than one "
"argument, a matched pair of delimiters must surround each argument."
msgstr ""

#. type: table
#: zsh.texi:5706
msgid ""
"Recognize the same escape sequences as the @t{print} builtin in string "
"arguments to any of the flags described below that follow this argument."
msgstr ""

#. type: table
#: zsh.texi:5712
msgid ""
"Alternatively, with this option string arguments may be in the form "
"@t{$}@var{var} in which case the value of the variable is substituted.  Note "
"this form is strict; the string argument does not undergo general parameter "
"expansion."
msgstr ""

#. type: example
#: zsh.texi:5721
#, no-wrap
msgid ""
"sep=:\n"
"val=a:b:c\n"
"print $@{(ps.$sep.)val@}\n"
msgstr ""

#. type: table
#: zsh.texi:5725
msgid "splits the variable on a @t{:}."
msgstr ""

#. type: table
#: zsh.texi:5732
msgid ""
"Strings inserted into the expansion by any of the flags below are to be "
"treated as patterns.  This applies to the string arguments of flags that "
"follow @t{~} within the same set of parentheses.  Compare with @t{~} outside "
"parentheses, which forces the entire substituted string to be treated as a "
"pattern.  Hence, for example,"
msgstr ""

#. type: example
#: zsh.texi:5736
#, no-wrap
msgid "[[ \"?\" = $@{(~j.|.)array@} ]]\n"
msgstr ""

#. type: table
#: zsh.texi:5743
msgid ""
"treats `@t{|}' as a pattern and succeeds if and only if @t{$array} contains "
"the string `@t{?}' as an element.  The @t{~} may be repeated to toggle the "
"behaviour; its effect only lasts to the end of the parenthesised group."
msgstr ""

#. type: item
#: zsh.texi:5744
#, no-wrap
msgid "@t{j:}@var{string}@t{:}"
msgstr ""

#. type: table
#: zsh.texi:5746
msgid "Join the words of arrays together using @var{string} as a separator."
msgstr ""

#. type: pindex
#: zsh.texi:5746
#, no-wrap
msgid "SH_WORD_SPLIT, use of"
msgstr ""

#. type: table
#: zsh.texi:5749
msgid ""
"Note that this occurs before field splitting by the @t{s:}@var{string}@t{:} "
"flag or the @t{SH_WORD_SPLIT} option."
msgstr ""

#. type: item
#: zsh.texi:5750
#, no-wrap
msgid "@t{l:}@var{expr}@t{::}@var{string1}@t{::}@var{string2}@t{:}"
msgstr ""

#. type: table
#: zsh.texi:5753
msgid ""
"Pad the resulting words on the left.  Each word will be truncated if "
"required and placed in a field @var{expr} characters wide."
msgstr ""

#. type: table
#: zsh.texi:5763
msgid ""
"The arguments @t{:}@var{string1}@t{:} and @t{:}@var{string2}@t{:} are "
"optional; neither, the first, or both may be given.  Note that the same "
"pairs of delimiters must be used for each of the three arguments.  The space "
"to the left will be filled with @var{string1} (concatenated as often as "
"needed) or spaces if @var{string1} is not given.  If both @var{string1} and "
"@var{string2} are given, @var{string2} is inserted once directly to the left "
"of each word, truncated if necessary, before @var{string1} is used to "
"produce any remaining padding."
msgstr ""

#. type: table
#: zsh.texi:5768
msgid ""
"If either of @var{string1} or @var{string2} is present but empty, i.e. there "
"are two delimiters together at that point, the first character of @t{$IFS} "
"is used instead."
msgstr ""

#. type: table
#: zsh.texi:5774
msgid ""
"If the @t{MULTIBYTE} option is in effect, the flag @t{m} may also be given, "
"in which case widths will be used for the calculation of padding; otherwise "
"individual multibyte characters are treated as occupying one unit of width."
msgstr ""

#. type: table
#: zsh.texi:5778
msgid ""
"If the @t{MULTIBYTE} option is not in effect, each byte in the string is "
"treated as occupying one unit of width."
msgstr ""

#. type: table
#: zsh.texi:5782
msgid ""
"Control characters are always assumed to be one unit wide; this allows the "
"mechanism to be used for generating repetitions of control characters."
msgstr ""

#. type: t{#1}
#: zsh.texi:5783 zsh.texi:6968 zsh.texi:7541
#, no-wrap
msgid "m"
msgstr ""

#. type: table
#: zsh.texi:5793
msgid ""
"Only useful together with one of the flags @t{l} or @t{r} or with the @t{#} "
"length operator when the @t{MULTIBYTE} option is in effect.  Use the "
"character width reported by the system in calculating how much of the string "
"it occupies or the overall length of the string.  Most printable characters "
"have a width of one unit, however certain Asian character sets and certain "
"special effects use wider characters; combining characters have zero width.  "
"Non-printable characters are arbitrarily counted as zero width; how they "
"would actually be displayed will vary."
msgstr ""

#. type: table
#: zsh.texi:5800
msgid ""
"If the @t{m} is repeated, the character either counts zero (if it has zero "
"width), else one.  For printable character strings this has the effect of "
"counting the number of glyphs (visibly separate characters), except for the "
"case where combining characters themselves have non-zero width (true in "
"certain alphabets)."
msgstr ""

#. type: item
#: zsh.texi:5801
#, no-wrap
msgid "@t{r:}@var{expr}@t{::}@var{string1}@t{::}@var{string2}@t{:}"
msgstr ""

#. type: table
#: zsh.texi:5804
msgid ""
"As @t{l}, but pad the words on the right and insert @var{string2} "
"immediately to the right of the string to be padded."
msgstr ""

#. type: table
#: zsh.texi:5810
msgid ""
"Left and right padding may be used together.  In this case the strategy is "
"to apply left padding to the first half width of each of the resulting "
"words, and right padding to the second half.  If the string to be padded has "
"odd width the extra padding is applied on the left."
msgstr ""

#. type: item
#: zsh.texi:5811 zsh.texi:8133
#, no-wrap
msgid "@t{s:}@var{string}@t{:}"
msgstr ""

#. type: table
#: zsh.texi:5819
msgid ""
"Force field splitting at the separator @var{string}.  Note that a "
"@var{string} of two or more characters means that all of them must match in "
"sequence; this differs from the treatment of two or more characters in the "
"@t{IFS} parameter.  See also the @t{=} flag and the @t{SH_WORD_SPLIT} "
"option.  An empty string may also be given in which case every character "
"will be a separate element."
msgstr ""

#. type: table
#: zsh.texi:5824
msgid ""
"For historical reasons, the usual behaviour that empty array elements are "
"retained inside double quotes is disabled for arrays generated by splitting; "
"hence the following:"
msgstr ""

#. type: example
#: zsh.texi:5829
#, no-wrap
msgid ""
"line=\"one::three\"\n"
"print -l \"$@{(s.:.)line@}\"\n"
msgstr ""

#. type: table
#: zsh.texi:5835
msgid ""
"produces two lines of output for @t{one} and @t{three} and elides the empty "
"field.  To override this behaviour, supply the `@t{(@@)}' flag as well, "
"i.e.  @t{\"$@{(@@s.:.)line@}\"}."
msgstr ""

#. type: item
#: zsh.texi:5836
#, no-wrap
msgid "@t{Z:}@var{opts}@t{:}"
msgstr ""

#. type: table
#: zsh.texi:5840
msgid ""
"As @t{z} but takes a combination of option letters between a following pair "
"of delimiter characters.  With no options the effect is identical to @t{z}.  "
"The following options are available:"
msgstr ""

#. type: t{#1}
#: zsh.texi:5843
#, no-wrap
msgid "(Z+c+)"
msgstr ""

#. type: table
#: zsh.texi:5847
msgid ""
"causes comments to be parsed as a string and retained; any field in the "
"resulting array beginning with an unquoted comment character is a comment."
msgstr ""

#. type: t{#1}
#: zsh.texi:5848
#, no-wrap
msgid "(Z+C+)"
msgstr ""

#. type: table
#: zsh.texi:5853
msgid ""
"causes comments to be parsed and removed.  The rule for comments is "
"standard: anything between a word starting with the third character of "
"@t{$HISTCHARS}, default @t{#}, up to the next newline is a comment."
msgstr ""

#. type: t{#1}
#: zsh.texi:5854
#, no-wrap
msgid "(Z+n+)"
msgstr ""

#. type: table
#: zsh.texi:5859
msgid ""
"causes unquoted newlines to be treated as ordinary whitespace, else they are "
"treated as if they are shell code delimiters and converted to semicolons."
msgstr ""

#. type: table
#: zsh.texi:5865
msgid "Options are combined within the same set of delimiters, e.g. @t{(Z+Cn+)}."
msgstr ""

#. type: item
#: zsh.texi:5866
#, no-wrap
msgid "@t{_:}@var{flags}@t{:}"
msgstr ""

#. type: table
#: zsh.texi:5871
msgid ""
"The underscore (@t{_}) flag is reserved for future use.  As of this revision "
"of zsh, there are no valid @var{flags}; anything following an underscore, "
"other than an empty pair of delimiters, is treated as an error, and the flag "
"itself has no effect."
msgstr ""

#. type: Plain text
#: zsh.texi:5878
msgid ""
"The following flags are meaningful with the @t{$@{}...@t{#}...@t{@}} or "
"@t{$@{}...@t{%}...@t{@}} forms.  The @t{S}, @t{I}, and @t{*} flags may also "
"be used with the @t{$@{}...@t{/}...@t{@}} forms."
msgstr ""

#. type: table
#: zsh.texi:5885
msgid ""
"With @t{#} or @t{##}, search for the match that starts closest to the start "
"of the string (a `substring match'). Of all matches at a particular "
"position, @t{#} selects the shortest and @t{##} the longest:"
msgstr ""

#. type: example
#: zsh.texi:5894
#, no-wrap
msgid ""
"% str=\"aXbXc\"\n"
"% echo $@{(S)str#X*@}\n"
"abXc\n"
"% echo $@{(S)str##X*@}\n"
"a\n"
"% \n"
msgstr ""

#. type: table
#: zsh.texi:5899
msgid ""
"With @t{%} or @t{%%}, search for the match that starts closest to the end of "
"the string:"
msgstr ""

#. type: example
#: zsh.texi:5908
#, no-wrap
msgid ""
"% str=\"aXbXc\"\n"
"% echo $@{(S)str%X*@}\n"
"aXbc\n"
"% echo $@{(S)str%%X*@}\n"
"aXb\n"
"% \n"
msgstr ""

#. type: table
#: zsh.texi:5913
msgid ""
"(Note that @t{%} and @t{%%} don't search for the match that ends closest to "
"the end of the string, as one might expect.)"
msgstr ""

#. type: table
#: zsh.texi:5918
msgid ""
"With substitution via @t{$@{}...@t{/}...@t{@}} or @t{$@{}...@t{//}...@t{@}}, "
"specifies non-greedy matching, i.e. that the shortest instead of the longest "
"match should be replaced:"
msgstr ""

#. type: example
#: zsh.texi:5927
#, no-wrap
msgid ""
"% str=\"abab\"\n"
"% echo $@{str/*b/_@}\n"
"_\n"
"% echo $@{(S)str/*b/_@}\n"
"_ab\n"
"% \n"
msgstr ""

#. type: item
#: zsh.texi:5929
#, no-wrap
msgid "@t{I:}@var{expr}@t{:}"
msgstr ""

#. type: table
#: zsh.texi:5935
msgid ""
"Search the @var{expr}th match (where @var{expr} evaluates to a number).  "
"This only applies when searching for substrings, either with the @t{S} flag, "
"or with @t{$@{}...@t{/}...@t{@}} (only the @var{expr}th match is "
"substituted) or @t{$@{}...@t{//}...@t{@}} (all matches from the @var{expr}th "
"on are substituted).  The default is to take the first match."
msgstr ""

#. type: table
#: zsh.texi:5943
msgid ""
"The @var{expr}th match is counted such that there is either one or zero "
"matches from each starting position in the string, although for global "
"substitution matches overlapping previous replacements are ignored.  With "
"the @t{$@{}...@t{%}...@t{@}} and @t{$@{}...@t{%%}...@t{@}} forms, the "
"starting position for the match moves backwards from the end as the index "
"increases, while with the other forms it moves forward from the start."
msgstr ""

#. type: table
#: zsh.texi:5946
msgid "Hence with the string"
msgstr ""

#. type: example
#: zsh.texi:5948
#, no-wrap
msgid "which switch is the right switch for Ipswich?\n"
msgstr ""

#. type: table
#: zsh.texi:5958
msgid ""
"substitutions of the form @t{$@{}(@t{SI:}@var{N}@t{:})@t{string#w*ch@}} as "
"@var{N} increases from 1 will match and remove `@t{which}', `@t{witch}', "
"`@t{witch}' and `@t{wich}'; the form using `@t{##}' will match and remove "
"`@t{which switch is the right switch for Ipswich}', `@t{witch is the right "
"switch for Ipswich}', `@t{witch for Ipswich}' and `@t{wich}'. The form using "
"`@t{%}' will remove the same matches as for `@t{#}', but in reverse order, "
"and the form using `@t{%%}' will remove the same matches as for `@t{##}' in "
"reverse order."
msgstr ""

#. type: pindex
#: zsh.texi:5960
#, no-wrap
msgid "EXTENDED_GLOB, enable"
msgstr ""

#. type: table
#: zsh.texi:5963
msgid ""
"Enable @t{EXTENDED_GLOB} for substitution via @t{$@{}...@t{/}...@t{@}} or "
"@t{$@{}...@t{//}...@t{@}}.  Note that `@t{**}' does not disable "
"extendedglob."
msgstr ""

#. type: t{#1}
#: zsh.texi:5964 zsh.texi:6948
#, no-wrap
msgid "B"
msgstr ""

#. type: table
#: zsh.texi:5966
msgid "Include the index of the beginning of the match in the result."
msgstr ""

#. type: t{#1}
#: zsh.texi:5967 zsh.texi:7303
#, no-wrap
msgid "E"
msgstr ""

#. type: table
#: zsh.texi:5970
msgid ""
"Include the index one character past the end of the match in the result "
"(note this is inconsistent with other uses of parameter index)."
msgstr ""

#. type: t{#1}
#: zsh.texi:5971 zsh.texi:6995 zsh.texi:7499
#, no-wrap
msgid "M"
msgstr ""

#. type: table
#: zsh.texi:5973
msgid "Include the matched portion in the result."
msgstr ""

#. type: t{#1}
#: zsh.texi:5974 zsh.texi:7507 zsh.texi:7550
#, no-wrap
msgid "N"
msgstr ""

#. type: table
#: zsh.texi:5976
msgid "Include the length of the match in the result."
msgstr ""

#. type: t{#1}
#: zsh.texi:5977 zsh.texi:7306 zsh.texi:8172
#, no-wrap
msgid "R"
msgstr ""

#. type: table
#: zsh.texi:5979
msgid "Include the unmatched portion in the result (the @emph{R}est)."
msgstr ""

#. type: subsection
#: zsh.texi:5984
#, no-wrap
msgid "Rules"
msgstr ""

#. type: cindex
#: zsh.texi:5986
#, no-wrap
msgid "parameter expansion rules"
msgstr ""

#. type: cindex
#: zsh.texi:5987
#, no-wrap
msgid "rules, parameter expansion"
msgstr ""

#. type: cindex
#: zsh.texi:5988
#, no-wrap
msgid "substitution, parameter, rules"
msgstr ""

#. type: Plain text
#: zsh.texi:5994
msgid ""
"Here is a summary of the rules for substitution; this assumes that braces "
"are present around the substitution, i.e. @t{$@{}@var{...}@t{@}}.  Some "
"particular examples are given below.  Note that the Zsh Development Group "
"accepts @emph{no responsibility} for any brain damage which may occur during "
"the reading of the following rules."
msgstr ""

#. type: item
#: zsh.texi:5997
#, no-wrap
msgid "@t{1.} @emph{Nested substitution}"
msgstr ""

#. type: table
#: zsh.texi:6007
msgid ""
"If multiple nested @t{$@{}@var{...}@t{@}} forms are present, substitution is "
"performed from the inside outwards.  At each level, the substitution takes "
"account of whether the current value is a scalar or an array, whether the "
"whole substitution is in double quotes, and what flags are supplied to the "
"current level of substitution, just as if the nested substitution were the "
"outermost.  The flags are not propagated up to enclosing substitutions; the "
"nested substitution will return either a scalar or an array as determined by "
"the flags, possibly adjusted for quoting.  All the following steps take "
"place where applicable at all levels of substitution."
msgstr ""

#. type: table
#: zsh.texi:6015
msgid ""
"Note that, unless the `@t{(P)}' flag is present, the flags and any "
"subscripts apply directly to the value of the nested substitution; for "
"example, the expansion @t{$@{$@{foo@}@}} behaves exactly the same as "
"@t{$@{foo@}}.  When the `@t{(P)}' flag is present in a nested substitution, "
"the other substitution rules are applied to the value @emph{before} it is "
"interpreted as a name, so @t{$@{$@{(P)foo@}@}} may differ from "
"@t{$@{(P)foo@}}."
msgstr ""

#. type: table
#: zsh.texi:6026
msgid ""
"At each nested level of substitution, the substituted words undergo all "
"forms of single-word substitution (i.e. not filename generation), including "
"command substitution, arithmetic expansion and filename expansion "
"(i.e. leading @t{~} and @t{=}).  Thus, for example, @t{$@{$@{:-=cat@}:h@}} "
"expands to the directory where the @t{cat} program resides.  (Explanation: "
"the internal substitution has no parameter but a default value @t{=cat}, "
"which is expanded by filename expansion to a full path; the outer "
"substitution then applies the modifier @t{:h} and takes the directory part "
"of the path.)"
msgstr ""

#. type: item
#: zsh.texi:6027
#, no-wrap
msgid "@t{2.} @emph{Internal parameter flags}"
msgstr ""

#. type: table
#: zsh.texi:6033
msgid ""
"Any parameter flags set by one of the @t{typeset} family of commands, in "
"particular the @t{-L}, @t{-R}, @t{-Z}, @t{-u} and @t{-l} options for padding "
"and capitalization, are applied directly to the parameter value.  Note these "
"flags are options to the command, e.g. `@t{typeset -Z}'; they are not the "
"same as the flags used within parameter substitutions."
msgstr ""

#. type: table
#: zsh.texi:6041
msgid ""
"At the outermost level of substitution, the `@t{(P)}' flag (rule @t{4.})  "
"ignores these transformations and uses the unmodified value of the parameter "
"as the name to be replaced.  This is usually the desired behavior because "
"padding may make the value syntactically illegal as a parameter name, but if "
"capitalization changes are desired, use the @t{$@{$@{(P)foo@}@}} form (rule "
"@t{25.})."
msgstr ""

#. type: item
#: zsh.texi:6042
#, no-wrap
msgid "@t{3.} @emph{Parameter subscripting}"
msgstr ""

#. type: table
#: zsh.texi:6052
msgid ""
"If the value is a raw parameter reference with a subscript, such as "
"@t{$@{}@var{var}@t{[3]@}}, the effect of subscripting is applied directly to "
"the parameter.  Subscripts are evaluated left to right; subsequent "
"subscripts apply to the scalar or array value yielded by the previous "
"subscript.  Thus if @t{var} is an array, @t{$@{var[1][2]@}} is the second "
"character of the first word, but @t{$@{var[2,4][2]@}} is the entire third "
"word (the second word of the range of words two through four of the original "
"array).  Any number of subscripts may appear.  Flags such as `@t{(k)}' and "
"`@t{(v)}' which alter the result of subscripting are applied."
msgstr ""

#. type: item
#: zsh.texi:6053
#, no-wrap
msgid "@t{4.} @emph{Parameter name replacement}"
msgstr ""

#. type: table
#: zsh.texi:6059
msgid ""
"At the outermost level of nesting only, the `@t{(P)}' flag is applied.  This "
"treats the value so far as a parameter name (which may include a subscript "
"expression) and replaces that with the corresponding value.  This "
"replacement occurs later if the `@t{(P)}' flag appears in a nested "
"substitution."
msgstr ""

#. type: table
#: zsh.texi:6063
msgid ""
"If the value so far names a parameter that has internal flags (rule @t{2.}), "
"those internal flags are applied to the new value after replacement."
msgstr ""

#. type: item
#: zsh.texi:6064
#, no-wrap
msgid "@t{5.} @emph{Double-quoted joining}"
msgstr ""

#. type: table
#: zsh.texi:6072
msgid ""
"If the value after this process is an array, and the substitution appears in "
"double quotes, and neither an `@t{(@@)}' flag nor a `@t{#}' length operator "
"is present at the current level, then words of the value are joined with the "
"first character of the parameter @t{$IFS}, by default a space, between each "
"word (single word arrays are not modified).  If the `@t{(j)}' flag is "
"present, that is used for joining instead of @t{$IFS}."
msgstr ""

#. type: item
#: zsh.texi:6073
#, no-wrap
msgid "@t{6.} @emph{Nested subscripting}"
msgstr ""

#. type: table
#: zsh.texi:6081
msgid ""
"Any remaining subscripts (i.e. of a nested substitution) are evaluated at "
"this point, based on whether the value is an array or a scalar.  As with "
"@t{3.}, multiple subscripts can appear.  Note that @t{$@{foo[2,4][2]@}} is "
"thus equivalent to @t{$@{$@{foo[2,4]@}[2]@}} and also to "
"@t{\"$@{$@{(@@)foo[2,4]@}[2]@}\"} (the nested substitution returns an array "
"in both cases), but not to @t{\"$@{$@{foo[2,4]@}[2]@}\"} (the nested "
"substitution returns a scalar because of the quotes)."
msgstr ""

#. type: item
#: zsh.texi:6082
#, no-wrap
msgid "@t{7.} @emph{Modifiers}"
msgstr ""

#. type: table
#: zsh.texi:6087
msgid ""
"Any modifiers, as specified by a trailing `@t{#}', `@t{%}', `@t{/}' "
"(possibly doubled) or by a set of modifiers of the form `@t{:...}' (see "
"@ref{Modifiers} in @ref{History Expansion}), are applied to the words of the "
"value at this level."
msgstr ""

#. type: item
#: zsh.texi:6088
#, no-wrap
msgid "@t{8.} @emph{Character evaluation}"
msgstr ""

#. type: table
#: zsh.texi:6091
msgid ""
"Any `@t{(#)}' flag is applied, evaluating the result so far numerically as a "
"character."
msgstr ""

#. type: item
#: zsh.texi:6092
#, no-wrap
msgid "@t{9.} @emph{Length}"
msgstr ""

#. type: table
#: zsh.texi:6095
msgid ""
"Any initial `@t{#}' modifier, i.e. in the form @t{$@{#}@var{var}@t{@}}, is "
"used to evaluate the length of the expression so far."
msgstr ""

#. type: item
#: zsh.texi:6096
#, no-wrap
msgid "@t{10.} @emph{Forced joining}"
msgstr ""

#. type: table
#: zsh.texi:6103
msgid ""
"If the `@t{(j)}' flag is present, or no `@t{(j)}' flag is present but the "
"string is to be split as given by rule @t{11.}, and joining did not take "
"place at rule @t{5.}, any words in the value are joined together using the "
"given string or the first character of @t{$IFS} if none.  Note that the "
"`@t{(F)}' flag implicitly supplies a string for joining in this manner."
msgstr ""

#. type: item
#: zsh.texi:6104
#, no-wrap
msgid "@t{11.} @emph{Simple word splitting}"
msgstr ""

#. type: table
#: zsh.texi:6109
msgid ""
"If one of the `@t{(s)}' or `@t{(f)}' flags are present, or the `@t{=}' "
"specifier was present (e.g. @t{$@{=}@var{var}@t{@}}), the word is split on "
"occurrences of the specified string, or (for @t{=} with neither of the two "
"flags present) any of the characters in @t{$IFS}."
msgstr ""

#. type: table
#: zsh.texi:6115
msgid ""
"If no `@t{(s)}', `@t{(f)}' or `@t{=}' was given, but the word is not quoted "
"and the option @t{SH_WORD_SPLIT} is set, the word is split on occurrences of "
"any of the characters in @t{$IFS}.  Note this step, too, takes place at all "
"levels of a nested substitution."
msgstr ""

#. type: item
#: zsh.texi:6116
#, no-wrap
msgid "@t{12.} @emph{Case modification}"
msgstr ""

#. type: table
#: zsh.texi:6119
msgid ""
"Any case modification from one of the flags `@t{(L)}', `@t{(U)}' or "
"`@t{(C)}' is applied."
msgstr ""

#. type: item
#: zsh.texi:6120
#, no-wrap
msgid "@t{13.} @emph{Escape sequence replacement}"
msgstr ""

#. type: table
#: zsh.texi:6123
msgid ""
"First any replacements from the `@t{(g)}' flag are performed, then any "
"prompt-style formatting from the `@t{(%)}' family of flags is applied."
msgstr ""

#. type: item
#: zsh.texi:6124
#, no-wrap
msgid "@t{14.} @emph{Quote application}"
msgstr ""

#. type: table
#: zsh.texi:6127
msgid ""
"Any quoting or unquoting using `@t{(q)}' and `@t{(Q)}' and related flags is "
"applied."
msgstr ""

#. type: item
#: zsh.texi:6128
#, no-wrap
msgid "@t{15.} @emph{Directory naming}"
msgstr ""

#. type: table
#: zsh.texi:6130
msgid "Any directory name substitution using `@t{(D)}' flag is applied."
msgstr ""

#. type: item
#: zsh.texi:6131
#, no-wrap
msgid "@t{16.} @emph{Visibility enhancement}"
msgstr ""

#. type: table
#: zsh.texi:6134
msgid ""
"Any modifications to make characters visible using the `@t{(V)}' flag are "
"applied."
msgstr ""

#. type: item
#: zsh.texi:6135
#, no-wrap
msgid "@t{17.} @emph{Lexical word splitting}"
msgstr ""

#. type: table
#: zsh.texi:6142
msgid ""
"If the '@t{(z)}' flag or one of the forms of the '@t{(Z)}' flag is present, "
"the word is split as if it were a shell command line, so that quotation "
"marks and other metacharacters are used to decide what constitutes a word.  "
"Note this form of splitting is entirely distinct from that described by rule "
"@t{11.}: it does not use @t{$IFS}, and does not cause forced joining."
msgstr ""

#. type: item
#: zsh.texi:6143
#, no-wrap
msgid "@t{18.} @emph{Uniqueness}"
msgstr ""

#. type: table
#: zsh.texi:6146
msgid ""
"If the result is an array and the `@t{(u)}' flag was present, duplicate "
"elements are removed from the array."
msgstr ""

#. type: item
#: zsh.texi:6147
#, no-wrap
msgid "@t{19.} @emph{Ordering}"
msgstr ""

#. type: table
#: zsh.texi:6150
msgid ""
"If the result is still an array and one of the `@t{(o)}' or `@t{(O)}' flags "
"was present, the array is reordered."
msgstr ""

#. type: item
#: zsh.texi:6151
#, no-wrap
msgid "@t{20.} @t{RC_EXPAND_PARAM}"
msgstr ""

#. type: table
#: zsh.texi:6155
msgid ""
"At this point the decision is made whether any resulting array elements are "
"to be combined element by element with surrounding text, as given by either "
"the @t{RC_EXPAND_PARAM} option or the `@t{^}' flag."
msgstr ""

#. type: item
#: zsh.texi:6156
#, no-wrap
msgid "@t{21.} @emph{Re-evaluation}"
msgstr ""

#. type: table
#: zsh.texi:6160
msgid ""
"Any `@t{(e)}' flag is applied to the value, forcing it to be re-examined for "
"new parameter substitutions, but also for command and arithmetic "
"substitutions."
msgstr ""

#. type: item
#: zsh.texi:6161
#, no-wrap
msgid "@t{22.} @emph{Padding}"
msgstr ""

#. type: table
#: zsh.texi:6164
msgid ""
"Any padding of the value by the `@t{(l.}@var{fill}@t{.)}' or "
"`@t{(r.}@var{fill}@t{.)}' flags is applied."
msgstr ""

#. type: item
#: zsh.texi:6165
#, no-wrap
msgid "@t{23.} @emph{Semantic joining}"
msgstr ""

#. type: table
#: zsh.texi:6171
msgid ""
"In contexts where expansion semantics requires a single word to result, all "
"words are rejoined with the first character of @t{IFS} between.  So in "
"`@t{$@{(P}@t{)$@{(f}@t{)lines@}@}}' the value of @t{$@{lines@}} is split at "
"newlines, but then must be joined again before the `@t{(P)}' flag can be "
"applied."
msgstr ""

#. type: table
#: zsh.texi:6174
msgid "If a single word is not required, this rule is skipped."
msgstr ""

#. type: item
#: zsh.texi:6175
#, no-wrap
msgid "@t{24.} @emph{Empty argument removal}"
msgstr ""

#. type: table
#: zsh.texi:6179
msgid ""
"If the substitution does not appear in double quotes, any resulting "
"zero-length argument, whether from a scalar or an element of an array, is "
"elided from the list of arguments inserted into the command line."
msgstr ""

#. type: table
#: zsh.texi:6184
msgid ""
"Strictly speaking, the removal happens later as the same happens with other "
"forms of substitution; the point to note here is simply that it occurs after "
"any of the above parameter operations."
msgstr ""

#. type: item
#: zsh.texi:6185
#, no-wrap
msgid "@t{25.} @emph{Nested parameter name replacement}"
msgstr ""

#. type: table
#: zsh.texi:6190
msgid ""
"If the `@t{(P)}' flag is present and rule @t{4.} has not applied, the value "
"so far is treated as a parameter name (which may include a subscript "
"expression) and replaced with the corresponding value, with internal flags "
"(rule @t{2.}) applied to the new value."
msgstr ""

#. type: subsection
#: zsh.texi:6195 zsh.texi:37717
#, no-wrap
msgid "Examples"
msgstr ""

#. type: cindex
#: zsh.texi:6197
#, no-wrap
msgid "parameter expansion, examples"
msgstr ""

#. type: Plain text
#: zsh.texi:6205
msgid ""
"The flag @t{f} is useful to split a double-quoted substitution line by "
"line.  For example, @t{$@{(f)\"$(<}@var{file}@t{)\"@}} substitutes the "
"contents of @var{file} divided so that each line is an element of the "
"resulting array.  Compare this with the effect of @t{$}@t{(<}@var{file}@t{)} "
"alone, which divides the file up by words, or the same inside double quotes, "
"which makes the entire content of the file a single string."
msgstr ""

#. type: Plain text
#: zsh.texi:6209
msgid ""
"The following illustrates the rules for nested parameter expansions.  "
"Suppose that @t{$foo} contains the array @t{(bar baz}@t{)}:"
msgstr ""

#. type: t{#1}
#: zsh.texi:6212
#, no-wrap
msgid "\"$@{(@@)$@{foo@}[1]@}\""
msgstr ""

#. type: table
#: zsh.texi:6218
msgid ""
"This produces the result @t{b}.  First, the inner substitution "
"@t{\"$@{foo@}\"}, which has no array (@t{@@}) flag, produces a single word "
"result @t{\"bar baz\"}.  The outer substitution @t{\"$@{(@@)...[1]@}\"} "
"detects that this is a scalar, so that (despite the `@t{(@@)}' flag) the "
"subscript picks the first character."
msgstr ""

#. type: t{#1}
#: zsh.texi:6219
#, no-wrap
msgid "\"$@{$@{(@@)foo@}[1]@}\""
msgstr ""

#. type: table
#: zsh.texi:6224
msgid ""
"This produces the result `@t{bar}'.  In this case, the inner substitution "
"@t{\"$@{(@@)foo@}\"} produces the array `@t{(bar baz}@t{)}'.  The outer "
"substitution @t{\"$@{...[1]@}\"} detects that this is an array and picks the "
"first word.  This is similar to the simple case @t{\"$@{foo[1]@}\"}."
msgstr ""

#. type: Plain text
#: zsh.texi:6230
msgid ""
"As an example of the rules for word splitting and joining, suppose @t{$foo} "
"contains the array `@t{(ax1 bx1}@t{)}'.  Then"
msgstr ""

#. type: t{#1}
#: zsh.texi:6233
#, no-wrap
msgid "$@{(s/x/)foo@}"
msgstr ""

#. type: table
#: zsh.texi:6235
msgid "produces the words `@t{a}', `@t{1 b}' and `@t{1}'."
msgstr ""

#. type: t{#1}
#: zsh.texi:6236
#, no-wrap
msgid "$@{(j/x/s/x/)foo@}"
msgstr ""

#. type: table
#: zsh.texi:6238
msgid "produces `@t{a}', `@t{1}', `@t{b}' and `@t{1}'."
msgstr ""

#. type: t{#1}
#: zsh.texi:6239
#, no-wrap
msgid "$@{(s/x/)foo%%1*@}"
msgstr ""

#. type: table
#: zsh.texi:6245
msgid ""
"produces `@t{a}' and `@t{ b}' (note the extra space).  As substitution "
"occurs before either joining or splitting, the operation first generates the "
"modified array @t{(ax bx}@t{)}, which is joined to give @t{\"ax bx\"}, and "
"then split to give `@t{a}', `@t{ b}' and `'.  The final empty string will "
"then be elided, as it is not in double quotes."
msgstr ""

#. type: cindex
#: zsh.texi:6253
#, no-wrap
msgid "command substitution"
msgstr ""

#. type: cindex
#: zsh.texi:6254
#, no-wrap
msgid "substitution, command"
msgstr ""

#. type: Plain text
#: zsh.texi:6261
msgid ""
"A command enclosed in parentheses preceded by a dollar sign, like "
"`@t{$(}...@t{)}', or quoted with grave accents, like `@t{`}...@t{`}', is "
"replaced with its standard output, with any trailing newlines deleted.  If "
"the substitution is not enclosed in double quotes, the output is broken into "
"words using the @t{IFS} parameter."
msgstr ""

#. type: Plain text
#: zsh.texi:6269
msgid ""
"The substitution `@t{$(cat} @var{foo}@t{)}' may be replaced by the faster "
"`@t{$(<}@var{foo}@t{)}'.  In this case @var{foo} undergoes single word shell "
"expansions (@emph{parameter expansion}, @emph{command substitution} and "
"@emph{arithmetic expansion}), but not filename generation."
msgstr ""

#. type: Plain text
#: zsh.texi:6274
msgid ""
"If the option @t{GLOB_SUBST} is set, the result of any unquoted command "
"substitution, including the special form just mentioned, is eligible for "
"filename generation."
msgstr ""

#. type: cindex
#: zsh.texi:6280
#, no-wrap
msgid "arithmetic expansion"
msgstr ""

#. type: cindex
#: zsh.texi:6281
#, no-wrap
msgid "expansion, arithmetic"
msgstr ""

#. type: Plain text
#: zsh.texi:6288
msgid ""
"A string of the form `@t{$[}@var{exp}@t{]}' or `@t{$((}@var{exp}@t{))}' is "
"substituted with the value of the arithmetic expression @var{exp}.  "
"@var{exp} is subjected to @emph{parameter expansion}, @emph{command "
"substitution} and @emph{arithmetic expansion} before it is evaluated.  See "
"@ref{Arithmetic Evaluation}."
msgstr ""

#. type: cindex
#: zsh.texi:6292
#, no-wrap
msgid "brace expansion"
msgstr ""

#. type: cindex
#: zsh.texi:6293
#, no-wrap
msgid "expansion, brace"
msgstr ""

#. type: Plain text
#: zsh.texi:6301
msgid ""
"A string of the form "
"`@var{foo}@t{@{}@var{xx}@t{,}@var{yy}@t{,}@var{zz}@t{@}}@var{bar}' is "
"expanded to the individual words `@var{fooxxbar}', `@var{fooyybar}' and "
"`@var{foozzbar}'.  Left-to-right order is preserved.  This construct may be "
"nested.  Commas may be quoted in order to include them literally in a word."
msgstr ""

#. type: Plain text
#: zsh.texi:6311
msgid ""
"An expression of the form `@t{@{}@var{n1}@t{..}@var{n2}@t{@}}', where "
"@var{n1} and @var{n2} are integers, is expanded to every number between "
"@var{n1} and @var{n2} inclusive.  If either number begins with a zero, all "
"the resulting numbers will be padded with leading zeroes to that minimum "
"width, but for negative numbers the @t{-} character is also included in the "
"width.  If the numbers are in decreasing order the resulting sequence will "
"also be in decreasing order."
msgstr ""

#. type: Plain text
#: zsh.texi:6322
msgid ""
"An expression of the form "
"`@t{@{}@var{n1}@t{..}@var{n2}@t{..}@var{n3}@t{@}}', where @var{n1}, "
"@var{n2}, and @var{n3} are integers, is expanded as above, but only every "
"@var{n3}th number starting from @var{n1} is output.  If @var{n3} is negative "
"the numbers are output in reverse order, this is slightly different from "
"simply swapping @var{n1} and @var{n2} in the case that the step @var{n3} "
"doesn't evenly divide the range.  Zero padding can be specified in any of "
"the three numbers, specifying it in the third can be useful to pad for "
"example `@t{@{-99..100..01@}}' which is not possible to specify by putting a "
"0 on either of the first two numbers (i.e. pad to two characters)."
msgstr ""

#. type: Plain text
#: zsh.texi:6333
msgid ""
"An expression of the form `@t{@{}@var{c1}@t{..}@var{c2}@t{@}}', where "
"@var{c1} and @var{c2} are single characters (which may be multibyte "
"characters), is expanded to every character in the range from @var{c1} to "
"@var{c2} in whatever character sequence is used internally.  For characters "
"with code points below 128 this is US ASCII (this is the only case most "
"users will need).  If any intervening character is not printable, "
"appropriate quotation is used to render it printable.  If the character "
"sequence is reversed, the output is in reverse order, e.g. `@t{@{d..a@}}' is "
"substituted as `@t{d c b a}'."
msgstr ""

#. type: Plain text
#: zsh.texi:6338
msgid ""
"If a brace expression matches none of the above forms, it is left unchanged, "
"unless the option @t{BRACE_CCL} (an abbreviation for `brace character "
"class') is set."
msgstr ""

#. type: pindex
#: zsh.texi:6338
#, no-wrap
msgid "BRACE_CCL, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:6347
msgid ""
"In that case, it is expanded to a list of the individual characters between "
"the braces sorted into the order of the characters in the ASCII character "
"set (multibyte characters are not currently handled).  The syntax is similar "
"to a @t{[}...@t{]} expression in filename generation: `@t{-}' is treated "
"specially to denote a range of characters, but `@t{^}' or `@t{!}' as the "
"first character is treated normally.  For example, `@t{@{abcdef0-9@}}' "
"expands to 16 words @t{0 1 2 3 4 5 6 7 8 9 a b c d e f}."
msgstr ""

#. type: Plain text
#: zsh.texi:6356
msgid ""
"Note that brace expansion is not part of filename generation (globbing); an "
"expression such as @t{*/@{foo,bar@}} is split into two separate words "
"@t{*/foo} and @t{*/bar} before filename generation takes place.  In "
"particular, note that this is liable to produce a `no match' error if "
"@emph{either} of the two expressions does not match; this is to be "
"contrasted with @t{*/(foo|bar)}, which is treated as a single pattern but "
"otherwise has similar effects."
msgstr ""

#. type: Plain text
#: zsh.texi:6362
msgid ""
"To combine brace expansion with array expansion, see the "
"@t{$@{^}@var{spec}@t{@}} form described in @ref{Parameter Expansion} above."
msgstr ""

#. type: cindex
#: zsh.texi:6368
#, no-wrap
msgid "filename expansion"
msgstr ""

#. type: cindex
#: zsh.texi:6369
#, no-wrap
msgid "expansion, filename"
msgstr ""

#. type: Plain text
#: zsh.texi:6376
msgid ""
"Each word is checked to see if it begins with an unquoted `@t{~}'.  If it "
"does, then the word up to a `@t{/}', or the end of the word if there is no "
"`@t{/}', is checked to see if it can be substituted in one of the ways "
"described here.  If so, then the `@t{~}' and the checked portion are "
"replaced with the appropriate substitute value."
msgstr ""

#. type: Plain text
#: zsh.texi:6381
msgid ""
"A `@t{~}' by itself is replaced by the value of @t{$HOME}.  A `@t{~}' "
"followed by a `@t{+}' or a `@t{-}' is replaced by current or previous "
"working directory, respectively."
msgstr ""

#. type: Plain text
#: zsh.texi:6394
msgid ""
"A `@t{~}' followed by a number is replaced by the directory at that position "
"in the directory stack.  `@t{~0}' is equivalent to `@t{~+}', and `@t{~1}' is "
"the top of the stack.  `@t{~+}' followed by a number is replaced by the "
"directory at that position in the directory stack.  `@t{~+0}' is equivalent "
"to `@t{~+}', and `@t{~+1}' is the top of the stack.  `@t{~-}' followed by a "
"number is replaced by the directory that many positions from the bottom of "
"the stack.  `@t{~-0}' is the bottom of the stack."
msgstr ""

#. type: pindex
#: zsh.texi:6394 zsh.texi:14171 zsh.texi:14358
#, no-wrap
msgid "PUSHD_MINUS, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:6398
msgid ""
"The @t{PUSHD_MINUS} option exchanges the effects of `@t{~+}' and `@t{~-}' "
"where they are followed by a number."
msgstr ""

#. type: menuentry
#: zsh.texi:6405
msgid "Dynamic named directories::"
msgstr ""

#. type: menuentry
#: zsh.texi:6405
msgid "Static named directories::"
msgstr ""

#. type: menuentry
#: zsh.texi:6405
msgid "`=' expansion::"
msgstr ""

#. type: subsection
#: zsh.texi:6405 zsh.texi:6548 zsh.texi:6562 zsh.texi:6564
#, no-wrap
msgid "Notes"
msgstr ""

#. type: node
#: zsh.texi:6408 zsh.texi:6410 zsh.texi:6516
#, no-wrap
msgid "Dynamic named directories"
msgstr ""

#. type: node
#: zsh.texi:6408 zsh.texi:6516 zsh.texi:6518 zsh.texi:6548
#, no-wrap
msgid "Static named directories"
msgstr ""

#. type: cindex
#: zsh.texi:6412
#, no-wrap
msgid "directories, named, dynamic"
msgstr ""

#. type: cindex
#: zsh.texi:6413
#, no-wrap
msgid "named directories, dynamic"
msgstr ""

#. type: cindex
#: zsh.texi:6414
#, no-wrap
msgid "dynamic named directories"
msgstr ""

#. type: Plain text
#: zsh.texi:6421
msgid ""
"If the function @t{zsh_directory_name} exists, or the shell variable "
"@t{zsh_directory_name_functions} exists and contains an array of function "
"names, then the functions are used to implement dynamic directory naming.  "
"The functions are tried in order until one returns status zero, so it is "
"important that functions test whether they can handle the case in question "
"and return an appropriate status."
msgstr ""

#. type: Plain text
#: zsh.texi:6434
msgid ""
"A `@t{~}' followed by a string @var{namstr} in unquoted square brackets is "
"treated specially as a dynamic directory name.  Note that the first unquoted "
"closing square bracket always terminates @var{namstr}.  The shell function "
"is passed two arguments: the string @t{n} (for name) and @var{namstr}.  It "
"should either set the array @t{reply} to a single element which is the "
"directory corresponding to the name and return status zero (executing an "
"assignment as the last statement is usually sufficient), or it should return "
"status non-zero.  In the former case the element of reply is used as the "
"directory; in the latter case the substitution is deemed to have failed.  If "
"all functions fail and the option @t{NOMATCH} is set, an error results."
msgstr ""

#. type: Plain text
#: zsh.texi:6448
msgid ""
"The functions defined as above are also used to see if a directory can be "
"turned into a name, for example when printing the directory stack or when "
"expanding @t{%~} in prompts.  In this case each function is passed two "
"arguments: the string @t{d} (for directory) and the candidate for dynamic "
"naming.  The function should either return non-zero status, if the directory "
"cannot be named by the function, or it should set the array reply to consist "
"of two elements: the first is the dynamic name for the directory (as would "
"appear within `@t{~[}@var{...}@t{]}'), and the second is the prefix length "
"of the directory to be replaced.  For example, if the trial directory is "
"@t{/home/myname/src/zsh} and the dynamic name for @t{/home/myname/src} "
"(which has 16 characters) is @t{s}, then the function sets"
msgstr ""

#. type: example
#: zsh.texi:6452
#, no-wrap
msgid "reply=(s 16)\n"
msgstr ""

#. type: Plain text
#: zsh.texi:6459
msgid ""
"The directory name so returned is compared with possible static names for "
"parts of the directory path, as described below; it is used if the prefix "
"length matched (16 in the example) is longer than that matched by any static "
"name."
msgstr ""

#. type: Plain text
#: zsh.texi:6466
msgid ""
"It is not a requirement that a function implements both @t{n} and @t{d} "
"calls; for example, it might be appropriate for certain dynamic forms of "
"expansion not to be contracted to names.  In that case any call with the "
"first argument @t{d} should cause a non-zero status to be returned."
msgstr ""

#. type: Plain text
#: zsh.texi:6474
msgid ""
"The completion system calls `@t{zsh_directory_name c}' followed by "
"equivalent calls to elements of the array @t{zsh_directory_name_functions}, "
"if it exists, in order to complete dynamic names for directories.  The code "
"for this should be as for any other completion function as described in "
"@ref{Completion System}."
msgstr ""

#. type: Plain text
#: zsh.texi:6480
msgid ""
"As a working example, here is a function that expands any dynamic names "
"beginning with the string @t{p:} to directories below "
"@t{/home/pws/perforce}.  In this simple case a static name for the directory "
"would be just as effective."
msgstr ""

#. type: example
#: zsh.texi:6513
#, no-wrap
msgid ""
"zsh_directory_name() @{\n"
"  emulate -L zsh\n"
"  setopt extendedglob\n"
"  local -a match mbegin mend\n"
"  if [[ $1 = d ]]; then\n"
"    # turn the directory into a name\n"
"    if [[ $2 = (#b)(/home/pws/perforce/)([^/]##)* ]]; then\n"
"      typeset -ga reply\n"
"      reply=(p:$match[2] $(( $@{#match[1]@} + $@{#match[2]@} )) )\n"
"    else\n"
"      return 1\n"
"    fi\n"
"  elif [[ $1 = n ]]; then\n"
"    # turn the name into a directory\n"
"    [[ $2 != (#b)p:(?*) ]] && return 1\n"
"    typeset -ga reply\n"
"    reply=(/home/pws/perforce/$match[1])\n"
"  elif [[ $1 = c ]]; then\n"
"    # complete names\n"
"    local expl\n"
"    local -a dirs\n"
"    dirs=(/home/pws/perforce/*(/:t))\n"
"    dirs=(p:$@{^dirs@})\n"
"    _wanted dynamic-dirs expl 'dynamic directory' compadd -S\\] -a dirs\n"
"    return\n"
"  else\n"
"    return 1\n"
"  fi\n"
"  return 0\n"
"@}\n"
msgstr ""

#. type: node
#: zsh.texi:6516 zsh.texi:6548 zsh.texi:6550 zsh.texi:6562
#, no-wrap
msgid "`=' expansion"
msgstr ""

#. type: cindex
#: zsh.texi:6520
#, no-wrap
msgid "directories, named, static"
msgstr ""

#. type: cindex
#: zsh.texi:6521
#, no-wrap
msgid "named directories, static"
msgstr ""

#. type: cindex
#: zsh.texi:6522
#, no-wrap
msgid "static named directories"
msgstr ""

#. type: Plain text
#: zsh.texi:6532
msgid ""
"A `@t{~}' followed by anything not already covered consisting of any number "
"of alphanumeric characters or underscore (`@t{_}'), hyphen (`@t{-}'), or dot "
"(`@t{.}') is looked up as a named directory, and replaced by the value of "
"that named directory if found.  Named directories are typically home "
"directories for users on the system.  They may also be defined if the text "
"after the `@t{~}' is the name of a string shell parameter whose value begins "
"with a `@t{/}'.  Note that trailing slashes will be removed from the path to "
"the directory (though the original parameter is not modified)."
msgstr ""

#. type: Plain text
#: zsh.texi:6536
msgid ""
"It is also possible to define directory names using the @t{-d} option to the "
"@t{hash} builtin."
msgstr ""

#. type: Plain text
#: zsh.texi:6546
msgid ""
"When the shell prints a path (e.g. when expanding @t{%~} in prompts or when "
"printing the directory stack), the path is checked to see if it has a named "
"directory as its prefix.  If so, then the prefix portion is replaced with a "
"`@t{~}' followed by the name of the directory.  The shorter of the two ways "
"of referring to the directory is used, i.e. either the directory name or the "
"full path; the name is used if they are the same length.  The parameters "
"@t{$PWD} and @t{$OLDPWD} are never abbreviated in this fashion."
msgstr ""

#. type: Plain text
#: zsh.texi:6560
msgid ""
"If a word begins with an unquoted `@t{=}' and the @t{EQUALS} option is set, "
"the remainder of the word is taken as the name of a command.  If a command "
"exists by that name, the word is replaced by the full pathname of the "
"command."
msgstr ""

#. type: cindex
#: zsh.texi:6566
#, no-wrap
msgid "filename expansion, notes"
msgstr ""

#. type: Plain text
#: zsh.texi:6575
msgid ""
"Filename expansion is performed on the right hand side of a parameter "
"assignment, including those appearing after commands of the @t{typeset} "
"family.  In this case, the right hand side will be treated as a "
"colon-separated list in the manner of the @t{PATH} parameter, so that a "
"`@t{~}' or an `@t{=}' following a `@t{:}' is eligible for expansion.  All "
"such behaviour can be disabled by quoting the `@t{~}', the `@t{=}', or the "
"whole expression (but not simply the colon); the @t{EQUALS} option is also "
"respected."
msgstr ""

#. type: Plain text
#: zsh.texi:6581
msgid ""
"If the option @t{MAGIC_EQUAL_SUBST} is set, any unquoted shell argument in "
"the form `@var{identifier}@t{=}@var{expression}' becomes eligible for file "
"expansion as described in the previous paragraph.  Quoting the first `@t{=}' "
"also inhibits this."
msgstr ""

#. type: cindex
#: zsh.texi:6587
#, no-wrap
msgid "filename generation"
msgstr ""

#. type: Plain text
#: zsh.texi:6591
msgid ""
"If a word contains an unquoted instance of one of the characters `@t{*}', "
"`@t{(}', `@t{|}', `@t{<}', `@t{[}', or `@t{?}', it is regarded as a pattern "
"for filename generation, unless the @t{GLOB} option is unset."
msgstr ""

#. type: pindex
#: zsh.texi:6591
#, no-wrap
msgid "GLOB, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:6593
msgid "If the @t{EXTENDED_GLOB} option is set,"
msgstr ""

#. type: pindex
#: zsh.texi:6593
#, no-wrap
msgid "EXTENDED_GLOB, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:6596
msgid ""
"the `@t{^}' and `@t{#}' characters also denote a pattern; otherwise they are "
"not treated specially by the shell."
msgstr ""

#. type: Plain text
#: zsh.texi:6601
msgid ""
"The word is replaced with a list of sorted filenames that match the "
"pattern.  If no matching pattern is found, the shell gives an error message, "
"unless the @t{NULL_GLOB} option is set,"
msgstr ""

#. type: pindex
#: zsh.texi:6601
#, no-wrap
msgid "NULL_GLOB, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:6604
msgid ""
"in which case the word is deleted; or unless the @t{NOMATCH} option is "
"unset, in which case the word is left unchanged."
msgstr ""

#. type: pindex
#: zsh.texi:6604
#, no-wrap
msgid "NOMATCH, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:6612
msgid ""
"In filename generation, the character `@t{/}' must be matched explicitly; "
"also, a `@t{.}' must be matched explicitly at the beginning of a pattern or "
"after a `@t{/}', unless the @t{GLOB_DOTS} option is set."
msgstr ""

#. type: pindex
#: zsh.texi:6612
#, no-wrap
msgid "GLOB_DOTS, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:6616
msgid ""
"No filename generation pattern matches the files `@t{.}' or `@t{..}'.  In "
"other instances of pattern matching, the `@t{/}' and `@t{.}' are not treated "
"specially."
msgstr ""

#. type: subsection
#: zsh.texi:6617
#, no-wrap
msgid "Glob Operators"
msgstr ""

#. type: cindex
#: zsh.texi:6619
#, no-wrap
msgid "glob operators"
msgstr ""

#. type: table
#: zsh.texi:6623
msgid "Matches any string, including the null string."
msgstr ""

#. type: table
#: zsh.texi:6626
msgid "Matches any character."
msgstr ""

#. type: item
#: zsh.texi:6627
#, no-wrap
msgid "@t{[}...@t{]}"
msgstr ""

#. type: table
#: zsh.texi:6632
msgid ""
"Matches any of the enclosed characters.  Ranges of characters can be "
"specified by separating two characters by a `@t{-}'.  A `@t{-}' or `@t{]}' "
"may be matched by including it as the first character in the list."
msgstr ""

#. type: cindex
#: zsh.texi:6632
#, no-wrap
msgid "character classes"
msgstr ""

#. type: table
#: zsh.texi:6639
msgid ""
"There are also several named classes of characters, in the form "
"`@t{[:}@var{name}@t{:]}' with the following meanings.  The first set use the "
"macros provided by the operating system to test for the given character "
"combinations, including any modifications due to local language settings, "
"see ctype(3):"
msgstr ""

#. type: t{#1}
#: zsh.texi:6642
#, no-wrap
msgid "[:alnum:]"
msgstr ""

#. type: table
#: zsh.texi:6644
msgid "The character is alphanumeric"
msgstr ""

#. type: t{#1}
#: zsh.texi:6645
#, no-wrap
msgid "[:alpha:]"
msgstr ""

#. type: table
#: zsh.texi:6647
msgid "The character is alphabetic"
msgstr ""

#. type: t{#1}
#: zsh.texi:6648
#, no-wrap
msgid "[:ascii:]"
msgstr ""

#. type: table
#: zsh.texi:6651
msgid ""
"The character is 7-bit, i.e. is a single-byte character without the top bit "
"set."
msgstr ""

#. type: t{#1}
#: zsh.texi:6652
#, no-wrap
msgid "[:blank:]"
msgstr ""

#. type: table
#: zsh.texi:6654
msgid "The character is a blank character"
msgstr ""

#. type: t{#1}
#: zsh.texi:6655
#, no-wrap
msgid "[:cntrl:]"
msgstr ""

#. type: table
#: zsh.texi:6657
msgid "The character is a control character"
msgstr ""

#. type: t{#1}
#: zsh.texi:6658
#, no-wrap
msgid "[:digit:]"
msgstr ""

#. type: table
#: zsh.texi:6660
msgid "The character is a decimal digit"
msgstr ""

#. type: t{#1}
#: zsh.texi:6661
#, no-wrap
msgid "[:graph:]"
msgstr ""

#. type: table
#: zsh.texi:6663
msgid "The character is a printable character other than whitespace"
msgstr ""

#. type: t{#1}
#: zsh.texi:6664
#, no-wrap
msgid "[:lower:]"
msgstr ""

#. type: table
#: zsh.texi:6666
msgid "The character is a lowercase letter"
msgstr ""

#. type: t{#1}
#: zsh.texi:6667
#, no-wrap
msgid "[:print:]"
msgstr ""

#. type: table
#: zsh.texi:6669
msgid "The character is printable"
msgstr ""

#. type: t{#1}
#: zsh.texi:6670
#, no-wrap
msgid "[:punct:]"
msgstr ""

#. type: table
#: zsh.texi:6672
msgid "The character is printable but neither alphanumeric nor whitespace"
msgstr ""

#. type: t{#1}
#: zsh.texi:6673
#, no-wrap
msgid "[:space:]"
msgstr ""

#. type: table
#: zsh.texi:6675
msgid "The character is whitespace"
msgstr ""

#. type: t{#1}
#: zsh.texi:6676
#, no-wrap
msgid "[:upper:]"
msgstr ""

#. type: table
#: zsh.texi:6678
msgid "The character is an uppercase letter"
msgstr ""

#. type: t{#1}
#: zsh.texi:6679
#, no-wrap
msgid "[:xdigit:]"
msgstr ""

#. type: table
#: zsh.texi:6681
msgid "The character is a hexadecimal digit"
msgstr ""

#. type: table
#: zsh.texi:6687
msgid ""
"Another set of named classes is handled internally by the shell and is not "
"sensitive to the locale:"
msgstr ""

#. type: t{#1}
#: zsh.texi:6690
#, no-wrap
msgid "[:IDENT:]"
msgstr ""

#. type: table
#: zsh.texi:6694
msgid ""
"The character is allowed to form part of a shell identifier, such as a "
"parameter name; this test respects the @t{POSIX_IDENTIFIERS} option"
msgstr ""

#. type: t{#1}
#: zsh.texi:6695
#, no-wrap
msgid "[:IFS:]"
msgstr ""

#. type: table
#: zsh.texi:6698
msgid ""
"The character is used as an input field separator, i.e. is contained in the "
"@t{IFS} parameter"
msgstr ""

#. type: t{#1}
#: zsh.texi:6699
#, no-wrap
msgid "[:IFSSPACE:]"
msgstr ""

#. type: table
#: zsh.texi:6703
msgid ""
"The character is an IFS white space character; see the documentation for "
"@t{IFS} in @ref{Parameters Used By The Shell}."
msgstr ""

#. type: t{#1}
#: zsh.texi:6704
#, no-wrap
msgid "[:INCOMPLETE:]"
msgstr ""

#. type: table
#: zsh.texi:6711
msgid ""
"Matches a byte that starts an incomplete multibyte character.  Note that "
"there may be a sequence of more than one bytes that taken together form the "
"prefix of a multibyte character.  To test for a potentially incomplete byte "
"sequence, use the pattern `@t{[[:INCOMPLETE:]]*}'.  This will never match a "
"sequence starting with a valid multibyte character."
msgstr ""

#. type: t{#1}
#: zsh.texi:6712
#, no-wrap
msgid "[:INVALID:]"
msgstr ""

#. type: table
#: zsh.texi:6717
msgid ""
"Matches a byte that does not start a valid multibyte character.  Note this "
"may be a continuation byte of an incomplete multibyte character as any part "
"of a multibyte string consisting of invalid and incomplete multibyte "
"characters is treated as single bytes."
msgstr ""

#. type: t{#1}
#: zsh.texi:6718
#, no-wrap
msgid "[:WORD:]"
msgstr ""

#. type: table
#: zsh.texi:6721
msgid ""
"The character is treated as part of a word; this test is sensitive to the "
"value of the @t{WORDCHARS} parameter"
msgstr ""

#. type: table
#: zsh.texi:6730
msgid ""
"Note that the square brackets are additional to those enclosing the whole "
"set of characters, so to test for a single alphanumeric character you need "
"`@t{[[:alnum:]]}'.  Named character sets can be used alongside other types, "
"e.g. `@t{[[:alpha:]0-9]}'."
msgstr ""

#. type: item
#: zsh.texi:6731
#, no-wrap
msgid "@t{[^}...@t{]}"
msgstr ""

#. type: itemx
#: zsh.texi:6732
#, no-wrap
msgid "@t{[!}...@t{]}"
msgstr ""

#. type: table
#: zsh.texi:6735
msgid ""
"Like @t{[}...@t{]}, except that it matches any character which is not in the "
"given set."
msgstr ""

#. type: item
#: zsh.texi:6736
#, no-wrap
msgid "@t{<}[@var{x}]@t{-}[@var{y}]@t{>}"
msgstr ""

#. type: table
#: zsh.texi:6741
msgid ""
"Matches any number in the range @var{x} to @var{y}, inclusive.  Either of "
"the numbers may be omitted to make the range open-ended; hence `@t{<->}' "
"matches any number.  To match individual digits, the @t{[}...@t{]} form is "
"more efficient."
msgstr ""

#. type: table
#: zsh.texi:6750
msgid ""
"Be careful when using other wildcards adjacent to patterns of this form; for "
"example, @t{<0-9>*} will actually match any number whatsoever at the start "
"of the string, since the `@t{<0-9>}' will match the first digit, and the "
"`@t{*}' will match any others.  This is a trap for the unwary, but is in "
"fact an inevitable consequence of the rule that the longest possible match "
"always succeeds.  Expressions such as `@t{<0-9>[^[:digit:]]*}' can be used "
"instead."
msgstr ""

#. type: item
#: zsh.texi:6751
#, no-wrap
msgid "@t{(}...@t{)}"
msgstr ""

#. type: table
#: zsh.texi:6758
msgid ""
"Matches the enclosed pattern.  This is used for grouping.  If the "
"@t{KSH_GLOB} option is set, then a `@t{@@}', `@t{*}', `@t{+}', `@t{?}' or "
"`@t{!}' immediately preceding the `@t{(}' is treated specially, as detailed "
"below. The option @t{SH_GLOB} prevents bare parentheses from being used in "
"this way, though the @t{KSH_GLOB} option is still available."
msgstr ""

#. type: table
#: zsh.texi:6766
msgid ""
"Note that grouping cannot extend over multiple directories: it is an error "
"to have a `@t{/}' within a group (this only applies for patterns used in "
"filename generation).  There is one exception: a group of the form "
"@t{(}@var{pat}@t{/)#} appearing as a complete path segment can match a "
"sequence of directories.  For example, @t{foo/(a*/)#bar} matches "
"@t{foo/bar}, @t{foo/any/bar}, @t{foo/any/anyother/bar}, and so on."
msgstr ""

#. type: item
#: zsh.texi:6767
#, no-wrap
msgid "@var{x}@t{|}@var{y}"
msgstr ""

#. type: table
#: zsh.texi:6773
msgid ""
"Matches either @var{x} or @var{y}.  This operator has lower precedence than "
"any other.  The `@t{|}' character must be within parentheses, to avoid "
"interpretation as a pipeline.  The alternatives are tried in order from left "
"to right."
msgstr ""

#. type: item
#: zsh.texi:6774
#, no-wrap
msgid "@t{^}@var{x}"
msgstr ""

#. type: table
#: zsh.texi:6780
msgid ""
"(Requires @t{EXTENDED_GLOB} to be set.)  Matches anything except the pattern "
"@var{x}.  This has a higher precedence than `@t{/}', so `@t{^foo/bar}' will "
"search directories in `@t{.}' except `@t{./foo}' for a file named `@t{bar}'."
msgstr ""

#. type: item
#: zsh.texi:6781
#, no-wrap
msgid "@var{x}@t{~}@var{y}"
msgstr ""

#. type: table
#: zsh.texi:6791
msgid ""
"(Requires @t{EXTENDED_GLOB} to be set.)  Match anything that matches the "
"pattern @var{x} but does not match @var{y}.  This has lower precedence than "
"any operator except `@t{|}', so `@t{*/*~foo/bar}' will search for all files "
"in all directories in `@t{.}' and then exclude `@t{foo/bar}' if there was "
"such a match.  Multiple patterns can be excluded by "
"`@var{foo}@t{~}@var{bar}@t{~}@var{baz}'.  In the exclusion pattern "
"(@var{y}), `@t{/}' and `@t{.}' are not treated specially the way they "
"usually are in globbing."
msgstr ""

#. type: item
#: zsh.texi:6792
#, no-wrap
msgid "@var{x}@t{#}"
msgstr ""

#. type: table
#: zsh.texi:6802
msgid ""
"(Requires @t{EXTENDED_GLOB} to be set.)  Matches zero or more occurrences of "
"the pattern @var{x}.  This operator has high precedence; `@t{12#}' is "
"equivalent to `@t{1(2#)}', rather than `@t{(12)#}'.  It is an error for an "
"unquoted `@t{#}' to follow something which cannot be repeated; this includes "
"an empty string, a pattern already followed by `@t{##}', or parentheses when "
"part of a @t{KSH_GLOB} pattern (for example, `@t{!(}@var{foo}@t{)#}' is "
"invalid and must be replaced by `@t{*(!(}@var{foo}@t{))}')."
msgstr ""

#. type: item
#: zsh.texi:6803
#, no-wrap
msgid "@var{x}@t{##}"
msgstr ""

#. type: table
#: zsh.texi:6810
msgid ""
"(Requires @t{EXTENDED_GLOB} to be set.)  Matches one or more occurrences of "
"the pattern @var{x}.  This operator has high precedence; `@t{12##}' is "
"equivalent to `@t{1(2##)}', rather than `@t{(12)##}'.  No more than two "
"active `@t{#}' characters may appear together.  (Note the potential clash "
"with glob qualifiers in the form `@t{1(2##)}' which should therefore be "
"avoided.)"
msgstr ""

#. type: subsection
#: zsh.texi:6813
#, no-wrap
msgid "ksh-like Glob Operators"
msgstr ""

#. type: pindex
#: zsh.texi:6815
#, no-wrap
msgid "KSH_GLOB, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:6820
msgid ""
"If the @t{KSH_GLOB} option is set, the effects of parentheses can be "
"modified by a preceding `@t{@@}', `@t{*}', `@t{+}', `@t{?}' or `@t{!}'.  "
"This character need not be unquoted to have special effects, but the `@t{(}' "
"must be."
msgstr ""

#. type: item
#: zsh.texi:6823
#, no-wrap
msgid "@t{@@(}...@t{)}"
msgstr ""

#. type: table
#: zsh.texi:6825
msgid "Match the pattern in the parentheses.  (Like `@t{(}...@t{)}'.)"
msgstr ""

#. type: item
#: zsh.texi:6826
#, no-wrap
msgid "@t{*(}...@t{)}"
msgstr ""

#. type: table
#: zsh.texi:6829
msgid ""
"Match any number of occurrences.  (Like `@t{(}...@t{)#}', except that "
"recursive directory searching is not supported.)"
msgstr ""

#. type: item
#: zsh.texi:6830
#, no-wrap
msgid "@t{+(}...@t{)}"
msgstr ""

#. type: table
#: zsh.texi:6833
msgid ""
"Match at least one occurrence.  (Like `@t{(}...@t{)##}', except that "
"recursive directory searching is not supported.)"
msgstr ""

#. type: item
#: zsh.texi:6834
#, no-wrap
msgid "@t{?(}...@t{)}"
msgstr ""

#. type: table
#: zsh.texi:6836
msgid "Match zero or one occurrence.  (Like `@t{(|}...@t{)}'.)"
msgstr ""

#. type: item
#: zsh.texi:6837
#, no-wrap
msgid "@t{!(}...@t{)}"
msgstr ""

#. type: table
#: zsh.texi:6840
msgid ""
"Match anything but the expression in parentheses.  (Like "
"`@t{(^(}...@t{))}'.)"
msgstr ""

#. type: subsection
#: zsh.texi:6843
#, no-wrap
msgid "Precedence"
msgstr ""

#. type: cindex
#: zsh.texi:6845
#, no-wrap
msgid "precedence of glob operators"
msgstr ""

#. type: Plain text
#: zsh.texi:6858
msgid ""
"The precedence of the operators given above is (highest) `@t{^}', `@t{/}', "
"`@t{~}', `@t{|}' (lowest); the remaining operators are simply treated from "
"left to right as part of a string, with `@t{#}' and `@t{##}' applying to the "
"shortest possible preceding unit (i.e. a character, `@t{?}', "
"`@t{[}...@t{]}', `@t{<}...@t{>}', or a parenthesised expression).  As "
"mentioned above, a `@t{/}' used as a directory separator may not appear "
"inside parentheses, while a `@t{|}' must do so; in patterns used in other "
"contexts than filename generation (for example, in @t{case} statements and "
"tests within `@t{[[}...@t{]]}'), a `@t{/}' is not special; and `@t{/}' is "
"also not special after a `@t{~}' appearing outside parentheses in a filename "
"pattern."
msgstr ""

#. type: subsection
#: zsh.texi:6859
#, no-wrap
msgid "Globbing Flags"
msgstr ""

#. type: cindex
#: zsh.texi:6861
#, no-wrap
msgid "globbing flags"
msgstr ""

#. type: cindex
#: zsh.texi:6862
#, no-wrap
msgid "glob flags"
msgstr ""

#. type: Plain text
#: zsh.texi:6868
msgid ""
"There are various flags which affect any text to their right up to the end "
"of the enclosing group or to the end of the pattern; they require the "
"@t{EXTENDED_GLOB} option. All take the form @t{(#}@var{X}@t{)} where @var{X} "
"may have one of the following forms:"
msgstr ""

#. type: table
#: zsh.texi:6874
msgid ""
"Case insensitive: upper or lower case characters in the pattern match upper "
"or lower case characters."
msgstr ""

#. type: table
#: zsh.texi:6879
msgid ""
"Lower case characters in the pattern match upper or lower case characters; "
"upper case characters in the pattern still only match upper case characters."
msgstr ""

#. type: t{#1}
#: zsh.texi:6880 zsh.texi:7300 zsh.texi:8209 zsh.texi:30893
#, no-wrap
msgid "I"
msgstr ""

#. type: table
#: zsh.texi:6883
msgid ""
"Case sensitive: locally negates the effect of @t{i} or @t{l} from that point "
"on."
msgstr ""

#. type: t{#1}
#: zsh.texi:6884 zsh.texi:9233 zsh.texi:19812 zsh.texi:39694
#, no-wrap
msgid "match"
msgstr ""

#. type: t{#1}
#: zsh.texi:6885 zsh.texi:9234
#, no-wrap
msgid "mbegin"
msgstr ""

#. type: t{#1}
#: zsh.texi:6886 zsh.texi:9235
#, no-wrap
msgid "mend"
msgstr ""

#. type: table
#: zsh.texi:6900
msgid ""
"Activate backreferences for parenthesised groups in the pattern; this does "
"not work in filename generation.  When a pattern with a set of active "
"parentheses is matched, the strings matched by the groups are stored in the "
"array @t{$match}, the indices of the beginning of the matched parentheses in "
"the array @t{$mbegin}, and the indices of the end in the array @t{$mend}, "
"with the first element of each array corresponding to the first "
"parenthesised group, and so on.  These arrays are not otherwise special to "
"the shell.  The indices use the same convention as does parameter "
"substitution, so that elements of @t{$mend} and @t{$mbegin} may be used in "
"subscripts; the @t{KSH_ARRAYS} option is respected.  Sets of globbing flags "
"are not considered parenthesised groups; only the first nine active "
"parentheses can be referenced."
msgstr ""

#. type: example
#: zsh.texi:6910
#, no-wrap
msgid ""
"foo=\"a_string_with_a_message\"\n"
"if [[ $foo = (a|an)_(#b)(*) ]]; then\n"
"  print $@{foo[$mbegin[1],$mend[1]]@}\n"
"fi\n"
msgstr ""

#. type: table
#: zsh.texi:6916
msgid ""
"prints `@t{string_with_a_message}'.  Note that the first set of parentheses "
"is before the @t{(#b)} and does not create a backreference."
msgstr ""

#. type: table
#: zsh.texi:6924
msgid ""
"Backreferences work with all forms of pattern matching other than filename "
"generation, but note that when performing matches on an entire array, such "
"as @t{$@{}@var{array}@t{#}@var{pattern}@t{@}}, or a global substitution, "
"such as @t{$@{}@var{param}@t{//}@var{pat}@t{/}@var{repl}@t{@}}, only the "
"data for the last match remains available.  In the case of global "
"replacements this may still be useful.  See the example for the @t{m} flag "
"below."
msgstr ""

#. type: table
#: zsh.texi:6936
msgid ""
"The numbering of backreferences strictly follows the order of the opening "
"parentheses from left to right in the pattern string, although sets of "
"parentheses may be nested.  There are special rules for parentheses followed "
"by `@t{#}' or `@t{##}'.  Only the last match of the parenthesis is "
"remembered: for example, in `@t{[[ abab = (#b)([ab])# ]]}', only the final "
"`@t{b}' is stored in @t{match[1]}.  Thus extra parentheses may be necessary "
"to match the complete segment: for example, use `@t{X((ab|cd)#)Y}' to match "
"a whole string of either `@t{ab}' or `@t{cd}' between `@t{X}' and `@t{Y}', "
"using the value of @t{$match[1]} rather than @t{$match[2]}."
msgstr ""

#. type: table
#: zsh.texi:6944
msgid ""
"If the match fails none of the parameters is altered, so in some cases it "
"may be necessary to initialise them beforehand.  If some of the "
"backreferences fail to match --- which happens if they are in an alternate "
"branch which fails to match, or if they are followed by @t{#} and matched "
"zero times --- then the matched string is set to the empty string, and the "
"start and end indices are set to -1."
msgstr ""

#. type: table
#: zsh.texi:6947
msgid "Pattern matching with backreferences is slightly slower than without."
msgstr ""

#. type: table
#: zsh.texi:6951
msgid ""
"Deactivate backreferences, negating the effect of the @t{b} flag from that "
"point on."
msgstr ""

#. type: item
#: zsh.texi:6952
#, no-wrap
msgid "@t{c}@var{N}@t{,}@var{M}"
msgstr ""

#. type: table
#: zsh.texi:6964
msgid ""
"The flag @t{(#c}@var{N}@t{,}@var{M}@t{)} can be used anywhere that the @t{#} "
"or @t{##} operators can be used except in the expressions `@t{(*/)#}' and "
"`@t{(*/)##}' in filename generation, where `@t{/}' has special meaning; it "
"cannot be combined with other globbing flags and a bad pattern error occurs "
"if it is misplaced.  It is equivalent to the form "
"@t{@{}@var{N}@t{,}@var{M}@t{@}} in regular expressions.  The previous "
"character or group is required to match between @var{N} and @var{M} times, "
"inclusive.  The form @t{(#c}@var{N}@t{)} requires exactly @t{N} matches; "
"@t{(#c,}@var{M}@t{)} is equivalent to specifying @var{N} as 0; "
"@t{(#c}@var{N}@t{,)} specifies that there is no maximum limit on the number "
"of matches."
msgstr ""

#. type: t{#1}
#: zsh.texi:6965 zsh.texi:9240
#, no-wrap
msgid "MATCH"
msgstr ""

#. type: t{#1}
#: zsh.texi:6966 zsh.texi:9241
#, no-wrap
msgid "MBEGIN"
msgstr ""

#. type: t{#1}
#: zsh.texi:6967 zsh.texi:9242
#, no-wrap
msgid "MEND"
msgstr ""

#. type: table
#: zsh.texi:6976
msgid ""
"Set references to the match data for the entire string matched; this is "
"similar to backreferencing and does not work in filename generation.  The "
"flag must be in effect at the end of the pattern, i.e. not local to a "
"group. The parameters @t{$MATCH}, @t{$MBEGIN} and @t{$MEND} will be set to "
"the string matched and to the indices of the beginning and end of the "
"string, respectively.  This is most useful in parameter substitutions, as "
"otherwise the string matched is obvious."
msgstr ""

#. type: example
#: zsh.texi:6984
#, no-wrap
msgid ""
"arr=(veldt jynx grimps waqf zho buck)\n"
"print $@{arr//(#m)[aeiou]/$@{(U)MATCH@}@}\n"
msgstr ""

#. type: table
#: zsh.texi:6989
msgid ""
"forces all the matches (i.e. all vowels) into uppercase, printing `@t{vEldt "
"jynx grImps wAqf zhO bUck}'."
msgstr ""

#. type: table
#: zsh.texi:6994
msgid ""
"Unlike backreferences, there is no speed penalty for using match references, "
"other than the extra substitutions required for the replacement strings in "
"cases such as the example shown."
msgstr ""

#. type: table
#: zsh.texi:6998
msgid ""
"Deactivate the @t{m} flag, hence no references to match data will be "
"created."
msgstr ""

#. type: item
#: zsh.texi:6999
#, no-wrap
msgid "@t{a}@var{num}"
msgstr ""

#. type: table
#: zsh.texi:7002
msgid ""
"Approximate matching: @var{num} errors are allowed in the string matched by "
"the pattern.  The rules for this are described in the next subsection."
msgstr ""

#. type: item
#: zsh.texi:7003
#, no-wrap
msgid "@t{s}, @t{e}"
msgstr ""

#. type: table
#: zsh.texi:7014
msgid ""
"Unlike the other flags, these have only a local effect, and each must appear "
"on its own: `@t{(#s)}' and `@t{(#e)}' are the only valid forms.  The "
"`@t{(#s)}' flag succeeds only at the start of the test string, and the "
"`@t{(#e)}' flag succeeds only at the end of the test string; they correspond "
"to `@t{^}' and `@t{$}' in standard regular expressions.  They are useful for "
"matching path segments in patterns other than those in filename generation "
"(where path segments are in any case treated separately).  For example, "
"`@t{*((#s)|/)test((#e)|/)*}' matches a path segment `@t{test}' in any of the "
"following strings: @t{test}, @t{test/at/start}, @t{at/end/test}, "
"@t{in/test/middle}."
msgstr ""

#. type: table
#: zsh.texi:7023
msgid ""
"Another use is in parameter substitution; for example "
"`@t{$@{array/(#s)A*Z(#e)@}}' will remove only elements of an array which "
"match the complete pattern `@t{A*Z}'.  There are other ways of performing "
"many operations of this type, however the combination of the substitution "
"operations `@t{/}' and `@t{//}' with the `@t{(#s)}' and `@t{(#e)}' flags "
"provides a single simple and memorable method."
msgstr ""

#. type: table
#: zsh.texi:7030
msgid ""
"Note that assertions of the form `@t{(^(#s))}' also work, i.e. match "
"anywhere except at the start of the string, although this actually means "
"`anything except a zero-length portion at the start of the string'; you need "
"to use `@t{(\"\"~(#s))}' to match a zero-length portion of the string not at "
"the start."
msgstr ""

#. type: table
#: zsh.texi:7042
msgid ""
"A `@t{q}' and everything up to the closing parenthesis of the globbing flags "
"are ignored by the pattern matching code.  This is intended to support the "
"use of glob qualifiers, see below.  The result is that the pattern "
"`@t{(#b)(*).c(#q.)}' can be used both for globbing and for matching against "
"a string.  In the former case, the `@t{(#q.)}' will be treated as a glob "
"qualifier and the `@t{(#b)}' will not be useful, while in the latter case "
"the `@t{(#b)}' is useful for backreferences and the `@t{(#q.)}' will be "
"ignored.  Note that colon modifiers in the glob qualifiers are also not "
"applied in ordinary pattern matching."
msgstr ""

#. type: table
#: zsh.texi:7051
msgid ""
"Respect the current locale in determining the presence of multibyte "
"characters in a pattern, provided the shell was compiled with "
"@t{MULTIBYTE_SUPPORT}.  This overrides the @t{MULTIBYTE} option; the default "
"behaviour is taken from the option.  Compare @t{U}.  (Mnemonic: typically "
"multibyte characters are from Unicode in the UTF-8 encoding, although any "
"extension of ASCII supported by the system library may be used.)"
msgstr ""

#. type: table
#: zsh.texi:7055
msgid ""
"All characters are considered to be a single byte long.  The opposite of "
"@t{u}.  This overrides the @t{MULTIBYTE} option."
msgstr ""

#. type: Plain text
#: zsh.texi:7065
msgid ""
"For example, the test string @t{fooxx} can be matched by the pattern "
"@t{(#i}@t{)FOOXX}, but not by @t{(#l}@t{)FOOXX}, "
"@t{(#i}@t{)FOO}@t{(#I}@t{)XX} or @t{((#i}@t{)FOOX}@t{)X}.  The string "
"@t{(#ia2}@t{)readme} specifies case-insensitive matching of @t{readme} with "
"up to two errors."
msgstr ""

#. type: Plain text
#: zsh.texi:7075
msgid ""
"When using the ksh syntax for grouping both @t{KSH_GLOB} and "
"@t{EXTENDED_GLOB} must be set and the left parenthesis should be preceded by "
"@t{@@}.  Note also that the flags do not affect letters inside @t{[}...@t{]} "
"groups, in other words @t{(#i}@t{)[a-z]} still matches only lowercase "
"letters.  Finally, note that when examining whole paths case-insensitively "
"every directory must be searched for all files which match, so that a "
"pattern of the form @t{(#i}@t{)/foo/bar/...} is potentially slow."
msgstr ""

#. type: subsection
#: zsh.texi:7078
#, no-wrap
msgid "Approximate Matching"
msgstr ""

#. type: cindex
#: zsh.texi:7080
#, no-wrap
msgid "approximate matching"
msgstr ""

#. type: cindex
#: zsh.texi:7081
#, no-wrap
msgid "matching, approximate"
msgstr ""

#. type: Plain text
#: zsh.texi:7085
msgid ""
"When matching approximately, the shell keeps a count of the errors found, "
"which cannot exceed the number specified in the @t{(#a}@var{num}@t{)} "
"flags.  Four types of error are recognised:"
msgstr ""

#. type: item
#: zsh.texi:7088 zsh.texi:13426 zsh.texi:31710
#, no-wrap
msgid "1."
msgstr ""

#. type: table
#: zsh.texi:7090
msgid "Different characters, as in @t{fooxbar} and @t{fooybar}."
msgstr ""

#. type: item
#: zsh.texi:7091 zsh.texi:13433 zsh.texi:31713
#, no-wrap
msgid "2."
msgstr ""

#. type: table
#: zsh.texi:7093
msgid "Transposition of characters, as in @t{banana} and @t{abnana}."
msgstr ""

#. type: item
#: zsh.texi:7094 zsh.texi:13438 zsh.texi:31716
#, no-wrap
msgid "3."
msgstr ""

#. type: table
#: zsh.texi:7097
msgid ""
"A character missing in the target string, as with the pattern @t{road} and "
"target string @t{rod}."
msgstr ""

#. type: item
#: zsh.texi:7098 zsh.texi:13442 zsh.texi:31719
#, no-wrap
msgid "4."
msgstr ""

#. type: table
#: zsh.texi:7101
msgid ""
"An extra character appearing in the target string, as with @t{stove} and "
"@t{strove}."
msgstr ""

#. type: Plain text
#: zsh.texi:7108
msgid ""
"Thus, the pattern @t{(#a3}@t{)abcd} matches @t{dcba}, with the errors "
"occurring by using the first rule twice and the second once, grouping the "
"string as @t{[d][cb][a]} and @t{[a][bc][d]}."
msgstr ""

#. type: Plain text
#: zsh.texi:7120
msgid ""
"Non-literal parts of the pattern must match exactly, including characters in "
"character ranges: hence @t{(#a1}@t{)???} matches strings of length four, by "
"applying rule 4 to an empty part of the pattern, but not strings of length "
"two, since all the @t{?} must match.  Other characters which must match "
"exactly are initial dots in filenames (unless the @t{GLOB_DOTS} option is "
"set), and all slashes in filenames, so that @t{a/bc} is two errors from "
"@t{ab/c} (the slash cannot be transposed with another character).  "
"Similarly, errors are counted separately for non-contiguous strings in the "
"pattern, so that @t{(ab|cd}@t{)ef} is two errors from @t{aebf}."
msgstr ""

#. type: Plain text
#: zsh.texi:7130
msgid ""
"When using exclusion via the @t{~} operator, approximate matching is treated "
"entirely separately for the excluded part and must be activated separately.  "
"Thus, @t{(#a1}@t{)README~READ_ME} matches @t{READ.ME} but not @t{READ_ME}, "
"as the trailing @t{READ_ME} is matched without approximation.  However, "
"@t{(#a1}@t{)README~(#a1}@t{)READ_ME} does not match any pattern of the form "
"@t{READ}@var{?}@t{ME} as all such forms are now excluded."
msgstr ""

#. type: Plain text
#: zsh.texi:7143
msgid ""
"Apart from exclusions, there is only one overall error count; however, the "
"maximum errors allowed may be altered locally, and this can be delimited by "
"grouping.  For example, @t{(#a1}@t{)cat}@t{((#a0}@t{)dog}@t{)fox} allows one "
"error in total, which may not occur in the @t{dog} section, and the pattern "
"@t{(#a1}@t{)cat}@t{(#a0}@t{)dog}@t{(#a1}@t{)fox} is equivalent.  Note that "
"the point at which an error is first found is the crucial one for "
"establishing whether to use approximation; for example, @t{(#a1)abc(#a0)xyz} "
"will not match @t{abcdxyz}, because the error occurs at the `@t{x}', where "
"approximation is turned off."
msgstr ""

#. type: Plain text
#: zsh.texi:7151
msgid ""
"Entire path segments may be matched approximately, so that "
"`@t{(#a1)/foo/d/is/available/at/the/bar}' allows one error in any path "
"segment.  This is much less efficient than without the @t{(#a1)}, however, "
"since every directory in the path must be scanned for a possible approximate "
"match.  It is best to place the @t{(#a1)} after any path segments which are "
"known to be correct."
msgstr ""

#. type: subsection
#: zsh.texi:7154
#, no-wrap
msgid "Recursive Globbing"
msgstr ""

#. type: cindex
#: zsh.texi:7156
#, no-wrap
msgid "recursive globbing"
msgstr ""

#. type: cindex
#: zsh.texi:7157
#, no-wrap
msgid "globbing, recursive"
msgstr ""

#. type: Plain text
#: zsh.texi:7161
msgid ""
"A pathname component of the form `@t{(}@var{foo}@t{/)#}' matches a path "
"consisting of zero or more directories matching the pattern @var{foo}."
msgstr ""

#. type: Plain text
#: zsh.texi:7167
msgid ""
"As a shorthand, `@t{**/}' is equivalent to `@t{(*/)#}'; note that this "
"therefore matches files in the current directory as well as subdirectories.  "
"Thus:"
msgstr ""

#. type: example
#: zsh.texi:7171
#, no-wrap
msgid "ls -ld -- (*/)#bar\n"
msgstr ""

#. type: Plain text
#: zsh.texi:7175
msgid "or"
msgstr ""

#. type: example
#: zsh.texi:7179
#, no-wrap
msgid "ls -ld -- **/bar\n"
msgstr ""

#. type: Plain text
#: zsh.texi:7188
msgid ""
"does a recursive directory search for files named `@t{bar}' (potentially "
"including the file `@t{bar}' in the current directory).  This form does not "
"follow symbolic links; the alternative form `@t{***/}' does, but is "
"otherwise identical.  Neither of these can be combined with other forms of "
"globbing within the same path segment; in that case, the `@t{*}' operators "
"revert to their usual effect."
msgstr ""

#. type: Plain text
#: zsh.texi:7194
msgid ""
"Even shorter forms are available when the option @t{GLOB_STAR_SHORT} is "
"set.  In that case if no @t{/} immediately follows a @t{**} or @t{***} they "
"are treated as if both a @t{/} plus a further @t{*} are present.  Hence:"
msgstr ""

#. type: example
#: zsh.texi:7199
#, no-wrap
msgid ""
"setopt GLOBSTARSHORT\n"
"ls -ld -- **.c\n"
msgstr ""

#. type: example
#: zsh.texi:7207
#, no-wrap
msgid "ls -ld -- **/*.c\n"
msgstr ""

#. type: subsection
#: zsh.texi:7209
#, no-wrap
msgid "Glob Qualifiers"
msgstr ""

#. type: cindex
#: zsh.texi:7211
#, no-wrap
msgid "globbing, qualifiers"
msgstr ""

#. type: cindex
#: zsh.texi:7212
#, no-wrap
msgid "qualifiers, globbing"
msgstr ""

#. type: Plain text
#: zsh.texi:7217
msgid ""
"Patterns used for filename generation may end in a list of qualifiers "
"enclosed in parentheses.  The qualifiers specify which filenames that "
"otherwise match the given pattern will be inserted in the argument list."
msgstr ""

#. type: pindex
#: zsh.texi:7219
#, no-wrap
msgid "BARE_GLOB_QUAL, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:7227
msgid ""
"If the option @t{BARE_GLOB_QUAL} is set, then a trailing set of parentheses "
"containing no `@t{|}' or `@t{(}' characters (or `@t{~}' if it is special)  "
"is taken as a set of glob qualifiers.  A glob subexpression that would "
"normally be taken as glob qualifiers, for example `@t{(^x)}', can be forced "
"to be treated as part of the glob pattern by doubling the parentheses, in "
"this case producing `@t{((^x))}'."
msgstr ""

#. type: Plain text
#: zsh.texi:7249
msgid ""
"If the option @t{EXTENDED_GLOB} is set, a different syntax for glob "
"qualifiers is available, namely `@t{(#q}@var{x}@t{)}' where @var{x} is any "
"of the same glob qualifiers used in the other format.  The qualifiers must "
"still appear at the end of the pattern.  However, with this syntax multiple "
"glob qualifiers may be chained together.  They are treated as a logical AND "
"of the individual sets of flags.  Also, as the syntax is unambiguous, the "
"expression will be treated as glob qualifiers just as long any parentheses "
"contained within it are balanced; appearance of `@t{|}', `@t{(}' or `@t{~}' "
"does not negate the effect.  Note that qualifiers will be recognised in this "
"form even if a bare glob qualifier exists at the end of the pattern, for "
"example `@t{*(#q*)(.)}' will recognise executable regular files if both "
"options are set; however, mixed syntax should probably be avoided for the "
"sake of clarity.  Note that within conditions using the `@t{[[}' form the "
"presence of a parenthesised expression @t{(#q}@var{...}@t{)} at the end of a "
"string indicates that globbing should be performed; the expression may "
"include glob qualifiers, but it is also valid if it is simply @t{(#q)}.  "
"This does not apply to the right hand side of pattern match operators as the "
"syntax already has special significance."
msgstr ""

#. type: Plain text
#: zsh.texi:7252
msgid "A qualifier may be any one of the following:"
msgstr ""

#. type: t{#1}
#: zsh.texi:7257 zsh.texi:21507
#, no-wrap
msgid "directories"
msgstr ""

#. type: table
#: zsh.texi:7263
msgid ""
"`full' (i.e. non-empty) directories.  Note that the opposite sense "
"@t{(^F}@t{)} expands to empty directories and all non-directories.  Use "
"@t{(/^F}@t{)} for empty directories."
msgstr ""

#. type: table
#: zsh.texi:7266
msgid "plain files"
msgstr ""

#. type: cindex
#: zsh.texi:7269 zsh.texi:9838
#, no-wrap
msgid "symbolic links"
msgstr ""

#. type: t{#1}
#: zsh.texi:7270
#, no-wrap
msgid "="
msgstr ""

#. type: cindex
#: zsh.texi:7272 zsh.texi:30256
#, no-wrap
msgid "sockets"
msgstr ""

#. type: table
#: zsh.texi:7275
msgid "named pipes (FIFOs)"
msgstr ""

#. type: table
#: zsh.texi:7278
msgid "executable plain files (0100 or 0010 or 0001)"
msgstr ""

#. type: table
#: zsh.texi:7281
msgid "device files (character or block special)"
msgstr ""

#. type: t{#1}
#: zsh.texi:7282 zsh.texi:37062 zsh.texi:37125
#, no-wrap
msgid "%b"
msgstr ""

#. type: table
#: zsh.texi:7284
msgid "block special files"
msgstr ""

#. type: table
#: zsh.texi:7287
msgid "character special files"
msgstr ""

#. type: table
#: zsh.texi:7290
msgid "owner-readable files (0400)"
msgstr ""

#. type: table
#: zsh.texi:7293
msgid "owner-writable files (0200)"
msgstr ""

#. type: table
#: zsh.texi:7296
msgid "owner-executable files (0100)"
msgstr ""

#. type: table
#: zsh.texi:7299
msgid "group-readable files (0040)"
msgstr ""

#. type: table
#: zsh.texi:7302
msgid "group-writable files (0020)"
msgstr ""

#. type: table
#: zsh.texi:7305
msgid "group-executable files (0010)"
msgstr ""

#. type: table
#: zsh.texi:7308
msgid "world-readable files (0004)"
msgstr ""

#. type: table
#: zsh.texi:7311
msgid "world-writable files (0002)"
msgstr ""

#. type: table
#: zsh.texi:7314
msgid "world-executable files (0001)"
msgstr ""

#. type: t{#1}
#: zsh.texi:7315 zsh.texi:36309
#, no-wrap
msgid "s"
msgstr ""

#. type: table
#: zsh.texi:7317
msgid "setuid files (04000)"
msgstr ""

#. type: table
#: zsh.texi:7320
msgid "setgid files (02000)"
msgstr ""

#. type: table
#: zsh.texi:7323
msgid "files with the sticky bit (01000)"
msgstr ""

#. type: item
#: zsh.texi:7324
#, no-wrap
msgid "@t{f}@var{spec}"
msgstr ""

#. type: table
#: zsh.texi:7336
msgid ""
"files with access rights matching @var{spec}. This @var{spec} may be a octal "
"number optionally preceded by a `@t{=}', a `@t{+}', or a `@t{-}'. If none of "
"these characters is given, the behavior is the same as for `@t{=}'. The "
"octal number describes the mode bits to be expected, if combined with a "
"`@t{=}', the value given must match the file-modes exactly, with a `@t{+}', "
"at least the bits in the given number must be set in the file-modes, and "
"with a `@t{-}', the bits in the number must not be set. Giving a `@t{?}' "
"instead of a octal digit anywhere in the number ensures that the "
"corresponding bits in the file-modes are not checked, this is only useful in "
"combination with `@t{=}'."
msgstr ""

#. type: table
#: zsh.texi:7358
msgid ""
"If the qualifier `@t{f}' is followed by any other character anything up to "
"the next matching character (`@t{[}', `@t{@{}', and `@t{<}' match `@t{]}', "
"`@t{@}}', and `@t{>}' respectively, any other character matches itself) is "
"taken as a list of comma-separated @var{sub-spec}s. Each @var{sub-spec} may "
"be either an octal number as described above or a list of any of the "
"characters `@t{u}', `@t{g}', `@t{o}', and `@t{a}', followed by a `@t{=}', a "
"`@t{+}', or a `@t{-}', followed by a list of any of the characters `@t{r}', "
"`@t{w}', `@t{x}', `@t{s}', and `@t{t}', or an octal digit. The first list of "
"characters specify which access rights are to be checked. If a `@t{u}' is "
"given, those for the owner of the file are used, if a `@t{g}' is given, "
"those of the group are checked, a `@t{o}' means to test those of other "
"users, and the `@t{a}' says to test all three groups. The `@t{=}', `@t{+}', "
"and `@t{-}' again says how the modes are to be checked and have the same "
"meaning as described for the first form above. The second list of characters "
"finally says which access rights are to be expected: `@t{r}' for read "
"access, `@t{w}' for write access, `@t{x}' for the right to execute the file "
"(or to search a directory), `@t{s}' for the setuid and setgid bits, and "
"`@t{t}' for the sticky bit."
msgstr ""

#. type: table
#: zsh.texi:7368
msgid ""
"Thus, `@t{*(f70?)}' gives the files for which the owner has read, write, and "
"execute permission, and for which other group members have no rights, "
"independent of the permissions for other users. The pattern `@t{*(f-100)}' "
"gives all files for which the owner does not have execute permission, and "
"`@t{*(f:gu+w,o-rx:)}' gives the files for which the owner and the other "
"members of the group have at least write permission, and for which other "
"users don't have read or execute permission."
msgstr ""

#. type: item
#: zsh.texi:7369 zsh.texi:7552
#, no-wrap
msgid "@t{e}@var{string}"
msgstr ""

#. type: itemx
#: zsh.texi:7370 zsh.texi:7553
#, no-wrap
msgid "@t{+}@var{cmd}"
msgstr ""

#. type: table
#: zsh.texi:7374
msgid ""
"The @var{string} will be executed as shell code.  The filename will be "
"included in the list if and only if the code returns a zero status (usually "
"the status of the last command)."
msgstr ""

#. type: table
#: zsh.texi:7385
msgid ""
"In the first form, the first character after the `@t{e}' will be used as a "
"separator and anything up to the next matching separator will be taken as "
"the @var{string}; `@t{[}', `@t{@{}', and `@t{<}' match `@t{]}', `@t{@}}', "
"and `@t{>}', respectively, while any other character matches itself. Note "
"that expansions must be quoted in the @var{string} to prevent them from "
"being expanded before globbing is done.  @var{string} is then executed as "
"shell code.  The string @t{globqual} is appended to the array "
"@t{zsh_eval_context} the duration of execution."
msgstr ""

#. type: vindex
#: zsh.texi:7388 zsh.texi:14420 zsh.texi:27150 zsh.texi:27301 zsh.texi:32241
#, no-wrap
msgid "reply, use of"
msgstr ""

#. type: table
#: zsh.texi:7395
msgid ""
"During the execution of @var{string} the filename currently being tested is "
"available in the parameter @t{REPLY}; the parameter may be altered to a "
"string to be inserted into the list instead of the original filename.  In "
"addition, the parameter @t{reply} may be set to an array or a string, which "
"overrides the value of @t{REPLY}.  If set to an array, the latter is "
"inserted into the command line word by word."
msgstr ""

#. type: table
#: zsh.texi:7401
msgid ""
"For example, suppose a directory contains a single file `@t{lonely}'.  Then "
"the expression `@t{*(e:'reply=($@{REPLY@}@{1,2@})':)}' will cause the words "
"`@t{lonely1}' and `@t{lonely2}' to be inserted into the command line.  Note "
"the quoting of @var{string}."
msgstr ""

#. type: table
#: zsh.texi:7408
msgid ""
"The form @t{+}@var{cmd} has the same effect, but no delimiters appear around "
"@var{cmd}.  Instead, @var{cmd} is taken as the longest sequence of "
"characters following the @t{+} that are alphanumeric or underscore.  "
"Typically @var{cmd} will be the name of a shell function that contains the "
"appropriate test.  For example,"
msgstr ""

#. type: example
#: zsh.texi:7414
#, no-wrap
msgid ""
"nt() @{ [[ $REPLY -nt $NTREF ]] @}\n"
"NTREF=reffile\n"
"ls -ld -- *(+nt)\n"
msgstr ""

#. type: table
#: zsh.texi:7419
msgid ""
"lists all files in the directory that have been modified more recently than "
"@t{reffile}."
msgstr ""

#. type: item
#: zsh.texi:7420
#, no-wrap
msgid "@t{d}@var{dev}"
msgstr ""

#. type: table
#: zsh.texi:7422
msgid "files on the device @var{dev}"
msgstr ""

#. type: item
#: zsh.texi:7423
#, no-wrap
msgid "@t{l}[@t{-}|@t{+}]@var{ct}"
msgstr ""

#. type: table
#: zsh.texi:7426
msgid ""
"files having a link count less than @var{ct} (@t{-}), greater than @var{ct} "
"(@t{+}), or equal to @var{ct}"
msgstr ""

#. type: table
#: zsh.texi:7429
msgid "files owned by the effective user ID"
msgstr ""

#. type: t{#1}
#: zsh.texi:7430
#, no-wrap
msgid "G"
msgstr ""

#. type: table
#: zsh.texi:7432
msgid "files owned by the effective group ID"
msgstr ""

#. type: item
#: zsh.texi:7433
#, no-wrap
msgid "@t{u}@var{id}"
msgstr ""

#. type: table
#: zsh.texi:7443
msgid ""
"files owned by user ID @var{id} if that is a number.  Otherwise, @var{id} "
"specifies a user name: the character after the `@t{u}' will be taken as a "
"separator and the string between it and the next matching separator will be "
"taken as a user name.  The starting separators `@t{[}', `@t{@{}', and "
"`@t{<}' match the final separators `@t{]}', `@t{@}}', and `@t{>}', "
"respectively; any other character matches itself.  The selected files are "
"those owned by this user.  For example, `@t{u:foo:}' or `@t{u[foo]}' selects "
"files owned by user `@t{foo}'."
msgstr ""

#. type: item
#: zsh.texi:7444
#, no-wrap
msgid "@t{g}@var{id}"
msgstr ""

#. type: table
#: zsh.texi:7446
msgid "like @t{u}@var{id} but with group IDs or names"
msgstr ""

#. type: item
#: zsh.texi:7447
#, no-wrap
msgid "@t{a}[@t{Mwhms}][@t{-}|@t{+}]@var{n}"
msgstr ""

#. type: table
#: zsh.texi:7456
msgid ""
"files accessed exactly @var{n} days ago.  Files accessed within the last "
"@var{n} days are selected using a negative value for @var{n} "
"(@t{-}@var{n}).  Files accessed more than @var{n} days ago are selected by a "
"positive @var{n} value (@t{+}@var{n}).  Optional unit specifiers `@t{M}', "
"`@t{w}', `@t{h}', `@t{m}' or `@t{s}' (e.g. `@t{ah5}') cause the check to be "
"performed with months (of 30 days), weeks, hours, minutes or seconds instead "
"of days, respectively.  An explicit `@t{d}' for days is also allowed."
msgstr ""

#. type: table
#: zsh.texi:7464
msgid ""
"Any fractional part of the difference between the access time and the "
"current part in the appropriate units is ignored in the comparison.  For "
"instance, `@t{echo *(ah-5)}' would echo files accessed within the last five "
"hours, while `@t{echo *(ah+5)}' would echo files accessed at least six hours "
"ago, as times strictly between five and six hours are treated as five hours."
msgstr ""

#. type: item
#: zsh.texi:7465
#, no-wrap
msgid "@t{m}[@t{Mwhms}][@t{-}|@t{+}]@var{n}"
msgstr ""

#. type: table
#: zsh.texi:7468
msgid ""
"like the file access qualifier, except that it uses the file modification "
"time."
msgstr ""

#. type: item
#: zsh.texi:7469
#, no-wrap
msgid "@t{c}[@t{Mwhms}][@t{-}|@t{+}]@var{n}"
msgstr ""

#. type: table
#: zsh.texi:7472
msgid ""
"like the file access qualifier, except that it uses the file inode change "
"time."
msgstr ""

#. type: item
#: zsh.texi:7473
#, no-wrap
msgid "@t{L}[@t{+}|@t{-}]@var{n}"
msgstr ""

#. type: table
#: zsh.texi:7476
msgid ""
"files less than @var{n} bytes (@t{-}), more than @var{n} bytes (@t{+}), or "
"exactly @var{n} bytes in length."
msgstr ""

#. type: table
#: zsh.texi:7489
msgid ""
"If this flag is directly followed by a @emph{size specifier} `@t{k}' "
"(`@t{K}'), `@t{m}' (`@t{M}'), or `@t{p}' (`@t{P}') (e.g. `@t{Lk-50}') the "
"check is performed with kilobytes, megabytes, or blocks (of 512 bytes) "
"instead.  (On some systems additional specifiers are available for "
"gigabytes, `@t{g}' or `@t{G}', and terabytes, `@t{t}' or `@t{T}'.) If a size "
"specifier is used a file is regarded as \"exactly\" the size if the file "
"size rounded up to the next unit is equal to the test size.  Hence "
"`@t{*(Lm1)}' matches files from 1 byte up to 1 Megabyte inclusive.  Note "
"also that the set of files \"less than\" the test size only includes files "
"that would not match the equality test; hence `@t{*(Lm-1)}' only matches "
"files of zero size."
msgstr ""

#. type: table
#: zsh.texi:7492
msgid "negates all qualifiers following it"
msgstr ""

#. type: table
#: zsh.texi:7498
msgid ""
"toggles between making the qualifiers work on symbolic links (the default) "
"and the files they point to, if any; any symbolic link for whose target the "
"`@t{stat}' system call fails (whatever the cause of the failure) is treated "
"as a file in its own right"
msgstr ""

#. type: table
#: zsh.texi:7501
msgid "sets the @t{MARK_DIRS} option for the current pattern"
msgstr ""

#. type: pindex
#: zsh.texi:7501
#, no-wrap
msgid "MARK_DIRS, setting in pattern"
msgstr ""

#. type: table
#: zsh.texi:7506
msgid ""
"appends a trailing qualifier mark to the filenames, analogous to the "
"@t{LIST_TYPES} option, for the current pattern (overrides @t{M})"
msgstr ""

#. type: table
#: zsh.texi:7509
msgid "sets the @t{NULL_GLOB} option for the current pattern"
msgstr ""

#. type: pindex
#: zsh.texi:7509
#, no-wrap
msgid "NULL_GLOB, setting in pattern"
msgstr ""

#. type: table
#: zsh.texi:7513
msgid "sets the @t{GLOB_DOTS} option for the current pattern"
msgstr ""

#. type: pindex
#: zsh.texi:7513
#, no-wrap
msgid "GLOB_DOTS, setting in pattern"
msgstr ""

#. type: table
#: zsh.texi:7517
msgid "sets the @t{NUMERIC_GLOB_SORT} option for the current pattern"
msgstr ""

#. type: pindex
#: zsh.texi:7517
#, no-wrap
msgid "NUMERIC_GLOB_SORT, setting in pattern"
msgstr ""

#. type: item
#: zsh.texi:7519
#, no-wrap
msgid "@t{Y}@var{n}"
msgstr ""

#. type: table
#: zsh.texi:7523
msgid ""
"enables short-circuit mode: the pattern will expand to at most @var{n} "
"filenames.  If more than @var{n} matches exist, only the first @var{n} "
"matches in directory traversal order will be considered."
msgstr ""

#. type: table
#: zsh.texi:7526
msgid "Implies @t{oN} when no @t{o}@var{c} qualifier is used."
msgstr ""

#. type: item
#: zsh.texi:7527
#, no-wrap
msgid "@t{o}@var{c}"
msgstr ""

#. type: table
#: zsh.texi:7530
msgid ""
"specifies how the names of the files should be sorted. The following values "
"of @var{c} sort in the following ways:"
msgstr ""

#. type: table
#: zsh.texi:7535
msgid "By name."
msgstr ""

#. type: table
#: zsh.texi:7537
msgid "By the size (length) of the files."
msgstr ""

#. type: table
#: zsh.texi:7539
msgid "By number of links."
msgstr ""

#. type: table
#: zsh.texi:7541
msgid "By time of last access, youngest first."
msgstr ""

#. type: table
#: zsh.texi:7543
msgid "By time of last modification, youngest first."
msgstr ""

#. type: table
#: zsh.texi:7545
msgid "By time of last inode change, youngest first."
msgstr ""

#. type: table
#: zsh.texi:7550
msgid ""
"By directories: files in subdirectories appear before those in the current "
"directory at each level of the search --- this is best combined with other "
"criteria, for example `@t{odon}' to sort on names for files within the same "
"directory."
msgstr ""

#. type: table
#: zsh.texi:7552
msgid "No sorting is performed."
msgstr ""

#. type: table
#: zsh.texi:7555
msgid "Sort by shell code (see below)."
msgstr ""

#. type: table
#: zsh.texi:7562
msgid ""
"Note that the modifiers @t{^} and @t{-} are used, so `@t{*(^-oL)}' gives a "
"list of all files sorted by file size in descending order, following any "
"symbolic links.  Unless @t{oN} is used, multiple order specifiers may occur "
"to resolve ties."
msgstr ""

#. type: table
#: zsh.texi:7566
msgid ""
"The default sorting is @t{n} (by name) unless the @t{Y} glob qualifier is "
"used, in which case it is @t{N} (unsorted)."
msgstr ""

#. type: table
#: zsh.texi:7578
msgid ""
"@t{oe} and @t{o+} are special cases; they are each followed by shell code, "
"delimited as for the @t{e} glob qualifier and the @t{+} glob qualifier "
"respectively (see above).  The code is executed for each matched file with "
"the parameter @t{REPLY} set to the name of the file on entry and "
"@t{globsort} appended to @t{zsh_eval_context}.  The code should modify the "
"parameter @t{REPLY} in some fashion.  On return, the value of the parameter "
"is used instead of the file name as the string on which to sort.  Unlike "
"other sort operators, @t{oe} and @t{o+} may be repeated, but note that the "
"maximum number of sort operators of any kind that may appear in any glob "
"expression is 12."
msgstr ""

#. type: item
#: zsh.texi:7579
#, no-wrap
msgid "@t{O}@var{c}"
msgstr ""

#. type: table
#: zsh.texi:7584
msgid ""
"like `@t{o}', but sorts in descending order; i.e. `@t{*(^o}@var{c}@t{)}' is "
"the same as `@t{*(O}@var{c}@t{)}' and `@t{*(^O}@var{c}@t{)}' is the same as "
"`@t{*(o}@var{c}@t{)}'; `@t{Od}' puts files in the current directory before "
"those in subdirectories at each level of the search."
msgstr ""

#. type: item
#: zsh.texi:7585
#, no-wrap
msgid "@t{[}@var{beg}[@t{,}@var{end}]@t{]}"
msgstr ""

#. type: table
#: zsh.texi:7592
msgid ""
"specifies which of the matched filenames should be included in the returned "
"list. The syntax is the same as for array subscripts. @var{beg} and the "
"optional @var{end} may be mathematical expressions. As in parameter "
"subscripting they may be negative to make them count from the last match "
"backward. E.g.: `@t{*(-OL[1,3])}' gives a list of the names of the three "
"largest files."
msgstr ""

#. type: item
#: zsh.texi:7593
#, no-wrap
msgid "@t{P}@var{string}"
msgstr ""

#. type: table
#: zsh.texi:7600
msgid ""
"The @var{string} will be prepended to each glob match as a separate word.  "
"@var{string} is delimited in the same way as arguments to the @t{e} glob "
"qualifier described above.  The qualifier can be repeated; the words are "
"prepended separately so that the resulting command line contains the words "
"in the same order they were given in the list of glob qualifiers."
msgstr ""

#. type: table
#: zsh.texi:7605
msgid ""
"A typical use for this is to prepend an option before all occurrences of a "
"file name; for example, the pattern `@t{*(P:-f:)}' produces the command line "
"arguments `@t{-f} @var{file1} @t{-f} @var{file2} ...'"
msgstr ""

#. type: table
#: zsh.texi:7612
msgid ""
"If the modifier @t{^} is active, then @var{string} will be appended instead "
"of prepended.  Prepending and appending is done independently so both can be "
"used on the same glob expression; for example by writing "
"`@t{*(P:foo:^P:bar:^P:baz:)}' which produces the command line arguments "
"`@t{foo} @t{baz} @var{file1} @t{bar} ...'"
msgstr ""

#. type: Plain text
#: zsh.texi:7623
msgid ""
"More than one of these lists can be combined, separated by commas. The whole "
"list matches if at least one of the sublists matches (they are `or'ed, the "
"qualifiers in the sublists are `and'ed).  Some qualifiers, however, affect "
"all matches generated, independent of the sublist in which they are given.  "
"These are the qualifiers `@t{M}', `@t{T}', `@t{N}', `@t{D}', `@t{n}', "
"`@t{o}', `@t{O}' and the subscripts given in brackets "
"(`@t{[}@var{...}@t{]}')."
msgstr ""

#. type: Plain text
#: zsh.texi:7635
msgid ""
"If a `@t{:}' appears in a qualifier list, the remainder of the expression in "
"parenthesis is interpreted as a modifier (see @ref{Modifiers} in "
"@ref{History Expansion}).  Each modifier must be introduced by a separate "
"`@t{:}'.  Note also that the result after modification does not have to be "
"an existing file.  The name of any existing file can be followed by a "
"modifier of the form `@t{(:}@var{...}@t{)}' even if no actual filename "
"generation is performed, although note that the presence of the parentheses "
"causes the entire expression to be subjected to any global pattern matching "
"options such as @t{NULL_GLOB}. Thus:"
msgstr ""

#. type: example
#: zsh.texi:7639
#, no-wrap
msgid "ls -ld -- *(-/)\n"
msgstr ""

#. type: Plain text
#: zsh.texi:7644
msgid "lists all directories and symbolic links that point to directories, and"
msgstr ""

#. type: example
#: zsh.texi:7648
#, no-wrap
msgid "ls -ld -- *(-@@)\n"
msgstr ""

#. type: Plain text
#: zsh.texi:7652
msgid "lists all broken symbolic links, and"
msgstr ""

#. type: example
#: zsh.texi:7656
#, no-wrap
msgid "ls -ld -- *(%W)\n"
msgstr ""

#. type: Plain text
#: zsh.texi:7660
msgid "lists all world-writable device files in the current directory, and"
msgstr ""

#. type: example
#: zsh.texi:7664
#, no-wrap
msgid "ls -ld -- *(W,X)\n"
msgstr ""

#. type: Plain text
#: zsh.texi:7669
msgid ""
"lists all files in the current directory that are world-writable or "
"world-executable, and"
msgstr ""

#. type: example
#: zsh.texi:7673
#, no-wrap
msgid "print -rC1 /tmp/foo*(u0^@@:t)\n"
msgstr ""

#. type: Plain text
#: zsh.texi:7678
msgid ""
"outputs the basename of all root-owned files beginning with the string "
"`@t{foo}' in @t{/tmp}, ignoring symlinks, and"
msgstr ""

#. type: example
#: zsh.texi:7682
#, no-wrap
msgid "ls -ld -- *.*~(lex|parse).[ch](^D^l1)\n"
msgstr ""

#. type: Plain text
#: zsh.texi:7688
msgid ""
"lists all files having a link count of one whose names contain a dot (but "
"not those starting with a dot, since @t{GLOB_DOTS} is explicitly switched "
"off) except for @t{lex.c}, @t{lex.h}, @t{parse.c} and @t{parse.h}."
msgstr ""

#. type: example
#: zsh.texi:7692
#, no-wrap
msgid "print -rC1 b*.pro(#q:s/pro/shmo/)(#q.:s/builtin/shmiltin/)\n"
msgstr ""

#. type: Plain text
#: zsh.texi:7702
msgid ""
"demonstrates how colon modifiers and other qualifiers may be chained "
"together.  The ordinary qualifier `@t{.}' is applied first, then the colon "
"modifiers in order from left to right.  So if @t{EXTENDED_GLOB} is set and "
"the base pattern matches the regular file @t{builtin.pro}, the shell will "
"print `@t{shmiltin.shmo}'."
msgstr ""

#. type: t{#1}
#: zsh.texi:7706 zsh.texi:21672 zsh.texi:29724 zsh.texi:29725
#, no-wrap
msgid "parameters"
msgstr ""

#. type: t{#1}
#: zsh.texi:7707 zsh.texi:35806
#, no-wrap
msgid "variables"
msgstr ""

#. type: section
#: zsh.texi:7709 zsh.texi:16087 zsh.texi:19229 zsh.texi:20554 zsh.texi:26837
#: zsh.texi:27609 zsh.texi:32616 zsh.texi:33728 zsh.texi:34697 zsh.texi:35460
#, no-wrap
msgid "Description"
msgstr ""

#. type: Plain text
#: zsh.texi:7717
msgid ""
"A parameter has a name, a value, and a number of attributes.  A name may be "
"any sequence of alphanumeric characters and underscores, or the single "
"characters `@t{*}', `@t{@@}', `@t{#}', `@t{?}', `@t{-}', `@t{$}', or "
"`@t{!}'.  A parameter whose name begins with an alphanumeric or underscore "
"is also referred to as a @emph{variable}."
msgstr ""

#. type: cindex
#: zsh.texi:7719
#, no-wrap
msgid "scalar"
msgstr ""

#. type: cindex
#: zsh.texi:7720
#, no-wrap
msgid "parameters, scalar"
msgstr ""

#. type: cindex
#: zsh.texi:7721
#, no-wrap
msgid "parameters, array"
msgstr ""

#. type: cindex
#: zsh.texi:7722
#, no-wrap
msgid "parameters, associative array"
msgstr ""

#. type: findex
#: zsh.texi:7723 zsh.texi:13891
#, no-wrap
msgid "hash"
msgstr ""

#. type: Plain text
#: zsh.texi:7731
msgid ""
"The attributes of a parameter determine the @emph{type} of its value, often "
"referred to as the parameter type or variable type, and also control other "
"processing that may be applied to the value when it is referenced.  The "
"value type may be a @emph{scalar} (a string, an integer, or a floating point "
"number), an array (indexed numerically), or an @emph{associative} array (an "
"unordered set of name-value pairs, indexed by name, also referred to as a "
"@emph{hash})."
msgstr ""

#. type: cindex
#: zsh.texi:7734
#, no-wrap
msgid "environment"
msgstr ""

#. type: cindex
#: zsh.texi:7735
#, no-wrap
msgid "environment variables"
msgstr ""

#. type: cindex
#: zsh.texi:7736
#, no-wrap
msgid "variables, environment"
msgstr ""

#. type: Plain text
#: zsh.texi:7745
msgid ""
"Named scalar parameters may have the @emph{exported}, @t{-x}, attribute, to "
"copy them into the process environment, which is then passed from the shell "
"to any new processes that it starts.  Exported parameters are called "
"@emph{environment variables}. The shell also @emph{imports} environment "
"variables at startup time and automatically marks the corresponding "
"parameters as exported.  Some environment variables are not imported for "
"reasons of security or because they would interfere with the correct "
"operation of other shell features."
msgstr ""

#. type: cindex
#: zsh.texi:7747
#, no-wrap
msgid "special parameters"
msgstr ""

#. type: cindex
#: zsh.texi:7748 zsh.texi:29607 zsh.texi:31860
#, no-wrap
msgid "parameters, special"
msgstr ""

#. type: Plain text
#: zsh.texi:7753
msgid ""
"Parameters may also be @emph{special}, that is, they have a predetermined "
"meaning to the shell.  Special parameters cannot have their type changed or "
"their readonly attribute turned off, and if a special parameter is unset, "
"then later recreated, the special properties will be retained."
msgstr ""

#. type: Plain text
#: zsh.texi:7757
msgid ""
"To declare the type of a parameter, or to assign a string or numeric value "
"to a scalar parameter, use the @t{typeset} builtin."
msgstr ""

#. type: findex
#: zsh.texi:7757 zsh.texi:7902
#, no-wrap
msgid "typeset, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:7761
msgid "The value of a scalar parameter may also be assigned by writing:"
msgstr ""

#. type: quotation
#: zsh.texi:7765
msgid "@var{name}@t{=}@var{value}"
msgstr ""

#. type: Plain text
#: zsh.texi:7771
msgid ""
"In scalar assignment, @var{value} is expanded as a single string, in which "
"the elements of arrays are joined together; filename expansion is not "
"performed unless the option @t{GLOB_ASSIGN} is set."
msgstr ""

#. type: Plain text
#: zsh.texi:7779
msgid ""
"When the integer attribute, @t{-i}, or a floating point attribute, @t{-E} or "
"@t{-F}, is set for @var{name}, the @var{value} is subject to arithmetic "
"evaluation.  Furthermore, by replacing `@t{=}' with `@t{+=}', a parameter "
"can be incremented or appended to.  See @ref{Array Parameters} and "
"@ref{Arithmetic Evaluation} for additional forms of assignment."
msgstr ""

#. type: Plain text
#: zsh.texi:7785
msgid ""
"Note that assignment may implicitly change the attributes of a parameter.  "
"For example, assigning a number to a variable in arithmetic evaluation may "
"change its type to integer or float, and with @t{GLOB_ASSIGN} assigning a "
"pattern to a variable may change its type to an array."
msgstr ""

#. type: Plain text
#: zsh.texi:7793
msgid ""
"To reference the value of a parameter, write `@t{$}@var{name}' or "
"`@t{$@{}@var{name}@t{@}}'.  See @ref{Parameter Expansion} for complete "
"details.  That section also explains the effect of the difference between "
"scalar and array assignment on parameter expansion."
msgstr ""

#. type: node
#: zsh.texi:7800 zsh.texi:7802 zsh.texi:8391
#, no-wrap
msgid "Array Parameters"
msgstr ""

#. type: node
#: zsh.texi:7800 zsh.texi:8391 zsh.texi:8393 zsh.texi:8423
#, no-wrap
msgid "Positional Parameters"
msgstr ""

#. type: Plain text
#: zsh.texi:7805
msgid "To assign an array value, write one of:"
msgstr ""

#. type: findex
#: zsh.texi:7805
#, no-wrap
msgid "set, use of"
msgstr ""

#. type: cindex
#: zsh.texi:7806
#, no-wrap
msgid "array assignment"
msgstr ""

#. type: quotation
#: zsh.texi:7810
msgid "@t{set -A} @var{name} @var{value} ..."
msgstr ""

#. type: quotation
#: zsh.texi:7813
msgid "@var{name}@t{=(}@var{value} ...@t{)}"
msgstr ""

#. type: quotation
#: zsh.texi:7816 zsh.texi:7927
msgid "@var{name}@t{=(}@t{[}@var{key}@t{]=}@var{value} ...@t{)}"
msgstr ""

#. type: Plain text
#: zsh.texi:7822
msgid ""
"If no parameter @var{name} exists, an ordinary array parameter is created.  "
"If the parameter @var{name} exists and is a scalar, it is replaced by a new "
"array."
msgstr ""

#. type: Plain text
#: zsh.texi:7835
msgid ""
"In the third form, @var{key} is an expression that will be evaluated in "
"arithmetic context (in its simplest form, an integer) that gives the index "
"of the element to be assigned with @var{value}.  In this form any elements "
"not explicitly mentioned that come before the largest index to which a value "
"is assigned are assigned an empty string.  The indices may be in any order.  "
"Note that this syntax is strict: @t{[} and @t{]=} must not be quoted, and "
"@var{key} may not consist of the unquoted string @t{]=}, but is otherwise "
"treated as a simple string.  The enhanced forms of subscript expression that "
"may be used when directly subscripting a variable name, described in the "
"section `Array Subscripts' below, are not available."
msgstr ""

#. type: Plain text
#: zsh.texi:7841
msgid ""
"The syntaxes with and without the explicit key may be mixed.  An implicit "
"@var{key} is deduced by incrementing the index from the previously assigned "
"element.  Note that it is not treated as an error if latter assignments in "
"this form overwrite earlier assignments."
msgstr ""

#. type: Plain text
#: zsh.texi:7844
msgid "For example, assuming the option @t{KSH_ARRAYS} is not set, the following:"
msgstr ""

#. type: example
#: zsh.texi:7848
#, no-wrap
msgid "array=(one [3]=three four)\n"
msgstr ""

#. type: Plain text
#: zsh.texi:7853
msgid ""
"causes the array variable @t{array} to contain four elements @t{one}, an "
"empty string, @t{three} and @t{four}, in that order."
msgstr ""

#. type: Plain text
#: zsh.texi:7857
msgid ""
"In the forms where only @var{value} is specified, full command line "
"expansion is performed."
msgstr ""

#. type: Plain text
#: zsh.texi:7872
msgid ""
"In the @t{[}@var{key}@t{]=}@var{value} form, both @var{key} and @var{value} "
"undergo all forms of expansion allowed for single word shell expansions "
"(this does not include filename generation); these are as performed by the "
"parameter expansion flag @t{(e)} as described in @ref{Parameter Expansion}.  "
"Nested parentheses may surround @var{value} and are included as part of the "
"value, which is joined into a plain string; this differs from ksh which "
"allows the values themselves to be arrays.  A future version of zsh may "
"support that.  To cause the brackets to be interpreted as a character class "
"for filename generation, and therefore to treat the resulting list of files "
"as a set of values, quote the equal sign using any form of quoting.  "
"Example:"
msgstr ""

#. type: quotation
#: zsh.texi:7875
msgid "@var{name}@t{=(}@t{[a-z]'='*)}"
msgstr ""

#. type: Plain text
#: zsh.texi:7880
msgid ""
"To append to an array without changing the existing values, use one of the "
"following:"
msgstr ""

#. type: quotation
#: zsh.texi:7883
msgid "@var{name}@t{+=(}@var{value} ...@t{)}"
msgstr ""

#. type: quotation
#: zsh.texi:7886 zsh.texi:7944
msgid "@var{name}@t{+=(}@t{[}@var{key}@t{]=}@var{value} ...@t{)}"
msgstr ""

#. type: Plain text
#: zsh.texi:7893
msgid ""
"In the second form @var{key} may specify an existing index as well as an "
"index off the end of the old array; any existing value is overwritten by "
"@var{value}.  Also, it is possible to use @t{[}@var{key}@t{]+=}@var{value} "
"to append to the existing value at that index."
msgstr ""

#. type: Plain text
#: zsh.texi:7899
msgid ""
"Within the parentheses on the right hand side of either form of the "
"assignment, newlines and semicolons are treated the same as white space, "
"separating individual @var{value}s.  Any consecutive sequence of such "
"characters has the same effect."
msgstr ""

#. type: Plain text
#: zsh.texi:7902
msgid "Ordinary array parameters may also be explicitly declared with:"
msgstr ""

#. type: quotation
#: zsh.texi:7906
msgid "@t{typeset -a} @var{name}"
msgstr ""

#. type: Plain text
#: zsh.texi:7910
msgid "Associative arrays @emph{must} be declared before assignment, by using:"
msgstr ""

#. type: quotation
#: zsh.texi:7913
msgid "@t{typeset -A} @var{name}"
msgstr ""

#. type: Plain text
#: zsh.texi:7918
msgid ""
"When @var{name} refers to an associative array, the list in an assignment is "
"interpreted as alternating keys and values:"
msgstr ""

#. type: quotation
#: zsh.texi:7921
msgid "@t{set -A} @var{name} @var{key} @var{value} ..."
msgstr ""

#. type: quotation
#: zsh.texi:7924
msgid "@var{name}@t{=(}@var{key} @var{value} ...@t{)}"
msgstr ""

#. type: Plain text
#: zsh.texi:7933
msgid ""
"Note that only one of the two syntaxes above may be used in any given "
"assignment; the forms may not be mixed.  This is unlike the case of "
"numerically indexed arrays."
msgstr ""

#. type: Plain text
#: zsh.texi:7938
msgid ""
"Every @var{key} must have a @var{value} in this case.  Note that this "
"assigns to the entire array, deleting any elements that do not appear in the "
"list.  The append syntax may also be used with an associative array:"
msgstr ""

#. type: quotation
#: zsh.texi:7941
msgid "@var{name}@t{+=(}@var{key} @var{value} ...@t{)}"
msgstr ""

#. type: Plain text
#: zsh.texi:7953
msgid ""
"This adds a new key/value pair if the key is not already present, and "
"replaces the value for the existing key if it is.  In the second form it is "
"also possible to use @t{[}@var{key}@t{]+=}@var{value} to append to the "
"existing value at that key.  Expansion is performed identically to the "
"corresponding forms for normal arrays, as described above."
msgstr ""

#. type: Plain text
#: zsh.texi:7956
msgid "To create an empty array (including associative arrays), use one of:"
msgstr ""

#. type: quotation
#: zsh.texi:7959
msgid "@t{set -A} @var{name}"
msgstr ""

#. type: quotation
#: zsh.texi:7962
msgid "@var{name}@t{=()}"
msgstr ""

#. type: subsection
#: zsh.texi:7966
#, no-wrap
msgid "Array Subscripts"
msgstr ""

#. type: cindex
#: zsh.texi:7968
#, no-wrap
msgid "subscripts"
msgstr ""

#. type: Plain text
#: zsh.texi:7976
msgid ""
"Individual elements of an array may be selected using a subscript.  A "
"subscript of the form `@t{[}@var{exp}@t{]}' selects the single element "
"@var{exp}, where @var{exp} is an arithmetic expression which will be subject "
"to arithmetic expansion as if it were surrounded by `@t{$((}...@t{))}'.  The "
"elements are numbered beginning with 1, unless the @t{KSH_ARRAYS} option is "
"set in which case they are numbered from zero."
msgstr ""

#. type: pindex
#: zsh.texi:7976 zsh.texi:14592
#, no-wrap
msgid "KSH_ARRAYS, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:7983
msgid ""
"Subscripts may be used inside braces used to delimit a parameter name, thus "
"`@t{$@{foo[2]@}}' is equivalent to `@t{$foo[2]}'.  If the @t{KSH_ARRAYS} "
"option is set, the braced form is the only one that works, as bracketed "
"expressions otherwise are not treated as subscripts."
msgstr ""

#. type: Plain text
#: zsh.texi:7991
msgid ""
"If the @t{KSH_ARRAYS} option is not set, then by default accesses to an "
"array element with a subscript that evaluates to zero return an empty "
"string, while an attempt to write such an element is treated as an error.  "
"For backward compatibility the @t{KSH_ZERO_SUBSCRIPT} option can be set to "
"cause subscript values 0 and 1 to be equivalent; see the description of the "
"option in @ref{Description of Options}."
msgstr ""

#. type: Plain text
#: zsh.texi:7998
msgid ""
"The same subscripting syntax is used for associative arrays, except that no "
"arithmetic expansion is applied to @var{exp}.  However, the parsing rules "
"for arithmetic expressions still apply, which affects the way that certain "
"special characters must be protected from interpretation.  See "
"@emph{Subscript Parsing} below for details."
msgstr ""

#. type: Plain text
#: zsh.texi:8015
msgid ""
"A subscript of the form `@t{[*]}' or `@t{[@@]}' evaluates to all elements of "
"an array; there is no difference between the two except when they appear "
"within double quotes.  `@t{\"$foo[*]\"}' evaluates to `@t{\"$foo[1] $foo[2] "
"}...@t{\"}', whereas `@t{\"$foo[@@]\"}' evaluates to `@t{\"$foo[1]\" "
"\"$foo[2]\" }...'.  For associative arrays, `@t{[*]}' or `@t{[@@]}' evaluate "
"to all the values, in no particular order.  Note that this does not "
"substitute the keys; see the documentation for the `@t{k}' flag under "
"@ref{Parameter Expansion} for complete details.  When an array parameter is "
"referenced as `@t{$}@var{name}' (with no subscript) it evaluates to "
"`@t{$}@var{name}@t{[*]}', unless the @t{KSH_ARRAYS} option is set in which "
"case it evaluates to `@t{$@{}@var{name}@t{[0]@}}' (for an associative array, "
"this means the value of the key `@t{0}', which may not exist even if there "
"are values for other keys)."
msgstr ""

#. type: Plain text
#: zsh.texi:8025
msgid ""
"A subscript of the form `@t{[}@var{exp1}@t{,}@var{exp2}@t{]}' selects all "
"elements in the range @var{exp1} to @var{exp2}, inclusive. (Associative "
"arrays are unordered, and so do not support ranges.) If one of the "
"subscripts evaluates to a negative number, say @t{-}@var{n}, then the "
"@var{n}th element from the end of the array is used.  Thus `@t{$foo[-3]}' is "
"the third element from the end of the array @t{foo}, and `@t{$foo[1,-1]}' is "
"the same as `@t{$foo[*]}'."
msgstr ""

#. type: Plain text
#: zsh.texi:8035
msgid ""
"Subscripting may also be performed on non-array values, in which case the "
"subscripts specify a substring to be extracted.  For example, if @t{FOO} is "
"set to `@t{foobar}', then `@t{echo $FOO[2,5]}' prints `@t{ooba}'.  Note that "
"some forms of subscripting described below perform pattern matching, and in "
"that case the substring extends from the start of the match of the first "
"subscript to the end of the match of the second subscript.  For example,"
msgstr ""

#. type: example
#: zsh.texi:8040
#, no-wrap
msgid ""
"string=\"abcdefghijklm\"\n"
"print $@{string[(r)d?,(r)h?]@}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:8047
msgid ""
"prints `@t{defghi}'.  This is an obvious generalisation of the rule for "
"single-character matches.  For a single subscript, only a single character "
"is referenced (not the range of characters covered by the match)."
msgstr ""

#. type: Plain text
#: zsh.texi:8056
msgid ""
"Note that in substring operations the second subscript is handled "
"differently by the @t{r} and @t{R} subscript flags: the former takes the "
"shortest match as the length and the latter the longest match.  Hence in the "
"former case a @t{*} at the end is redundant while in the latter case it "
"matches the whole remainder of the string.  This does not affect the result "
"of the single subscript case as here the length of the match is irrelevant."
msgstr ""

#. type: subsection
#: zsh.texi:8059
#, no-wrap
msgid "Array Element Assignment"
msgstr ""

#. type: Plain text
#: zsh.texi:8064
msgid "A subscript may be used on the left side of an assignment like so:"
msgstr ""

#. type: quotation
#: zsh.texi:8067
msgid "@var{name}@t{[}@var{exp}@t{]=}@var{value}"
msgstr ""

#. type: Plain text
#: zsh.texi:8077
msgid ""
"In this form of assignment the element or range specified by @var{exp} is "
"replaced by the expression on the right side.  An array (but not an "
"associative array) may be created by assignment to a range or element.  "
"Arrays do not nest, so assigning a parenthesized list of values to an "
"element or range changes the number of elements in the array, shifting the "
"other elements to accommodate the new values.  (This is not supported for "
"associative arrays.)"
msgstr ""

#. type: Plain text
#: zsh.texi:8080
msgid "This syntax also works as an argument to the @t{typeset} command:"
msgstr ""

#. type: quotation
#: zsh.texi:8083
msgid "@t{typeset} @t{\"}@var{name}@t{[}@var{exp}@t{]\"=}@var{value}"
msgstr ""

#. type: Plain text
#: zsh.texi:8091
msgid ""
"The @var{value} may @emph{not} be a parenthesized list in this case; only "
"single-element assignments may be made with @t{typeset}.  Note that quotes "
"are necessary in this case to prevent the brackets from being interpreted as "
"filename generation operators.  The @t{noglob} precommand modifier could be "
"used instead."
msgstr ""

#. type: Plain text
#: zsh.texi:8096
msgid ""
"To delete an element of an ordinary array, assign `@t{()}' to that element.  "
"To delete an element of an associative array, use the @t{unset} command:"
msgstr ""

#. type: quotation
#: zsh.texi:8099
msgid "@t{unset} @t{\"}@var{name}@t{[}@var{exp}@t{]\"}"
msgstr ""

#. type: subsection
#: zsh.texi:8103
#, no-wrap
msgid "Subscript Flags"
msgstr ""

#. type: cindex
#: zsh.texi:8105
#, no-wrap
msgid "subscript flags"
msgstr ""

#. type: Plain text
#: zsh.texi:8110
msgid ""
"If the opening bracket, or the comma in a range, in any subscript expression "
"is directly followed by an opening parenthesis, the string up to the "
"matching closing one is considered to be a list of flags, as in "
"`@var{name}@t{[(}@var{flags}@t{)}@var{exp}@t{]}'."
msgstr ""

#. type: Plain text
#: zsh.texi:8119
msgid ""
"The flags @t{s}, @t{n} and @t{b} take an argument; the delimiter is shown "
"below as `@t{:}', but any character, or the matching pairs `@t{(}...@t{)}', "
"`@t{@{}...@t{@}}', `@t{[}...@t{]}', or `@t{<}...@t{>}', may be used, but "
"note that `@t{<}...@t{>}' can only be used if the subscript is inside a "
"double quoted expression or a parameter substitution enclosed in braces as "
"otherwise the expression is interpreted as a redirection."
msgstr ""

#. type: Plain text
#: zsh.texi:8122
msgid "The flags currently understood are:"
msgstr ""

#. type: table
#: zsh.texi:8132
msgid ""
"If the parameter subscripted is a scalar then this flag makes subscripting "
"work on words instead of characters.  The default word separator is "
"whitespace.  When combined with the @t{i} or @t{I} flag, the effect is to "
"produce the index of the first character of the first/last word which "
"matches the given pattern; note that a failed match in this case always "
"yields 0."
msgstr ""

#. type: table
#: zsh.texi:8136
msgid ""
"This gives the @var{string} that separates words (for use with the @t{w} "
"flag).  The delimiter character @t{:} is arbitrary; see above."
msgstr ""

#. type: table
#: zsh.texi:8140
msgid ""
"Recognize the same escape sequences as the @t{print} builtin in the string "
"argument of a subsequent `@t{s}' flag."
msgstr ""

#. type: table
#: zsh.texi:8145
msgid ""
"If the parameter subscripted is a scalar then this flag makes subscripting "
"work on lines instead of characters, i.e. with elements separated by "
"newlines.  This is a shorthand for `@t{pws:\\n:}'."
msgstr ""

#. type: table
#: zsh.texi:8156
msgid ""
"Reverse subscripting: if this flag is given, the @var{exp} is taken as a "
"pattern and the result is the first matching array element, substring or "
"word (if the parameter is an array, if it is a scalar, or if it is a scalar "
"and the `@t{w}' flag is given, respectively).  The subscript used is the "
"number of the matching element, so that pairs of subscripts such as "
"`@t{$foo[(r)??,3]}' and `@t{$foo[(r)??,(r)f*]}' are possible if the "
"parameter is not an associative array.  If the parameter is an associative "
"array, only the value part of each pair is compared to the pattern, and the "
"result is that value."
msgstr ""

#. type: table
#: zsh.texi:8163
msgid ""
"If a search through an ordinary array failed, the search sets the subscript "
"to one past the end of the array, and hence "
"@t{$@{array[(r)}@var{pattern}@t{]@}} will substitute the empty string.  Thus "
"the success of a search can be tested by using the @t{(i)} flag, for example "
"(assuming the option @t{KSH_ARRAYS} is not in effect):"
msgstr ""

#. type: example
#: zsh.texi:8167
#, no-wrap
msgid "[[ $@{array[(i)pattern]@} -le $@{#array@} ]]\n"
msgstr ""

#. type: table
#: zsh.texi:8171
msgid "If @t{KSH_ARRAYS} is in effect, the @t{-le} should be replaced by @t{-lt}."
msgstr ""

#. type: table
#: zsh.texi:8179
msgid ""
"Like `@t{r}', but gives the last match.  For associative arrays, gives all "
"possible matches. May be used for assigning to ordinary array elements, but "
"not for assigning to associative arrays.  On failure, for normal arrays this "
"has the effect of returning the element corresponding to subscript 0; this "
"is empty unless one of the options @t{KSH_ARRAYS} or @t{KSH_ZERO_SUBSCRIPT} "
"is in effect."
msgstr ""

#. type: table
#: zsh.texi:8187
msgid ""
"Note that in subscripts with both `@t{r}' and `@t{R}' pattern characters are "
"active even if they were substituted for a parameter (regardless of the "
"setting of @t{GLOB_SUBST} which controls this feature in normal pattern "
"matching).  The flag `@t{e}' can be added to inhibit pattern matching.  As "
"this flag does not inhibit other forms of substitution, care is still "
"required; using a parameter to hold the key has the desired effect:"
msgstr ""

#. type: example
#: zsh.texi:8192
#, no-wrap
msgid ""
"key2='original key'\n"
"print $@{array[(Re)$key2]@}\n"
msgstr ""

#. type: table
#: zsh.texi:8202
msgid ""
"Like `@t{r}', but gives the index of the match instead; this may not be "
"combined with a second argument.  On the left side of an assignment, behaves "
"like `@t{r}'.  For associative arrays, the key part of each pair is compared "
"to the pattern, and the first matching key found is the result.  On failure "
"substitutes the length of the array plus one, as discussed under the "
"description of `@t{r}', or the empty string for an associative array."
msgstr ""

#. type: table
#: zsh.texi:8208
msgid ""
"Note: Although `@t{i}' may be applied to a scalar substitution to find the "
"offset of a substring, the results are likely to be misleading when "
"searching within substitutions that yield an empty string, or when searching "
"for the empty substring."
msgstr ""

#. type: table
#: zsh.texi:8214
msgid ""
"Like `@t{i}', but gives the index of the last match, or all possible "
"matching keys in an associative array.  On failure substitutes 0, or the "
"empty string for an associative array.  This flag is best when testing for "
"values or keys that do not exist."
msgstr ""

#. type: table
#: zsh.texi:8219
msgid ""
"Note: If the option @t{KSH_ARRAYS} is in effect and no match is found, the "
"result is indistinguishable from the case when the first element of the "
"array matches."
msgstr ""

#. type: table
#: zsh.texi:8227
msgid ""
"If used in a subscript on an associative array, this flag causes the keys to "
"be interpreted as patterns, and returns the value for the first key found "
"where @var{exp} is matched by the key.  Note this could be any such key as "
"no ordering of associative arrays is defined.  This flag does not work on "
"the left side of an assignment to an associative array element.  If used on "
"another type of parameter, this behaves like `@t{r}'."
msgstr ""

#. type: t{#1}
#: zsh.texi:8228
#, no-wrap
msgid "K"
msgstr ""

#. type: table
#: zsh.texi:8232
msgid ""
"On an associative array this is like `@t{k}' but returns all values where "
"@var{exp} is matched by the keys.  On other types of parameters this has the "
"same effect as `@t{R}'."
msgstr ""

#. type: item
#: zsh.texi:8233
#, no-wrap
msgid "@t{n:}@var{expr}@t{:}"
msgstr ""

#. type: table
#: zsh.texi:8238
msgid ""
"If combined with `@t{r}', `@t{R}', `@t{i}' or `@t{I}', makes them give the "
"@var{n}th or @var{n}th last match (if @var{expr} evaluates to @var{n}).  "
"This flag is ignored when the array is associative.  The delimiter character "
"@t{:} is arbitrary; see above."
msgstr ""

#. type: item
#: zsh.texi:8239
#, no-wrap
msgid "@t{b:}@var{expr}@t{:}"
msgstr ""

#. type: table
#: zsh.texi:8244
msgid ""
"If combined with `@t{r}', `@t{R}', `@t{i}' or `@t{I}', makes them begin at "
"the @var{n}th or @var{n}th last element, word, or character (if @var{expr} "
"evaluates to @var{n}).  This flag is ignored when the array is associative.  "
"The delimiter character @t{:} is arbitrary; see above."
msgstr ""

#. type: table
#: zsh.texi:8251
msgid ""
"This flag causes any pattern matching that would be performed on the "
"subscript to use plain string matching instead.  Hence "
"`@t{$@{array[(re)*]@}}' matches only the array element whose value is "
"@t{*}.  Note that other forms of substitution such as parameter substitution "
"are not inhibited."
msgstr ""

#. type: table
#: zsh.texi:8256
msgid ""
"This flag can also be used to force @t{*} or @t{@@} to be interpreted as a "
"single key rather than as a reference to all values.  It may be used for "
"either purpose on the left side of an assignment."
msgstr ""

#. type: Plain text
#: zsh.texi:8261
msgid ""
"See @emph{Parameter Expansion Flags} (@ref{Parameter Expansion}) for "
"additional ways to manipulate the results of array subscripting."
msgstr ""

#. type: subsection
#: zsh.texi:8264
#, no-wrap
msgid "Subscript Parsing"
msgstr ""

#. type: Plain text
#: zsh.texi:8272
msgid ""
"This discussion applies mainly to associative array key strings and to "
"patterns used for reverse subscripting (the `@t{r}', `@t{R}', `@t{i}', "
"etc. flags), but it may also affect parameter substitutions that appear as "
"part of an arithmetic expression in an ordinary subscript."
msgstr ""

#. type: Plain text
#: zsh.texi:8276
msgid ""
"To avoid subscript parsing limitations in assignments to associative array "
"elements, use the append syntax:"
msgstr ""

#. type: example
#: zsh.texi:8280
#, no-wrap
msgid "aa+=('key with \"*strange*\" characters' 'value string')\n"
msgstr ""

#. type: Plain text
#: zsh.texi:8289
msgid ""
"The basic rule to remember when writing a subscript expression is that all "
"text between the opening `@t{[}' and the closing `@t{]}' is interpreted "
"@emph{as if} it were in double quotes (@ref{Quoting}).  However, unlike "
"double quotes which normally cannot nest, subscript expressions may appear "
"inside double-quoted strings or inside other subscript expressions (or "
"both!), so the rules have two important differences."
msgstr ""

#. type: Plain text
#: zsh.texi:8301
msgid ""
"The first difference is that brackets (`@t{[}' and `@t{]}') must appear as "
"balanced pairs in a subscript expression unless they are preceded by a "
"backslash (`@t{\\}').  Therefore, within a subscript expression (and unlike "
"true double-quoting) the sequence `@t{\\[}' becomes `@t{[}', and similarly "
"`@t{\\]}' becomes `@t{]}'.  This applies even in cases where a backslash is "
"not normally required; for example, the pattern `@t{[^[]}' (to match any "
"character other than an open bracket) should be written `@t{[^\\[]}' in a "
"reverse-subscript pattern.  However, note that `@t{\\[^\\[\\]}' and even "
"`@t{\\[^[]}' mean the @emph{same} thing, because backslashes are always "
"stripped when they appear before brackets!"
msgstr ""

#. type: Plain text
#: zsh.texi:8309
msgid ""
"The same rule applies to parentheses (`@t{(}' and `@t{)}') and braces "
"(`@t{@{}' and `@t{@}}'): they must appear either in balanced pairs or "
"preceded by a backslash, and backslashes that protect parentheses or braces "
"are removed during parsing.  This is because parameter expansions may be "
"surrounded by balanced braces, and subscript flags are introduced by "
"balanced parentheses."
msgstr ""

#. type: Plain text
#: zsh.texi:8321
msgid ""
"The second difference is that a double-quote (`@t{\"}') may appear as part "
"of a subscript expression without being preceded by a backslash, and "
"therefore that the two characters `@t{\\\"}' remain as two characters in the "
"subscript (in true double-quoting, `@t{\\\"}' becomes `@t{\"}').  However, "
"because of the standard shell quoting rules, any double-quotes that appear "
"must occur in balanced pairs unless preceded by a backslash.  This makes it "
"more difficult to write a subscript expression that contains an odd number "
"of double-quote characters, but the reason for this difference is so that "
"when a subscript expression appears inside true double-quotes, one can still "
"write `@t{\\\"}' (rather than `@t{\\\\\\\"}') for `@t{\"}'."
msgstr ""

#. type: Plain text
#: zsh.texi:8326
msgid ""
"To use an odd number of double quotes as a key in an assignment, use the "
"@t{typeset} builtin and an enclosing pair of double quotes; to refer to the "
"value of that key, again use double quotes:"
msgstr ""

#. type: example
#: zsh.texi:8332
#, no-wrap
msgid ""
"typeset -A aa\n"
"typeset \"aa[one\\\"two\\\"three\\\"quotes]\"=QQQ\n"
"print \"$aa[one\\\"two\\\"three\\\"quotes]\"\n"
msgstr ""

#. type: Plain text
#: zsh.texi:8342
msgid ""
"It is important to note that the quoting rules do not change when a "
"parameter expansion with a subscript is nested inside another subscript "
"expression.  That is, it is not necessary to use additional backslashes "
"within the inner subscript expression; they are removed only once, from the "
"innermost subscript outwards.  Parameters are also expanded from the "
"innermost subscript first, as each expansion is encountered left to right in "
"the outer expression."
msgstr ""

#. type: Plain text
#: zsh.texi:8349
msgid ""
"A further complication arises from a way in which subscript parsing is "
"@emph{not} different from double quote parsing.  As in true double-quoting, "
"the sequences `@t{\\*}', and `@t{\\@@}' remain as two characters when they "
"appear in a subscript expression.  To use a literal `@t{*}' or `@t{@@}' as "
"an associative array key, the `@t{e}' flag must be used:"
msgstr ""

#. type: example
#: zsh.texi:8355
#, no-wrap
msgid ""
"typeset -A aa\n"
"aa[(e)*]=star\n"
"print $aa[(e)*]\n"
msgstr ""

#. type: Plain text
#: zsh.texi:8372
msgid ""
"A last detail must be considered when reverse subscripting is performed.  "
"Parameters appearing in the subscript expression are first expanded and then "
"the complete expression is interpreted as a pattern.  This has two effects: "
"first, parameters behave as if @t{GLOB_SUBST} were on (and it cannot be "
"turned off); second, backslashes are interpreted twice, once when parsing "
"the array subscript and again when parsing the pattern.  In a reverse "
"subscript, it's necessary to use @emph{four} backslashes to cause a single "
"backslash to match literally in the pattern.  For complex patterns, it is "
"often easiest to assign the desired pattern to a parameter and then refer to "
"that parameter in the subscript, because then the backslashes, brackets, "
"parentheses, etc., are seen only when the complete expression is converted "
"to a pattern.  To match the value of a parameter literally in a reverse "
"subscript, rather than as a pattern, use `@t{$@{(q}@t{)}@var{name}@t{@}}' "
"(@ref{Parameter Expansion}) to quote the expanded value."
msgstr ""

#. type: Plain text
#: zsh.texi:8379
msgid ""
"Note that the `@t{k}' and `@t{K}' flags are reverse subscripting for an "
"ordinary array, but are @emph{not} reverse subscripting for an associative "
"array! (For an associative array, the keys in the array itself are "
"interpreted as patterns by those flags; the subscript is a plain string in "
"that case.)"
msgstr ""

#. type: Plain text
#: zsh.texi:8389
msgid ""
"One final note, not directly related to subscripting: the numeric names of "
"positional parameters (@ref{Positional Parameters}) are parsed specially, so "
"for example `@t{$2foo}' is equivalent to `@t{$@{2@}foo}'.  Therefore, to use "
"subscript syntax to extract a substring from a positional parameter, the "
"expansion must be surrounded by braces; for example, `@t{$@{2[3,5]@}}' "
"evaluates to the third through fifth characters of the second positional "
"parameter, but `@t{$2[3,5]}' is the entire second parameter concatenated "
"with the filename generation pattern `@t{[3,5]}'."
msgstr ""

#. type: node
#: zsh.texi:8391 zsh.texi:8423 zsh.texi:8425 zsh.texi:8468
#, no-wrap
msgid "Local Parameters"
msgstr ""

#. type: Plain text
#: zsh.texi:8402
msgid ""
"The positional parameters provide access to the command-line arguments of a "
"shell function, shell script, or the shell itself; see @ref{Invocation}, and "
"also @ref{Functions}.  The parameter @var{n}, where @var{n} is a number, is "
"the @var{n}th positional parameter.  The parameter `@t{$0}' is a special "
"case, see @ref{Parameters Set By The Shell}."
msgstr ""

#. type: Plain text
#: zsh.texi:8410
msgid ""
"The parameters @t{*}, @t{@@} and @t{argv} are arrays containing all the "
"positional parameters; thus `@t{$argv[}@var{n}@t{]}', etc., is equivalent to "
"simply `@t{$}@var{n}'.  Note that the options @t{KSH_ARRAYS} or "
"@t{KSH_ZERO_SUBSCRIPT} apply to these arrays as well, so with either of "
"those options set, `@t{$@{argv[0]@}}' is equivalent to `@t{$1}' and so on."
msgstr ""

#. type: Plain text
#: zsh.texi:8421
msgid ""
"Positional parameters may be changed after the shell or function starts by "
"using the @t{set} builtin, by assigning to the @t{argv} array, or by direct "
"assignment of the form `@var{n}@t{=}@var{value}' where @var{n} is the number "
"of the positional parameter to be changed.  This also creates (with empty "
"values) any of the positions from 1 to @var{n} that do not already have "
"values.  Note that, because the positional parameters form an array, an "
"array assignment of the form `@var{n}@t{=(}@var{value} ...@t{)}' is allowed, "
"and has the effect of shifting all the values at positions greater than "
"@var{n} by as many positions as necessary to accommodate the new values."
msgstr ""

#. type: node
#: zsh.texi:8423 zsh.texi:8468 zsh.texi:8470 zsh.texi:8930
#, no-wrap
msgid "Parameters Set By The Shell"
msgstr ""

#. type: Plain text
#: zsh.texi:8432
msgid ""
"Shell function executions delimit scopes for shell parameters.  (Parameters "
"are dynamically scoped.)  The @t{typeset} builtin, and its alternative forms "
"@t{declare}, @t{integer}, @t{local} and @t{readonly} (but not @t{export}), "
"can be used to declare a parameter as being local to the innermost scope."
msgstr ""

#. type: Plain text
#: zsh.texi:8439
msgid ""
"When a parameter is read or assigned to, the innermost existing parameter of "
"that name is used.  (That is, the local parameter hides any less-local "
"parameter.)  However, assigning to a non-existent parameter, or declaring a "
"new parameter with @t{export}, causes it to be created in the "
"@emph{outer}most scope."
msgstr ""

#. type: Plain text
#: zsh.texi:8444
msgid ""
"Local parameters disappear when their scope ends.  @t{unset} can be used to "
"delete a parameter while it is still in scope; any outer parameter of the "
"same name remains hidden."
msgstr ""

#. type: Plain text
#: zsh.texi:8453
msgid ""
"Special parameters may also be made local; they retain their special "
"attributes unless either the existing or the newly-created parameter has the "
"@t{-h} (hide) attribute.  This may have unexpected effects: there is no "
"default value, so if there is no assignment at the point the variable is "
"made local, it will be set to an empty value (or zero in the case of "
"integers).  The following:"
msgstr ""

#. type: example
#: zsh.texi:8457
#, no-wrap
msgid "typeset PATH=/new/directory:$PATH\n"
msgstr ""

#. type: Plain text
#: zsh.texi:8462
msgid ""
"is valid for temporarily allowing the shell or programmes called from it to "
"find the programs in @t{/new/directory} inside a function."
msgstr ""

#. type: Plain text
#: zsh.texi:8466
msgid ""
"Note that the restriction in older versions of zsh that local parameters "
"were never exported has been removed."
msgstr ""

#. type: Plain text
#: zsh.texi:8475
msgid ""
"In the parameter lists that follow, the mark `<S>' indicates that the "
"parameter is special.  `<Z>' indicates that the parameter does not exist "
"when the shell initializes in @t{sh} or @t{ksh} emulation mode."
msgstr ""

#. type: Plain text
#: zsh.texi:8484
msgid ""
"The parameters `@t{!}', `@t{#}', `@t{*}', `@t{-}', `@t{?}', `@t{@@}', "
"`@t{$}', `@t{ARGC}', `@t{HISTCMD}', `@t{LINENO}', `@t{PPID}', `@t{status}', "
"`@t{TTYIDLE}', `@t{zsh_eval_context}', `@t{ZSH_EVAL_CONTEXT}', and "
"`@t{ZSH_SUBSHELL}' are read-only and thus cannot be restored by the user, so "
"they are not output by `@t{typeset -p}'.  This also applies to many "
"read-only parameters loaded from modules."
msgstr ""

#. type: Plain text
#: zsh.texi:8487
msgid "The following parameters are automatically set by the shell:"
msgstr ""

#. type: item
#: zsh.texi:8491
#, no-wrap
msgid "@t{!} <S>"
msgstr ""

#. type: table
#: zsh.texi:8494
msgid ""
"The process ID of the last command started in the background with @t{&}, put "
"into the background with the @t{bg} builtin, or spawned with @t{coproc}."
msgstr ""

#. type: item
#: zsh.texi:8496
#, no-wrap
msgid "@t{#} <S>"
msgstr ""

#. type: table
#: zsh.texi:8502
msgid ""
"The number of positional parameters in decimal.  Note that some confusion "
"may occur with the syntax @t{$#}@var{param} which substitutes the length of "
"@var{param}.  Use @t{$@{#@}} to resolve ambiguities.  In particular, the "
"sequence `@t{$#-}@var{...}' in an arithmetic expression is interpreted as "
"the length of the parameter @t{-}, q.v."
msgstr ""

#. type: vindex
#: zsh.texi:8503
#, no-wrap
msgid "ARGC"
msgstr ""

#. type: item
#: zsh.texi:8504
#, no-wrap
msgid "@t{ARGC} <S> <Z>"
msgstr ""

#. type: table
#: zsh.texi:8506
msgid "Same as @t{#}."
msgstr ""

#. type: item
#: zsh.texi:8508
#, no-wrap
msgid "@t{$} <S>"
msgstr ""

#. type: table
#: zsh.texi:8514
msgid ""
"The process ID of this shell, set when the shell initializes.  Processes "
"forked from the shell without executing a new program, such as command "
"substitutions and commands grouped with @t{(}@var{...}@t{)}, are subshells "
"that duplicate the current shell, and thus substitute the same value for "
"@t{$$} as their parent shell."
msgstr ""

#. type: item
#: zsh.texi:8516
#, no-wrap
msgid "@t{-} <S>"
msgstr ""

#. type: table
#: zsh.texi:8519
msgid ""
"Flags supplied to the shell on invocation or by the @t{set} or @t{setopt} "
"commands."
msgstr ""

#. type: item
#: zsh.texi:8521
#, no-wrap
msgid "@t{*} <S>"
msgstr ""

#. type: table
#: zsh.texi:8523
msgid "An array containing the positional parameters."
msgstr ""

#. type: vindex
#: zsh.texi:8524
#, no-wrap
msgid "argv"
msgstr ""

#. type: item
#: zsh.texi:8525
#, no-wrap
msgid "@t{argv} <S> <Z>"
msgstr ""

#. type: table
#: zsh.texi:8531
msgid ""
"Same as @t{*}.  Assigning to @t{argv} changes the local positional "
"parameters, but @t{argv} is @emph{not} itself a local parameter.  Deleting "
"@t{argv} with @t{unset} in any function deletes it everywhere, although only "
"the innermost positional parameter array is deleted (so @t{*} and @t{@@} in "
"other scopes are not affected)."
msgstr ""

#. type: item
#: zsh.texi:8533
#, no-wrap
msgid "@t{@@} <S>"
msgstr ""

#. type: table
#: zsh.texi:8535
msgid "Same as @t{argv[@@]}, even when @t{argv} is not set."
msgstr ""

#. type: item
#: zsh.texi:8537
#, no-wrap
msgid "@t{?} <S>"
msgstr ""

#. type: table
#: zsh.texi:8539
msgid "The exit status returned by the last command."
msgstr ""

#. type: item
#: zsh.texi:8541
#, no-wrap
msgid "@t{0} <S>"
msgstr ""

#. type: table
#: zsh.texi:8547
msgid ""
"The name used to invoke the current shell, or as set by the @t{-c} command "
"line option upon invocation.  If the @t{FUNCTION_ARGZERO} option is set, "
"@t{$0} is set upon entry to a shell function to the name of the function, "
"and upon entry to a sourced script to the name of the script, and reset to "
"its previous value when the function or script returns."
msgstr ""

#. type: vindex
#: zsh.texi:8548
#, no-wrap
msgid "status"
msgstr ""

#. type: item
#: zsh.texi:8549
#, no-wrap
msgid "@t{status} <S> <Z>"
msgstr ""

#. type: table
#: zsh.texi:8551
msgid "Same as @t{?}."
msgstr ""

#. type: vindex
#: zsh.texi:8552
#, no-wrap
msgid "pipestatus"
msgstr ""

#. type: item
#: zsh.texi:8553
#, no-wrap
msgid "@t{pipestatus} <S> <Z>"
msgstr ""

#. type: table
#: zsh.texi:8556
msgid ""
"An array containing the exit statuses returned by all commands in the last "
"pipeline."
msgstr ""

#. type: item
#: zsh.texi:8558
#, no-wrap
msgid "@t{_} <S>"
msgstr ""

#. type: table
#: zsh.texi:8562
msgid ""
"The last argument of the previous command.  Also, this parameter is set in "
"the environment of every command executed to the full pathname of the "
"command."
msgstr ""

#. type: t{#1}
#: zsh.texi:8563 zsh.texi:8564
#, no-wrap
msgid "CPUTYPE"
msgstr ""

#. type: table
#: zsh.texi:8567
msgid ""
"The machine type (microprocessor class or machine model), as determined at "
"run time."
msgstr ""

#. type: vindex
#: zsh.texi:8568
#, no-wrap
msgid "EGID"
msgstr ""

#. type: item
#: zsh.texi:8569
#, no-wrap
msgid "@t{EGID} <S>"
msgstr ""

#. type: table
#: zsh.texi:8575
msgid ""
"The effective group ID of the shell process.  If you have sufficient "
"privileges, you may change the effective group ID of the shell process by "
"assigning to this parameter.  Also (assuming sufficient privileges), you may "
"start a single command with a different effective group ID by "
"`@t{(EGID=}@var{gid}@t{; command)}'"
msgstr ""

#. type: table
#: zsh.texi:8579 zsh.texi:8591 zsh.texi:8625 zsh.texi:8772 zsh.texi:9103
#: zsh.texi:9410
msgid ""
"If this is made local, it is not implicitly set to 0, but may be explicitly "
"set locally."
msgstr ""

#. type: vindex
#: zsh.texi:8580
#, no-wrap
msgid "EUID"
msgstr ""

#. type: item
#: zsh.texi:8581
#, no-wrap
msgid "@t{EUID} <S>"
msgstr ""

#. type: table
#: zsh.texi:8587
msgid ""
"The effective user ID of the shell process.  If you have sufficient "
"privileges, you may change the effective user ID of the shell process by "
"assigning to this parameter.  Also (assuming sufficient privileges), you may "
"start a single command with a different effective user ID by "
"`@t{(EUID=}@var{uid}@t{; command)}'"
msgstr ""

#. type: vindex
#: zsh.texi:8592
#, no-wrap
msgid "ERRNO"
msgstr ""

#. type: item
#: zsh.texi:8593
#, no-wrap
msgid "@t{ERRNO} <S>"
msgstr ""

#. type: table
#: zsh.texi:8599
msgid ""
"The value of @t{errno} (see errno(3))  as set by the most recently failed "
"system call.  This value is system dependent and is intended for debugging "
"purposes.  It is also useful with the @t{zsh/system} module which allows the "
"number to be turned into a name or message."
msgstr ""

#. type: table
#: zsh.texi:8603
msgid ""
"To use this parameter, it must first be assigned a value (typically 0 "
"(zero)).  It is initially unset for scripting compatibility."
msgstr ""

#. type: vindex
#: zsh.texi:8604
#, no-wrap
msgid "FUNCNEST"
msgstr ""

#. type: item
#: zsh.texi:8605
#, no-wrap
msgid "@t{FUNCNEST} <S>"
msgstr ""

#. type: table
#: zsh.texi:8613
msgid ""
"Integer.  If greater than or equal to zero, the maximum nesting depth of "
"shell functions.  When it is exceeded, an error is raised at the point where "
"a function is called.  The default value is determined when the shell is "
"configured, but is typically 500.  Increasing the value increases the danger "
"of a runaway function recursion causing the shell to crash.  Setting a "
"negative value turns off the check."
msgstr ""

#. type: vindex
#: zsh.texi:8614
#, no-wrap
msgid "GID"
msgstr ""

#. type: item
#: zsh.texi:8615
#, no-wrap
msgid "@t{GID} <S>"
msgstr ""

#. type: table
#: zsh.texi:8621
msgid ""
"The real group ID of the shell process.  If you have sufficient privileges, "
"you may change the group ID of the shell process by assigning to this "
"parameter.  Also (assuming sufficient privileges), you may start a single "
"command under a different group ID by `@t{(GID=}@var{gid}@t{; command)}'"
msgstr ""

#. type: t{#1}
#: zsh.texi:8626 zsh.texi:8627
#, no-wrap
msgid "HISTCMD"
msgstr ""

#. type: table
#: zsh.texi:8632
msgid ""
"The current history event number in an interactive shell, in other words the "
"event number for the command that caused @t{$HISTCMD} to be read.  If the "
"current history event modifies the history, @t{HISTCMD} changes to the new "
"maximum history event number."
msgstr ""

#. type: t{#1}
#: zsh.texi:8633 zsh.texi:8634
#, no-wrap
msgid "HOST"
msgstr ""

#. type: table
#: zsh.texi:8636
msgid "The current hostname."
msgstr ""

#. type: vindex
#: zsh.texi:8637
#, no-wrap
msgid "LINENO"
msgstr ""

#. type: item
#: zsh.texi:8638
#, no-wrap
msgid "@t{LINENO} <S>"
msgstr ""

#. type: table
#: zsh.texi:8644
msgid ""
"The line number of the current line within the current script, sourced file, "
"or shell function being executed, whichever was started most recently.  Note "
"that in the case of shell functions the line number refers to the function "
"as it appeared in the original definition, not necessarily as displayed by "
"the @t{functions} builtin."
msgstr ""

#. type: t{#1}
#: zsh.texi:8645 zsh.texi:8646
#, no-wrap
msgid "LOGNAME"
msgstr ""

#. type: table
#: zsh.texi:8653
msgid ""
"If the corresponding variable is not set in the environment of the shell, it "
"is initialized to the login name corresponding to the current login "
"session. This parameter is exported by default but this can be disabled "
"using the @t{typeset} builtin.  The value is set to the string returned by "
"the getlogin(3) system call if that is available."
msgstr ""

#. type: t{#1}
#: zsh.texi:8654 zsh.texi:8655
#, no-wrap
msgid "MACHTYPE"
msgstr ""

#. type: table
#: zsh.texi:8658
msgid ""
"The machine type (microprocessor class or machine model), as determined at "
"compile time."
msgstr ""

#. type: t{#1}
#: zsh.texi:8659 zsh.texi:8660
#, no-wrap
msgid "OLDPWD"
msgstr ""

#. type: table
#: zsh.texi:8663
msgid ""
"The previous working directory.  This is set when the shell initializes and "
"whenever the directory changes."
msgstr ""

#. type: vindex
#: zsh.texi:8664
#, no-wrap
msgid "OPTARG"
msgstr ""

#. type: item
#: zsh.texi:8665
#, no-wrap
msgid "@t{OPTARG} <S>"
msgstr ""

#. type: table
#: zsh.texi:8668
msgid "The value of the last option argument processed by the @t{getopts} command."
msgstr ""

#. type: vindex
#: zsh.texi:8669
#, no-wrap
msgid "OPTIND"
msgstr ""

#. type: item
#: zsh.texi:8670
#, no-wrap
msgid "@t{OPTIND} <S>"
msgstr ""

#. type: table
#: zsh.texi:8673
msgid "The index of the last option argument processed by the @t{getopts} command."
msgstr ""

#. type: t{#1}
#: zsh.texi:8674 zsh.texi:8675
#, no-wrap
msgid "OSTYPE"
msgstr ""

#. type: table
#: zsh.texi:8677
msgid "The operating system, as determined at compile time."
msgstr ""

#. type: vindex
#: zsh.texi:8678
#, no-wrap
msgid "PPID"
msgstr ""

#. type: item
#: zsh.texi:8679
#, no-wrap
msgid "@t{PPID} <S>"
msgstr ""

#. type: table
#: zsh.texi:8683
msgid ""
"The process ID of the parent of the shell, set when the shell initializes.  "
"As with @t{$$}, the value does not change in subshells created as a "
"duplicate of the current shell."
msgstr ""

#. type: t{#1}
#: zsh.texi:8684 zsh.texi:8685
#, no-wrap
msgid "PWD"
msgstr ""

#. type: table
#: zsh.texi:8688
msgid ""
"The present working directory.  This is set when the shell initializes and "
"whenever the directory changes."
msgstr ""

#. type: vindex
#: zsh.texi:8689
#, no-wrap
msgid "RANDOM"
msgstr ""

#. type: item
#: zsh.texi:8690
#, no-wrap
msgid "@t{RANDOM} <S>"
msgstr ""

#. type: table
#: zsh.texi:8694
msgid ""
"A pseudo-random integer from 0 to 32767, newly generated each time this "
"parameter is referenced.  The random number generator can be seeded by "
"assigning a numeric value to @t{RANDOM}."
msgstr ""

#. type: table
#: zsh.texi:8700
msgid ""
"The values of @t{RANDOM} form an intentionally-repeatable pseudo-random "
"sequence; subshells that reference @t{RANDOM} will result in identical "
"pseudo-random values unless the value of @t{RANDOM} is referenced or seeded "
"in the parent shell in between subshell invocations."
msgstr ""

#. type: vindex
#: zsh.texi:8701
#, no-wrap
msgid "SECONDS"
msgstr ""

#. type: item
#: zsh.texi:8702
#, no-wrap
msgid "@t{SECONDS} <S>"
msgstr ""

#. type: table
#: zsh.texi:8707
msgid ""
"The number of seconds since shell invocation.  If this parameter is assigned "
"a value, then the value returned upon reference will be the value that was "
"assigned plus the number of seconds since the assignment."
msgstr ""

#. type: table
#: zsh.texi:8718
msgid ""
"Unlike other special parameters, the type of the @t{SECONDS} parameter can "
"be changed using the @t{typeset} command.  The type may be changed only to "
"one of the floating point types or back to integer.  For example, "
"`@t{typeset -F SECONDS}' causes the value to be reported as a floating point "
"number.  The value is available to microsecond accuracy, although the shell "
"may show more or fewer digits depending on the use of @t{typeset}.  See the "
"documentation for the builtin @t{typeset} in @ref{Shell Builtin Commands} "
"for more details."
msgstr ""

#. type: vindex
#: zsh.texi:8719
#, no-wrap
msgid "SHLVL"
msgstr ""

#. type: item
#: zsh.texi:8720
#, no-wrap
msgid "@t{SHLVL} <S>"
msgstr ""

#. type: table
#: zsh.texi:8722
msgid "Incremented by one each time a new shell is started."
msgstr ""

#. type: t{#1}
#: zsh.texi:8723 zsh.texi:8724 zsh.texi:21720
#, no-wrap
msgid "signals"
msgstr ""

#. type: table
#: zsh.texi:8732
msgid ""
"An array containing the names of the signals.  Note that with the standard "
"zsh numbering of array indices, where the first element has index 1, the "
"signals are offset by 1 from the signal number used by the operating "
"system.  For example, on typical Unix-like systems @t{HUP} is signal number "
"1, but is referred to as @t{$signals[2]}.  This is because of @t{EXIT} at "
"position 1 in the array, which is used internally by zsh but is not known to "
"the operating system."
msgstr ""

#. type: vindex
#: zsh.texi:8733
#, no-wrap
msgid "TRY_BLOCK_ERROR"
msgstr ""

#. type: item
#: zsh.texi:8734
#, no-wrap
msgid "@t{TRY_BLOCK_ERROR} <S>"
msgstr ""

#. type: table
#: zsh.texi:8739
msgid ""
"In an @t{always} block, indicates whether the preceding list of code caused "
"an error.  The value is 1 to indicate an error, 0 otherwise.  It may be "
"reset, clearing the error condition.  See @ref{Complex Commands}"
msgstr ""

#. type: vindex
#: zsh.texi:8740
#, no-wrap
msgid "TRY_BLOCK_INTERRUPT"
msgstr ""

#. type: item
#: zsh.texi:8741
#, no-wrap
msgid "@t{TRY_BLOCK_INTERRUPT} <S>"
msgstr ""

#. type: table
#: zsh.texi:8747
msgid ""
"This variable works in a similar way to @t{TRY_BLOCK_ERROR}, but represents "
"the status of an interrupt from the signal SIGINT, which typically comes "
"from the keyboard when the user types @t{^C}.  If set to 0, any such "
"interrupt will be reset; otherwise, the interrupt is propagated after the "
"@t{always} block."
msgstr ""

#. type: table
#: zsh.texi:8751
msgid ""
"Note that it is possible that an interrupt arrives during the execution of "
"the @t{always} block; this interrupt is also propagated."
msgstr ""

#. type: t{#1}
#: zsh.texi:8752 zsh.texi:8753
#, no-wrap
msgid "TTY"
msgstr ""

#. type: table
#: zsh.texi:8755
msgid "The name of the tty associated with the shell, if any."
msgstr ""

#. type: vindex
#: zsh.texi:8756
#, no-wrap
msgid "TTYIDLE"
msgstr ""

#. type: item
#: zsh.texi:8757
#, no-wrap
msgid "@t{TTYIDLE} <S>"
msgstr ""

#. type: table
#: zsh.texi:8760
msgid ""
"The idle time of the tty associated with the shell in seconds or -1 if there "
"is no such tty."
msgstr ""

#. type: vindex
#: zsh.texi:8761
#, no-wrap
msgid "UID"
msgstr ""

#. type: item
#: zsh.texi:8762
#, no-wrap
msgid "@t{UID} <S>"
msgstr ""

#. type: table
#: zsh.texi:8768
msgid ""
"The real user ID of the shell process.  If you have sufficient privileges, "
"you may change the user ID of the shell by assigning to this parameter.  "
"Also (assuming sufficient privileges), you may start a single command under "
"a different user ID by `@t{(UID=}@var{uid}@t{; command)}'"
msgstr ""

#. type: vindex
#: zsh.texi:8773
#, no-wrap
msgid "USERNAME"
msgstr ""

#. type: item
#: zsh.texi:8774
#, no-wrap
msgid "@t{USERNAME} <S>"
msgstr ""

#. type: table
#: zsh.texi:8781
msgid ""
"The username corresponding to the real user ID of the shell process.  If you "
"have sufficient privileges, you may change the username (and also the user "
"ID and group ID) of the shell by assigning to this parameter.  Also "
"(assuming sufficient privileges), you may start a single command under a "
"different username (and user ID and group ID)  by "
"`@t{(USERNAME=}@var{username}@t{; command)}'"
msgstr ""

#. type: t{#1}
#: zsh.texi:8782 zsh.texi:8783
#, no-wrap
msgid "VENDOR"
msgstr ""

#. type: table
#: zsh.texi:8785
msgid "The vendor, as determined at compile time."
msgstr ""

#. type: vindex
#: zsh.texi:8786
#, no-wrap
msgid "zsh_eval_context"
msgstr ""

#. type: vindex
#: zsh.texi:8787
#, no-wrap
msgid "ZSH_EVAL_CONTEXT"
msgstr ""

#. type: item
#: zsh.texi:8788
#, no-wrap
msgid "@t{zsh_eval_context} <S> <Z> (@t{ZSH_EVAL_CONTEXT} <S>)"
msgstr ""

#. type: table
#: zsh.texi:8795
msgid ""
"An array (colon-separated list) indicating the context of shell code that is "
"being run.  Each time a piece of shell code that is stored within the shell "
"is executed a string is temporarily appended to the array to indicate the "
"type of operation that is being performed.  Read in order the array gives an "
"indication of the stack of operations being performed with the most "
"immediate context last."
msgstr ""

#. type: table
#: zsh.texi:8799
msgid ""
"Note that the variable does not give information on syntactic context such "
"as pipelines or subshells.  Use @t{$ZSH_SUBSHELL} to detect subshells."
msgstr ""

#. type: table
#: zsh.texi:8802
msgid "The context is one of the following:"
msgstr ""

#. type: t{#1}
#: zsh.texi:8803
#, no-wrap
msgid "cmdarg"
msgstr ""

#. type: table
#: zsh.texi:8806
msgid ""
"Code specified by the @t{-c} option to the command line that invoked the "
"shell."
msgstr ""

#. type: t{#1}
#: zsh.texi:8807
#, no-wrap
msgid "cmdsubst"
msgstr ""

#. type: table
#: zsh.texi:8810
msgid ""
"Command substitution using the @t{`}@var{...}@t{`} or @t{$(}@var{...}@t{)} "
"construct."
msgstr ""

#. type: t{#1}
#: zsh.texi:8811
#, no-wrap
msgid "equalsubst"
msgstr ""

#. type: table
#: zsh.texi:8813
msgid "File substitution using the @t{=(}@var{...}@t{)} construct."
msgstr ""

#. type: findex
#: zsh.texi:8814 zsh.texi:13478
#, no-wrap
msgid "eval"
msgstr ""

#. type: table
#: zsh.texi:8816
msgid "Code executed by the @t{eval} builtin."
msgstr ""

#. type: t{#1}
#: zsh.texi:8817
#, no-wrap
msgid "evalautofunc"
msgstr ""

#. type: table
#: zsh.texi:8820
msgid ""
"Code executed with the @t{KSH_AUTOLOAD} mechanism in order to define an "
"autoloaded function."
msgstr ""

#. type: findex
#: zsh.texi:8821 zsh.texi:13538
#, no-wrap
msgid "fc"
msgstr ""

#. type: table
#: zsh.texi:8824
msgid ""
"Code from the shell history executed by the @t{-e} option to the @t{fc} "
"builtin."
msgstr ""

#. type: t{#1}
#: zsh.texi:8825
#, no-wrap
msgid "file"
msgstr ""

#. type: table
#: zsh.texi:8828
msgid ""
"Lines of code being read directly from a file, for example by the @t{source} "
"builtin."
msgstr ""

#. type: t{#1}
#: zsh.texi:8829
#, no-wrap
msgid "filecode"
msgstr ""

#. type: table
#: zsh.texi:8832
msgid ""
"Lines of code being read from a @t{.zwc} file instead of directly from the "
"source file."
msgstr ""

#. type: t{#1}
#: zsh.texi:8833
#, no-wrap
msgid "globqual"
msgstr ""

#. type: table
#: zsh.texi:8835
msgid "Code executed by the @t{e} or @t{+} glob qualifier."
msgstr ""

#. type: t{#1}
#: zsh.texi:8836
#, no-wrap
msgid "globsort"
msgstr ""

#. type: table
#: zsh.texi:8838
msgid "Code executed to order files by the @t{o} glob qualifier."
msgstr ""

#. type: t{#1}
#: zsh.texi:8839
#, no-wrap
msgid "insubst"
msgstr ""

#. type: table
#: zsh.texi:8841
msgid "File substitution using the @t{<(}@var{...}@t{)} construct."
msgstr ""

#. type: t{#1}
#: zsh.texi:8842
#, no-wrap
msgid "loadautofunc"
msgstr ""

#. type: table
#: zsh.texi:8844
msgid "Code read directly from a file to define an autoloaded function."
msgstr ""

#. type: t{#1}
#: zsh.texi:8845
#, no-wrap
msgid "outsubst"
msgstr ""

#. type: table
#: zsh.texi:8847
msgid "File substitution using the @t{>(}@var{...}@t{)} construct."
msgstr ""

#. type: findex
#: zsh.texi:8848 zsh.texi:14584 zsh.texi:30175
#, no-wrap
msgid "sched"
msgstr ""

#. type: table
#: zsh.texi:8850
msgid "Code executed by the @t{sched} builtin."
msgstr ""

#. type: t{#1}
#: zsh.texi:8851
#, no-wrap
msgid "shfunc"
msgstr ""

#. type: table
#: zsh.texi:8853
msgid "A shell function."
msgstr ""

#. type: t{#1}
#: zsh.texi:8854
#, no-wrap
msgid "stty"
msgstr ""

#. type: table
#: zsh.texi:8858
msgid ""
"Code passed to @t{stty} by the @t{STTY} environment variable.  Normally this "
"is passed directly to the system's @t{stty} command, so this value is "
"unlikely to be seen in practice."
msgstr ""

#. type: t{#1}
#: zsh.texi:8859
#, no-wrap
msgid "style"
msgstr ""

#. type: table
#: zsh.texi:8862
msgid ""
"Code executed as part of a style retrieved by the @t{zstyle} builtin from "
"the @t{zsh/zutil} module."
msgstr ""

#. type: t{#1}
#: zsh.texi:8863
#, no-wrap
msgid "toplevel"
msgstr ""

#. type: table
#: zsh.texi:8865
msgid "The highest execution level of a script or interactive shell."
msgstr ""

#. type: findex
#: zsh.texi:8866 zsh.texi:14742
#, no-wrap
msgid "trap"
msgstr ""

#. type: table
#: zsh.texi:8871
msgid ""
"Code executed as a trap defined by the @t{trap} builtin.  Traps defined as "
"functions have the context @t{shfunc}.  As traps are asynchronous they may "
"have a different hierarchy from other code."
msgstr ""

#. type: findex
#: zsh.texi:8872 zsh.texi:16061 zsh.texi:31969
#, no-wrap
msgid "zpty"
msgstr ""

#. type: table
#: zsh.texi:8874
msgid "Code executed by the @t{zpty} builtin from the @t{zsh/zpty} module."
msgstr ""

#. type: t{#1}
#: zsh.texi:8875
#, no-wrap
msgid "zregexparse-guard"
msgstr ""

#. type: table
#: zsh.texi:8878
msgid ""
"Code executed as a guard by the @t{zregexparse} command from the "
"@t{zsh/zutil} module."
msgstr ""

#. type: t{#1}
#: zsh.texi:8879
#, no-wrap
msgid "zregexparse-action"
msgstr ""

#. type: table
#: zsh.texi:8882
msgid ""
"Code executed as an action by the @t{zregexparse} command from the "
"@t{zsh/zutil} module."
msgstr ""

#. type: t{#1}
#: zsh.texi:8885 zsh.texi:8886
#, no-wrap
msgid "ZSH_ARGZERO"
msgstr ""

#. type: table
#: zsh.texi:8891
msgid ""
"If zsh was invoked to run a script, this is the name of the script.  "
"Otherwise, it is the name used to invoke the current shell.  This is the "
"same as the value of @t{$0} when the @t{POSIX_ARGZERO} option is set, but is "
"always available."
msgstr ""

#. type: t{#1}
#: zsh.texi:8892 zsh.texi:8893
#, no-wrap
msgid "ZSH_EXECUTION_STRING"
msgstr ""

#. type: table
#: zsh.texi:8896
msgid ""
"If the shell was started with the option @t{-c}, this contains the argument "
"passed to the option.  Otherwise it is not set."
msgstr ""

#. type: t{#1}
#: zsh.texi:8897 zsh.texi:8898
#, no-wrap
msgid "ZSH_NAME"
msgstr ""

#. type: table
#: zsh.texi:8901
msgid "Expands to the basename of the command used to invoke this instance of zsh."
msgstr ""

#. type: t{#1}
#: zsh.texi:8902 zsh.texi:8903
#, no-wrap
msgid "ZSH_PATCHLEVEL"
msgstr ""

#. type: table
#: zsh.texi:8909
msgid ""
"The output of `@t{git describe --tags --long}' for the zsh repository used "
"to build the shell.  This is most useful in order to keep track of versions "
"of the shell during development between releases; hence most users should "
"not use it and should instead rely on @t{$ZSH_VERSION}."
msgstr ""

#. type: t{#1}
#: zsh.texi:8910 zsh.texi:30226 zsh.texi:30227
#, no-wrap
msgid "zsh_scheduled_events"
msgstr ""

#. type: table
#: zsh.texi:8912 zsh.texi:14586
msgid "See @ref{The zsh/sched Module}."
msgstr ""

#. type: t{#1}
#: zsh.texi:8913 zsh.texi:8914
#, no-wrap
msgid "ZSH_SCRIPT"
msgstr ""

#. type: table
#: zsh.texi:8917
msgid ""
"If zsh was invoked to run a script, this is the name of the script, "
"otherwise it is unset."
msgstr ""

#. type: vindex
#: zsh.texi:8918
#, no-wrap
msgid "ZSH_SUBSHELL <S>"
msgstr ""

#. type: t{#1}
#: zsh.texi:8919
#, no-wrap
msgid "ZSH_SUBSHELL"
msgstr ""

#. type: table
#: zsh.texi:8924
msgid ""
"Readonly integer.  Initially zero, incremented each time the shell forks to "
"create a subshell for executing code.  Hence `@t{(print $ZSH_SUBSHELL)}' and "
"`@t{print $(print $ZSH_SUBSHELL)}' output 1, while `@t{( (print "
"$ZSH_SUBSHELL) )}' outputs 2."
msgstr ""

#. type: t{#1}
#: zsh.texi:8925 zsh.texi:8926
#, no-wrap
msgid "ZSH_VERSION"
msgstr ""

#. type: table
#: zsh.texi:8928
msgid "The version number of the release of zsh."
msgstr ""

#. type: Plain text
#: zsh.texi:8937
msgid ""
"The following parameters are used by the shell.  Again, `<S>' indicates that "
"the parameter is special and `<Z>' indicates that the parameter does not "
"exist when the shell initializes in @t{sh} or @t{ksh} emulation mode."
msgstr ""

#. type: Plain text
#: zsh.texi:8948
msgid ""
"In cases where there are two parameters with an upper- and lowercase form of "
"the same name, such as @t{path} and @t{PATH}, the lowercase form is an array "
"and the uppercase form is a scalar with the elements of the array joined "
"together by colons.  These are similar to tied parameters created via "
"`@t{typeset -T}'.  The normal use for the colon-separated form is for "
"exporting to the environment, while the array form is easier to manipulate "
"within the shell.  Note that unsetting either of the pair will unset the "
"other; they retain their special properties when recreated, and recreating "
"one of the pair will recreate the other."
msgstr ""

#. type: t{#1}
#: zsh.texi:8951 zsh.texi:8952
#, no-wrap
msgid "ARGV0"
msgstr ""

#. type: table
#: zsh.texi:8955
msgid ""
"If exported, its value is used as the @t{argv[0]} of external commands.  "
"Usually used in constructs like `@t{ARGV0=emacs nethack}'."
msgstr ""

#. type: cindex
#: zsh.texi:8956
#, no-wrap
msgid "editing over slow connection"
msgstr ""

#. type: cindex
#: zsh.texi:8957
#, no-wrap
msgid "slow connection, editing over"
msgstr ""

#. type: t{#1}
#: zsh.texi:8958 zsh.texi:8959
#, no-wrap
msgid "BAUD"
msgstr ""

#. type: table
#: zsh.texi:8965
msgid ""
"The rate in bits per second at which data reaches the terminal.  The line "
"editor will use this value in order to compensate for a slow terminal by "
"delaying updates to the display until necessary.  If the parameter is unset "
"or the value is zero the compensation mechanism is turned off.  The "
"parameter is not set by default."
msgstr ""

#. type: table
#: zsh.texi:8971
msgid ""
"This parameter may be profitably set in some circumstances, e.g.  for slow "
"modems dialing into a communications server, or on a slow wide area "
"network.  It should be set to the baud rate of the slowest part of the link "
"for best performance."
msgstr ""

#. type: vindex
#: zsh.texi:8972
#, no-wrap
msgid "cdpath"
msgstr ""

#. type: vindex
#: zsh.texi:8973
#, no-wrap
msgid "CDPATH"
msgstr ""

#. type: item
#: zsh.texi:8974
#, no-wrap
msgid "@t{cdpath} <S> <Z> (@t{CDPATH} <S>)"
msgstr ""

#. type: table
#: zsh.texi:8977
msgid ""
"An array (colon-separated list)  of directories specifying the search path "
"for the @t{cd} command."
msgstr ""

#. type: vindex
#: zsh.texi:8978
#, no-wrap
msgid "COLUMNS"
msgstr ""

#. type: item
#: zsh.texi:8979
#, no-wrap
msgid "@t{COLUMNS} <S>"
msgstr ""

#. type: table
#: zsh.texi:8982
msgid ""
"The number of columns for this terminal session.  Used for printing select "
"lists and for the line editor."
msgstr ""

#. type: t{#1}
#: zsh.texi:8983 zsh.texi:8984
#, no-wrap
msgid "CORRECT_IGNORE"
msgstr ""

#. type: table
#: zsh.texi:8993
msgid ""
"If set, is treated as a pattern during spelling correction.  Any potential "
"correction that matches the pattern is ignored.  For example, if the value "
"is `@t{_*}' then completion functions (which, by convention, have names "
"beginning with `@t{_}') will never be offered as spelling corrections.  The "
"pattern does not apply to the correction of file names, as applied by the "
"@t{CORRECT_ALL} option (so with the example just given files beginning with "
"`@t{_}' in the current directory would still be completed)."
msgstr ""

#. type: t{#1}
#: zsh.texi:8994 zsh.texi:8995
#, no-wrap
msgid "CORRECT_IGNORE_FILE"
msgstr ""

#. type: table
#: zsh.texi:9001
msgid ""
"If set, is treated as a pattern during spelling correction of file names.  "
"Any file name that matches the pattern is never offered as a correction.  "
"For example, if the value is `@t{.*}' then dot file names will never be "
"offered as spelling corrections.  This is useful with the @t{CORRECT_ALL} "
"option."
msgstr ""

#. type: t{#1}
#: zsh.texi:9002 zsh.texi:9003
#, no-wrap
msgid "DIRSTACKSIZE"
msgstr ""

#. type: table
#: zsh.texi:9007
msgid ""
"The maximum size of the directory stack, by default there is no limit.  If "
"the stack gets larger than this, it will be truncated automatically.  This "
"is useful with the @t{AUTO_PUSHD} option."
msgstr ""

#. type: pindex
#: zsh.texi:9007
#, no-wrap
msgid "AUTO_PUSHD, use of"
msgstr ""

#. type: t{#1}
#: zsh.texi:9009 zsh.texi:9010
#, no-wrap
msgid "ENV"
msgstr ""

#. type: table
#: zsh.texi:9017
msgid ""
"If the @t{ENV} environment variable is set when zsh is invoked as @t{sh} or "
"@t{ksh}, @t{$ENV} is sourced after the profile scripts.  The value of "
"@t{ENV} is subjected to parameter expansion, command substitution, and "
"arithmetic expansion before being interpreted as a pathname.  Note that "
"@t{ENV} is @emph{not} used unless the shell is interactive and zsh is "
"emulating @cite{sh} or @cite{ksh}."
msgstr ""

#. type: t{#1}
#: zsh.texi:9018 zsh.texi:9019
#, no-wrap
msgid "FCEDIT"
msgstr ""

#. type: table
#: zsh.texi:9023
msgid ""
"The default editor for the @t{fc} builtin.  If @t{FCEDIT} is not set, the "
"parameter @t{EDITOR} is used; if that is not set either, a builtin default, "
"usually @t{vi}, is used."
msgstr ""

#. type: vindex
#: zsh.texi:9024
#, no-wrap
msgid "fignore"
msgstr ""

#. type: vindex
#: zsh.texi:9025
#, no-wrap
msgid "FIGNORE"
msgstr ""

#. type: item
#: zsh.texi:9026
#, no-wrap
msgid "@t{fignore} <S> <Z> (@t{FIGNORE} <S>)"
msgstr ""

#. type: table
#: zsh.texi:9031
msgid ""
"An array (colon separated list)  containing the suffixes of files to be "
"ignored during filename completion.  However, if completion only generates "
"files with suffixes in this list, then these files are completed anyway."
msgstr ""

#. type: vindex
#: zsh.texi:9032
#, no-wrap
msgid "fpath"
msgstr ""

#. type: vindex
#: zsh.texi:9033
#, no-wrap
msgid "FPATH"
msgstr ""

#. type: item
#: zsh.texi:9034
#, no-wrap
msgid "@t{fpath} <S> <Z> (@t{FPATH} <S>)"
msgstr ""

#. type: table
#: zsh.texi:9040
msgid ""
"An array (colon separated list)  of directories specifying the search path "
"for function definitions.  This path is searched when a function with the "
"@t{-u} attribute is referenced.  If an executable file is found, then it is "
"read and executed in the current environment."
msgstr ""

#. type: vindex
#: zsh.texi:9041
#, no-wrap
msgid "histchars"
msgstr ""

#. type: item
#: zsh.texi:9042
#, no-wrap
msgid "@t{histchars} <S>"
msgstr ""

#. type: table
#: zsh.texi:9048
msgid ""
"Three characters used by the shell's history and lexical analysis "
"mechanism.  The first character signals the start of a history expansion "
"(default `@t{!}').  The second character signals the start of a quick "
"history substitution (default `@t{^}').  The third character is the comment "
"character (default `@t{#}')."
msgstr ""

#. type: table
#: zsh.texi:9053
msgid ""
"The characters must be in the ASCII character set; any attempt to set "
"@t{histchars} to characters with a locale-dependent meaning will be rejected "
"with an error message."
msgstr ""

#. type: vindex
#: zsh.texi:9054
#, no-wrap
msgid "HISTCHARS"
msgstr ""

#. type: item
#: zsh.texi:9055
#, no-wrap
msgid "@t{HISTCHARS} <S> <Z>"
msgstr ""

#. type: table
#: zsh.texi:9057
msgid "Same as @t{histchars}.  (Deprecated.)"
msgstr ""

#. type: t{#1}
#: zsh.texi:9058 zsh.texi:9059
#, no-wrap
msgid "HISTFILE"
msgstr ""

#. type: table
#: zsh.texi:9062
msgid ""
"The file to save the history in when an interactive shell exits.  If unset, "
"the history is not saved."
msgstr ""

#. type: t{#1}
#: zsh.texi:9063 zsh.texi:9064
#, no-wrap
msgid "HISTORY_IGNORE"
msgstr ""

#. type: table
#: zsh.texi:9069
msgid ""
"If set, is treated as a pattern at the time history files are written.  Any "
"potential history entry that matches the pattern is skipped.  For example, "
"if the value is `@t{fc *}' then commands that invoke the interactive history "
"editor are never written to the history file."
msgstr ""

#. type: table
#: zsh.texi:9074
msgid ""
"Note that @t{HISTORY_IGNORE} defines a single pattern: to specify "
"alternatives use the `@t{(}@var{first}@t{|}@var{second}@t{|}@var{...}@t{)}' "
"syntax."
msgstr ""

#. type: table
#: zsh.texi:9081
msgid ""
"Compare the @t{HIST_NO_STORE} option or the @t{zshaddhistory} hook, either "
"of which would prevent such commands from being added to the interactive "
"history at all.  If you wish to use @t{HISTORY_IGNORE} to stop history being "
"added in the first place, you can define the following hook:"
msgstr ""

#. type: example
#: zsh.texi:9091
#, no-wrap
msgid ""
"zshaddhistory() @{\n"
"  emulate -L zsh\n"
"  ## uncomment if HISTORY_IGNORE\n"
"  ## should use EXTENDED_GLOB syntax\n"
"  # setopt extendedglob\n"
"  [[ $1 != $@{~HISTORY_IGNORE@} ]]\n"
"@}\n"
msgstr ""

#. type: vindex
#: zsh.texi:9093
#, no-wrap
msgid "HISTSIZE"
msgstr ""

#. type: item
#: zsh.texi:9094
#, no-wrap
msgid "@t{HISTSIZE} <S>"
msgstr ""

#. type: table
#: zsh.texi:9099
msgid ""
"The maximum number of events stored in the internal history list.  If you "
"use the @t{HIST_EXPIRE_DUPS_FIRST} option, setting this value larger than "
"the @t{SAVEHIST} size will give you the difference as a cushion for saving "
"duplicated history events."
msgstr ""

#. type: vindex
#: zsh.texi:9104
#, no-wrap
msgid "HOME"
msgstr ""

#. type: item
#: zsh.texi:9105
#, no-wrap
msgid "@t{HOME} <S>"
msgstr ""

#. type: table
#: zsh.texi:9110
msgid ""
"The default argument for the @t{cd} command.  This is not set automatically "
"by the shell in @t{sh}, @t{ksh} or @t{csh} emulation, but it is typically "
"present in the environment anyway, and if it becomes set it has its usual "
"special behaviour."
msgstr ""

#. type: vindex
#: zsh.texi:9111
#, no-wrap
msgid "IFS"
msgstr ""

#. type: item
#: zsh.texi:9112
#, no-wrap
msgid "@t{IFS} <S>"
msgstr ""

#. type: table
#: zsh.texi:9123
msgid ""
"Internal field separators (by default space, tab, newline and NUL), that are "
"used to separate words which result from command or parameter expansion and "
"words read by the @t{read} builtin.  Any characters from the set space, tab "
"and newline that appear in the IFS are called @emph{IFS white space}.  One "
"or more IFS white space characters or one non-IFS white space character "
"together with any adjacent IFS white space character delimit a field.  If an "
"IFS white space character appears twice consecutively in the IFS, this "
"character is treated as if it were not an IFS white space character."
msgstr ""

#. type: table
#: zsh.texi:9127
msgid ""
"If the parameter is unset, the default is used.  Note this has a different "
"effect from setting the parameter to an empty string."
msgstr ""

#. type: t{#1}
#: zsh.texi:9128 zsh.texi:9129
#, no-wrap
msgid "KEYBOARD_HACK"
msgstr ""

#. type: table
#: zsh.texi:9137
msgid ""
"This variable defines a character to be removed from the end of the command "
"line before interpreting it (interactive shells only). It is intended to fix "
"the problem with keys placed annoyingly close to return and replaces the "
"@t{SUNKEYBOARDHACK} option which did this for backquotes only.  Should the "
"chosen character be one of singlequote, doublequote or backquote, there must "
"also be an odd number of them on the command line for the last one to be "
"removed."
msgstr ""

#. type: table
#: zsh.texi:9142
msgid ""
"For backward compatibility, if the @t{SUNKEYBOARDHACK} option is explicitly "
"set, the value of @t{KEYBOARD_HACK} reverts to backquote.  If the option is "
"explicitly unset, this variable is set to empty."
msgstr ""

#. type: t{#1}
#: zsh.texi:9143 zsh.texi:9144
#, no-wrap
msgid "KEYTIMEOUT"
msgstr ""

#. type: table
#: zsh.texi:9147
msgid ""
"The time the shell waits, in hundredths of seconds, for another key to be "
"pressed when reading bound multi-character sequences."
msgstr ""

#. type: vindex
#: zsh.texi:9148
#, no-wrap
msgid "LANG"
msgstr ""

#. type: item
#: zsh.texi:9149
#, no-wrap
msgid "@t{LANG} <S>"
msgstr ""

#. type: table
#: zsh.texi:9152
msgid ""
"This variable determines the locale category for any category not "
"specifically selected via a variable starting with `@t{LC_}'."
msgstr ""

#. type: vindex
#: zsh.texi:9153
#, no-wrap
msgid "LC_ALL"
msgstr ""

#. type: item
#: zsh.texi:9154
#, no-wrap
msgid "@t{LC_ALL} <S>"
msgstr ""

#. type: table
#: zsh.texi:9157
msgid ""
"This variable overrides the value of the `@t{LANG}' variable and the value "
"of any of the other variables starting with `@t{LC_}'."
msgstr ""

#. type: vindex
#: zsh.texi:9158
#, no-wrap
msgid "LC_COLLATE"
msgstr ""

#. type: item
#: zsh.texi:9159
#, no-wrap
msgid "@t{LC_COLLATE} <S>"
msgstr ""

#. type: table
#: zsh.texi:9162
msgid ""
"This variable determines the locale category for character collation "
"information within ranges in glob brackets and for sorting."
msgstr ""

#. type: vindex
#: zsh.texi:9163
#, no-wrap
msgid "LC_CTYPE"
msgstr ""

#. type: item
#: zsh.texi:9164
#, no-wrap
msgid "@t{LC_CTYPE} <S>"
msgstr ""

#. type: table
#: zsh.texi:9172
msgid ""
"This variable determines the locale category for character handling "
"functions.  If the @t{MULTIBYTE} option is in effect this variable or "
"@t{LANG} should contain a value that reflects the character set in use, even "
"if it is a single-byte character set, unless only the 7-bit subset (ASCII) "
"is used.  For example, if the character set is ISO-8859-1, a suitable value "
"might be @t{en_US.iso88591} (certain Linux distributions) or "
"@t{en_US.ISO8859-1} (MacOS)."
msgstr ""

#. type: vindex
#: zsh.texi:9173
#, no-wrap
msgid "LC_MESSAGES"
msgstr ""

#. type: item
#: zsh.texi:9174
#, no-wrap
msgid "@t{LC_MESSAGES} <S>"
msgstr ""

#. type: table
#: zsh.texi:9177
msgid ""
"This variable determines the language in which messages should be written.  "
"Note that zsh does not use message catalogs."
msgstr ""

#. type: vindex
#: zsh.texi:9178
#, no-wrap
msgid "LC_NUMERIC"
msgstr ""

#. type: item
#: zsh.texi:9179
#, no-wrap
msgid "@t{LC_NUMERIC} <S>"
msgstr ""

#. type: table
#: zsh.texi:9184
msgid ""
"This variable affects the decimal point character and thousands separator "
"character for the formatted input/output functions and string conversion "
"functions.  Note that zsh ignores this setting when parsing floating point "
"mathematical expressions."
msgstr ""

#. type: vindex
#: zsh.texi:9185
#, no-wrap
msgid "LC_TIME"
msgstr ""

#. type: item
#: zsh.texi:9186
#, no-wrap
msgid "@t{LC_TIME} <S>"
msgstr ""

#. type: table
#: zsh.texi:9189
msgid ""
"This variable determines the locale category for date and time formatting in "
"prompt escape sequences."
msgstr ""

#. type: vindex
#: zsh.texi:9190
#, no-wrap
msgid "LINES"
msgstr ""

#. type: item
#: zsh.texi:9191
#, no-wrap
msgid "@t{LINES} <S>"
msgstr ""

#. type: table
#: zsh.texi:9194
msgid ""
"The number of lines for this terminal session.  Used for printing select "
"lists and for the line editor."
msgstr ""

#. type: t{#1}
#: zsh.texi:9195 zsh.texi:9196
#, no-wrap
msgid "LISTMAX"
msgstr ""

#. type: table
#: zsh.texi:9202
msgid ""
"In the line editor, the number of matches to list without asking first. If "
"the value is negative, the list will be shown if it spans at most as many "
"lines as given by the absolute value.  If set to zero, the shell asks only "
"if the top of the listing would scroll off the screen."
msgstr ""

#. type: t{#1}
#: zsh.texi:9203 zsh.texi:9204
#, no-wrap
msgid "MAIL"
msgstr ""

#. type: table
#: zsh.texi:9207
msgid ""
"If this parameter is set and @t{mailpath} is not set, the shell looks for "
"mail in the specified file."
msgstr ""

#. type: t{#1}
#: zsh.texi:9208 zsh.texi:9209
#, no-wrap
msgid "MAILCHECK"
msgstr ""

#. type: table
#: zsh.texi:9211
msgid "The interval in seconds between checks for new mail."
msgstr ""

#. type: vindex
#: zsh.texi:9212
#, no-wrap
msgid "mailpath"
msgstr ""

#. type: vindex
#: zsh.texi:9213
#, no-wrap
msgid "MAILPATH"
msgstr ""

#. type: item
#: zsh.texi:9214
#, no-wrap
msgid "@t{mailpath} <S> <Z> (@t{MAILPATH} <S>)"
msgstr ""

#. type: table
#: zsh.texi:9224
msgid ""
"An array (colon-separated list) of filenames to check for new mail.  Each "
"filename can be followed by a `@t{?}' and a message that will be printed.  "
"The message will undergo parameter expansion, command substitution and "
"arithmetic expansion with the variable @t{$_} defined as the name of the "
"file that has changed.  The default message is `@t{You have new mail}'.  If "
"an element is a directory instead of a file the shell will recursively check "
"every file in every subdirectory of the element."
msgstr ""

#. type: vindex
#: zsh.texi:9225
#, no-wrap
msgid "manpath"
msgstr ""

#. type: vindex
#: zsh.texi:9226
#, no-wrap
msgid "MANPATH"
msgstr ""

#. type: item
#: zsh.texi:9227
#, no-wrap
msgid "@t{manpath} <S> <Z> (@t{MANPATH} <S> <Z>)"
msgstr ""

#. type: table
#: zsh.texi:9232
msgid ""
"An array (colon-separated list)  whose value is not used by the shell.  The "
"@t{manpath} array can be useful, however, since setting it also sets "
"@t{MANPATH}, and vice versa."
msgstr ""

#. type: table
#: zsh.texi:9239
msgid ""
"Arrays set by the shell when the @t{b} globbing flag is used in pattern "
"matches.  See the subsection @emph{Globbing flags} in @ref{Filename "
"Generation}."
msgstr ""

#. type: table
#: zsh.texi:9246
msgid ""
"Set by the shell when the @t{m} globbing flag is used in pattern matches.  "
"See the subsection @emph{Globbing flags} in @ref{Filename Generation}."
msgstr ""

#. type: vindex
#: zsh.texi:9247
#, no-wrap
msgid "module_path"
msgstr ""

#. type: vindex
#: zsh.texi:9248
#, no-wrap
msgid "MODULE_PATH"
msgstr ""

#. type: item
#: zsh.texi:9249
#, no-wrap
msgid "@t{module_path} <S> <Z> (@t{MODULE_PATH} <S>)"
msgstr ""

#. type: table
#: zsh.texi:9258
msgid ""
"An array (colon-separated list)  of directories that @t{zmodload} searches "
"for dynamically loadable modules.  This is initialized to a standard "
"pathname, usually `@t{/usr/local/lib/zsh/$ZSH_VERSION}'.  (The "
"`@t{/usr/local/lib}' part varies from installation to installation.)  For "
"security reasons, any value set in the environment when the shell is started "
"will be ignored."
msgstr ""

#. type: table
#: zsh.texi:9262
msgid ""
"These parameters only exist if the installation supports dynamic module "
"loading."
msgstr ""

#. type: vindex
#: zsh.texi:9263
#, no-wrap
msgid "NULLCMD"
msgstr ""

#. type: cindex
#: zsh.texi:9264
#, no-wrap
msgid "null command style"
msgstr ""

#. type: cindex
#: zsh.texi:9265
#, no-wrap
msgid "csh, null command style"
msgstr ""

#. type: cindex
#: zsh.texi:9266
#, no-wrap
msgid "ksh, null command style"
msgstr ""

#. type: item
#: zsh.texi:9267
#, no-wrap
msgid "@t{NULLCMD} <S>"
msgstr ""

#. type: table
#: zsh.texi:9273
msgid ""
"The command name to assume if a redirection is specified with no command.  "
"Defaults to @t{cat}.  For @cite{sh}/@cite{ksh} behavior, change this to "
"@t{:}.  For @cite{csh}-like behavior, unset this parameter; the shell will "
"print an error message if null commands are entered."
msgstr ""

#. type: t{#1}
#: zsh.texi:9274 zsh.texi:23208
#, no-wrap
msgid "path"
msgstr ""

#. type: vindex
#: zsh.texi:9275
#, no-wrap
msgid "PATH"
msgstr ""

#. type: item
#: zsh.texi:9276
#, no-wrap
msgid "@t{path} <S> <Z> (@t{PATH} <S>)"
msgstr ""

#. type: table
#: zsh.texi:9281
msgid ""
"An array (colon-separated list)  of directories to search for commands.  "
"When this parameter is set, each directory is scanned and all files found "
"are put in a hash table."
msgstr ""

#. type: vindex
#: zsh.texi:9282
#, no-wrap
msgid "POSTEDIT"
msgstr ""

#. type: item
#: zsh.texi:9283
#, no-wrap
msgid "@t{POSTEDIT} <S>"
msgstr ""

#. type: table
#: zsh.texi:9286
msgid ""
"This string is output whenever the line editor exits.  It usually contains "
"termcap strings to reset the terminal."
msgstr ""

#. type: vindex
#: zsh.texi:9287
#, no-wrap
msgid "PROMPT"
msgstr ""

#. type: item
#: zsh.texi:9288
#, no-wrap
msgid "@t{PROMPT} <S> <Z>"
msgstr ""

#. type: vindex
#: zsh.texi:9289
#, no-wrap
msgid "PROMPT2"
msgstr ""

#. type: itemx
#: zsh.texi:9290
#, no-wrap
msgid "@t{PROMPT2} <S> <Z>"
msgstr ""

#. type: vindex
#: zsh.texi:9291
#, no-wrap
msgid "PROMPT3"
msgstr ""

#. type: itemx
#: zsh.texi:9292
#, no-wrap
msgid "@t{PROMPT3} <S> <Z>"
msgstr ""

#. type: vindex
#: zsh.texi:9293
#, no-wrap
msgid "PROMPT4"
msgstr ""

#. type: itemx
#: zsh.texi:9294
#, no-wrap
msgid "@t{PROMPT4} <S> <Z>"
msgstr ""

#. type: table
#: zsh.texi:9297
msgid "Same as @t{PS1}, @t{PS2}, @t{PS3} and @t{PS4}, respectively."
msgstr ""

#. type: t{#1}
#: zsh.texi:9298 zsh.texi:39726 zsh.texi:41255
#, no-wrap
msgid "prompt"
msgstr ""

#. type: item
#: zsh.texi:9299
#, no-wrap
msgid "@t{prompt} <S> <Z>"
msgstr ""

#. type: table
#: zsh.texi:9301
msgid "Same as @t{PS1}."
msgstr ""

#. type: t{#1}
#: zsh.texi:9302 zsh.texi:9303
#, no-wrap
msgid "PROMPT_EOL_MARK"
msgstr ""

#. type: table
#: zsh.texi:9309
msgid ""
"When the @t{PROMPT_CR} and @t{PROMPT_SP} options are set, the "
"@t{PROMPT_EOL_MARK} parameter can be used to customize how the end of "
"partial lines are shown.  This parameter undergoes prompt expansion, with "
"the @t{PROMPT_PERCENT} option set.  If not set, the default behavior is "
"equivalent to the value `@t{%B%S%#%s%b}'."
msgstr ""

#. type: vindex
#: zsh.texi:9310
#, no-wrap
msgid "PS1"
msgstr ""

#. type: item
#: zsh.texi:9311
#, no-wrap
msgid "@t{PS1} <S>"
msgstr ""

#. type: table
#: zsh.texi:9316
msgid ""
"The primary prompt string, printed before a command is read.  It undergoes a "
"special form of expansion before being displayed; see @ref{Prompt "
"Expansion}.  The default is `@t{%m%# }'."
msgstr ""

#. type: vindex
#: zsh.texi:9317
#, no-wrap
msgid "PS2"
msgstr ""

#. type: item
#: zsh.texi:9318
#, no-wrap
msgid "@t{PS2} <S>"
msgstr ""

#. type: table
#: zsh.texi:9324
msgid ""
"The secondary prompt, printed when the shell needs more information to "
"complete a command.  It is expanded in the same way as @t{PS1}.  The default "
"is `@t{%_> }', which displays any shell constructs or quotation marks which "
"are currently being processed."
msgstr ""

#. type: vindex
#: zsh.texi:9325
#, no-wrap
msgid "PS3"
msgstr ""

#. type: item
#: zsh.texi:9326
#, no-wrap
msgid "@t{PS3} <S>"
msgstr ""

#. type: table
#: zsh.texi:9330
msgid ""
"Selection prompt used within a @t{select} loop.  It is expanded in the same "
"way as @t{PS1}.  The default is `@t{?# }'."
msgstr ""

#. type: vindex
#: zsh.texi:9331
#, no-wrap
msgid "PS4"
msgstr ""

#. type: item
#: zsh.texi:9332
#, no-wrap
msgid "@t{PS4} <S>"
msgstr ""

#. type: table
#: zsh.texi:9336
msgid ""
"The execution trace prompt.  Default is `@t{+%N:%i> }', which displays the "
"name of the current shell structure and the line number within it.  In sh or "
"ksh emulation, the default is `@t{+ }'."
msgstr ""

#. type: vindex
#: zsh.texi:9337
#, no-wrap
msgid "psvar"
msgstr ""

#. type: vindex
#: zsh.texi:9338
#, no-wrap
msgid "PSVAR"
msgstr ""

#. type: item
#: zsh.texi:9339
#, no-wrap
msgid "@t{psvar} <S> <Z> (@t{PSVAR} <S>)"
msgstr ""

#. type: table
#: zsh.texi:9343
msgid ""
"An array (colon-separated list) whose elements can be used in @t{PROMPT} "
"strings.  Setting @t{psvar} also sets @t{PSVAR}, and vice versa."
msgstr ""

#. type: vindex
#: zsh.texi:9344
#, no-wrap
msgid "READNULLCMD"
msgstr ""

#. type: item
#: zsh.texi:9345
#, no-wrap
msgid "@t{READNULLCMD} <S>"
msgstr ""

#. type: table
#: zsh.texi:9348
msgid ""
"The command name to assume if a single input redirection is specified with "
"no command.  Defaults to @t{more}."
msgstr ""

#. type: t{#1}
#: zsh.texi:9349 zsh.texi:9350
#, no-wrap
msgid "REPORTMEMORY"
msgstr ""

#. type: table
#: zsh.texi:9362
msgid ""
"If nonnegative, commands whose maximum resident set size (roughly speaking, "
"main memory usage) in kilobytes is greater than this value have timing "
"statistics reported.  The format used to output statistics is the value of "
"the @t{TIMEFMT} parameter, which is the same as for the @t{REPORTTIME} "
"variable and the @t{time} builtin; note that by default this does not output "
"memory usage.  Appending @t{\" max RSS %M\"} to the value of @t{TIMEFMT} "
"causes it to output the value that triggered the report.  If @t{REPORTTIME} "
"is also in use, at most a single report is printed for both triggers.  This "
"feature requires the @t{getrusage()} system call, commonly supported by "
"modern Unix-like systems."
msgstr ""

#. type: t{#1}
#: zsh.texi:9363 zsh.texi:9364
#, no-wrap
msgid "REPORTTIME"
msgstr ""

#. type: table
#: zsh.texi:9371
msgid ""
"If nonnegative, commands whose combined user and system execution times "
"(measured in seconds) are greater than this value have timing statistics "
"printed for them.  Output is suppressed for commands executed within the "
"line editor, including completion; commands explicitly marked with the "
"@t{time} keyword still cause the summary to be printed in this case."
msgstr ""

#. type: t{#1}
#: zsh.texi:9372 zsh.texi:9373
#, no-wrap
msgid "REPLY"
msgstr ""

#. type: table
#: zsh.texi:9380
msgid ""
"This parameter is reserved by convention to pass string values between shell "
"scripts and shell builtins in situations where a function call or "
"redirection are impossible or undesirable.  The @t{read} builtin and the "
"@t{select} complex command may set @t{REPLY}, and filename generation both "
"sets and examines its value when evaluating certain expressions.  Some "
"modules also employ @t{REPLY} for similar purposes."
msgstr ""

#. type: t{#1}
#: zsh.texi:9381 zsh.texi:9382
#, no-wrap
msgid "reply"
msgstr ""

#. type: table
#: zsh.texi:9384
msgid "As @t{REPLY}, but for array values rather than strings."
msgstr ""

#. type: vindex
#: zsh.texi:9385
#, no-wrap
msgid "RPROMPT"
msgstr ""

#. type: item
#: zsh.texi:9386
#, no-wrap
msgid "@t{RPROMPT} <S>"
msgstr ""

#. type: vindex
#: zsh.texi:9387
#, no-wrap
msgid "RPS1"
msgstr ""

#. type: itemx
#: zsh.texi:9388
#, no-wrap
msgid "@t{RPS1} <S>"
msgstr ""

#. type: table
#: zsh.texi:9393
msgid ""
"This prompt is displayed on the right-hand side of the screen when the "
"primary prompt is being displayed on the left.  This does not work if the "
"@t{SINGLE_LINE_ZLE} option is set.  It is expanded in the same way as "
"@t{PS1}."
msgstr ""

#. type: vindex
#: zsh.texi:9394
#, no-wrap
msgid "RPROMPT2"
msgstr ""

#. type: item
#: zsh.texi:9395
#, no-wrap
msgid "@t{RPROMPT2} <S>"
msgstr ""

#. type: vindex
#: zsh.texi:9396
#, no-wrap
msgid "RPS2"
msgstr ""

#. type: itemx
#: zsh.texi:9397
#, no-wrap
msgid "@t{RPS2} <S>"
msgstr ""

#. type: table
#: zsh.texi:9402
msgid ""
"This prompt is displayed on the right-hand side of the screen when the "
"secondary prompt is being displayed on the left.  This does not work if the "
"@t{SINGLE_LINE_ZLE} option is set.  It is expanded in the same way as "
"@t{PS2}."
msgstr ""

#. type: t{#1}
#: zsh.texi:9403 zsh.texi:9404
#, no-wrap
msgid "SAVEHIST"
msgstr ""

#. type: table
#: zsh.texi:9406
msgid "The maximum number of history events to save in the history file."
msgstr ""

#. type: vindex
#: zsh.texi:9411
#, no-wrap
msgid "SPROMPT"
msgstr ""

#. type: item
#: zsh.texi:9412
#, no-wrap
msgid "@t{SPROMPT} <S>"
msgstr ""

#. type: table
#: zsh.texi:9417
msgid ""
"The prompt used for spelling correction.  The sequence `@t{%R}' expands to "
"the string which presumably needs spelling correction, and `@t{%r}' expands "
"to the proposed correction.  All other prompt escapes are also allowed."
msgstr ""

#. type: table
#: zsh.texi:9420
msgid "The actions available at the prompt are @t{[nyae]}:"
msgstr ""

#. type: item
#: zsh.texi:9421
#, no-wrap
msgid "@t{n} (`no') (default)"
msgstr ""

#. type: table
#: zsh.texi:9423
msgid "Discard the correction and run the command."
msgstr ""

#. type: item
#: zsh.texi:9423
#, no-wrap
msgid "@t{y} (`yes')"
msgstr ""

#. type: table
#: zsh.texi:9425
msgid "Make the correction and run the command."
msgstr ""

#. type: item
#: zsh.texi:9425
#, no-wrap
msgid "@t{a} (`abort')"
msgstr ""

#. type: table
#: zsh.texi:9427
msgid "Discard the entire command line without running it."
msgstr ""

#. type: item
#: zsh.texi:9427
#, no-wrap
msgid "@t{e} (`edit')"
msgstr ""

#. type: table
#: zsh.texi:9429
msgid "Resume editing the command line."
msgstr ""

#. type: t{#1}
#: zsh.texi:9431 zsh.texi:9432
#, no-wrap
msgid "STTY"
msgstr ""

#. type: table
#: zsh.texi:9445
msgid ""
"If this parameter is set in a command's environment, the shell runs the "
"@t{stty} command with the value of this parameter as arguments in order to "
"set up the terminal before executing the command. The modes apply only to "
"the command, and are reset when it finishes or is suspended. If the command "
"is suspended and continued later with the @t{fg} or @t{wait} builtins it "
"will see the modes specified by @t{STTY}, as if it were not suspended.  This "
"(intentionally) does not apply if the command is continued via `@t{kill "
"-CONT}'.  @t{STTY} is ignored if the command is run in the background, or if "
"it is in the environment of the shell but not explicitly assigned to in the "
"input line. This avoids running stty at every external command by "
"accidentally exporting it. Also note that @t{STTY} should not be used for "
"window size specifications; these will not be local to the command."
msgstr ""

#. type: table
#: zsh.texi:9451
msgid ""
"If the parameter is set and empty, all of the above applies except that "
"@t{stty} is not run. This can be useful as a way to freeze the tty around a "
"single command, blocking its changes to tty settings, similar to the "
"@t{ttyctl} builtin."
msgstr ""

#. type: vindex
#: zsh.texi:9452
#, no-wrap
msgid "TERM"
msgstr ""

#. type: item
#: zsh.texi:9453
#, no-wrap
msgid "@t{TERM} <S>"
msgstr ""

#. type: table
#: zsh.texi:9460
msgid ""
"The type of terminal in use.  This is used when looking up termcap "
"sequences.  An assignment to @t{TERM} causes zsh to re-initialize the "
"terminal, even if the value does not change (e.g., `@t{TERM=$TERM}').  It is "
"necessary to make such an assignment upon any change to the terminal "
"definition database or terminal type in order for the new settings to take "
"effect."
msgstr ""

#. type: vindex
#: zsh.texi:9461
#, no-wrap
msgid "TERMINFO"
msgstr ""

#. type: item
#: zsh.texi:9462
#, no-wrap
msgid "@t{TERMINFO} <S>"
msgstr ""

#. type: table
#: zsh.texi:9467
msgid ""
"A reference to your terminfo database, used by the `terminfo' library when "
"the system has it; see terminfo(5).  If set, this causes the shell to "
"reinitialise the terminal, making the workaround `@t{TERM=$TERM}' "
"unnecessary."
msgstr ""

#. type: vindex
#: zsh.texi:9468
#, no-wrap
msgid "TERMINFO_DIRS"
msgstr ""

#. type: item
#: zsh.texi:9469
#, no-wrap
msgid "@t{TERMINFO_DIRS} <S>"
msgstr ""

#. type: table
#: zsh.texi:9477
msgid ""
"A colon-seprarated list of terminfo databases, used by the `terminfo' "
"library when the system has it; see terminfo(5). This variable is only used "
"by certain terminal libraries, in particular ncurses; see terminfo(5) to "
"check support on your system.  If set, this causes the shell to reinitialise "
"the terminal, making the workaround `@t{TERM=$TERM}' unnecessary.  Note that "
"unlike other colon-separated arrays this is not tied to a zsh array."
msgstr ""

#. type: t{#1}
#: zsh.texi:9478 zsh.texi:9479
#, no-wrap
msgid "TIMEFMT"
msgstr ""

#. type: table
#: zsh.texi:9485
msgid ""
"The format of process time reports with the @t{time} keyword.  The default "
"is `@t{%J %U user %S system %P cpu %*E total}'.  Recognizes the following "
"escape sequences, although not all may be available on all systems, and some "
"that are available may not be useful:"
msgstr ""

#. type: t{#1}
#: zsh.texi:9490
#, no-wrap
msgid "%U"
msgstr ""

#. type: table
#: zsh.texi:9492
msgid "CPU seconds spent in user mode."
msgstr ""

#. type: t{#1}
#: zsh.texi:9492 zsh.texi:37081
#, no-wrap
msgid "%S"
msgstr ""

#. type: table
#: zsh.texi:9494
msgid "CPU seconds spent in kernel mode."
msgstr ""

#. type: table
#: zsh.texi:9496
msgid "Elapsed time in seconds."
msgstr ""

#. type: t{#1}
#: zsh.texi:9496
#, no-wrap
msgid "%P"
msgstr ""

#. type: table
#: zsh.texi:9499
msgid "The CPU percentage, computed as 100*(@t{%U}+@t{%S})/@t{%E}."
msgstr ""

#. type: table
#: zsh.texi:9501
msgid "Number of times the process was swapped."
msgstr ""

#. type: t{#1}
#: zsh.texi:9501
#, no-wrap
msgid "%X"
msgstr ""

#. type: table
#: zsh.texi:9503
msgid "The average amount in (shared) text space used in kilobytes."
msgstr ""

#. type: table
#: zsh.texi:9506
msgid "The average amount in (unshared) data/stack space used in kilobytes."
msgstr ""

#. type: table
#: zsh.texi:9508
msgid "The total space used (@t{%X}+@t{%D}) in kilobytes."
msgstr ""

#. type: table
#: zsh.texi:9511
msgid "The maximum memory the process had in use at any time in kilobytes."
msgstr ""

#. type: t{#1}
#: zsh.texi:9511
#, no-wrap
msgid "%F"
msgstr ""

#. type: table
#: zsh.texi:9514
msgid "The number of major page faults (page needed to be brought from disk)."
msgstr ""

#. type: t{#1}
#: zsh.texi:9514 zsh.texi:37076
#, no-wrap
msgid "%R"
msgstr ""

#. type: table
#: zsh.texi:9516
msgid "The number of minor page faults."
msgstr ""

#. type: table
#: zsh.texi:9518
msgid "The number of input operations."
msgstr ""

#. type: t{#1}
#: zsh.texi:9518
#, no-wrap
msgid "%O"
msgstr ""

#. type: table
#: zsh.texi:9520
msgid "The number of output operations."
msgstr ""

#. type: t{#1}
#: zsh.texi:9520 zsh.texi:37078 zsh.texi:37128 zsh.texi:37138
#, no-wrap
msgid "%r"
msgstr ""

#. type: table
#: zsh.texi:9522
msgid "The number of socket messages received."
msgstr ""

#. type: t{#1}
#: zsh.texi:9522 zsh.texi:34383 zsh.texi:37060 zsh.texi:39747
#, no-wrap
msgid "%s"
msgstr ""

#. type: table
#: zsh.texi:9524
msgid "The number of socket messages sent."
msgstr ""

#. type: t{#1}
#: zsh.texi:9524
#, no-wrap
msgid "%k"
msgstr ""

#. type: table
#: zsh.texi:9526
msgid "The number of signals received."
msgstr ""

#. type: table
#: zsh.texi:9528
msgid "Number of voluntary context switches (waits)."
msgstr ""

#. type: table
#: zsh.texi:9530
msgid "Number of involuntary context switches."
msgstr ""

#. type: t{#1}
#: zsh.texi:9530
#, no-wrap
msgid "%J"
msgstr ""

#. type: table
#: zsh.texi:9532
msgid "The name of this job."
msgstr ""

#. type: table
#: zsh.texi:9541
msgid ""
"A star may be inserted between the percent sign and flags printing time "
"(e.g., `@t{%*E}'); this causes the time to be printed in "
"`@var{hh}@t{:}@var{mm}@t{:}@var{ss}@t{.}@var{ttt}' format (hours and minutes "
"are only printed if they are not zero).  Alternatively, `@t{m}' or `@t{u}' "
"may be used (e.g., `@t{%mE}') to produce time output in milliseconds or "
"microseconds, respectively."
msgstr ""

#. type: t{#1}
#: zsh.texi:9542 zsh.texi:9543
#, no-wrap
msgid "TMOUT"
msgstr ""

#. type: table
#: zsh.texi:9552
msgid ""
"If this parameter is nonzero, the shell will receive an @t{ALRM} signal if a "
"command is not entered within the specified number of seconds after issuing "
"a prompt. If there is a trap on @t{SIGALRM}, it will be executed and a new "
"alarm is scheduled using the value of the @t{TMOUT} parameter after "
"executing the trap.  If no trap is set, and the idle time of the terminal is "
"not less than the value of the @t{TMOUT} parameter, zsh terminates.  "
"Otherwise a new alarm is scheduled to @t{TMOUT} seconds after the last "
"keypress."
msgstr ""

#. type: t{#1}
#: zsh.texi:9553 zsh.texi:9554
#, no-wrap
msgid "TMPPREFIX"
msgstr ""

#. type: table
#: zsh.texi:9558
msgid ""
"A pathname prefix which the shell will use for all temporary files.  Note "
"that this should include an initial part for the file name as well as any "
"directory names.  The default is `@t{/tmp/zsh}'."
msgstr ""

#. type: t{#1}
#: zsh.texi:9559 zsh.texi:9560
#, no-wrap
msgid "TMPSUFFIX"
msgstr ""

#. type: table
#: zsh.texi:9567
msgid ""
"A filename suffix which the shell will use for temporary files created by "
"process substitutions (e.g., `@t{=(@var{list})}').  Note that the value "
"should include a leading dot `@t{.}' if intended to be interpreted as a file "
"extension.  The default is not to append any suffix, thus this parameter "
"should be assigned only when needed and then unset again."
msgstr ""

#. type: vindex
#: zsh.texi:9568
#, no-wrap
msgid "WORDCHARS"
msgstr ""

#. type: item
#: zsh.texi:9569
#, no-wrap
msgid "@t{WORDCHARS} <S>"
msgstr ""

#. type: table
#: zsh.texi:9572
msgid ""
"A list of non-alphanumeric characters considered part of a word by the line "
"editor."
msgstr ""

#. type: t{#1}
#: zsh.texi:9573 zsh.texi:9574
#, no-wrap
msgid "ZBEEP"
msgstr ""

#. type: table
#: zsh.texi:9583
msgid ""
"If set, this gives a string of characters, which can use all the same codes "
"as the @t{bindkey} command as described in @ref{The zsh/zle Module}, that "
"will be output to the terminal instead of beeping.  This may have a visible "
"instead of an audible effect; for example, the string `@t{\\e[?5h\\e[?5l}' "
"on a vt100 or xterm will have the effect of flashing reverse video on and "
"off (if you usually use reverse video, you should use the string "
"`@t{\\e[?5l\\e[?5h}' instead).  This takes precedence over the @t{NOBEEP} "
"option."
msgstr ""

#. type: t{#1}
#: zsh.texi:9584 zsh.texi:9585
#, no-wrap
msgid "ZDOTDIR"
msgstr ""

#. type: table
#: zsh.texi:9588
msgid ""
"The directory to search for shell startup files (.zshrc, etc), if not "
"@t{$HOME}."
msgstr ""

#. type: t{#1}
#: zsh.texi:9589 zsh.texi:9592
#, no-wrap
msgid "zle_bracketed_paste"
msgstr ""

#. type: cindex
#: zsh.texi:9590
#, no-wrap
msgid "bracketed paste"
msgstr ""

#. type: cindex
#: zsh.texi:9591
#, no-wrap
msgid "enabling bracketed paste"
msgstr ""

#. type: table
#: zsh.texi:9599
msgid ""
"Many terminal emulators have a feature that allows applications to identify "
"when text is pasted into the terminal rather than being typed normally. For "
"ZLE, this means that special characters such as tabs and newlines can be "
"inserted instead of invoking editor commands.  Furthermore, pasted text "
"forms a single undo event and if the region is active, pasted text will "
"replace the region."
msgstr ""

#. type: table
#: zsh.texi:9606
msgid ""
"This two-element array contains the terminal escape sequences for enabling "
"and disabling the feature. These escape sequences are used to enable "
"bracketed paste when ZLE is active and disable it at other times.  Unsetting "
"the parameter has the effect of ensuring that bracketed paste remains "
"disabled."
msgstr ""

#. type: t{#1}
#: zsh.texi:9607 zsh.texi:9608
#, no-wrap
msgid "zle_highlight"
msgstr ""

#. type: table
#: zsh.texi:9611
msgid ""
"An array describing contexts in which ZLE should highlight the input text.  "
"See @ref{Character Highlighting}."
msgstr ""

#. type: t{#1}
#: zsh.texi:9612 zsh.texi:9613
#, no-wrap
msgid "ZLE_LINE_ABORTED"
msgstr ""

#. type: table
#: zsh.texi:9618
msgid ""
"This parameter is set by the line editor when an error occurs.  It contains "
"the line that was being edited at the point of the error.  `@t{print -zr -- "
"$ZLE_LINE_ABORTED}' can be used to recover the line.  Only the most recent "
"line of this kind is remembered."
msgstr ""

#. type: t{#1}
#: zsh.texi:9619 zsh.texi:9621
#, no-wrap
msgid "ZLE_REMOVE_SUFFIX_CHARS"
msgstr ""

#. type: t{#1}
#: zsh.texi:9620 zsh.texi:9622
#, no-wrap
msgid "ZLE_SPACE_SUFFIX_CHARS"
msgstr ""

#. type: table
#: zsh.texi:9628
msgid ""
"These parameters are used by the line editor.  In certain circumstances "
"suffixes (typically space or slash) added by the completion system will be "
"removed automatically, either because the next editing command was not an "
"insertable character, or because the character was marked as requiring the "
"suffix to be removed."
msgstr ""

#. type: table
#: zsh.texi:9635
msgid ""
"These variables can contain the sets of characters that will cause the "
"suffix to be removed.  If @t{ZLE_REMOVE_SUFFIX_CHARS} is set, those "
"characters will cause the suffix to be removed; if "
"@t{ZLE_SPACE_SUFFIX_CHARS} is set, those characters will cause the suffix to "
"be removed and replaced by a space."
msgstr ""

#. type: table
#: zsh.texi:9639
msgid ""
"If @t{ZLE_REMOVE_SUFFIX_CHARS} is not set, the default behaviour is "
"equivalent to:"
msgstr ""

#. type: example
#: zsh.texi:9643
#, no-wrap
msgid "ZLE_REMOVE_SUFFIX_CHARS=$' \\t\\n;&|'\n"
msgstr ""

#. type: table
#: zsh.texi:9649
msgid ""
"If @t{ZLE_REMOVE_SUFFIX_CHARS} is set but is empty, no characters have this "
"behaviour.  @t{ZLE_SPACE_SUFFIX_CHARS} takes precedence, so that the "
"following:"
msgstr ""

#. type: example
#: zsh.texi:9653
#, no-wrap
msgid "ZLE_SPACE_SUFFIX_CHARS=$'&|'\n"
msgstr ""

#. type: table
#: zsh.texi:9658
msgid ""
"causes the characters `@t{&}' and `@t{|}' to remove the suffix but to "
"replace it with a space."
msgstr ""

#. type: table
#: zsh.texi:9666
msgid ""
"To illustrate the difference, suppose that the option @t{AUTO_REMOVE_SLASH} "
"is in effect and the directory @t{DIR} has just been completed, with an "
"appended @t{/}, following which the user types `@t{&}'.  The default result "
"is `@t{DIR&}'.  With @t{ZLE_REMOVE_SUFFIX_CHARS} set but without including "
"`@t{&}' the result is `@t{DIR/&}'.  With @t{ZLE_SPACE_SUFFIX_CHARS} set to "
"include `@t{&}' the result is `@t{DIR &}'."
msgstr ""

#. type: table
#: zsh.texi:9672
msgid ""
"Note that certain completions may provide their own suffix removal or "
"replacement behaviour which overrides the values described here.  See the "
"completion system documentation in @ref{Completion System}."
msgstr ""

#. type: vindex
#: zsh.texi:9673
#, no-wrap
msgid "ZLE_RPROMPT_INDENT"
msgstr ""

#. type: item
#: zsh.texi:9674
#, no-wrap
msgid "@t{ZLE_RPROMPT_INDENT} <S>"
msgstr ""

#. type: table
#: zsh.texi:9678
msgid ""
"If set, used to give the indentation between the right hand side of the "
"right prompt in the line editor as given by @t{RPS1} or @t{RPROMPT} and the "
"right hand side of the screen.  If not set, the value 1 is used."
msgstr ""

#. type: table
#: zsh.texi:9686
msgid ""
"Typically this will be used to set the value to 0 so that the prompt appears "
"flush with the right hand side of the screen.  This is not the default as "
"many terminals do not handle this correctly, in particular when the prompt "
"appears at the extreme bottom right of the screen.  Recent virtual terminals "
"are more likely to handle this case correctly.  Some experimentation is "
"necessary."
msgstr ""

#. type: node
#: zsh.texi:9690 zsh.texi:12712 zsh.texi:12714 zsh.texi:16079
#, no-wrap
msgid "Shell Builtin Commands"
msgstr ""

#. type: t{#1}
#: zsh.texi:9694 zsh.texi:21655 zsh.texi:29613 zsh.texi:29614 zsh.texi:35802
#, no-wrap
msgid "options"
msgstr ""

#. type: node
#: zsh.texi:9701 zsh.texi:9703 zsh.texi:9746
#, no-wrap
msgid "Specifying Options"
msgstr ""

#. type: node
#: zsh.texi:9701 zsh.texi:9746 zsh.texi:9748 zsh.texi:12428
#, no-wrap
msgid "Description of Options"
msgstr ""

#. type: cindex
#: zsh.texi:9705
#, no-wrap
msgid "options, specifying"
msgstr ""

#. type: Plain text
#: zsh.texi:9709
msgid ""
"Options are primarily referred to by name.  These names are case insensitive "
"and underscores are ignored.  For example, `@t{allexport}' is equivalent to "
"`@t{A__lleXP_ort}'."
msgstr ""

#. type: Plain text
#: zsh.texi:9716
msgid ""
"The sense of an option name may be inverted by preceding it with `@t{no}', "
"so `@t{setopt No_Beep}' is equivalent to `@t{unsetopt beep}'.  This "
"inversion can only be done once, so `@t{nonobeep}' is @emph{not} a synonym "
"for `@t{beep}'.  Similarly, `@t{tify}' is not a synonym for `@t{nonotify}' "
"(the inversion of `@t{notify}')."
msgstr ""

#. type: Plain text
#: zsh.texi:9725
msgid ""
"Some options also have one or more single letter names.  There are two sets "
"of single letter options: one used by default, and another used to emulate "
"@cite{sh}/@cite{ksh} (used when the @t{SH_OPTION_LETTERS} option is set).  "
"The single letter options can be used on the shell command line, or with the "
"@t{set}, @t{setopt} and @t{unsetopt} builtins, as normal Unix options "
"preceded by `@t{-}'."
msgstr ""

#. type: Plain text
#: zsh.texi:9733
msgid ""
"The sense of the single letter options may be inverted by using `@t{+}' "
"instead of `@t{-}'.  Some of the single letter option names refer to an "
"option being off, in which case the inversion of that name refers to the "
"option being on.  For example, `@t{+n}' is the short name of `@t{exec}', and "
"`@t{-n}' is the short name of its inversion, `@t{noexec}'."
msgstr ""

#. type: Plain text
#: zsh.texi:9740
msgid ""
"In strings of single letter options supplied to the shell at startup, "
"trailing whitespace will be ignored; for example the string `@t{-f }' will "
"be treated just as `@t{-f}', but the string `@t{-f i}' is an error.  This is "
"because many systems which implement the `@t{#!}' mechanism for calling "
"scripts do not strip trailing whitespace."
msgstr ""

#. type: Plain text
#: zsh.texi:9744
msgid ""
"It is possible for options to be set within a function scope.  See the "
"description of the option @t{LOCAL_OPTIONS} below."
msgstr ""

#. type: node
#: zsh.texi:9746 zsh.texi:12428 zsh.texi:12430 zsh.texi:12533
#, no-wrap
msgid "Option Aliases"
msgstr ""

#. type: cindex
#: zsh.texi:9750
#, no-wrap
msgid "options, description"
msgstr ""

#. type: Plain text
#: zsh.texi:9758
msgid ""
"In the following list, options set by default in all emulations are marked "
"<D>; those set by default only in csh, ksh, sh, or zsh emulations are marked "
"<C>, <K>, <S>, <Z> as appropriate.  When listing options (by `@t{setopt}', "
"`@t{unsetopt}', `@t{set -o}' or `@t{set +o}'), those turned on by default "
"appear in the list prefixed with `@t{no}'.  Hence (unless "
"@t{KSH_OPTION_PRINT} is set), `@t{setopt}' shows all options whose settings "
"are changed from the default."
msgstr ""

#. type: subsection
#: zsh.texi:9761
#, no-wrap
msgid "Changing Directories"
msgstr ""

#. type: table
#: zsh.texi:9764 zsh.texi:12581
#, no-wrap
msgid "AUTO_CD"
msgstr ""

#. type: pindex
#: zsh.texi:9765
#, no-wrap
msgid "NO_AUTO_CD"
msgstr ""

#. type: pindex
#: zsh.texi:9766
#, no-wrap
msgid "AUTOCD"
msgstr ""

#. type: pindex
#: zsh.texi:9767
#, no-wrap
msgid "NOAUTOCD"
msgstr ""

#. type: cindex
#: zsh.texi:9768
#, no-wrap
msgid "cd, automatic"
msgstr ""

#. type: item
#: zsh.texi:9769
#, no-wrap
msgid "@t{AUTO_CD} (@t{-J})"
msgstr ""

#. type: table
#: zsh.texi:9777
msgid ""
"If a command is issued that can't be executed as a normal command, and the "
"command is the name of a directory, perform the @t{cd} command to that "
"directory.  This option is only applicable if the option @t{SHIN_STDIN} is "
"set, i.e. if commands are being read from standard input.  The option is "
"designed for interactive use; it is recommended that @t{cd} be used "
"explicitly in scripts to avoid ambiguity."
msgstr ""

#. type: table
#: zsh.texi:9778 zsh.texi:12589
#, no-wrap
msgid "AUTO_PUSHD"
msgstr ""

#. type: pindex
#: zsh.texi:9779
#, no-wrap
msgid "NO_AUTO_PUSHD"
msgstr ""

#. type: pindex
#: zsh.texi:9780
#, no-wrap
msgid "AUTOPUSHD"
msgstr ""

#. type: pindex
#: zsh.texi:9781
#, no-wrap
msgid "NOAUTOPUSHD"
msgstr ""

#. type: cindex
#: zsh.texi:9782
#, no-wrap
msgid "cd, behaving like pushd"
msgstr ""

#. type: cindex
#: zsh.texi:9783
#, no-wrap
msgid "pushd, making cd behave like"
msgstr ""

#. type: item
#: zsh.texi:9784
#, no-wrap
msgid "@t{AUTO_PUSHD} (@t{-N})"
msgstr ""

#. type: table
#: zsh.texi:9786
msgid "Make @t{cd} push the old directory onto the directory stack."
msgstr ""

#. type: table
#: zsh.texi:9787 zsh.texi:12601
#, no-wrap
msgid "CDABLE_VARS"
msgstr ""

#. type: pindex
#: zsh.texi:9788
#, no-wrap
msgid "NO_CDABLE_VARS"
msgstr ""

#. type: pindex
#: zsh.texi:9789
#, no-wrap
msgid "CDABLEVARS"
msgstr ""

#. type: pindex
#: zsh.texi:9790
#, no-wrap
msgid "NOCDABLEVARS"
msgstr ""

#. type: cindex
#: zsh.texi:9791
#, no-wrap
msgid "cd, to parameter"
msgstr ""

#. type: item
#: zsh.texi:9792
#, no-wrap
msgid "@t{CDABLE_VARS} (@t{-T})"
msgstr ""

#. type: table
#: zsh.texi:9797
msgid ""
"If the argument to a @t{cd} command (or an implied @t{cd} with the "
"@t{AUTO_CD} option set) is not a directory, and does not begin with a slash, "
"try to expand the expression as if it were preceded by a `@t{~}' (see "
"@ref{Filename Expansion})."
msgstr ""

#. type: t{#1}
#: zsh.texi:9798 zsh.texi:9804
#, no-wrap
msgid "CD_SILENT"
msgstr ""

#. type: pindex
#: zsh.texi:9799
#, no-wrap
msgid "NO_CD_SILENT"
msgstr ""

#. type: pindex
#: zsh.texi:9800
#, no-wrap
msgid "CDSILENT"
msgstr ""

#. type: pindex
#: zsh.texi:9801
#, no-wrap
msgid "NOCDSILENT"
msgstr ""

#. type: cindex
#: zsh.texi:9802
#, no-wrap
msgid "cd, silencing"
msgstr ""

#. type: cindex
#: zsh.texi:9803
#, no-wrap
msgid "autocd, silencing"
msgstr ""

#. type: table
#: zsh.texi:9812
msgid ""
"Never print the working directory after a @t{cd} (whether explicit or "
"implied with the @t{AUTO_CD} option set). @t{cd} normally prints the working "
"directory when the argument given to it was @t{-}, a stack entry, or the "
"name of a directory found under @t{CDPATH}. Note that this is distinct from "
"@t{pushd}'s stack-printing behaviour, which is controlled by "
"@t{PUSHD_SILENT}. This option overrides the printing-related effects of "
"@t{POSIX_CD}."
msgstr ""

#. type: t{#1}
#: zsh.texi:9813 zsh.texi:9818
#, no-wrap
msgid "CHASE_DOTS"
msgstr ""

#. type: pindex
#: zsh.texi:9814
#, no-wrap
msgid "NO_CHASE_DOTS"
msgstr ""

#. type: pindex
#: zsh.texi:9815
#, no-wrap
msgid "CHASEDOTS"
msgstr ""

#. type: pindex
#: zsh.texi:9816
#, no-wrap
msgid "NOCHASEDOTS"
msgstr ""

#. type: cindex
#: zsh.texi:9817
#, no-wrap
msgid "cd, with .. in argument"
msgstr ""

#. type: table
#: zsh.texi:9825
msgid ""
"When changing to a directory containing a path segment `@t{..}' which would "
"otherwise be treated as canceling the previous segment in the path (in other "
"words, `@t{foo/..}' would be removed from the path, or if `@t{..}' is the "
"first part of the path, the last part of the current working directory would "
"be removed), instead resolve the path to the physical directory.  This "
"option is overridden by @t{CHASE_LINKS}."
msgstr ""

#. type: table
#: zsh.texi:9832
msgid ""
"For example, suppose @t{/foo/bar} is a link to the directory @t{/alt/rod}.  "
"Without this option set, `@t{cd /foo/bar/..}' changes to @t{/foo}; with it "
"set, it changes to @t{/alt}.  The same applies if the current directory is "
"@t{/foo/bar} and `@t{cd ..}' is used.  Note that all other symbolic links in "
"the path will also be resolved."
msgstr ""

#. type: table
#: zsh.texi:9833 zsh.texi:12647
#, no-wrap
msgid "CHASE_LINKS"
msgstr ""

#. type: pindex
#: zsh.texi:9834
#, no-wrap
msgid "NO_CHASE_LINKS"
msgstr ""

#. type: pindex
#: zsh.texi:9835
#, no-wrap
msgid "CHASELINKS"
msgstr ""

#. type: pindex
#: zsh.texi:9836
#, no-wrap
msgid "NOCHASELINKS"
msgstr ""

#. type: cindex
#: zsh.texi:9837
#, no-wrap
msgid "links, symbolic"
msgstr ""

#. type: item
#: zsh.texi:9839
#, no-wrap
msgid "@t{CHASE_LINKS} (@t{-w})"
msgstr ""

#. type: table
#: zsh.texi:9844
msgid ""
"Resolve symbolic links to their true values when changing directory.  This "
"also has the effect of @t{CHASE_DOTS}, i.e. a `@t{..}' path segment will be "
"treated as referring to the physical parent, even if the preceding path "
"segment is a symbolic link."
msgstr ""

#. type: pindex
#: zsh.texi:9845
#, no-wrap
msgid "POSIX_CD"
msgstr ""

#. type: pindex
#: zsh.texi:9846
#, no-wrap
msgid "POSIXCD"
msgstr ""

#. type: pindex
#: zsh.texi:9847
#, no-wrap
msgid "NO_POSIX_CD"
msgstr ""

#. type: pindex
#: zsh.texi:9848
#, no-wrap
msgid "NOPOSIXCD"
msgstr ""

#. type: cindex
#: zsh.texi:9849
#, no-wrap
msgid "CDPATH, order of checking"
msgstr ""

#. type: item
#: zsh.texi:9850
#, no-wrap
msgid "@t{POSIX_CD} <K> <S>"
msgstr ""

#. type: table
#: zsh.texi:9860
msgid ""
"Modifies the behaviour of @t{cd}, @t{chdir} and @t{pushd} commands to make "
"them more compatible with the POSIX standard. The behaviour with the option "
"unset is described in the documentation for the @t{cd} builtin in @ref{Shell "
"Builtin Commands}.  If the option is set, the shell does not test for "
"directories beneath the local directory (`@t{.}') until after all "
"directories in @t{cdpath} have been tested, and the @t{cd} and @t{chdir} "
"commands do not recognise arguments of the form `@{@t{+}|@t{-}@}@var{n}' as "
"directory stack entries."
msgstr ""

#. type: table
#: zsh.texi:9869
msgid ""
"Also, if the option is set, the conditions under which the shell prints the "
"new directory after changing to it are modified.  It is no longer restricted "
"to interactive shells (although printing of the directory stack with "
"@t{pushd} is still limited to interactive shells); and any use of a "
"component of @t{CDPATH}, including a `@t{.}' but excluding an empty "
"component that is otherwise treated as `@t{.}', causes the directory to be "
"printed."
msgstr ""

#. type: t{#1}
#: zsh.texi:9870 zsh.texi:9875
#, no-wrap
msgid "PUSHD_IGNORE_DUPS"
msgstr ""

#. type: pindex
#: zsh.texi:9871
#, no-wrap
msgid "NO_PUSHD_IGNORE_DUPS"
msgstr ""

#. type: pindex
#: zsh.texi:9872
#, no-wrap
msgid "PUSHDIGNOREDUPS"
msgstr ""

#. type: pindex
#: zsh.texi:9873
#, no-wrap
msgid "NOPUSHDIGNOREDUPS"
msgstr ""

#. type: cindex
#: zsh.texi:9874
#, no-wrap
msgid "directory stack, ignoring duplicates"
msgstr ""

#. type: table
#: zsh.texi:9877
msgid "Don't push multiple copies of the same directory onto the directory stack."
msgstr ""

#. type: t{#1}
#: zsh.texi:9878 zsh.texi:9883
#, no-wrap
msgid "PUSHD_MINUS"
msgstr ""

#. type: pindex
#: zsh.texi:9879
#, no-wrap
msgid "NO_PUSHD_MINUS"
msgstr ""

#. type: pindex
#: zsh.texi:9880
#, no-wrap
msgid "PUSHDMINUS"
msgstr ""

#. type: pindex
#: zsh.texi:9881
#, no-wrap
msgid "NOPUSHDMINUS"
msgstr ""

#. type: cindex
#: zsh.texi:9882
#, no-wrap
msgid "directory stack, controlling syntax"
msgstr ""

#. type: table
#: zsh.texi:9886
msgid ""
"Exchanges the meanings of `@t{+}' and `@t{-}' when used with a number to "
"specify a directory in the stack."
msgstr ""

#. type: table
#: zsh.texi:9887 zsh.texi:12571
#, no-wrap
msgid "PUSHD_SILENT"
msgstr ""

#. type: pindex
#: zsh.texi:9888
#, no-wrap
msgid "NO_PUSHD_SILENT"
msgstr ""

#. type: pindex
#: zsh.texi:9889
#, no-wrap
msgid "PUSHDSILENT"
msgstr ""

#. type: pindex
#: zsh.texi:9890
#, no-wrap
msgid "NOPUSHDSILENT"
msgstr ""

#. type: cindex
#: zsh.texi:9891
#, no-wrap
msgid "directory stack, silencing"
msgstr ""

#. type: item
#: zsh.texi:9892
#, no-wrap
msgid "@t{PUSHD_SILENT} (@t{-E})"
msgstr ""

#. type: table
#: zsh.texi:9894
msgid "Do not print the directory stack after @t{pushd} or @t{popd}."
msgstr ""

#. type: table
#: zsh.texi:9895 zsh.texi:12569
#, no-wrap
msgid "PUSHD_TO_HOME"
msgstr ""

#. type: pindex
#: zsh.texi:9896
#, no-wrap
msgid "NO_PUSHD_TO_HOME"
msgstr ""

#. type: pindex
#: zsh.texi:9897
#, no-wrap
msgid "PUSHDTOHOME"
msgstr ""

#. type: pindex
#: zsh.texi:9898
#, no-wrap
msgid "NOPUSHDTOHOME"
msgstr ""

#. type: cindex
#: zsh.texi:9899
#, no-wrap
msgid "pushd, to home"
msgstr ""

#. type: item
#: zsh.texi:9900
#, no-wrap
msgid "@t{PUSHD_TO_HOME} (@t{-D})"
msgstr ""

#. type: table
#: zsh.texi:9902
msgid "Have @t{pushd} with no arguments act like `@t{pushd $HOME}'."
msgstr ""

#. type: pindex
#: zsh.texi:9910
#, no-wrap
msgid "ALWAYS_LAST_PROMPT"
msgstr ""

#. type: pindex
#: zsh.texi:9911
#, no-wrap
msgid "NO_ALWAYS_LAST_PROMPT"
msgstr ""

#. type: pindex
#: zsh.texi:9912
#, no-wrap
msgid "ALWAYSLASTPROMPT"
msgstr ""

#. type: pindex
#: zsh.texi:9913
#, no-wrap
msgid "NOALWAYSLASTPROMPT"
msgstr ""

#. type: item
#: zsh.texi:9914
#, no-wrap
msgid "@t{ALWAYS_LAST_PROMPT} <D>"
msgstr ""

#. type: table
#: zsh.texi:9918
msgid ""
"If unset, key functions that list completions try to return to the last "
"prompt if given a numeric argument. If set these functions try to return to "
"the last prompt if given @emph{no} numeric argument."
msgstr ""

#. type: t{#1}
#: zsh.texi:9919 zsh.texi:9923
#, no-wrap
msgid "ALWAYS_TO_END"
msgstr ""

#. type: pindex
#: zsh.texi:9920
#, no-wrap
msgid "NO_ALWAYS_TO_END"
msgstr ""

#. type: pindex
#: zsh.texi:9921
#, no-wrap
msgid "ALWAYSTOEND"
msgstr ""

#. type: pindex
#: zsh.texi:9922
#, no-wrap
msgid "NOALWAYSTOEND"
msgstr ""

#. type: table
#: zsh.texi:9928
msgid ""
"If a completion is performed with the cursor within a word, and a full "
"completion is inserted, the cursor is moved to the end of the word.  That "
"is, the cursor is moved to the end of the word if either a single match is "
"inserted or menu completion is performed."
msgstr ""

#. type: table
#: zsh.texi:9929 zsh.texi:12563
#, no-wrap
msgid "AUTO_LIST"
msgstr ""

#. type: pindex
#: zsh.texi:9930
#, no-wrap
msgid "NO_AUTO_LIST"
msgstr ""

#. type: pindex
#: zsh.texi:9931
#, no-wrap
msgid "AUTOLIST"
msgstr ""

#. type: pindex
#: zsh.texi:9932
#, no-wrap
msgid "NOAUTOLIST"
msgstr ""

#. type: cindex
#: zsh.texi:9933
#, no-wrap
msgid "completion, listing choices"
msgstr ""

#. type: item
#: zsh.texi:9934
#, no-wrap
msgid "@t{AUTO_LIST} (@t{-9}) <D>"
msgstr ""

#. type: table
#: zsh.texi:9936
msgid "Automatically list choices on an ambiguous completion."
msgstr ""

#. type: pindex
#: zsh.texi:9937
#, no-wrap
msgid "AUTO_MENU"
msgstr ""

#. type: pindex
#: zsh.texi:9938
#, no-wrap
msgid "NO_AUTO_MENU"
msgstr ""

#. type: pindex
#: zsh.texi:9939
#, no-wrap
msgid "AUTOMENU"
msgstr ""

#. type: pindex
#: zsh.texi:9940
#, no-wrap
msgid "NOAUTOMENU"
msgstr ""

#. type: cindex
#: zsh.texi:9941 zsh.texi:10111
#, no-wrap
msgid "completion, menu"
msgstr ""

#. type: item
#: zsh.texi:9942
#, no-wrap
msgid "@t{AUTO_MENU} <D>"
msgstr ""

#. type: table
#: zsh.texi:9946
msgid ""
"Automatically use menu completion after the second consecutive request for "
"completion, for example by pressing the tab key repeatedly. This option is "
"overridden by @t{MENU_COMPLETE}."
msgstr ""

#. type: t{#1}
#: zsh.texi:9947 zsh.texi:9952
#, no-wrap
msgid "AUTO_NAME_DIRS"
msgstr ""

#. type: pindex
#: zsh.texi:9948
#, no-wrap
msgid "NO_AUTO_NAME_DIRS"
msgstr ""

#. type: pindex
#: zsh.texi:9949
#, no-wrap
msgid "AUTONAMEDIRS"
msgstr ""

#. type: pindex
#: zsh.texi:9950
#, no-wrap
msgid "NOAUTONAMEDIRS"
msgstr ""

#. type: cindex
#: zsh.texi:9951
#, no-wrap
msgid "directories, named"
msgstr ""

#. type: table
#: zsh.texi:9959
msgid ""
"Any parameter that is set to the absolute name of a directory immediately "
"becomes a name for that directory, that will be used by the `@t{%~}' and "
"related prompt sequences, and will be available when completion is performed "
"on a word starting with `@t{~}'.  (Otherwise, the parameter must be used in "
"the form `@t{~}@var{param}' first.)"
msgstr ""

#. type: pindex
#: zsh.texi:9960
#, no-wrap
msgid "AUTO_PARAM_KEYS"
msgstr ""

#. type: pindex
#: zsh.texi:9961
#, no-wrap
msgid "NO_AUTO_PARAM_KEYS"
msgstr ""

#. type: pindex
#: zsh.texi:9962
#, no-wrap
msgid "AUTOPARAMKEYS"
msgstr ""

#. type: pindex
#: zsh.texi:9963
#, no-wrap
msgid "NOAUTOPARAMKEYS"
msgstr ""

#. type: item
#: zsh.texi:9964
#, no-wrap
msgid "@t{AUTO_PARAM_KEYS} <D>"
msgstr ""

#. type: table
#: zsh.texi:9973
msgid ""
"If a parameter name was completed and a following character (normally a "
"space) automatically inserted, and the next character typed is one of those "
"that have to come directly after the name (like `@t{@}}', `@t{:}', etc.), "
"the automatically added character is deleted, so that the character typed "
"comes immediately after the parameter name.  Completion in a brace expansion "
"is affected similarly: the added character is a `@t{,}', which will be "
"removed if `@t{@}}' is typed next."
msgstr ""

#. type: pindex
#: zsh.texi:9974
#, no-wrap
msgid "AUTO_PARAM_SLASH"
msgstr ""

#. type: pindex
#: zsh.texi:9975
#, no-wrap
msgid "NO_AUTO_PARAM_SLASH"
msgstr ""

#. type: pindex
#: zsh.texi:9976
#, no-wrap
msgid "AUTOPARAMSLASH"
msgstr ""

#. type: pindex
#: zsh.texi:9977
#, no-wrap
msgid "NOAUTOPARAMSLASH"
msgstr ""

#. type: item
#: zsh.texi:9978
#, no-wrap
msgid "@t{AUTO_PARAM_SLASH} <D>"
msgstr ""

#. type: table
#: zsh.texi:9981
msgid ""
"If a parameter is completed whose content is the name of a directory, then "
"add a trailing slash instead of a space."
msgstr ""

#. type: pindex
#: zsh.texi:9982
#, no-wrap
msgid "AUTO_REMOVE_SLASH"
msgstr ""

#. type: pindex
#: zsh.texi:9983
#, no-wrap
msgid "NO_AUTO_REMOVE_SLASH"
msgstr ""

#. type: pindex
#: zsh.texi:9984
#, no-wrap
msgid "AUTOREMOVESLASH"
msgstr ""

#. type: pindex
#: zsh.texi:9985
#, no-wrap
msgid "NOAUTOREMOVESLASH"
msgstr ""

#. type: cindex
#: zsh.texi:9986
#, no-wrap
msgid "slash, removing trailing"
msgstr ""

#. type: item
#: zsh.texi:9987
#, no-wrap
msgid "@t{AUTO_REMOVE_SLASH} <D>"
msgstr ""

#. type: table
#: zsh.texi:9991
msgid ""
"When the last character resulting from a completion is a slash and the next "
"character typed is a word delimiter, a slash, or a character that ends a "
"command (such as a semicolon or an ampersand), remove the slash."
msgstr ""

#. type: t{#1}
#: zsh.texi:9992 zsh.texi:9997
#, no-wrap
msgid "BASH_AUTO_LIST"
msgstr ""

#. type: pindex
#: zsh.texi:9993
#, no-wrap
msgid "NO_BASH_AUTO_LIST"
msgstr ""

#. type: pindex
#: zsh.texi:9994
#, no-wrap
msgid "BASHAUTOLIST"
msgstr ""

#. type: pindex
#: zsh.texi:9995
#, no-wrap
msgid "NOBASHAUTOLIST"
msgstr ""

#. type: cindex
#: zsh.texi:9996
#, no-wrap
msgid "completion, listing choices, bash style"
msgstr ""

#. type: table
#: zsh.texi:10005
msgid ""
"On an ambiguous completion, automatically list choices when the completion "
"function is called twice in succession.  This takes precedence over "
"@t{AUTO_LIST}.  The setting of @t{LIST_AMBIGUOUS} is respected.  If "
"@t{AUTO_MENU} is set, the menu behaviour will then start with the third "
"press.  Note that this will not work with @t{MENU_COMPLETE}, since repeated "
"completion calls immediately cycle through the list in that case."
msgstr ""

#. type: t{#1}
#: zsh.texi:10006 zsh.texi:10011
#, no-wrap
msgid "COMPLETE_ALIASES"
msgstr ""

#. type: pindex
#: zsh.texi:10007
#, no-wrap
msgid "NO_COMPLETE_ALIASES"
msgstr ""

#. type: pindex
#: zsh.texi:10008
#, no-wrap
msgid "COMPLETEALIASES"
msgstr ""

#. type: pindex
#: zsh.texi:10009
#, no-wrap
msgid "NOCOMPLETEALIASES"
msgstr ""

#. type: cindex
#: zsh.texi:10010
#, no-wrap
msgid "aliases, completion of"
msgstr ""

#. type: table
#: zsh.texi:10015
msgid ""
"Prevents aliases on the command line from being internally substituted "
"before completion is attempted.  The effect is to make the alias a distinct "
"command for completion purposes."
msgstr ""

#. type: t{#1}
#: zsh.texi:10016 zsh.texi:10020
#, no-wrap
msgid "COMPLETE_IN_WORD"
msgstr ""

#. type: pindex
#: zsh.texi:10017
#, no-wrap
msgid "NO_COMPLETE_IN_WORD"
msgstr ""

#. type: pindex
#: zsh.texi:10018
#, no-wrap
msgid "COMPLETEINWORD"
msgstr ""

#. type: pindex
#: zsh.texi:10019
#, no-wrap
msgid "NOCOMPLETEINWORD"
msgstr ""

#. type: table
#: zsh.texi:10023
msgid ""
"If unset, the cursor is set to the end of the word if completion is "
"started. Otherwise it stays there and completion is done from both ends."
msgstr ""

#. type: t{#1}
#: zsh.texi:10024 zsh.texi:10028
#, no-wrap
msgid "GLOB_COMPLETE"
msgstr ""

#. type: pindex
#: zsh.texi:10025
#, no-wrap
msgid "NO_GLOB_COMPLETE"
msgstr ""

#. type: pindex
#: zsh.texi:10026
#, no-wrap
msgid "GLOBCOMPLETE"
msgstr ""

#. type: pindex
#: zsh.texi:10027
#, no-wrap
msgid "NOGLOBCOMPLETE"
msgstr ""

#. type: table
#: zsh.texi:10036
msgid ""
"When the current word has a glob pattern, do not insert all the words "
"resulting from the expansion but generate matches as for completion and "
"cycle through them like @t{MENU_COMPLETE}. The matches are generated as if a "
"`@t{*}' was added to the end of the word, or inserted at the cursor when "
"@t{COMPLETE_IN_WORD} is set.  This actually uses pattern matching, not "
"globbing, so it works not only for files but for any completion, such as "
"options, user names, etc."
msgstr ""

#. type: table
#: zsh.texi:10042
msgid ""
"Note that when the pattern matcher is used, matching control (for example, "
"case-insensitive or anchored matching) cannot be used.  This limitation only "
"applies when the current word contains a pattern; simply turning on the "
"@t{GLOB_COMPLETE} option does not have this effect."
msgstr ""

#. type: pindex
#: zsh.texi:10043
#, no-wrap
msgid "HASH_LIST_ALL"
msgstr ""

#. type: pindex
#: zsh.texi:10044
#, no-wrap
msgid "NO_HASH_LIST_ALL"
msgstr ""

#. type: pindex
#: zsh.texi:10045
#, no-wrap
msgid "HASHLISTALL"
msgstr ""

#. type: pindex
#: zsh.texi:10046
#, no-wrap
msgid "NOHASHLISTALL"
msgstr ""

#. type: item
#: zsh.texi:10047
#, no-wrap
msgid "@t{HASH_LIST_ALL} <D>"
msgstr ""

#. type: table
#: zsh.texi:10051
msgid ""
"Whenever a command completion or spelling correction is attempted, make sure "
"the entire command path is hashed first.  This makes the first completion "
"slower but avoids false reports of spelling errors."
msgstr ""

#. type: pindex
#: zsh.texi:10052
#, no-wrap
msgid "LIST_AMBIGUOUS"
msgstr ""

#. type: pindex
#: zsh.texi:10053
#, no-wrap
msgid "NO_LIST_AMBIGUOUS"
msgstr ""

#. type: pindex
#: zsh.texi:10054
#, no-wrap
msgid "LISTAMBIGUOUS"
msgstr ""

#. type: pindex
#: zsh.texi:10055
#, no-wrap
msgid "NOLISTAMBIGUOUS"
msgstr ""

#. type: cindex
#: zsh.texi:10056
#, no-wrap
msgid "ambiguous completion"
msgstr ""

#. type: cindex
#: zsh.texi:10057
#, no-wrap
msgid "completion, ambiguous"
msgstr ""

#. type: item
#: zsh.texi:10058
#, no-wrap
msgid "@t{LIST_AMBIGUOUS} <D>"
msgstr ""

#. type: table
#: zsh.texi:10065
msgid ""
"This option works when @t{AUTO_LIST} or @t{BASH_AUTO_LIST} is also set.  If "
"there is an unambiguous prefix to insert on the command line, that is done "
"without a completion list being displayed; in other words, auto-listing "
"behaviour only takes place when nothing would be inserted.  In the case of "
"@t{BASH_AUTO_LIST}, this means that the list will be delayed to the third "
"call of the function."
msgstr ""

#. type: pindex
#: zsh.texi:10066
#, no-wrap
msgid "LIST_BEEP"
msgstr ""

#. type: pindex
#: zsh.texi:10067
#, no-wrap
msgid "NO_LIST_BEEP"
msgstr ""

#. type: pindex
#: zsh.texi:10068
#, no-wrap
msgid "LISTBEEP"
msgstr ""

#. type: pindex
#: zsh.texi:10069
#, no-wrap
msgid "NOLISTBEEP"
msgstr ""

#. type: cindex
#: zsh.texi:10070
#, no-wrap
msgid "beep, ambiguous completion"
msgstr ""

#. type: cindex
#: zsh.texi:10071
#, no-wrap
msgid "completion, beep on ambiguous"
msgstr ""

#. type: item
#: zsh.texi:10072
#, no-wrap
msgid "@t{LIST_BEEP} <D>"
msgstr ""

#. type: table
#: zsh.texi:10077
msgid ""
"Beep on an ambiguous completion.  More accurately, this forces the "
"completion widgets to return status 1 on an ambiguous completion, which "
"causes the shell to beep if the option @t{BEEP} is also set; this may be "
"modified if completion is called from a user-defined widget."
msgstr ""

#. type: t{#1}
#: zsh.texi:10078 zsh.texi:10083
#, no-wrap
msgid "LIST_PACKED"
msgstr ""

#. type: pindex
#: zsh.texi:10079
#, no-wrap
msgid "NO_LIST_PACKED"
msgstr ""

#. type: pindex
#: zsh.texi:10080
#, no-wrap
msgid "LISTPACKED"
msgstr ""

#. type: pindex
#: zsh.texi:10081
#, no-wrap
msgid "NOLISTPACKED"
msgstr ""

#. type: cindex
#: zsh.texi:10082 zsh.texi:27957
#, no-wrap
msgid "completion, listing"
msgstr ""

#. type: table
#: zsh.texi:10086
msgid ""
"Try to make the completion list smaller (occupying less lines) by printing "
"the matches in columns with different widths."
msgstr ""

#. type: t{#1}
#: zsh.texi:10087 zsh.texi:10092
#, no-wrap
msgid "LIST_ROWS_FIRST"
msgstr ""

#. type: pindex
#: zsh.texi:10088
#, no-wrap
msgid "NO_LIST_ROWS_FIRST"
msgstr ""

#. type: pindex
#: zsh.texi:10089
#, no-wrap
msgid "LISTROWSFIRST"
msgstr ""

#. type: pindex
#: zsh.texi:10090
#, no-wrap
msgid "NOLISTROWSFIRST"
msgstr ""

#. type: cindex
#: zsh.texi:10091
#, no-wrap
msgid "completion, listing order"
msgstr ""

#. type: table
#: zsh.texi:10096
msgid ""
"Lay out the matches in completion lists sorted horizontally, that is, the "
"second match is to the right of the first one, not under it as usual."
msgstr ""

#. type: table
#: zsh.texi:10097 zsh.texi:12609
#, no-wrap
msgid "LIST_TYPES"
msgstr ""

#. type: pindex
#: zsh.texi:10098
#, no-wrap
msgid "NO_LIST_TYPES"
msgstr ""

#. type: pindex
#: zsh.texi:10099
#, no-wrap
msgid "LISTTYPES"
msgstr ""

#. type: pindex
#: zsh.texi:10100
#, no-wrap
msgid "NOLISTTYPES"
msgstr ""

#. type: cindex
#: zsh.texi:10101
#, no-wrap
msgid "marking file types"
msgstr ""

#. type: cindex
#: zsh.texi:10102
#, no-wrap
msgid "files, marking type of"
msgstr ""

#. type: item
#: zsh.texi:10103
#, no-wrap
msgid "@t{LIST_TYPES} (@t{-X}) <D>"
msgstr ""

#. type: table
#: zsh.texi:10106
msgid ""
"When listing files that are possible completions, show the type of each file "
"with a trailing identifying mark."
msgstr ""

#. type: table
#: zsh.texi:10107 zsh.texi:12611
#, no-wrap
msgid "MENU_COMPLETE"
msgstr ""

#. type: pindex
#: zsh.texi:10108
#, no-wrap
msgid "NO_MENU_COMPLETE"
msgstr ""

#. type: pindex
#: zsh.texi:10109
#, no-wrap
msgid "MENUCOMPLETE"
msgstr ""

#. type: pindex
#: zsh.texi:10110
#, no-wrap
msgid "NOMENUCOMPLETE"
msgstr ""

#. type: item
#: zsh.texi:10112
#, no-wrap
msgid "@t{MENU_COMPLETE} (@t{-Y})"
msgstr ""

#. type: table
#: zsh.texi:10119
msgid ""
"On an ambiguous completion, instead of listing possibilities or beeping, "
"insert the first match immediately.  Then when completion is requested "
"again, remove the first match and insert the second match, etc.  When there "
"are no more matches, go back to the first one again.  "
"@t{reverse-menu-complete} may be used to loop through the list in the other "
"direction. This option overrides @t{AUTO_MENU}."
msgstr ""

#. type: table
#: zsh.texi:10120 zsh.texi:12599
#, no-wrap
msgid "REC_EXACT"
msgstr ""

#. type: pindex
#: zsh.texi:10121
#, no-wrap
msgid "NO_REC_EXACT"
msgstr ""

#. type: pindex
#: zsh.texi:10122
#, no-wrap
msgid "RECEXACT"
msgstr ""

#. type: pindex
#: zsh.texi:10123
#, no-wrap
msgid "NORECEXACT"
msgstr ""

#. type: cindex
#: zsh.texi:10124
#, no-wrap
msgid "completion, exact matches"
msgstr ""

#. type: item
#: zsh.texi:10125
#, no-wrap
msgid "@t{REC_EXACT} (@t{-S})"
msgstr ""

#. type: table
#: zsh.texi:10129
msgid ""
"If the string on the command line exactly matches one of the possible "
"completions, it is accepted, even if there is another completion (i.e. that "
"string with something else added) that also matches."
msgstr ""

#. type: subsection
#: zsh.texi:10134
#, no-wrap
msgid "Expansion and Globbing"
msgstr ""

#. type: pindex
#: zsh.texi:10137
#, no-wrap
msgid "BAD_PATTERN"
msgstr ""

#. type: pindex
#: zsh.texi:10138
#, no-wrap
msgid "NO_BAD_PATTERN"
msgstr ""

#. type: pindex
#: zsh.texi:10139
#, no-wrap
msgid "BADPATTERN"
msgstr ""

#. type: pindex
#: zsh.texi:10140
#, no-wrap
msgid "NOBADPATTERN"
msgstr ""

#. type: cindex
#: zsh.texi:10141
#, no-wrap
msgid "globbing, bad pattern"
msgstr ""

#. type: cindex
#: zsh.texi:10142
#, no-wrap
msgid "filename generation, bad pattern"
msgstr ""

#. type: item
#: zsh.texi:10143
#, no-wrap
msgid "@t{BAD_PATTERN} (@t{+2}) <C> <Z>"
msgstr ""

#. type: table
#: zsh.texi:10146
msgid ""
"If a pattern for filename generation is badly formed, print an error "
"message.  (If this option is unset, the pattern will be left unchanged.)"
msgstr ""

#. type: pindex
#: zsh.texi:10147
#, no-wrap
msgid "BARE_GLOB_QUAL"
msgstr ""

#. type: pindex
#: zsh.texi:10148
#, no-wrap
msgid "NO_BARE_GLOB_QUAL"
msgstr ""

#. type: pindex
#: zsh.texi:10149
#, no-wrap
msgid "BAREGLOBQUAL"
msgstr ""

#. type: pindex
#: zsh.texi:10150
#, no-wrap
msgid "NOBAREGLOBQUAL"
msgstr ""

#. type: cindex
#: zsh.texi:10151
#, no-wrap
msgid "globbing qualifiers, enable"
msgstr ""

#. type: cindex
#: zsh.texi:10152
#, no-wrap
msgid "enable globbing qualifiers"
msgstr ""

#. type: item
#: zsh.texi:10153
#, no-wrap
msgid "@t{BARE_GLOB_QUAL} <Z>"
msgstr ""

#. type: table
#: zsh.texi:10157
msgid ""
"In a glob pattern, treat a trailing set of parentheses as a qualifier list, "
"if it contains no `@t{|}', `@t{(}' or (if special) `@t{~}' characters.  See "
"@ref{Filename Generation}."
msgstr ""

#. type: t{#1}
#: zsh.texi:10158 zsh.texi:10164
#, no-wrap
msgid "BRACE_CCL"
msgstr ""

#. type: pindex
#: zsh.texi:10159
#, no-wrap
msgid "NO_BRACE_CCL"
msgstr ""

#. type: pindex
#: zsh.texi:10160
#, no-wrap
msgid "BRACECCL"
msgstr ""

#. type: pindex
#: zsh.texi:10161
#, no-wrap
msgid "NOBRACECCL"
msgstr ""

#. type: cindex
#: zsh.texi:10162
#, no-wrap
msgid "brace expansion, extending"
msgstr ""

#. type: cindex
#: zsh.texi:10163
#, no-wrap
msgid "expansion, brace, extending"
msgstr ""

#. type: table
#: zsh.texi:10168
msgid ""
"Expand expressions in braces which would not otherwise undergo brace "
"expansion to a lexically ordered list of all the characters.  See @ref{Brace "
"Expansion}."
msgstr ""

#. type: pindex
#: zsh.texi:10169
#, no-wrap
msgid "CASE_GLOB"
msgstr ""

#. type: pindex
#: zsh.texi:10170
#, no-wrap
msgid "NO_CASE_GLOB"
msgstr ""

#. type: pindex
#: zsh.texi:10171
#, no-wrap
msgid "CASEGLOB"
msgstr ""

#. type: pindex
#: zsh.texi:10172
#, no-wrap
msgid "NOCASEGLOB"
msgstr ""

#. type: cindex
#: zsh.texi:10173
#, no-wrap
msgid "case-insensitive globbing, option"
msgstr ""

#. type: item
#: zsh.texi:10174
#, no-wrap
msgid "@t{CASE_GLOB} <D>"
msgstr ""

#. type: table
#: zsh.texi:10181
msgid ""
"Make globbing (filename generation) sensitive to case.  Note that other uses "
"of patterns are always sensitive to case.  If the option is unset, the "
"presence of any character which is special to filename generation will cause "
"case-insensitive matching.  For example, @t{cvs(/)} can match the directory "
"@t{CVS} owing to the presence of the globbing flag (unless the option "
"@t{BARE_GLOB_QUAL} is unset)."
msgstr ""

#. type: pindex
#: zsh.texi:10182
#, no-wrap
msgid "CASE_MATCH"
msgstr ""

#. type: pindex
#: zsh.texi:10183 zsh.texi:29981
#, no-wrap
msgid "NO_CASE_MATCH"
msgstr ""

#. type: pindex
#: zsh.texi:10184
#, no-wrap
msgid "CASEMATCH"
msgstr ""

#. type: pindex
#: zsh.texi:10185
#, no-wrap
msgid "NOCASEMATCH"
msgstr ""

#. type: cindex
#: zsh.texi:10186
#, no-wrap
msgid "case-insensitive regular expression matches, option"
msgstr ""

#. type: cindex
#: zsh.texi:10187
#, no-wrap
msgid "regular expressions, case-insensitive matching, option"
msgstr ""

#. type: item
#: zsh.texi:10188
#, no-wrap
msgid "@t{CASE_MATCH} <D>"
msgstr ""

#. type: table
#: zsh.texi:10191
msgid ""
"Make regular expressions using the @t{zsh/regex} module (including matches "
"with @t{=~}) sensitive to case."
msgstr ""

#. type: t{#1}
#: zsh.texi:10192 zsh.texi:10197
#, no-wrap
msgid "CASE_PATHS"
msgstr ""

#. type: pindex
#: zsh.texi:10193
#, no-wrap
msgid "NO_CASE_PATHS"
msgstr ""

#. type: pindex
#: zsh.texi:10194
#, no-wrap
msgid "CASEPATHS"
msgstr ""

#. type: pindex
#: zsh.texi:10195
#, no-wrap
msgid "NOCASEPATHS"
msgstr ""

#. type: cindex
#: zsh.texi:10196
#, no-wrap
msgid "case-sensitive globbing, option"
msgstr ""

#. type: table
#: zsh.texi:10204
msgid ""
"If @t{CASE_PATHS} is not set (the default), @t{CASE_GLOB} affects the "
"interpretation of @emph{every} path component, whenever a special character "
"appears in @emph{any} component.  When @t{CASE_PATHS} is set, file path "
"components that do @emph{not} contain special filename generation characters "
"are always sensitive to case, thus restricting @t{NO_CASE_GLOB} to "
"components that contain globbing characters."
msgstr ""

#. type: table
#: zsh.texi:10208
msgid ""
"Note that if the filesystem itself is not sensitive to case, then "
"@t{CASE_PATHS} has no effect."
msgstr ""

#. type: pindex
#: zsh.texi:10209
#, no-wrap
msgid "CSH_NULL_GLOB"
msgstr ""

#. type: pindex
#: zsh.texi:10210
#, no-wrap
msgid "NO_CSH_NULL_GLOB"
msgstr ""

#. type: pindex
#: zsh.texi:10211
#, no-wrap
msgid "CSHNULLGLOB"
msgstr ""

#. type: pindex
#: zsh.texi:10212
#, no-wrap
msgid "NOCSHNULLGLOB"
msgstr ""

#. type: cindex
#: zsh.texi:10213
#, no-wrap
msgid "csh, null globbing style"
msgstr ""

#. type: cindex
#: zsh.texi:10214
#, no-wrap
msgid "null globbing style, csh"
msgstr ""

#. type: cindex
#: zsh.texi:10215
#, no-wrap
msgid "globbing, null, style, csh"
msgstr ""

#. type: item
#: zsh.texi:10216
#, no-wrap
msgid "@t{CSH_NULL_GLOB} <C>"
msgstr ""

#. type: table
#: zsh.texi:10222
msgid ""
"If a pattern for filename generation has no matches, delete the pattern from "
"the argument list; do not report an error unless all the patterns in a "
"command have no matches.  Overrides @t{NOMATCH}."
msgstr ""

#. type: pindex
#: zsh.texi:10223
#, no-wrap
msgid "EQUALS"
msgstr ""

#. type: pindex
#: zsh.texi:10224
#, no-wrap
msgid "NO_EQUALS"
msgstr ""

#. type: pindex
#: zsh.texi:10225
#, no-wrap
msgid "NOEQUALS"
msgstr ""

#. type: cindex
#: zsh.texi:10226
#, no-wrap
msgid "filename expansion, ="
msgstr ""

#. type: item
#: zsh.texi:10227
#, no-wrap
msgid "@t{EQUALS} <Z>"
msgstr ""

#. type: table
#: zsh.texi:10230
msgid "Perform @t{=} filename expansion.  (See @ref{Filename Expansion}.)"
msgstr ""

#. type: t{#1}
#: zsh.texi:10231 zsh.texi:10236
#, no-wrap
msgid "EXTENDED_GLOB"
msgstr ""

#. type: pindex
#: zsh.texi:10232
#, no-wrap
msgid "NO_EXTENDED_GLOB"
msgstr ""

#. type: pindex
#: zsh.texi:10233
#, no-wrap
msgid "EXTENDEDGLOB"
msgstr ""

#. type: pindex
#: zsh.texi:10234
#, no-wrap
msgid "NOEXTENDEDGLOB"
msgstr ""

#. type: cindex
#: zsh.texi:10235
#, no-wrap
msgid "globbing, extended"
msgstr ""

#. type: table
#: zsh.texi:10240
msgid ""
"Treat the `@t{#}', `@t{~}' and `@t{^}' characters as part of patterns for "
"filename generation, etc.  (An initial unquoted `@t{~}' always produces "
"named directory expansion.)"
msgstr ""

#. type: t{#1}
#: zsh.texi:10241 zsh.texi:10247
#, no-wrap
msgid "FORCE_FLOAT"
msgstr ""

#. type: pindex
#: zsh.texi:10242
#, no-wrap
msgid "NO_FORCE_FLOAT"
msgstr ""

#. type: pindex
#: zsh.texi:10243
#, no-wrap
msgid "FORCEFLOAT"
msgstr ""

#. type: pindex
#: zsh.texi:10244
#, no-wrap
msgid "NOFORCEFLOAT"
msgstr ""

#. type: cindex
#: zsh.texi:10245
#, no-wrap
msgid "floating point, forcing use of"
msgstr ""

#. type: cindex
#: zsh.texi:10246
#, no-wrap
msgid "forcing use of floating point"
msgstr ""

#. type: table
#: zsh.texi:10252
msgid ""
"Constants in arithmetic evaluation will be treated as floating point even "
"without the use of a decimal point; the values of integer variables will be "
"converted to floating point when used in arithmetic expressions.  Integers "
"in any base will be converted."
msgstr ""

#. type: pindex
#: zsh.texi:10253
#, no-wrap
msgid "GLOB"
msgstr ""

#. type: pindex
#: zsh.texi:10254
#, no-wrap
msgid "NO_GLOB"
msgstr ""

#. type: pindex
#: zsh.texi:10255
#, no-wrap
msgid "NOGLOB"
msgstr ""

#. type: cindex
#: zsh.texi:10256
#, no-wrap
msgid "globbing, enabling"
msgstr ""

#. type: cindex
#: zsh.texi:10257
#, no-wrap
msgid "enabling globbing"
msgstr ""

#. type: item
#: zsh.texi:10258
#, no-wrap
msgid "@t{GLOB} (@t{+F}, ksh: @t{+f}) <D>"
msgstr ""

#. type: table
#: zsh.texi:10261
msgid "Perform filename generation (globbing).  (See @ref{Filename Generation}.)"
msgstr ""

#. type: pindex
#: zsh.texi:10262
#, no-wrap
msgid "GLOB_ASSIGN"
msgstr ""

#. type: pindex
#: zsh.texi:10263
#, no-wrap
msgid "NO_GLOB_ASSIGN"
msgstr ""

#. type: pindex
#: zsh.texi:10264
#, no-wrap
msgid "GLOBASSIGN"
msgstr ""

#. type: pindex
#: zsh.texi:10265
#, no-wrap
msgid "NOGLOBASSIGN"
msgstr ""

#. type: item
#: zsh.texi:10266
#, no-wrap
msgid "@t{GLOB_ASSIGN} <C>"
msgstr ""

#. type: table
#: zsh.texi:10277
msgid ""
"If this option is set, filename generation (globbing) is performed on the "
"right hand side of scalar parameter assignments of the form "
"`@var{name}@t{=}@var{pattern} (e.g. `@t{foo=*}').  If the result has more "
"than one word the parameter will become an array with those words as "
"arguments. This option is provided for backwards compatibility only: "
"globbing is always performed on the right hand side of array assignments of "
"the form `@var{name}@t{=(}@var{value}@t{)}' (e.g. `@t{foo=(*)}') and this "
"form is recommended for clarity; with this option set, it is not possible to "
"predict whether the result will be an array or a scalar."
msgstr ""

#. type: table
#: zsh.texi:10278 zsh.texi:12553
#, no-wrap
msgid "GLOB_DOTS"
msgstr ""

#. type: pindex
#: zsh.texi:10279
#, no-wrap
msgid "NO_GLOB_DOTS"
msgstr ""

#. type: pindex
#: zsh.texi:10280
#, no-wrap
msgid "GLOBDOTS"
msgstr ""

#. type: pindex
#: zsh.texi:10281
#, no-wrap
msgid "NOGLOBDOTS"
msgstr ""

#. type: cindex
#: zsh.texi:10282
#, no-wrap
msgid "globbing, of . files"
msgstr ""

#. type: item
#: zsh.texi:10283
#, no-wrap
msgid "@t{GLOB_DOTS} (@t{-4})"
msgstr ""

#. type: table
#: zsh.texi:10285
msgid "Do not require a leading `@t{.}' in a filename to be matched explicitly."
msgstr ""

#. type: t{#1}
#: zsh.texi:10286 zsh.texi:10292
#, no-wrap
msgid "GLOB_STAR_SHORT"
msgstr ""

#. type: pindex
#: zsh.texi:10287
#, no-wrap
msgid "NO_GLOB_STAR_SHORT"
msgstr ""

#. type: pindex
#: zsh.texi:10288
#, no-wrap
msgid "GLOBSTARSHORT"
msgstr ""

#. type: pindex
#: zsh.texi:10289
#, no-wrap
msgid "NOGLOBSTARSHORT"
msgstr ""

#. type: cindex
#: zsh.texi:10290
#, no-wrap
msgid "globbing, short forms"
msgstr ""

#. type: cindex
#: zsh.texi:10291
#, no-wrap
msgid "globbing, ** special"
msgstr ""

#. type: table
#: zsh.texi:10300
msgid ""
"When this option is set and the default zsh-style globbing is in effect, the "
"pattern `@t{**/*}' can be abbreviated to `@t{**}' and the pattern "
"`@t{***/*}' can be abbreviated to @t{***}.  Hence `@t{**.c}' finds a file "
"ending in @t{.c} in any subdirectory, and `@t{***.c}' does the same while "
"also following symbolic links.  A @t{/} immediately after the `@t{**}' or "
"`@t{***}' forces the pattern to be treated as the unabbreviated form."
msgstr ""

#. type: pindex
#: zsh.texi:10301
#, no-wrap
msgid "GLOB_SUBST"
msgstr ""

#. type: pindex
#: zsh.texi:10302
#, no-wrap
msgid "NO_GLOB_SUBST"
msgstr ""

#. type: pindex
#: zsh.texi:10303
#, no-wrap
msgid "GLOBSUBST"
msgstr ""

#. type: pindex
#: zsh.texi:10304
#, no-wrap
msgid "NOGLOBSUBST"
msgstr ""

#. type: item
#: zsh.texi:10305
#, no-wrap
msgid "@t{GLOB_SUBST} <C> <K> <S>"
msgstr ""

#. type: table
#: zsh.texi:10311
msgid ""
"Treat any characters resulting from parameter expansion as being eligible "
"for filename expansion and filename generation, and any characters resulting "
"from command substitution as being eligible for filename generation.  Braces "
"(and commas in between) do not become eligible for expansion."
msgstr ""

#. type: t{#1}
#: zsh.texi:10312 zsh.texi:10316
#, no-wrap
msgid "HIST_SUBST_PATTERN"
msgstr ""

#. type: pindex
#: zsh.texi:10313
#, no-wrap
msgid "NO_HIST_SUBST_PATTERN"
msgstr ""

#. type: pindex
#: zsh.texi:10314
#, no-wrap
msgid "HISTSUBSTPATTERN"
msgstr ""

#. type: pindex
#: zsh.texi:10315
#, no-wrap
msgid "NOHISTSUBSTPATTERN"
msgstr ""

#. type: table
#: zsh.texi:10322
msgid ""
"Substitutions using the @t{:s} and @t{:&} history modifiers are performed "
"with pattern matching instead of string matching.  This occurs wherever "
"history modifiers are valid, including glob qualifiers and parameters.  See "
"@ref{Modifiers}."
msgstr ""

#. type: table
#: zsh.texi:10323 zsh.texi:12579
#, no-wrap
msgid "IGNORE_BRACES"
msgstr ""

#. type: pindex
#: zsh.texi:10324
#, no-wrap
msgid "NO_IGNORE_BRACES"
msgstr ""

#. type: pindex
#: zsh.texi:10325
#, no-wrap
msgid "IGNOREBRACES"
msgstr ""

#. type: pindex
#: zsh.texi:10326
#, no-wrap
msgid "NOIGNOREBRACES"
msgstr ""

#. type: cindex
#: zsh.texi:10327
#, no-wrap
msgid "disabling brace expansion"
msgstr ""

#. type: cindex
#: zsh.texi:10328
#, no-wrap
msgid "brace expansion, disabling"
msgstr ""

#. type: cindex
#: zsh.texi:10329
#, no-wrap
msgid "expansion, brace, disabling"
msgstr ""

#. type: item
#: zsh.texi:10330
#, no-wrap
msgid "@t{IGNORE_BRACES} (@t{-I}) <S>"
msgstr ""

#. type: table
#: zsh.texi:10333
msgid ""
"Do not perform brace expansion.  For historical reasons this also includes "
"the effect of the @t{IGNORE_CLOSE_BRACES} option."
msgstr ""

#. type: t{#1}
#: zsh.texi:10334 zsh.texi:10338
#, no-wrap
msgid "IGNORE_CLOSE_BRACES"
msgstr ""

#. type: pindex
#: zsh.texi:10335
#, no-wrap
msgid "NO_IGNORE_CLOSE_BRACES"
msgstr ""

#. type: pindex
#: zsh.texi:10336
#, no-wrap
msgid "IGNORECLOSEBRACES"
msgstr ""

#. type: pindex
#: zsh.texi:10337
#, no-wrap
msgid "NOIGNORECLOSEBRACES"
msgstr ""

#. type: table
#: zsh.texi:10346
msgid ""
"When neither this option nor @t{IGNORE_BRACES} is set, a sole close brace "
"character `@t{@}}' is syntactically significant at any point on a command "
"line.  This has the effect that no semicolon or newline is necessary before "
"the brace terminating a function or current shell construct.  When either "
"option is set, a closing brace is syntactically significant only in command "
"position.  Unlike @t{IGNORE_BRACES}, this option does not disable brace "
"expansion."
msgstr ""

#. type: table
#: zsh.texi:10350
msgid ""
"For example, with both options unset a function may be defined in the "
"following fashion:"
msgstr ""

#. type: example
#: zsh.texi:10354
#, no-wrap
msgid "args() @{ echo $# @}\n"
msgstr ""

#. type: table
#: zsh.texi:10359
msgid ""
"while if either option is set, this does not work and something equivalent "
"to the following is required:"
msgstr ""

#. type: example
#: zsh.texi:10363
#, no-wrap
msgid "args() @{ echo $#; @}\n"
msgstr ""

#. type: pindex
#: zsh.texi:10367
#, no-wrap
msgid "KSH_GLOB"
msgstr ""

#. type: pindex
#: zsh.texi:10368
#, no-wrap
msgid "NO_KSH_GLOB"
msgstr ""

#. type: pindex
#: zsh.texi:10369
#, no-wrap
msgid "KSHGLOB"
msgstr ""

#. type: pindex
#: zsh.texi:10370
#, no-wrap
msgid "NOKSHGLOB"
msgstr ""

#. type: item
#: zsh.texi:10371
#, no-wrap
msgid "@t{KSH_GLOB} <K>"
msgstr ""

#. type: table
#: zsh.texi:10375
msgid ""
"In pattern matching, the interpretation of parentheses is affected by a "
"preceding `@t{@@}', `@t{*}', `@t{+}', `@t{?}' or `@t{!}'.  See @ref{Filename "
"Generation}."
msgstr ""

#. type: t{#1}
#: zsh.texi:10376 zsh.texi:10380
#, no-wrap
msgid "MAGIC_EQUAL_SUBST"
msgstr ""

#. type: pindex
#: zsh.texi:10377
#, no-wrap
msgid "NO_MAGIC_EQUAL_SUBST"
msgstr ""

#. type: pindex
#: zsh.texi:10378
#, no-wrap
msgid "MAGICEQUALSUBST"
msgstr ""

#. type: pindex
#: zsh.texi:10379
#, no-wrap
msgid "NOMAGICEQUALSUBST"
msgstr ""

#. type: table
#: zsh.texi:10389
msgid ""
"All unquoted arguments of the form `@var{anything}@t{=}@var{expression}' "
"appearing after the command name have filename expansion (that is, where "
"@var{expression} has a leading `@t{~}' or `@t{=}') performed on "
"@var{expression} as if it were a parameter assignment.  The argument is not "
"otherwise treated specially; it is passed to the command as a single "
"argument, and not used as an actual parameter assignment.  For example, in "
"@t{echo foo=~/bar:~/rod}, both occurrences of @t{~} would be replaced.  Note "
"that this happens anyway with @t{typeset} and similar statements."
msgstr ""

#. type: table
#: zsh.texi:10394
msgid ""
"This option respects the setting of the @t{KSH_TYPESET} option.  In other "
"words, if both options are in effect, arguments looking like assignments "
"will not undergo word splitting."
msgstr ""

#. type: table
#: zsh.texi:10395 zsh.texi:12561 zsh.texi:12662
#, no-wrap
msgid "MARK_DIRS"
msgstr ""

#. type: pindex
#: zsh.texi:10396
#, no-wrap
msgid "NO_MARK_DIRS"
msgstr ""

#. type: pindex
#: zsh.texi:10397
#, no-wrap
msgid "MARKDIRS"
msgstr ""

#. type: pindex
#: zsh.texi:10398
#, no-wrap
msgid "NOMARKDIRS"
msgstr ""

#. type: cindex
#: zsh.texi:10399
#, no-wrap
msgid "directories, marking"
msgstr ""

#. type: cindex
#: zsh.texi:10400
#, no-wrap
msgid "marking directories"
msgstr ""

#. type: item
#: zsh.texi:10401
#, no-wrap
msgid "@t{MARK_DIRS} (@t{-8}, ksh: @t{-X})"
msgstr ""

#. type: table
#: zsh.texi:10404
msgid ""
"Append a trailing `@t{/}' to all directory names resulting from filename "
"generation (globbing)."
msgstr ""

#. type: pindex
#: zsh.texi:10405
#, no-wrap
msgid "MULTIBYTE"
msgstr ""

#. type: pindex
#: zsh.texi:10406
#, no-wrap
msgid "NO_MULTIBYTE"
msgstr ""

#. type: pindex
#: zsh.texi:10407
#, no-wrap
msgid "NOMULTIBYTE"
msgstr ""

#. type: cindex
#: zsh.texi:10408
#, no-wrap
msgid "characters, multibyte, in expansion and globbing"
msgstr ""

#. type: cindex
#: zsh.texi:10409
#, no-wrap
msgid "multibyte characters, in expansion and globbing"
msgstr ""

#. type: item
#: zsh.texi:10410
#, no-wrap
msgid "@t{MULTIBYTE} <D>"
msgstr ""

#. type: table
#: zsh.texi:10416
msgid ""
"Respect multibyte characters when found in strings.  When this option is "
"set, strings are examined using the system library to determine how many "
"bytes form a character, depending on the current locale.  This affects the "
"way characters are counted in pattern matching, parameter values and various "
"delimiters."
msgstr ""

#. type: table
#: zsh.texi:10421
msgid ""
"The option is on by default if the shell was compiled with "
"@t{MULTIBYTE_SUPPORT}; otherwise it is off by default and has no effect if "
"turned on."
msgstr ""

#. type: table
#: zsh.texi:10429
msgid ""
"If the option is off a single byte is always treated as a single character.  "
"This setting is designed purely for examining strings known to contain raw "
"bytes or other values that may not be characters in the current locale.  It "
"is not necessary to unset the option merely because the character set for "
"the current locale does not contain multibyte characters."
msgstr ""

#. type: table
#: zsh.texi:10435
msgid ""
"The option does not affect the shell's editor, which always uses the locale "
"to determine multibyte characters.  This is because the character set "
"displayed by the terminal emulator is independent of shell settings."
msgstr ""

#. type: pindex
#: zsh.texi:10436
#, no-wrap
msgid "NOMATCH"
msgstr ""

#. type: pindex
#: zsh.texi:10437
#, no-wrap
msgid "NO_NOMATCH"
msgstr ""

#. type: pindex
#: zsh.texi:10438
#, no-wrap
msgid "NONOMATCH"
msgstr ""

#. type: cindex
#: zsh.texi:10439 zsh.texi:10451
#, no-wrap
msgid "globbing, no matches"
msgstr ""

#. type: item
#: zsh.texi:10440
#, no-wrap
msgid "@t{NOMATCH} (@t{+3}) <C> <Z>"
msgstr ""

#. type: table
#: zsh.texi:10446
msgid ""
"If a pattern for filename generation has no matches, print an error, instead "
"of leaving it unchanged in the argument list.  This also applies to file "
"expansion of an initial `@t{~}' or `@t{=}'."
msgstr ""

#. type: table
#: zsh.texi:10447 zsh.texi:12575
#, no-wrap
msgid "NULL_GLOB"
msgstr ""

#. type: pindex
#: zsh.texi:10448
#, no-wrap
msgid "NO_NULL_GLOB"
msgstr ""

#. type: pindex
#: zsh.texi:10449
#, no-wrap
msgid "NULLGLOB"
msgstr ""

#. type: pindex
#: zsh.texi:10450
#, no-wrap
msgid "NONULLGLOB"
msgstr ""

#. type: item
#: zsh.texi:10452
#, no-wrap
msgid "@t{NULL_GLOB} (@t{-G})"
msgstr ""

#. type: table
#: zsh.texi:10456
msgid ""
"If a pattern for filename generation has no matches, delete the pattern from "
"the argument list instead of reporting an error.  Overrides @t{NOMATCH}."
msgstr ""

#. type: t{#1}
#: zsh.texi:10457 zsh.texi:10462
#, no-wrap
msgid "NUMERIC_GLOB_SORT"
msgstr ""

#. type: pindex
#: zsh.texi:10458
#, no-wrap
msgid "NO_NUMERIC_GLOB_SORT"
msgstr ""

#. type: pindex
#: zsh.texi:10459
#, no-wrap
msgid "NUMERICGLOBSORT"
msgstr ""

#. type: pindex
#: zsh.texi:10460
#, no-wrap
msgid "NONUMERICGLOBSORT"
msgstr ""

#. type: cindex
#: zsh.texi:10461
#, no-wrap
msgid "globbing, sorting numerically"
msgstr ""

#. type: table
#: zsh.texi:10465
msgid ""
"If numeric filenames are matched by a filename generation pattern, sort the "
"filenames numerically rather than lexicographically."
msgstr ""

#. type: table
#: zsh.texi:10466 zsh.texi:12593
#, no-wrap
msgid "RC_EXPAND_PARAM"
msgstr ""

#. type: pindex
#: zsh.texi:10467
#, no-wrap
msgid "NO_RC_EXPAND_PARAM"
msgstr ""

#. type: pindex
#: zsh.texi:10468
#, no-wrap
msgid "RCEXPANDPARAM"
msgstr ""

#. type: pindex
#: zsh.texi:10469
#, no-wrap
msgid "NORCEXPANDPARAM"
msgstr ""

#. type: cindex
#: zsh.texi:10470
#, no-wrap
msgid "rc, parameter expansion style"
msgstr ""

#. type: cindex
#: zsh.texi:10471
#, no-wrap
msgid "parameter expansion style, rc"
msgstr ""

#. type: item
#: zsh.texi:10472
#, no-wrap
msgid "@t{RC_EXPAND_PARAM} (@t{-P})"
msgstr ""

#. type: table
#: zsh.texi:10479
msgid ""
"Array expansions of the form `@var{foo}@t{$@{}@var{xx}@t{@}}@var{bar}', "
"where the parameter @var{xx} is set to @t{(}@var{a b c}@t{)}, are "
"substituted with `@var{fooabar foobbar foocbar}' instead of the default "
"`@var{fooa b cbar}'.  Note that an empty array will therefore cause all "
"arguments to be removed."
msgstr ""

#. type: pindex
#: zsh.texi:10480 zsh.texi:10486 zsh.texi:29980
#, no-wrap
msgid "REMATCH_PCRE"
msgstr ""

#. type: pindex
#: zsh.texi:10481
#, no-wrap
msgid "NO_REMATCH_PCRE"
msgstr ""

#. type: pindex
#: zsh.texi:10482
#, no-wrap
msgid "REMATCHPCRE"
msgstr ""

#. type: pindex
#: zsh.texi:10483
#, no-wrap
msgid "NOREMATCHPCRE"
msgstr ""

#. type: cindex
#: zsh.texi:10484
#, no-wrap
msgid "regexp, PCRE"
msgstr ""

#. type: cindex
#: zsh.texi:10485
#, no-wrap
msgid "PCRE, regexp"
msgstr ""

#. type: table
#: zsh.texi:10492
msgid ""
"If set, regular expression matching with the @t{=~} operator will use "
"Perl-Compatible Regular Expressions from the PCRE library.  (The "
"@t{zsh/pcre} module must be available.)  If not set, regular expressions "
"will use the extended regexp syntax provided by the system libraries."
msgstr ""

#. type: pindex
#: zsh.texi:10493
#, no-wrap
msgid "SH_GLOB"
msgstr ""

#. type: pindex
#: zsh.texi:10494
#, no-wrap
msgid "NO_SH_GLOB"
msgstr ""

#. type: pindex
#: zsh.texi:10495
#, no-wrap
msgid "SHGLOB"
msgstr ""

#. type: pindex
#: zsh.texi:10496
#, no-wrap
msgid "NOSHGLOB"
msgstr ""

#. type: cindex
#: zsh.texi:10497
#, no-wrap
msgid "sh, globbing style"
msgstr ""

#. type: cindex
#: zsh.texi:10498
#, no-wrap
msgid "globbing style, sh"
msgstr ""

#. type: item
#: zsh.texi:10499
#, no-wrap
msgid "@t{SH_GLOB} <K> <S>"
msgstr ""

#. type: table
#: zsh.texi:10509
msgid ""
"Disables the special meaning of `@t{(}', `@t{|}', `@t{)}' and '@t{<}' for "
"globbing the result of parameter and command substitutions, and in some "
"other places where the shell accepts patterns.  If @t{SH_GLOB} is set but "
"@t{KSH_GLOB} is not, the shell allows the interpretation of subshell "
"expressions enclosed in parentheses in some cases where there is no space "
"before the opening parenthesis, e.g. @t{!(true)} is interpreted as if there "
"were a space after the @t{!}.  This option is set by default if zsh is "
"invoked as @t{sh} or @t{ksh}."
msgstr ""

#. type: pindex
#: zsh.texi:10510
#, no-wrap
msgid "UNSET"
msgstr ""

#. type: pindex
#: zsh.texi:10511
#, no-wrap
msgid "NO_UNSET"
msgstr ""

#. type: pindex
#: zsh.texi:10512
#, no-wrap
msgid "NOUNSET"
msgstr ""

#. type: cindex
#: zsh.texi:10513
#, no-wrap
msgid "parameters, substituting unset"
msgstr ""

#. type: cindex
#: zsh.texi:10514
#, no-wrap
msgid "unset parameters, substituting"
msgstr ""

#. type: item
#: zsh.texi:10515
#, no-wrap
msgid "@t{UNSET} (@t{+u}, ksh: @t{+u}) <K> <S> <Z>"
msgstr ""

#. type: table
#: zsh.texi:10520
msgid ""
"Treat unset parameters as if they were empty when substituting, and as if "
"they were zero when reading their values in arithmetic expansion and "
"arithmetic commands.  Otherwise they are treated as an error."
msgstr ""

#. type: t{#1}
#: zsh.texi:10521 zsh.texi:10526
#, no-wrap
msgid "WARN_CREATE_GLOBAL"
msgstr ""

#. type: pindex
#: zsh.texi:10522
#, no-wrap
msgid "NO_WARN_CREATE_GLOBAL"
msgstr ""

#. type: pindex
#: zsh.texi:10523
#, no-wrap
msgid "WARNCREATEGLOBAL"
msgstr ""

#. type: pindex
#: zsh.texi:10524
#, no-wrap
msgid "NOWARNCREATEGLOBAL"
msgstr ""

#. type: cindex
#: zsh.texi:10525
#, no-wrap
msgid "parameters, warning when created globally"
msgstr ""

#. type: table
#: zsh.texi:10534
msgid ""
"Print a warning message when a global parameter is created in a function by "
"an assignment or in math context.  This often indicates that a parameter has "
"not been declared local when it should have been.  Parameters explicitly "
"declared global from within a function using @t{typeset -g} do not cause a "
"warning.  Note that there is no warning when a local parameter is assigned "
"to in a nested function, which may also indicate an error."
msgstr ""

#. type: t{#1}
#: zsh.texi:10535 zsh.texi:10540
#, no-wrap
msgid "WARN_NESTED_VAR"
msgstr ""

#. type: pindex
#: zsh.texi:10536
#, no-wrap
msgid "NO_WARN_NESTED_VAR"
msgstr ""

#. type: pindex
#: zsh.texi:10537
#, no-wrap
msgid "WARNNESTEDVAR"
msgstr ""

#. type: pindex
#: zsh.texi:10538
#, no-wrap
msgid "NO_WARNNESTEDVAR"
msgstr ""

#. type: cindex
#: zsh.texi:10539
#, no-wrap
msgid "parameters, warning when setting in enclosing scope"
msgstr ""

#. type: table
#: zsh.texi:10551
msgid ""
"Print a warning message when an existing parameter from an enclosing "
"function scope, or global, is set in a function by an assignment or in math "
"context.  Assignment to shell special parameters does not cause a warning.  "
"This is the companion to @t{WARN_CREATE_GLOBAL} as in this case the warning "
"is only printed when a parameter is @emph{not} created.  Where possible, use "
"of @t{typeset -g} to set the parameter suppresses the error, but note that "
"this needs to be used every time the parameter is set.  To restrict the "
"effect of this option to a single function scope, use `@t{functions -W}'."
msgstr ""

#. type: table
#: zsh.texi:10556
msgid ""
"For example, the following code produces a warning for the assignment inside "
"the function @t{nested} as that overrides the value within @t{toplevel}"
msgstr ""

#. type: example
#: zsh.texi:10568
#, no-wrap
msgid ""
"toplevel() @{\n"
"  local foo=\"in fn\"\n"
"  nested\n"
"@}\n"
"nested() @{\n"
"     foo=\"in nested\"\n"
"@}\n"
"setopt warn_nested_var\n"
"toplevel\n"
msgstr ""

#. type: subsection
#: zsh.texi:10574
#, no-wrap
msgid "History"
msgstr ""

#. type: pindex
#: zsh.texi:10577
#, no-wrap
msgid "APPEND_HISTORY"
msgstr ""

#. type: pindex
#: zsh.texi:10578
#, no-wrap
msgid "NO_APPEND_HISTORY"
msgstr ""

#. type: pindex
#: zsh.texi:10579
#, no-wrap
msgid "APPENDHISTORY"
msgstr ""

#. type: pindex
#: zsh.texi:10580
#, no-wrap
msgid "NOAPPENDHISTORY"
msgstr ""

#. type: cindex
#: zsh.texi:10581
#, no-wrap
msgid "history, appending to a file"
msgstr ""

#. type: item
#: zsh.texi:10582
#, no-wrap
msgid "@t{APPEND_HISTORY} <D>"
msgstr ""

#. type: table
#: zsh.texi:10590
msgid ""
"If this is set, zsh sessions will append their history list to the history "
"file, rather than replace it. Thus, multiple parallel zsh sessions will all "
"have the new entries from their history lists added to the history file, in "
"the order that they exit.  The file will still be periodically re-written to "
"trim it when the number of lines grows 20% beyond the value specified by "
"@t{$SAVEHIST} (see also the @t{HIST_SAVE_BY_COPY} option)."
msgstr ""

#. type: pindex
#: zsh.texi:10591
#, no-wrap
msgid "BANG_HIST"
msgstr ""

#. type: pindex
#: zsh.texi:10592
#, no-wrap
msgid "NO_BANG_HIST"
msgstr ""

#. type: pindex
#: zsh.texi:10593
#, no-wrap
msgid "BANGHIST"
msgstr ""

#. type: pindex
#: zsh.texi:10594
#, no-wrap
msgid "NOBANGHIST"
msgstr ""

#. type: cindex
#: zsh.texi:10595
#, no-wrap
msgid "history, enable substitution"
msgstr ""

#. type: cindex
#: zsh.texi:10596
#, no-wrap
msgid "enable history substitution"
msgstr ""

#. type: item
#: zsh.texi:10597
#, no-wrap
msgid "@t{BANG_HIST} (@t{+K}) <C> <Z>"
msgstr ""

#. type: table
#: zsh.texi:10600
msgid ""
"Perform textual history expansion, @cite{csh}-style, treating the character "
"`@t{!}' specially."
msgstr ""

#. type: pindex
#: zsh.texi:10601
#, no-wrap
msgid "EXTENDED_HISTORY"
msgstr ""

#. type: pindex
#: zsh.texi:10602
#, no-wrap
msgid "NO_EXTENDED_HISTORY"
msgstr ""

#. type: pindex
#: zsh.texi:10603
#, no-wrap
msgid "EXTENDEDHISTORY"
msgstr ""

#. type: pindex
#: zsh.texi:10604
#, no-wrap
msgid "NOEXTENDEDHISTORY"
msgstr ""

#. type: cindex
#: zsh.texi:10605
#, no-wrap
msgid "history, timestamping"
msgstr ""

#. type: item
#: zsh.texi:10606
#, no-wrap
msgid "@t{EXTENDED_HISTORY} <C>"
msgstr ""

#. type: table
#: zsh.texi:10610
msgid ""
"Save each command's beginning timestamp (in seconds since the epoch)  and "
"the duration (in seconds) to the history file.  The format of this prefixed "
"data is:"
msgstr ""

#. type: table
#: zsh.texi:10613
msgid ""
"`@t{: }@var{<beginning time>}@t{:}@var{<elapsed "
"seconds>}@t{;}@var{<command>}'."
msgstr ""

#. type: t{#1}
#: zsh.texi:10614 zsh.texi:10618
#, no-wrap
msgid "HIST_ALLOW_CLOBBER"
msgstr ""

#. type: pindex
#: zsh.texi:10615
#, no-wrap
msgid "NO_HIST_ALLOW_CLOBBER"
msgstr ""

#. type: pindex
#: zsh.texi:10616
#, no-wrap
msgid "HISTALLOWCLOBBER"
msgstr ""

#. type: pindex
#: zsh.texi:10617
#, no-wrap
msgid "NOHISTALLOWCLOBBER"
msgstr ""

#. type: table
#: zsh.texi:10621
msgid ""
"Add `@t{|}' to output redirections in the history.  This allows history "
"references to clobber files even when @t{CLOBBER} is unset."
msgstr ""

#. type: pindex
#: zsh.texi:10622
#, no-wrap
msgid "HIST_BEEP"
msgstr ""

#. type: pindex
#: zsh.texi:10623
#, no-wrap
msgid "NO_HIST_BEEP"
msgstr ""

#. type: pindex
#: zsh.texi:10624
#, no-wrap
msgid "HISTBEEP"
msgstr ""

#. type: pindex
#: zsh.texi:10625
#, no-wrap
msgid "NOHISTBEEP"
msgstr ""

#. type: cindex
#: zsh.texi:10626
#, no-wrap
msgid "history beeping"
msgstr ""

#. type: cindex
#: zsh.texi:10627
#, no-wrap
msgid "beep, history"
msgstr ""

#. type: item
#: zsh.texi:10628
#, no-wrap
msgid "@t{HIST_BEEP} <D>"
msgstr ""

#. type: table
#: zsh.texi:10631
msgid ""
"Beep in ZLE when a widget attempts to access a history entry which isn't "
"there."
msgstr ""

#. type: t{#1}
#: zsh.texi:10632 zsh.texi:10637
#, no-wrap
msgid "HIST_EXPIRE_DUPS_FIRST"
msgstr ""

#. type: pindex
#: zsh.texi:10633
#, no-wrap
msgid "NO_HIST_EXPIRE_DUPS_FIRST"
msgstr ""

#. type: pindex
#: zsh.texi:10634
#, no-wrap
msgid "HISTEXPIREDUPSFIRST"
msgstr ""

#. type: pindex
#: zsh.texi:10635
#, no-wrap
msgid "NOHISTEXPIREDUPSFIRST"
msgstr ""

#. type: cindex
#: zsh.texi:10636
#, no-wrap
msgid "history, expiring duplicates"
msgstr ""

#. type: table
#: zsh.texi:10645
msgid ""
"If the internal history needs to be trimmed to add the current command line, "
"setting this option will cause the oldest history event that has a duplicate "
"to be lost before losing a unique event from the list.  You should be sure "
"to set the value of @t{HISTSIZE} to a larger number than @t{SAVEHIST} in "
"order to give you some room for the duplicated events, otherwise this option "
"will behave just like @t{HIST_IGNORE_ALL_DUPS} once the history fills up "
"with unique events."
msgstr ""

#. type: t{#1}
#: zsh.texi:10646 zsh.texi:10650
#, no-wrap
msgid "HIST_FCNTL_LOCK"
msgstr ""

#. type: pindex
#: zsh.texi:10647
#, no-wrap
msgid "NO_HIST_FCNTL_LOCK"
msgstr ""

#. type: pindex
#: zsh.texi:10648
#, no-wrap
msgid "HISTFCNTLLOCK"
msgstr ""

#. type: pindex
#: zsh.texi:10649
#, no-wrap
msgid "NOHISTFCNTLLOCK"
msgstr ""

#. type: table
#: zsh.texi:10657
msgid ""
"When writing out the history file, by default zsh uses ad-hoc file locking "
"to avoid known problems with locking on some operating systems.  With this "
"option locking is done by means of the system's @t{fcntl} call, where this "
"method is available.  On recent operating systems this may provide better "
"performance, in particular avoiding history corruption when files are stored "
"on NFS."
msgstr ""

#. type: t{#1}
#: zsh.texi:10658 zsh.texi:10663
#, no-wrap
msgid "HIST_FIND_NO_DUPS"
msgstr ""

#. type: pindex
#: zsh.texi:10659
#, no-wrap
msgid "NO_HIST_FIND_NO_DUPS"
msgstr ""

#. type: pindex
#: zsh.texi:10660
#, no-wrap
msgid "HISTFINDNODUPS"
msgstr ""

#. type: pindex
#: zsh.texi:10661
#, no-wrap
msgid "NOHISTFINDNODUPS"
msgstr ""

#. type: cindex
#: zsh.texi:10662
#, no-wrap
msgid "history, ignoring duplicates in search"
msgstr ""

#. type: table
#: zsh.texi:10667
msgid ""
"When searching for history entries in the line editor, do not display "
"duplicates of a line previously found, even if the duplicates are not "
"contiguous."
msgstr ""

#. type: t{#1}
#: zsh.texi:10668 zsh.texi:10673
#, no-wrap
msgid "HIST_IGNORE_ALL_DUPS"
msgstr ""

#. type: pindex
#: zsh.texi:10669
#, no-wrap
msgid "NO_HIST_IGNORE_ALL_DUPS"
msgstr ""

#. type: pindex
#: zsh.texi:10670
#, no-wrap
msgid "HISTIGNOREALLDUPS"
msgstr ""

#. type: pindex
#: zsh.texi:10671
#, no-wrap
msgid "NOHISTIGNOREALLDUPS"
msgstr ""

#. type: cindex
#: zsh.texi:10672
#, no-wrap
msgid "history, ignoring all duplicates"
msgstr ""

#. type: table
#: zsh.texi:10677
msgid ""
"If a new command line being added to the history list duplicates an older "
"one, the older command is removed from the list (even if it is not the "
"previous event)."
msgstr ""

#. type: table
#: zsh.texi:10678 zsh.texi:12623
#, no-wrap
msgid "HIST_IGNORE_DUPS"
msgstr ""

#. type: pindex
#: zsh.texi:10679
#, no-wrap
msgid "NO_HIST_IGNORE_DUPS"
msgstr ""

#. type: pindex
#: zsh.texi:10680
#, no-wrap
msgid "HISTIGNOREDUPS"
msgstr ""

#. type: pindex
#: zsh.texi:10681
#, no-wrap
msgid "NOHISTIGNOREDUPS"
msgstr ""

#. type: cindex
#: zsh.texi:10682
#, no-wrap
msgid "history, ignoring duplicates"
msgstr ""

#. type: item
#: zsh.texi:10683
#, no-wrap
msgid "@t{HIST_IGNORE_DUPS} (@t{-h})"
msgstr ""

#. type: table
#: zsh.texi:10686
msgid ""
"Do not enter command lines into the history list if they are duplicates of "
"the previous event."
msgstr ""

#. type: table
#: zsh.texi:10687 zsh.texi:12621
#, no-wrap
msgid "HIST_IGNORE_SPACE"
msgstr ""

#. type: pindex
#: zsh.texi:10688
#, no-wrap
msgid "NO_HIST_IGNORE_SPACE"
msgstr ""

#. type: pindex
#: zsh.texi:10689
#, no-wrap
msgid "HISTIGNORESPACE"
msgstr ""

#. type: pindex
#: zsh.texi:10690
#, no-wrap
msgid "NOHISTIGNORESPACE"
msgstr ""

#. type: cindex
#: zsh.texi:10691
#, no-wrap
msgid "history, ignoring spaces"
msgstr ""

#. type: item
#: zsh.texi:10692
#, no-wrap
msgid "@t{HIST_IGNORE_SPACE} (@t{-g})"
msgstr ""

#. type: table
#: zsh.texi:10701
msgid ""
"Remove command lines from the history list when the first character on the "
"line is a space, or when one of the expanded aliases contains a leading "
"space.  Only normal aliases (not global or suffix aliases)  have this "
"behaviour.  Note that the command lingers in the internal history until the "
"next command is entered before it vanishes, allowing you to briefly reuse or "
"edit the line.  If you want to make it vanish right away without entering "
"another command, type a space and press return."
msgstr ""

#. type: t{#1}
#: zsh.texi:10702 zsh.texi:10706
#, no-wrap
msgid "HIST_LEX_WORDS"
msgstr ""

#. type: pindex
#: zsh.texi:10703
#, no-wrap
msgid "NO_HIST_LEX_WORDS"
msgstr ""

#. type: pindex
#: zsh.texi:10704
#, no-wrap
msgid "HISTLEXWORDS"
msgstr ""

#. type: pindex
#: zsh.texi:10705
#, no-wrap
msgid "NOHISTLEXWORDS"
msgstr ""

#. type: table
#: zsh.texi:10716
msgid ""
"By default, shell history that is read in from files is split into words on "
"all white space.  This means that arguments with quoted whitespace are not "
"correctly handled, with the consequence that references to words in history "
"lines that have been read from a file may be inaccurate.  When this option "
"is set, words read in from a history file are divided up in a similar "
"fashion to normal shell command line handling.  Although this produces more "
"accurately delimited words, if the size of the history file is large this "
"can be slow.  Trial and error is necessary to decide."
msgstr ""

#. type: t{#1}
#: zsh.texi:10717 zsh.texi:10721
#, no-wrap
msgid "HIST_NO_FUNCTIONS"
msgstr ""

#. type: pindex
#: zsh.texi:10718
#, no-wrap
msgid "NO_HIST_NO_FUNCTIONS"
msgstr ""

#. type: pindex
#: zsh.texi:10719
#, no-wrap
msgid "HISTNOFUNCTIONS"
msgstr ""

#. type: pindex
#: zsh.texi:10720
#, no-wrap
msgid "NOHISTNOFUNCTIONS"
msgstr ""

#. type: table
#: zsh.texi:10726
msgid ""
"Remove function definitions from the history list.  Note that the function "
"lingers in the internal history until the next command is entered before it "
"vanishes, allowing you to briefly reuse or edit the definition."
msgstr ""

#. type: t{#1}
#: zsh.texi:10727 zsh.texi:10731
#, no-wrap
msgid "HIST_NO_STORE"
msgstr ""

#. type: pindex
#: zsh.texi:10728
#, no-wrap
msgid "NO_HIST_NO_STORE"
msgstr ""

#. type: pindex
#: zsh.texi:10729
#, no-wrap
msgid "HISTNOSTORE"
msgstr ""

#. type: pindex
#: zsh.texi:10730
#, no-wrap
msgid "NOHISTNOSTORE"
msgstr ""

#. type: table
#: zsh.texi:10737
msgid ""
"Remove the @t{history} (@t{fc -l}) command from the history list when "
"invoked.  Note that the command lingers in the internal history until the "
"next command is entered before it vanishes, allowing you to briefly reuse or "
"edit the line."
msgstr ""

#. type: t{#1}
#: zsh.texi:10738 zsh.texi:10742
#, no-wrap
msgid "HIST_REDUCE_BLANKS"
msgstr ""

#. type: pindex
#: zsh.texi:10739
#, no-wrap
msgid "NO_HIST_REDUCE_BLANKS"
msgstr ""

#. type: pindex
#: zsh.texi:10740
#, no-wrap
msgid "HISTREDUCEBLANKS"
msgstr ""

#. type: pindex
#: zsh.texi:10741
#, no-wrap
msgid "NOHISTREDUCEBLANKS"
msgstr ""

#. type: table
#: zsh.texi:10745
msgid ""
"Remove superfluous blanks from each command line being added to the history "
"list."
msgstr ""

#. type: pindex
#: zsh.texi:10746
#, no-wrap
msgid "HIST_SAVE_BY_COPY"
msgstr ""

#. type: pindex
#: zsh.texi:10747
#, no-wrap
msgid "NO_HIST_SAVE_BY_COPY"
msgstr ""

#. type: pindex
#: zsh.texi:10748
#, no-wrap
msgid "HISTSAVEBYCOPY"
msgstr ""

#. type: pindex
#: zsh.texi:10749
#, no-wrap
msgid "NOHISTSAVEBYCOPY"
msgstr ""

#. type: item
#: zsh.texi:10750
#, no-wrap
msgid "@t{HIST_SAVE_BY_COPY} <D>"
msgstr ""

#. type: table
#: zsh.texi:10760
msgid ""
"When the history file is re-written, we normally write out a copy of the "
"file named @t{$HISTFILE.new} and then rename it over the old one.  However, "
"if this option is unset, we instead truncate the old history file and write "
"out the new version in-place.  If one of the history-appending options is "
"enabled, this option only has an effect when the enlarged history file needs "
"to be re-written to trim it down to size.  Disable this only if you have "
"special needs, as doing so makes it possible to lose history entries if zsh "
"gets interrupted during the save."
msgstr ""

#. type: table
#: zsh.texi:10765
msgid ""
"When writing out a copy of the history file, zsh preserves the old file's "
"permissions and group information, but will refuse to write out a new file "
"if it would change the history file's owner."
msgstr ""

#. type: t{#1}
#: zsh.texi:10766 zsh.texi:10770
#, no-wrap
msgid "HIST_SAVE_NO_DUPS"
msgstr ""

#. type: pindex
#: zsh.texi:10767
#, no-wrap
msgid "NO_HIST_SAVE_NO_DUPS"
msgstr ""

#. type: pindex
#: zsh.texi:10768
#, no-wrap
msgid "HISTSAVENODUPS"
msgstr ""

#. type: pindex
#: zsh.texi:10769
#, no-wrap
msgid "NOHISTSAVENODUPS"
msgstr ""

#. type: table
#: zsh.texi:10773
msgid ""
"When writing out the history file, older commands that duplicate newer ones "
"are omitted."
msgstr ""

#. type: t{#1}
#: zsh.texi:10774 zsh.texi:10779
#, no-wrap
msgid "HIST_VERIFY"
msgstr ""

#. type: pindex
#: zsh.texi:10775
#, no-wrap
msgid "NO_HIST_VERIFY"
msgstr ""

#. type: pindex
#: zsh.texi:10776
#, no-wrap
msgid "HISTVERIFY"
msgstr ""

#. type: pindex
#: zsh.texi:10777
#, no-wrap
msgid "NOHISTVERIFY"
msgstr ""

#. type: cindex
#: zsh.texi:10778
#, no-wrap
msgid "history, verifying substitution"
msgstr ""

#. type: table
#: zsh.texi:10783
msgid ""
"Whenever the user enters a line with history expansion, don't execute the "
"line directly; instead, perform history expansion and reload the line into "
"the editing buffer."
msgstr ""

#. type: t{#1}
#: zsh.texi:10784 zsh.texi:10789
#, no-wrap
msgid "INC_APPEND_HISTORY"
msgstr ""

#. type: pindex
#: zsh.texi:10785
#, no-wrap
msgid "NO_INC_APPEND_HISTORY"
msgstr ""

#. type: pindex
#: zsh.texi:10786
#, no-wrap
msgid "INCAPPENDHISTORY"
msgstr ""

#. type: pindex
#: zsh.texi:10787
#, no-wrap
msgid "NOINCAPPENDHISTORY"
msgstr ""

#. type: cindex
#: zsh.texi:10788
#, no-wrap
msgid "history, incremental appending to a file"
msgstr ""

#. type: table
#: zsh.texi:10796
msgid ""
"This option works like @t{APPEND_HISTORY} except that new history lines are "
"added to the @t{$HISTFILE} incrementally (as soon as they are entered), "
"rather than waiting until the shell exits.  The file will still be "
"periodically re-written to trim it when the number of lines grows 20% beyond "
"the value specified by @t{$SAVEHIST} (see also the @t{HIST_SAVE_BY_COPY} "
"option)."
msgstr ""

#. type: t{#1}
#: zsh.texi:10797 zsh.texi:10802
#, no-wrap
msgid "INC_APPEND_HISTORY_TIME"
msgstr ""

#. type: pindex
#: zsh.texi:10798
#, no-wrap
msgid "NO_INC_APPEND_HISTORY_TIME"
msgstr ""

#. type: pindex
#: zsh.texi:10799
#, no-wrap
msgid "INCAPPENDHISTORYTIME"
msgstr ""

#. type: pindex
#: zsh.texi:10800
#, no-wrap
msgid "NOINCAPPENDHISTORYTIME"
msgstr ""

#. type: cindex
#: zsh.texi:10801
#, no-wrap
msgid "history, incremental appending to a file with time"
msgstr ""

#. type: table
#: zsh.texi:10809
msgid ""
"This option is a variant of @t{INC_APPEND_HISTORY} in which, where possible, "
"the history entry is written out to the file after the command is finished, "
"so that the time taken by the command is recorded correctly in the history "
"file in @t{EXTENDED_HISTORY} format.  This means that the history entry will "
"not be available immediately from other instances of the shell that are "
"using the same history file."
msgstr ""

#. type: table
#: zsh.texi:10814
msgid ""
"This option is only useful if @t{INC_APPEND_HISTORY} and @t{SHARE_HISTORY} "
"are turned off.  The three options should be considered mutually exclusive."
msgstr ""

#. type: pindex
#: zsh.texi:10815
#, no-wrap
msgid "SHARE_HISTORY"
msgstr ""

#. type: pindex
#: zsh.texi:10816
#, no-wrap
msgid "NO_SHARE_HISTORY"
msgstr ""

#. type: pindex
#: zsh.texi:10817
#, no-wrap
msgid "SHAREHISTORY"
msgstr ""

#. type: pindex
#: zsh.texi:10818
#, no-wrap
msgid "NOSHAREHISTORY"
msgstr ""

#. type: cindex
#: zsh.texi:10819
#, no-wrap
msgid "share history"
msgstr ""

#. type: cindex
#: zsh.texi:10820
#, no-wrap
msgid "history, sharing"
msgstr ""

#. type: item
#: zsh.texi:10821
#, no-wrap
msgid "@t{SHARE_HISTORY} <K>"
msgstr ""

#. type: table
#: zsh.texi:10830
msgid ""
"This option both imports new commands from the history file, and also causes "
"your typed commands to be appended to the history file (the latter is like "
"specifying @t{INC_APPEND_HISTORY}, which should be turned off if this option "
"is in effect).  The history lines are also output with timestamps ala "
"@t{EXTENDED_HISTORY} (which makes it easier to find the spot where we left "
"off reading the file after it gets re-written)."
msgstr ""

#. type: table
#: zsh.texi:10837
msgid ""
"By default, history movement commands visit the imported lines as well as "
"the local lines, but you can toggle this on and off with the "
"set-local-history zle binding.  It is also possible to create a zle widget "
"that will make some commands ignore imported commands, and some include "
"them."
msgstr ""

#. type: table
#: zsh.texi:10844
msgid ""
"If you find that you want more control over when commands get imported, you "
"may wish to turn @t{SHARE_HISTORY} off, @t{INC_APPEND_HISTORY} or "
"@t{INC_APPEND_HISTORY_TIME} (see above) on, and then manually import "
"commands whenever you need them using `@t{fc -RI}'."
msgstr ""

#. type: subsection
#: zsh.texi:10849
#, no-wrap
msgid "Initialisation"
msgstr ""

#. type: table
#: zsh.texi:10852 zsh.texi:12615 zsh.texi:12664
#, no-wrap
msgid "ALL_EXPORT"
msgstr ""

#. type: pindex
#: zsh.texi:10853
#, no-wrap
msgid "NO_ALL_EXPORT"
msgstr ""

#. type: pindex
#: zsh.texi:10854
#, no-wrap
msgid "ALLEXPORT"
msgstr ""

#. type: pindex
#: zsh.texi:10855
#, no-wrap
msgid "NOALLEXPORT"
msgstr ""

#. type: cindex
#: zsh.texi:10856
#, no-wrap
msgid "export, automatic"
msgstr ""

#. type: item
#: zsh.texi:10857
#, no-wrap
msgid "@t{ALL_EXPORT} (@t{-a}, ksh: @t{-a})"
msgstr ""

#. type: table
#: zsh.texi:10859
msgid "All parameters subsequently defined are automatically exported."
msgstr ""

#. type: pindex
#: zsh.texi:10860
#, no-wrap
msgid "GLOBAL_EXPORT"
msgstr ""

#. type: pindex
#: zsh.texi:10861
#, no-wrap
msgid "NO_GLOBAL_EXPORT"
msgstr ""

#. type: pindex
#: zsh.texi:10862
#, no-wrap
msgid "GLOBALEXPORT"
msgstr ""

#. type: pindex
#: zsh.texi:10863
#, no-wrap
msgid "NOGLOBALEXPORT"
msgstr ""

#. type: cindex
#: zsh.texi:10864
#, no-wrap
msgid "environment, and local parameters"
msgstr ""

#. type: item
#: zsh.texi:10865
#, no-wrap
msgid "@t{GLOBAL_EXPORT} <Z>"
msgstr ""

#. type: table
#: zsh.texi:10873
msgid ""
"If this option is set, passing the @t{-x} flag to the builtins @t{declare}, "
"@t{float}, @t{integer}, @t{readonly} and @t{typeset} (but not @t{local})  "
"will also set the @t{-g} flag; hence parameters exported to the environment "
"will not be made local to the enclosing function, unless they were already "
"or the flag @t{+g} is given explicitly.  If the option is unset, exported "
"parameters will be made local in just the same way as any other parameter."
msgstr ""

#. type: table
#: zsh.texi:10880
msgid ""
"This option is set by default for backward compatibility; it is not "
"recommended that its behaviour be relied upon.  Note that the builtin "
"@t{export} always sets both the @t{-x} and @t{-g} flags, and hence its "
"effect extends beyond the scope of the enclosing function; this is the most "
"portable way to achieve this behaviour."
msgstr ""

#. type: cindex
#: zsh.texi:10881
#, no-wrap
msgid "exporting, and local parameters"
msgstr ""

#. type: pindex
#: zsh.texi:10882
#, no-wrap
msgid "GLOBAL_RCS"
msgstr ""

#. type: pindex
#: zsh.texi:10883
#, no-wrap
msgid "NO_GLOBAL_RCS"
msgstr ""

#. type: pindex
#: zsh.texi:10884
#, no-wrap
msgid "GLOBALRCS"
msgstr ""

#. type: pindex
#: zsh.texi:10885
#, no-wrap
msgid "NOGLOBALRCS"
msgstr ""

#. type: cindex
#: zsh.texi:10886
#, no-wrap
msgid "startup files, global, inhibiting"
msgstr ""

#. type: cindex
#: zsh.texi:10887
#, no-wrap
msgid "files, global startup, inhibiting"
msgstr ""

#. type: item
#: zsh.texi:10888
#, no-wrap
msgid "@t{GLOBAL_RCS} (@t{+d}) <D>"
msgstr ""

#. type: table
#: zsh.texi:10893
msgid ""
"If this option is unset, the startup files @t{/etc/zprofile}, "
"@t{/etc/zshrc}, @t{/etc/zlogin} and @t{/etc/zlogout} will not be run.  It "
"can be disabled and re-enabled at any time, including inside local startup "
"files (@t{.zshrc}, etc.)."
msgstr ""

#. type: pindex
#: zsh.texi:10894
#, no-wrap
msgid "RCS"
msgstr ""

#. type: pindex
#: zsh.texi:10895
#, no-wrap
msgid "NO_RCS"
msgstr ""

#. type: pindex
#: zsh.texi:10896
#, no-wrap
msgid "NORCS"
msgstr ""

#. type: cindex
#: zsh.texi:10897
#, no-wrap
msgid "startup files, sourcing"
msgstr ""

#. type: item
#: zsh.texi:10898
#, no-wrap
msgid "@t{RCS} (@t{+f}) <D>"
msgstr ""

#. type: table
#: zsh.texi:10907
msgid ""
"After @t{/etc/zshenv} is sourced on startup, source the @t{.zshenv}, "
"@t{/etc/zprofile}, @t{.zprofile}, @t{/etc/zshrc}, @t{.zshrc}, "
"@t{/etc/zlogin}, @t{.zlogin}, and @t{.zlogout} files, as described in "
"@ref{Files}.  If this option is unset, the @t{/etc/zshenv} file is still "
"sourced, but any of the others will not be; it can be set at any time to "
"prevent the remaining startup files after the currently executing one from "
"being sourced."
msgstr ""

#. type: subsection
#: zsh.texi:10912
#, no-wrap
msgid "Input/Output"
msgstr ""

#. type: pindex
#: zsh.texi:10915
#, no-wrap
msgid "ALIASES"
msgstr ""

#. type: pindex
#: zsh.texi:10916
#, no-wrap
msgid "NO_ALIASES"
msgstr ""

#. type: pindex
#: zsh.texi:10917
#, no-wrap
msgid "NOALIASES"
msgstr ""

#. type: cindex
#: zsh.texi:10918
#, no-wrap
msgid "aliases, expansion"
msgstr ""

#. type: item
#: zsh.texi:10919
#, no-wrap
msgid "@t{ALIASES} <D>"
msgstr ""

#. type: table
#: zsh.texi:10921
msgid "Expand aliases."
msgstr ""

#. type: pindex
#: zsh.texi:10922
#, no-wrap
msgid "CLOBBER"
msgstr ""

#. type: pindex
#: zsh.texi:10923
#, no-wrap
msgid "NO_CLOBBER"
msgstr ""

#. type: pindex
#: zsh.texi:10924
#, no-wrap
msgid "NOCLOBBER"
msgstr ""

#. type: cindex
#: zsh.texi:10925
#, no-wrap
msgid "clobbering, of files"
msgstr ""

#. type: cindex
#: zsh.texi:10926
#, no-wrap
msgid "file clobbering, allowing"
msgstr ""

#. type: item
#: zsh.texi:10927
#, no-wrap
msgid "@t{CLOBBER} (@t{+C}, ksh: @t{+C}) <D>"
msgstr ""

#. type: table
#: zsh.texi:10930
msgid ""
"Allows `@t{>}' redirection to truncate existing files.  Otherwise `@t{>!}' "
"or `@t{>|}' must be used to truncate a file."
msgstr ""

#. type: table
#: zsh.texi:10935
msgid ""
"If the option is not set, and the option @t{APPEND_CREATE} is also not set, "
"`@t{>>!}' or `@t{>>|}' must be used to create a file.  If either option is "
"set, `@t{>>}' may be used."
msgstr ""

#. type: t{#1}
#: zsh.texi:10936 zsh.texi:10942
#, no-wrap
msgid "CLOBBER_EMPTY"
msgstr ""

#. type: pindex
#: zsh.texi:10937
#, no-wrap
msgid "NO_CLOBBER_EMPTY"
msgstr ""

#. type: pindex
#: zsh.texi:10938
#, no-wrap
msgid "CLOBBEREMPTY"
msgstr ""

#. type: pindex
#: zsh.texi:10939
#, no-wrap
msgid "NOCLOBBEREMPTY"
msgstr ""

#. type: cindex
#: zsh.texi:10940
#, no-wrap
msgid "clobbering, of empty files"
msgstr ""

#. type: cindex
#: zsh.texi:10941
#, no-wrap
msgid "file clobbering, of empty files"
msgstr ""

#. type: table
#: zsh.texi:10945
msgid ""
"This option is only used if the option @t{CLOBBER} is not set: note that it "
"is set by default."
msgstr ""

#. type: table
#: zsh.texi:10952
msgid ""
"If this option is set, then regular files of zero length may be ovewritten "
"(`clobbered').  Note that it is possible another process has written to the "
"file between this test and use of the file by the current process.  This "
"option should therefore not be used in cases where files to be clobbered may "
"be written to asynchronously."
msgstr ""

#. type: table
#: zsh.texi:10953 zsh.texi:12545
#, no-wrap
msgid "CORRECT"
msgstr ""

#. type: pindex
#: zsh.texi:10954
#, no-wrap
msgid "NO_CORRECT"
msgstr ""

#. type: pindex
#: zsh.texi:10955
#, no-wrap
msgid "NOCORRECT"
msgstr ""

#. type: cindex
#: zsh.texi:10956
#, no-wrap
msgid "correction, spelling"
msgstr ""

#. type: cindex
#: zsh.texi:10957
#, no-wrap
msgid "spelling correction"
msgstr ""

#. type: item
#: zsh.texi:10958
#, no-wrap
msgid "@t{CORRECT} (@t{-0})"
msgstr ""

#. type: table
#: zsh.texi:10963
msgid ""
"Try to correct the spelling of commands.  Note that, when the "
"@t{HASH_LIST_ALL} option is not set or when some directories in the path are "
"not readable, this may falsely report spelling errors the first time some "
"commands are used."
msgstr ""

#. type: table
#: zsh.texi:10967
msgid ""
"The shell variable @t{CORRECT_IGNORE} may be set to a pattern to match words "
"that will never be offered as corrections."
msgstr ""

#. type: table
#: zsh.texi:10968 zsh.texi:12591
#, no-wrap
msgid "CORRECT_ALL"
msgstr ""

#. type: pindex
#: zsh.texi:10969
#, no-wrap
msgid "NO_CORRECT_ALL"
msgstr ""

#. type: pindex
#: zsh.texi:10970
#, no-wrap
msgid "CORRECTALL"
msgstr ""

#. type: pindex
#: zsh.texi:10971
#, no-wrap
msgid "NOCORRECTALL"
msgstr ""

#. type: item
#: zsh.texi:10972
#, no-wrap
msgid "@t{CORRECT_ALL} (@t{-O})"
msgstr ""

#. type: table
#: zsh.texi:10974
msgid "Try to correct the spelling of all arguments in a line."
msgstr ""

#. type: table
#: zsh.texi:10978
msgid ""
"The shell variable @t{CORRECT_IGNORE_FILE} may be set to a pattern to match "
"file names that will never be offered as corrections."
msgstr ""

#. type: t{#1}
#: zsh.texi:10979 zsh.texi:10982
#, no-wrap
msgid "DVORAK"
msgstr ""

#. type: pindex
#: zsh.texi:10980
#, no-wrap
msgid "NO_DVORAK"
msgstr ""

#. type: pindex
#: zsh.texi:10981
#, no-wrap
msgid "NODVORAK"
msgstr ""

#. type: table
#: zsh.texi:10986
msgid ""
"Use the Dvorak keyboard instead of the standard qwerty keyboard as a basis "
"for examining spelling mistakes for the @t{CORRECT} and @t{CORRECT_ALL} "
"options and the @t{spell-word} editor command."
msgstr ""

#. type: pindex
#: zsh.texi:10987
#, no-wrap
msgid "FLOW_CONTROL"
msgstr ""

#. type: pindex
#: zsh.texi:10988
#, no-wrap
msgid "NO_FLOW_CONTROL"
msgstr ""

#. type: pindex
#: zsh.texi:10989
#, no-wrap
msgid "FLOWCONTROL"
msgstr ""

#. type: pindex
#: zsh.texi:10990
#, no-wrap
msgid "NOFLOWCONTROL"
msgstr ""

#. type: cindex
#: zsh.texi:10991
#, no-wrap
msgid "flow control"
msgstr ""

#. type: item
#: zsh.texi:10992
#, no-wrap
msgid "@t{FLOW_CONTROL} <D>"
msgstr ""

#. type: table
#: zsh.texi:10996
msgid ""
"If this option is unset, output flow control via start/stop characters "
"(usually assigned to ^S/^Q) is disabled in the shell's editor."
msgstr ""

#. type: table
#: zsh.texi:10997 zsh.texi:12559
#, no-wrap
msgid "IGNORE_EOF"
msgstr ""

#. type: pindex
#: zsh.texi:10998
#, no-wrap
msgid "NO_IGNORE_EOF"
msgstr ""

#. type: pindex
#: zsh.texi:10999
#, no-wrap
msgid "IGNOREEOF"
msgstr ""

#. type: pindex
#: zsh.texi:11000
#, no-wrap
msgid "NOIGNOREEOF"
msgstr ""

#. type: cindex
#: zsh.texi:11001
#, no-wrap
msgid "EOF, ignoring"
msgstr ""

#. type: item
#: zsh.texi:11002
#, no-wrap
msgid "@t{IGNORE_EOF} (@t{-7})"
msgstr ""

#. type: table
#: zsh.texi:11007
msgid ""
"Do not exit on end-of-file.  Require the use of @t{exit} or @t{logout} "
"instead.  However, ten consecutive EOFs will cause the shell to exit anyway, "
"to avoid the shell hanging if its tty goes away."
msgstr ""

#. type: table
#: zsh.texi:11013
msgid ""
"Also, if this option is set and the Zsh Line Editor is used, widgets "
"implemented by shell functions can be bound to EOF (normally Control-D) "
"without printing the normal warning message.  This works only for normal "
"widgets, not for completion widgets."
msgstr ""

#. type: table
#: zsh.texi:11014 zsh.texi:12627
#, no-wrap
msgid "INTERACTIVE_COMMENTS"
msgstr ""

#. type: pindex
#: zsh.texi:11015
#, no-wrap
msgid "NO_INTERACTIVE_COMMENTS"
msgstr ""

#. type: pindex
#: zsh.texi:11016
#, no-wrap
msgid "INTERACTIVECOMMENTS"
msgstr ""

#. type: pindex
#: zsh.texi:11017
#, no-wrap
msgid "NOINTERACTIVECOMMENTS"
msgstr ""

#. type: cindex
#: zsh.texi:11018
#, no-wrap
msgid "comments, in interactive shells"
msgstr ""

#. type: item
#: zsh.texi:11019
#, no-wrap
msgid "@t{INTERACTIVE_COMMENTS} (@t{-k}) <K> <S>"
msgstr ""

#. type: table
#: zsh.texi:11021
msgid "Allow comments even in interactive shells."
msgstr ""

#. type: pindex
#: zsh.texi:11022
#, no-wrap
msgid "HASH_CMDS"
msgstr ""

#. type: pindex
#: zsh.texi:11023
#, no-wrap
msgid "NO_HASH_CMDS"
msgstr ""

#. type: pindex
#: zsh.texi:11024
#, no-wrap
msgid "HASHCMDS"
msgstr ""

#. type: pindex
#: zsh.texi:11025
#, no-wrap
msgid "NOHASHCMDS"
msgstr ""

#. type: cindex
#: zsh.texi:11026
#, no-wrap
msgid "hashing, of commands"
msgstr ""

#. type: cindex
#: zsh.texi:11027
#, no-wrap
msgid "command hashing"
msgstr ""

#. type: item
#: zsh.texi:11028
#, no-wrap
msgid "@t{HASH_CMDS} <D>"
msgstr ""

#. type: table
#: zsh.texi:11036
msgid ""
"Note the location of each command the first time it is executed.  Subsequent "
"invocations of the same command will use the saved location, avoiding a path "
"search.  If this option is unset, no path hashing is done at all.  However, "
"when @t{CORRECT} is set, commands whose names do not appear in the functions "
"or aliases hash tables are hashed in order to avoid reporting them as "
"spelling errors."
msgstr ""

#. type: pindex
#: zsh.texi:11037
#, no-wrap
msgid "HASH_DIRS"
msgstr ""

#. type: pindex
#: zsh.texi:11038
#, no-wrap
msgid "NO_HASH_DIRS"
msgstr ""

#. type: pindex
#: zsh.texi:11039
#, no-wrap
msgid "HASHDIRS"
msgstr ""

#. type: pindex
#: zsh.texi:11040
#, no-wrap
msgid "NOHASHDIRS"
msgstr ""

#. type: cindex
#: zsh.texi:11041
#, no-wrap
msgid "hashing, of directories"
msgstr ""

#. type: cindex
#: zsh.texi:11042
#, no-wrap
msgid "directories, hashing"
msgstr ""

#. type: item
#: zsh.texi:11043
#, no-wrap
msgid "@t{HASH_DIRS} <D>"
msgstr ""

#. type: table
#: zsh.texi:11047
msgid ""
"Whenever a command name is hashed, hash the directory containing it, as well "
"as all directories that occur earlier in the path.  Has no effect if neither "
"@t{HASH_CMDS} nor @t{CORRECT} is set."
msgstr ""

#. type: t{#1}
#: zsh.texi:11048 zsh.texi:11054
#, no-wrap
msgid "HASH_EXECUTABLES_ONLY"
msgstr ""

#. type: pindex
#: zsh.texi:11049
#, no-wrap
msgid "NO_HASH_EXECUTABLES_ONLY"
msgstr ""

#. type: pindex
#: zsh.texi:11050
#, no-wrap
msgid "HASHEXECUTABLESONLY"
msgstr ""

#. type: pindex
#: zsh.texi:11051
#, no-wrap
msgid "NOHASHEXECUTABLESONLY"
msgstr ""

#. type: cindex
#: zsh.texi:11052
#, no-wrap
msgid "hashing, of executables"
msgstr ""

#. type: cindex
#: zsh.texi:11053
#, no-wrap
msgid "executables, hashing"
msgstr ""

#. type: table
#: zsh.texi:11061
msgid ""
"When hashing commands because of @t{HASH_CMDS}, check that the file to be "
"hashed is actually an executable.  This option is unset by default as if the "
"path contains a large number of commands, or consists of many remote files, "
"the additional tests can take a long time.  Trial and error is needed to "
"show if this option is beneficial."
msgstr ""

#. type: table
#: zsh.texi:11062 zsh.texi:12603
#, no-wrap
msgid "MAIL_WARNING"
msgstr ""

#. type: pindex
#: zsh.texi:11063
#, no-wrap
msgid "NO_MAIL_WARNING"
msgstr ""

#. type: pindex
#: zsh.texi:11064
#, no-wrap
msgid "MAILWARNING"
msgstr ""

#. type: pindex
#: zsh.texi:11065
#, no-wrap
msgid "NOMAILWARNING"
msgstr ""

#. type: cindex
#: zsh.texi:11066
#, no-wrap
msgid "mail, warning of reading"
msgstr ""

#. type: item
#: zsh.texi:11067
#, no-wrap
msgid "@t{MAIL_WARNING} (@t{-U})"
msgstr ""

#. type: table
#: zsh.texi:11070
msgid ""
"Print a warning message if a mail file has been accessed since the shell "
"last checked."
msgstr ""

#. type: table
#: zsh.texi:11071 zsh.texi:12595
#, no-wrap
msgid "PATH_DIRS"
msgstr ""

#. type: pindex
#: zsh.texi:11072
#, no-wrap
msgid "NO_PATH_DIRS"
msgstr ""

#. type: pindex
#: zsh.texi:11073
#, no-wrap
msgid "PATHDIRS"
msgstr ""

#. type: pindex
#: zsh.texi:11074
#, no-wrap
msgid "NOPATHDIRS"
msgstr ""

#. type: cindex
#: zsh.texi:11075
#, no-wrap
msgid "path search, extended"
msgstr ""

#. type: item
#: zsh.texi:11076
#, no-wrap
msgid "@t{PATH_DIRS} (@t{-Q})"
msgstr ""

#. type: table
#: zsh.texi:11084
msgid ""
"Perform a path search even on command names with slashes in them.  Thus if "
"`@t{/usr/local/bin}' is in the user's path, and he or she types "
"`@t{X11/xinit}', the command `@t{/usr/local/bin/X11/xinit}' will be executed "
"(assuming it exists).  Commands explicitly beginning with `@t{/}', `@t{./}' "
"or `@t{../}' are not subject to the path search.  This also applies to the "
"`@t{.}' and @t{source} builtins."
msgstr ""

#. type: table
#: zsh.texi:11090
msgid ""
"Note that subdirectories of the current directory are always searched for "
"executables specified in this form.  This takes place before any search "
"indicated by this option, and regardless of whether `@t{.}' or the current "
"directory appear in the command search path."
msgstr ""

#. type: pindex
#: zsh.texi:11091
#, no-wrap
msgid "PATH_SCRIPT"
msgstr ""

#. type: pindex
#: zsh.texi:11092
#, no-wrap
msgid "NO_PATH_SCRIPT"
msgstr ""

#. type: pindex
#: zsh.texi:11093
#, no-wrap
msgid "PATHSCRIPT"
msgstr ""

#. type: pindex
#: zsh.texi:11094
#, no-wrap
msgid "NOPATHSCRIPT"
msgstr ""

#. type: cindex
#: zsh.texi:11095
#, no-wrap
msgid "path search, for script argument to shell"
msgstr ""

#. type: item
#: zsh.texi:11096
#, no-wrap
msgid "@t{PATH_SCRIPT} <K> <S>"
msgstr ""

#. type: table
#: zsh.texi:11103
msgid ""
"If this option is not set, a script passed as the first non-option argument "
"to the shell must contain the name of the file to open.  If this option is "
"set, and the script does not specify a directory path, the script is looked "
"for first in the current directory, then in the command path.  See "
"@ref{Invocation}."
msgstr ""

#. type: t{#1}
#: zsh.texi:11104 zsh.texi:11109
#, no-wrap
msgid "PRINT_EIGHT_BIT"
msgstr ""

#. type: pindex
#: zsh.texi:11105
#, no-wrap
msgid "NO_PRINT_EIGHT_BIT"
msgstr ""

#. type: pindex
#: zsh.texi:11106
#, no-wrap
msgid "PRINTEIGHTBIT"
msgstr ""

#. type: pindex
#: zsh.texi:11107
#, no-wrap
msgid "NOPRINTEIGHTBIT"
msgstr ""

#. type: cindex
#: zsh.texi:11108
#, no-wrap
msgid "eight bit characters, printing"
msgstr ""

#. type: table
#: zsh.texi:11113
msgid ""
"Print eight bit characters literally in completion lists, etc.  This option "
"is not necessary if your system correctly returns the printability of eight "
"bit characters (see ctype(3))."
msgstr ""

#. type: table
#: zsh.texi:11114 zsh.texi:12547
#, no-wrap
msgid "PRINT_EXIT_VALUE"
msgstr ""

#. type: pindex
#: zsh.texi:11115
#, no-wrap
msgid "NO_PRINT_EXIT_VALUE"
msgstr ""

#. type: pindex
#: zsh.texi:11116
#, no-wrap
msgid "PRINTEXITVALUE"
msgstr ""

#. type: pindex
#: zsh.texi:11117
#, no-wrap
msgid "NOPRINTEXITVALUE"
msgstr ""

#. type: cindex
#: zsh.texi:11118
#, no-wrap
msgid "exit status, printing"
msgstr ""

#. type: item
#: zsh.texi:11119
#, no-wrap
msgid "@t{PRINT_EXIT_VALUE} (@t{-1})"
msgstr ""

#. type: table
#: zsh.texi:11122
msgid ""
"Print the exit value of programs with non-zero exit status.  This is only "
"available at the command line in interactive shells."
msgstr ""

#. type: t{#1}
#: zsh.texi:11123 zsh.texi:11129
#, no-wrap
msgid "RC_QUOTES"
msgstr ""

#. type: pindex
#: zsh.texi:11124
#, no-wrap
msgid "NO_RC_QUOTES"
msgstr ""

#. type: pindex
#: zsh.texi:11125
#, no-wrap
msgid "RCQUOTES"
msgstr ""

#. type: pindex
#: zsh.texi:11126
#, no-wrap
msgid "NORCQUOTES"
msgstr ""

#. type: cindex
#: zsh.texi:11127
#, no-wrap
msgid "rc, quoting style"
msgstr ""

#. type: cindex
#: zsh.texi:11128
#, no-wrap
msgid "quoting style, rc"
msgstr ""

#. type: table
#: zsh.texi:11134
msgid ""
"Allow the character sequence `@t{@value{dsq}}' to signify a single quote "
"within singly quoted strings.  Note this does not apply in quoted strings "
"using the format @t{$'}@var{...}@t{'}, where a backslashed single quote can "
"be used."
msgstr ""

#. type: table
#: zsh.texi:11135 zsh.texi:12577
#, no-wrap
msgid "RM_STAR_SILENT"
msgstr ""

#. type: pindex
#: zsh.texi:11136
#, no-wrap
msgid "NO_RM_STAR_SILENT"
msgstr ""

#. type: pindex
#: zsh.texi:11137
#, no-wrap
msgid "RMSTARSILENT"
msgstr ""

#. type: pindex
#: zsh.texi:11138
#, no-wrap
msgid "NORMSTARSILENT"
msgstr ""

#. type: cindex
#: zsh.texi:11139
#, no-wrap
msgid "rm *, querying before"
msgstr ""

#. type: cindex
#: zsh.texi:11140
#, no-wrap
msgid "querying before rm *"
msgstr ""

#. type: item
#: zsh.texi:11141
#, no-wrap
msgid "@t{RM_STAR_SILENT} (@t{-H}) <K> <S>"
msgstr ""

#. type: table
#: zsh.texi:11143
msgid "Do not query the user before executing `@t{rm *}' or `@t{rm path/*}'."
msgstr ""

#. type: t{#1}
#: zsh.texi:11144 zsh.texi:11150
#, no-wrap
msgid "RM_STAR_WAIT"
msgstr ""

#. type: pindex
#: zsh.texi:11145
#, no-wrap
msgid "NO_RM_STAR_WAIT"
msgstr ""

#. type: pindex
#: zsh.texi:11146
#, no-wrap
msgid "RMSTARWAIT"
msgstr ""

#. type: pindex
#: zsh.texi:11147
#, no-wrap
msgid "NORMSTARWAIT"
msgstr ""

#. type: cindex
#: zsh.texi:11148
#, no-wrap
msgid "rm *, waiting before"
msgstr ""

#. type: cindex
#: zsh.texi:11149
#, no-wrap
msgid "waiting before rm *"
msgstr ""

#. type: table
#: zsh.texi:11156
msgid ""
"If querying the user before executing `@t{rm *}' or `@t{rm path/*}', first "
"wait ten seconds and ignore anything typed in that time.  This avoids the "
"problem of reflexively answering `yes' to the query when one didn't really "
"mean it.  The wait and query can always be avoided by expanding the `@t{*}' "
"in ZLE (with tab)."
msgstr ""

#. type: pindex
#: zsh.texi:11157
#, no-wrap
msgid "SHORT_LOOPS"
msgstr ""

#. type: pindex
#: zsh.texi:11158
#, no-wrap
msgid "NO_SHORT_LOOPS"
msgstr ""

#. type: pindex
#: zsh.texi:11159
#, no-wrap
msgid "SHORTLOOPS"
msgstr ""

#. type: pindex
#: zsh.texi:11160
#, no-wrap
msgid "NOSHORTLOOPS"
msgstr ""

#. type: item
#: zsh.texi:11161
#, no-wrap
msgid "@t{SHORT_LOOPS} <C> <Z>"
msgstr ""

#. type: table
#: zsh.texi:11164
msgid ""
"Allow the short forms of @t{for}, @t{repeat}, @t{select}, @t{if}, and "
"@t{function} constructs."
msgstr ""

#. type: t{#1}
#: zsh.texi:11165 zsh.texi:11169
#, no-wrap
msgid "SHORT_REPEAT"
msgstr ""

#. type: pindex
#: zsh.texi:11166
#, no-wrap
msgid "NO_SHORT_REPEAT"
msgstr ""

#. type: pindex
#: zsh.texi:11167
#, no-wrap
msgid "SHORTREPEAT"
msgstr ""

#. type: pindex
#: zsh.texi:11168
#, no-wrap
msgid "NOSHORTREPEAT"
msgstr ""

#. type: table
#: zsh.texi:11172
msgid ""
"Allow the short form @t{repeat} as @t{SHORT_LOOPS} but without enabling it "
"for the other constructs."
msgstr ""

#. type: table
#: zsh.texi:11173 zsh.texi:12585
#, no-wrap
msgid "SUN_KEYBOARD_HACK"
msgstr ""

#. type: pindex
#: zsh.texi:11174
#, no-wrap
msgid "NO_SUN_KEYBOARD_HACK"
msgstr ""

#. type: pindex
#: zsh.texi:11175
#, no-wrap
msgid "SUNKEYBOARDHACK"
msgstr ""

#. type: pindex
#: zsh.texi:11176
#, no-wrap
msgid "NOSUNKEYBOARDHACK"
msgstr ""

#. type: cindex
#: zsh.texi:11177
#, no-wrap
msgid "sun keyboard, annoying"
msgstr ""

#. type: cindex
#: zsh.texi:11178
#, no-wrap
msgid "annoying keyboard, sun"
msgstr ""

#. type: item
#: zsh.texi:11179
#, no-wrap
msgid "@t{SUN_KEYBOARD_HACK} (@t{-L})"
msgstr ""

#. type: table
#: zsh.texi:11186
msgid ""
"If a line ends with a backquote, and there are an odd number of backquotes "
"on the line, ignore the trailing backquote.  This is useful on some "
"keyboards where the return key is too small, and the backquote key lies "
"annoyingly close to it.  As an alternative the variable @t{KEYBOARD_HACK} "
"lets you choose the character to be removed."
msgstr ""

#. type: subsection
#: zsh.texi:11191
#, no-wrap
msgid "Job Control"
msgstr ""

#. type: t{#1}
#: zsh.texi:11194 zsh.texi:11200
#, no-wrap
msgid "AUTO_CONTINUE"
msgstr ""

#. type: pindex
#: zsh.texi:11195
#, no-wrap
msgid "NO_AUTO_CONTINUE"
msgstr ""

#. type: pindex
#: zsh.texi:11196
#, no-wrap
msgid "AUTOCONTINUE"
msgstr ""

#. type: pindex
#: zsh.texi:11197
#, no-wrap
msgid "NOAUTOCONTINUE"
msgstr ""

#. type: cindex
#: zsh.texi:11198
#, no-wrap
msgid "jobs, continuing automatically"
msgstr ""

#. type: cindex
#: zsh.texi:11199
#, no-wrap
msgid "continuing jobs automatically"
msgstr ""

#. type: table
#: zsh.texi:11204
msgid ""
"With this option set, stopped jobs that are removed from the job table with "
"the @t{disown} builtin command are automatically sent a @t{CONT} signal to "
"make them running."
msgstr ""

#. type: table
#: zsh.texi:11205 zsh.texi:12607
#, no-wrap
msgid "AUTO_RESUME"
msgstr ""

#. type: pindex
#: zsh.texi:11206
#, no-wrap
msgid "NO_AUTO_RESUME"
msgstr ""

#. type: pindex
#: zsh.texi:11207
#, no-wrap
msgid "AUTORESUME"
msgstr ""

#. type: pindex
#: zsh.texi:11208
#, no-wrap
msgid "NOAUTORESUME"
msgstr ""

#. type: cindex
#: zsh.texi:11209
#, no-wrap
msgid "jobs, resuming automatically"
msgstr ""

#. type: cindex
#: zsh.texi:11210
#, no-wrap
msgid "resuming jobs automatically"
msgstr ""

#. type: item
#: zsh.texi:11211
#, no-wrap
msgid "@t{AUTO_RESUME} (@t{-W})"
msgstr ""

#. type: table
#: zsh.texi:11214
msgid ""
"Treat single word simple commands without redirection as candidates for "
"resumption of an existing job."
msgstr ""

#. type: table
#: zsh.texi:11215 zsh.texi:12557
#, no-wrap
msgid "BG_NICE"
msgstr ""

#. type: pindex
#: zsh.texi:11216
#, no-wrap
msgid "NO_BG_NICE"
msgstr ""

#. type: pindex
#: zsh.texi:11217
#, no-wrap
msgid "BGNICE"
msgstr ""

#. type: pindex
#: zsh.texi:11218
#, no-wrap
msgid "NOBGNICE"
msgstr ""

#. type: cindex
#: zsh.texi:11219
#, no-wrap
msgid "jobs, background priority"
msgstr ""

#. type: cindex
#: zsh.texi:11220
#, no-wrap
msgid "background jobs, priority of"
msgstr ""

#. type: cindex
#: zsh.texi:11221
#, no-wrap
msgid "priority of background jobs"
msgstr ""

#. type: item
#: zsh.texi:11222
#, no-wrap
msgid "@t{BG_NICE} (@t{-6}) <C> <Z>"
msgstr ""

#. type: table
#: zsh.texi:11225
msgid "Run all background jobs at a lower priority.  This option is set by default."
msgstr ""

#. type: pindex
#: zsh.texi:11226
#, no-wrap
msgid "CHECK_JOBS"
msgstr ""

#. type: pindex
#: zsh.texi:11227
#, no-wrap
msgid "NO_CHECK_JOBS"
msgstr ""

#. type: pindex
#: zsh.texi:11228
#, no-wrap
msgid "CHECKJOBS"
msgstr ""

#. type: pindex
#: zsh.texi:11229
#, no-wrap
msgid "NOCHECKJOBS"
msgstr ""

#. type: cindex
#: zsh.texi:11230
#, no-wrap
msgid "exiting, checking jobs when"
msgstr ""

#. type: cindex
#: zsh.texi:11231
#, no-wrap
msgid "logging out, checking jobs when"
msgstr ""

#. type: item
#: zsh.texi:11232
#, no-wrap
msgid "@t{CHECK_JOBS} <Z>"
msgstr ""

#. type: table
#: zsh.texi:11237
msgid ""
"Report the status of background and suspended jobs before exiting a shell "
"with job control; a second attempt to exit the shell will succeed.  "
"@t{NO_CHECK_JOBS} is best used only in combination with @t{NO_HUP}, else "
"such jobs will be killed automatically."
msgstr ""

#. type: table
#: zsh.texi:11245
msgid ""
"The check is omitted if the commands run from the previous command line "
"included a `@t{jobs}' command, since it is assumed the user is aware that "
"there are background or suspended jobs.  A `@t{jobs}' command run from one "
"of the hook functions defined in the section `Special Functions' in "
"@ref{Functions} is not counted for this purpose."
msgstr ""

#. type: pindex
#: zsh.texi:11246
#, no-wrap
msgid "CHECK_RUNNING_JOBS"
msgstr ""

#. type: pindex
#: zsh.texi:11247
#, no-wrap
msgid "NO_CHECK_RUNNING_JOBS"
msgstr ""

#. type: pindex
#: zsh.texi:11248
#, no-wrap
msgid "CHECKRUNNINGJOBS"
msgstr ""

#. type: pindex
#: zsh.texi:11249
#, no-wrap
msgid "NOCHECKRUNNINGJOBS"
msgstr ""

#. type: cindex
#: zsh.texi:11250
#, no-wrap
msgid "exiting, checking running jobs when"
msgstr ""

#. type: cindex
#: zsh.texi:11251
#, no-wrap
msgid "logging out, checking running jobs when"
msgstr ""

#. type: item
#: zsh.texi:11252
#, no-wrap
msgid "@t{CHECK_RUNNING_JOBS} <Z>"
msgstr ""

#. type: table
#: zsh.texi:11256
msgid ""
"Check for both running and suspended jobs when @t{CHECK_JOBS} is enabled.  "
"When this option is disabled, zsh checks only for suspended jobs, which "
"matches the default behavior of bash."
msgstr ""

#. type: table
#: zsh.texi:11259
msgid "This option has no effect unless @t{CHECK_JOBS} is set."
msgstr ""

#. type: pindex
#: zsh.texi:11260
#, no-wrap
msgid "HUP"
msgstr ""

#. type: pindex
#: zsh.texi:11261
#, no-wrap
msgid "NO_HUP"
msgstr ""

#. type: pindex
#: zsh.texi:11262
#, no-wrap
msgid "NOHUP"
msgstr ""

#. type: cindex
#: zsh.texi:11263
#, no-wrap
msgid "jobs, HUP"
msgstr ""

#. type: item
#: zsh.texi:11264
#, no-wrap
msgid "@t{HUP} <Z>"
msgstr ""

#. type: table
#: zsh.texi:11267
msgid "Send the @t{HUP} signal to running jobs when the shell exits."
msgstr ""

#. type: table
#: zsh.texi:11268 zsh.texi:12597
#, no-wrap
msgid "LONG_LIST_JOBS"
msgstr ""

#. type: pindex
#: zsh.texi:11269
#, no-wrap
msgid "NO_LONG_LIST_JOBS"
msgstr ""

#. type: pindex
#: zsh.texi:11270
#, no-wrap
msgid "LONGLISTJOBS"
msgstr ""

#. type: pindex
#: zsh.texi:11271
#, no-wrap
msgid "NOLONGLISTJOBS"
msgstr ""

#. type: cindex
#: zsh.texi:11272
#, no-wrap
msgid "jobs, list format"
msgstr ""

#. type: item
#: zsh.texi:11273
#, no-wrap
msgid "@t{LONG_LIST_JOBS} (@t{-R})"
msgstr ""

#. type: table
#: zsh.texi:11275
msgid "Print job notifications in the long format by default."
msgstr ""

#. type: table
#: zsh.texi:11276 zsh.texi:12631 zsh.texi:12676
#, no-wrap
msgid "MONITOR"
msgstr ""

#. type: pindex
#: zsh.texi:11277
#, no-wrap
msgid "NO_MONITOR"
msgstr ""

#. type: pindex
#: zsh.texi:11278
#, no-wrap
msgid "NOMONITOR"
msgstr ""

#. type: cindex
#: zsh.texi:11279
#, no-wrap
msgid "job control, allowing"
msgstr ""

#. type: item
#: zsh.texi:11280
#, no-wrap
msgid "@t{MONITOR} (@t{-m}, ksh: @t{-m})"
msgstr ""

#. type: table
#: zsh.texi:11282
msgid "Allow job control.  Set by default in interactive shells."
msgstr ""

#. type: table
#: zsh.texi:11283 zsh.texi:12555 zsh.texi:12666
#, no-wrap
msgid "NOTIFY"
msgstr ""

#. type: pindex
#: zsh.texi:11284
#, no-wrap
msgid "NO_NOTIFY"
msgstr ""

#. type: pindex
#: zsh.texi:11285
#, no-wrap
msgid "NONOTIFY"
msgstr ""

#. type: cindex
#: zsh.texi:11286
#, no-wrap
msgid "background jobs, notification"
msgstr ""

#. type: cindex
#: zsh.texi:11287
#, no-wrap
msgid "notification of background jobs"
msgstr ""

#. type: item
#: zsh.texi:11288
#, no-wrap
msgid "@t{NOTIFY} (@t{-5}, ksh: @t{-b}) <Z>"
msgstr ""

#. type: table
#: zsh.texi:11291
msgid ""
"Report the status of background jobs immediately, rather than waiting until "
"just before printing a prompt."
msgstr ""

#. type: pindex
#: zsh.texi:11292
#, no-wrap
msgid "POSIX_JOBS"
msgstr ""

#. type: pindex
#: zsh.texi:11293
#, no-wrap
msgid "POSIXJOBS"
msgstr ""

#. type: pindex
#: zsh.texi:11294
#, no-wrap
msgid "NO_POSIX_JOBS"
msgstr ""

#. type: pindex
#: zsh.texi:11295
#, no-wrap
msgid "NOPOSIXJOBS"
msgstr ""

#. type: cindex
#: zsh.texi:11296
#, no-wrap
msgid "bg, output in POSIX format"
msgstr ""

#. type: cindex
#: zsh.texi:11297
#, no-wrap
msgid "fg, output in POSIX format"
msgstr ""

#. type: cindex
#: zsh.texi:11298
#, no-wrap
msgid "job control, in subshell"
msgstr ""

#. type: cindex
#: zsh.texi:11299
#, no-wrap
msgid "jobs, output in subshell"
msgstr ""

#. type: item
#: zsh.texi:11300
#, no-wrap
msgid "@t{POSIX_JOBS} <K> <S>"
msgstr ""

#. type: table
#: zsh.texi:11302
msgid "This option makes job control more compliant with the POSIX standard."
msgstr ""

#. type: table
#: zsh.texi:11309
msgid ""
"When the option is not set, the @t{MONITOR} option is unset on entry to "
"subshells, so that job control is no longer active.  When the option is set, "
"the @t{MONITOR} option and job control remain active in the subshell, but "
"note that the subshell has no access to jobs in the parent shell."
msgstr ""

#. type: table
#: zsh.texi:11315
msgid ""
"When the option is not set, jobs put in the background or foreground with "
"@t{bg} or @t{fg} are displayed with the same information that would be "
"reported by @t{jobs}.  When the option is set, only the text is printed.  "
"The output from @t{jobs} itself is not affected by the option."
msgstr ""

#. type: table
#: zsh.texi:11321
msgid ""
"When the option is not set, job information from the parent shell is saved "
"for output within a subshell (for example, within a pipeline).  When the "
"option is set, the output of @t{jobs} is empty until a job is started within "
"the subshell."
msgstr ""

#. type: table
#: zsh.texi:11327
msgid ""
"In previous versions of the shell, it was necessary to enable @t{POSIX_JOBS} "
"in order for the builtin command @t{wait} to return the status of background "
"jobs that had already exited.  This is no longer the case."
msgstr ""

#. type: subsection
#: zsh.texi:11332
#, no-wrap
msgid "Prompting"
msgstr ""

#. type: pindex
#: zsh.texi:11335
#, no-wrap
msgid "PROMPT_BANG"
msgstr ""

#. type: pindex
#: zsh.texi:11336
#, no-wrap
msgid "NO_PROMPT_BANG"
msgstr ""

#. type: pindex
#: zsh.texi:11337
#, no-wrap
msgid "PROMPTBANG"
msgstr ""

#. type: pindex
#: zsh.texi:11338
#, no-wrap
msgid "NOPROMPTBANG"
msgstr ""

#. type: cindex
#: zsh.texi:11339
#, no-wrap
msgid "prompt, ! expansion"
msgstr ""

#. type: item
#: zsh.texi:11340
#, no-wrap
msgid "@t{PROMPT_BANG} <K>"
msgstr ""

#. type: table
#: zsh.texi:11344
msgid ""
"If set, `@t{!}' is treated specially in prompt expansion.  See @ref{Prompt "
"Expansion}."
msgstr ""

#. type: pindex
#: zsh.texi:11345
#, no-wrap
msgid "PROMPT_CR"
msgstr ""

#. type: pindex
#: zsh.texi:11346
#, no-wrap
msgid "NO_PROMPT_CR"
msgstr ""

#. type: pindex
#: zsh.texi:11347
#, no-wrap
msgid "PROMPTCR"
msgstr ""

#. type: pindex
#: zsh.texi:11348
#, no-wrap
msgid "NOPROMPTCR"
msgstr ""

#. type: cindex
#: zsh.texi:11349
#, no-wrap
msgid "prompt, with CR"
msgstr ""

#. type: item
#: zsh.texi:11350
#, no-wrap
msgid "@t{PROMPT_CR} (@t{+V}) <D>"
msgstr ""

#. type: table
#: zsh.texi:11354
msgid ""
"Print a carriage return just before printing a prompt in the line editor.  "
"This is on by default as multi-line editing is only possible if the editor "
"knows where the start of the line appears."
msgstr ""

#. type: pindex
#: zsh.texi:11355
#, no-wrap
msgid "PROMPT_SP"
msgstr ""

#. type: pindex
#: zsh.texi:11356
#, no-wrap
msgid "NO_PROMPT_SP"
msgstr ""

#. type: pindex
#: zsh.texi:11357
#, no-wrap
msgid "PROMPTSP"
msgstr ""

#. type: pindex
#: zsh.texi:11358
#, no-wrap
msgid "NOPROMPTSP"
msgstr ""

#. type: cindex
#: zsh.texi:11359
#, no-wrap
msgid "prompt, save partial lines"
msgstr ""

#. type: item
#: zsh.texi:11360
#, no-wrap
msgid "@t{PROMPT_SP} <D>"
msgstr ""

#. type: table
#: zsh.texi:11367
msgid ""
"Attempt to preserve a partial line (i.e. a line that did not end with a "
"newline) that would otherwise be covered up by the command prompt due to the "
"@t{PROMPT_CR} option.  This works by outputting some cursor-control "
"characters, including a series of spaces, that should make the terminal wrap "
"to the next line when a partial line is present (note that this is only "
"successful if your terminal has automatic margins, which is typical)."
msgstr ""

#. type: table
#: zsh.texi:11373
msgid ""
"When a partial line is preserved, by default you will see an inverse+bold "
"character at the end of the partial line: a `@t{%}' for a normal user or a "
"`@t{#}' for root.  If set, the shell parameter @t{PROMPT_EOL_MARK} can be "
"used to customize how the end of partial lines are shown."
msgstr ""

#. type: table
#: zsh.texi:11377
msgid ""
"NOTE: if the @t{PROMPT_CR} option is not set, enabling this option will have "
"no effect.  This option is on by default."
msgstr ""

#. type: pindex
#: zsh.texi:11378
#, no-wrap
msgid "PROMPT_PERCENT"
msgstr ""

#. type: pindex
#: zsh.texi:11379
#, no-wrap
msgid "NO_PROMPT_PERCENT"
msgstr ""

#. type: pindex
#: zsh.texi:11380
#, no-wrap
msgid "PROMPTPERCENT"
msgstr ""

#. type: pindex
#: zsh.texi:11381
#, no-wrap
msgid "NOPROMPTPERCENT"
msgstr ""

#. type: cindex
#: zsh.texi:11382
#, no-wrap
msgid "prompt, % expansion"
msgstr ""

#. type: item
#: zsh.texi:11383
#, no-wrap
msgid "@t{PROMPT_PERCENT} <C> <Z>"
msgstr ""

#. type: table
#: zsh.texi:11387
msgid ""
"If set, `@t{%}' is treated specially in prompt expansion.  See @ref{Prompt "
"Expansion}."
msgstr ""

#. type: pindex
#: zsh.texi:11388
#, no-wrap
msgid "PROMPT_SUBST"
msgstr ""

#. type: pindex
#: zsh.texi:11389
#, no-wrap
msgid "NO_PROMPT_SUBST"
msgstr ""

#. type: pindex
#: zsh.texi:11390
#, no-wrap
msgid "PROMPTSUBST"
msgstr ""

#. type: pindex
#: zsh.texi:11391
#, no-wrap
msgid "NOPROMPTSUBST"
msgstr ""

#. type: cindex
#: zsh.texi:11392
#, no-wrap
msgid "prompt, parameter expansion"
msgstr ""

#. type: item
#: zsh.texi:11393
#, no-wrap
msgid "@t{PROMPT_SUBST} <K> <S>"
msgstr ""

#. type: table
#: zsh.texi:11397
msgid ""
"If set, @emph{parameter expansion}, @emph{command substitution} and "
"@emph{arithmetic expansion} are performed in prompts.  Substitutions within "
"prompts do not affect the command status."
msgstr ""

#. type: t{#1}
#: zsh.texi:11398 zsh.texi:11402
#, no-wrap
msgid "TRANSIENT_RPROMPT"
msgstr ""

#. type: pindex
#: zsh.texi:11399
#, no-wrap
msgid "NO_TRANSIENT_RPROMPT"
msgstr ""

#. type: pindex
#: zsh.texi:11400
#, no-wrap
msgid "TRANSIENTRPROMPT"
msgstr ""

#. type: pindex
#: zsh.texi:11401
#, no-wrap
msgid "NOTRANSIENTRPROMPT"
msgstr ""

#. type: table
#: zsh.texi:11405
msgid ""
"Remove any right prompt from display when accepting a command line.  This "
"may be useful with terminals with other cut/paste methods."
msgstr ""

#. type: subsection
#: zsh.texi:11410
#, no-wrap
msgid "Scripts and Functions"
msgstr ""

#. type: pindex
#: zsh.texi:11413
#, no-wrap
msgid "ALIAS_FUNC_DEF"
msgstr ""

#. type: pindex
#: zsh.texi:11414
#, no-wrap
msgid "NO_ALIAS_FUNC_DEF"
msgstr ""

#. type: pindex
#: zsh.texi:11415
#, no-wrap
msgid "ALIASFUNCDEF"
msgstr ""

#. type: pindex
#: zsh.texi:11416
#, no-wrap
msgid "NOALIASFUNCDEF"
msgstr ""

#. type: cindex
#: zsh.texi:11417
#, no-wrap
msgid "functions, defining with expanded aliases"
msgstr ""

#. type: cindex
#: zsh.texi:11418
#, no-wrap
msgid "aliases, expanding in function definition"
msgstr ""

#. type: item
#: zsh.texi:11419
#, no-wrap
msgid "@t{ALIAS_FUNC_DEF} <S>"
msgstr ""

#. type: table
#: zsh.texi:11425
msgid ""
"By default, zsh does not allow the definition of functions using the "
"`@var{name} @t{()}' syntax if @var{name} was expanded as an alias: this "
"causes an error.  This is usually the desired behaviour, as otherwise the "
"combination of an alias and a function based on the same definition can "
"easily cause problems."
msgstr ""

#. type: table
#: zsh.texi:11428
msgid "When this option is set, aliases can be used for defining functions."
msgstr ""

#. type: table
#: zsh.texi:11432
msgid ""
"For example, consider the following definitions as they might occur in a "
"startup file."
msgstr ""

#. type: example
#: zsh.texi:11439
#, no-wrap
msgid ""
"alias foo=bar\n"
"foo() @{\n"
"  print This probably does not do what you expect.\n"
"@}\n"
msgstr ""

#. type: table
#: zsh.texi:11448
msgid ""
"Here, @t{foo} is expanded as an alias to @t{bar} before the @t{()} is "
"encountered, so the function defined would be named @t{bar}.  By default "
"this is instead an error in native mode.  Note that quoting any part of the "
"function name, or using the keyword @t{function}, avoids the problem, so is "
"recommended when the function name can also be an alias."
msgstr ""

#. type: t{#1}
#: zsh.texi:11449 zsh.texi:11456
#, no-wrap
msgid "C_BASES"
msgstr ""

#. type: pindex
#: zsh.texi:11450
#, no-wrap
msgid "NO_C_BASES"
msgstr ""

#. type: pindex
#: zsh.texi:11451
#, no-wrap
msgid "CBASES"
msgstr ""

#. type: pindex
#: zsh.texi:11452
#, no-wrap
msgid "NOCBASES"
msgstr ""

#. type: cindex
#: zsh.texi:11453
#, no-wrap
msgid "bases, output in C format"
msgstr ""

#. type: cindex
#: zsh.texi:11454
#, no-wrap
msgid "hexadecimal, output in C format"
msgstr ""

#. type: cindex
#: zsh.texi:11455
#, no-wrap
msgid "octal, output in C format"
msgstr ""

#. type: table
#: zsh.texi:11464
msgid ""
"Output hexadecimal numbers in the standard C format, for example `@t{0xFF}' "
"instead of the usual `@t{16#FF}'.  If the option @t{OCTAL_ZEROES} is also "
"set (it is not by default), octal numbers will be treated similarly and "
"hence appear as `@t{077}' instead of `@t{8#77}'.  This option has no effect "
"on the choice of the output base, nor on the output of bases other than "
"hexadecimal and octal.  Note that these formats will be understood on input "
"irrespective of the setting of @t{C_BASES}."
msgstr ""

#. type: t{#1}
#: zsh.texi:11465 zsh.texi:11471
#, no-wrap
msgid "C_PRECEDENCES"
msgstr ""

#. type: pindex
#: zsh.texi:11466
#, no-wrap
msgid "NO_C_PRECEDENCES"
msgstr ""

#. type: pindex
#: zsh.texi:11467
#, no-wrap
msgid "CPRECEDENCES"
msgstr ""

#. type: pindex
#: zsh.texi:11468
#, no-wrap
msgid "NOCPRECEDENCES"
msgstr ""

#. type: cindex
#: zsh.texi:11469
#, no-wrap
msgid "precedence, operator"
msgstr ""

#. type: cindex
#: zsh.texi:11470
#, no-wrap
msgid "operator precedence"
msgstr ""

#. type: table
#: zsh.texi:11476
msgid ""
"This alters the precedence of arithmetic operators to be more like C and "
"other programming languages; @ref{Arithmetic Evaluation} has an explicit "
"list."
msgstr ""

#. type: pindex
#: zsh.texi:11477
#, no-wrap
msgid "DEBUG_BEFORE_CMD"
msgstr ""

#. type: pindex
#: zsh.texi:11478
#, no-wrap
msgid "NO_DEBUG_BEFORE_CMD"
msgstr ""

#. type: pindex
#: zsh.texi:11479
#, no-wrap
msgid "DEBUGBEFORECMD"
msgstr ""

#. type: pindex
#: zsh.texi:11480
#, no-wrap
msgid "NODEBUGBEFORECMD"
msgstr ""

#. type: cindex
#: zsh.texi:11481
#, no-wrap
msgid "traps, DEBUG, before or after command"
msgstr ""

#. type: cindex
#: zsh.texi:11482
#, no-wrap
msgid "DEBUG trap, before or after command"
msgstr ""

#. type: item
#: zsh.texi:11483
#, no-wrap
msgid "@t{DEBUG_BEFORE_CMD} <D>"
msgstr ""

#. type: table
#: zsh.texi:11487
msgid ""
"Run the @t{DEBUG} trap before each command; otherwise it is run after each "
"command.  Setting this option mimics the behaviour of ksh 93; with the "
"option unset the behaviour is that of ksh 88."
msgstr ""

#. type: table
#: zsh.texi:11488 zsh.texi:12617 zsh.texi:12668
#, no-wrap
msgid "ERR_EXIT"
msgstr ""

#. type: pindex
#: zsh.texi:11489
#, no-wrap
msgid "NO_ERR_EXIT"
msgstr ""

#. type: pindex
#: zsh.texi:11490
#, no-wrap
msgid "ERREXIT"
msgstr ""

#. type: pindex
#: zsh.texi:11491
#, no-wrap
msgid "NOERREXIT"
msgstr ""

#. type: cindex
#: zsh.texi:11492
#, no-wrap
msgid "exit status, trapping"
msgstr ""

#. type: item
#: zsh.texi:11493
#, no-wrap
msgid "@t{ERR_EXIT} (@t{-e}, ksh: @t{-e})"
msgstr ""

#. type: table
#: zsh.texi:11497
msgid ""
"If a command has a non-zero exit status, execute the @t{ZERR} trap, if set, "
"and exit.  This is disabled while running initialization scripts."
msgstr ""

#. type: table
#: zsh.texi:11505
msgid ""
"The behaviour is also disabled inside @t{DEBUG} traps.  In this case the "
"option is handled specially: it is unset on entry to the trap.  If the "
"option @t{DEBUG_BEFORE_CMD} is set, as it is by default, and the option "
"@t{ERR_EXIT} is found to have been set on exit, then the command for which "
"the @t{DEBUG} trap is being executed is skipped.  The option is restored "
"after the trap exits."
msgstr ""

#. type: table
#: zsh.texi:11509
msgid ""
"Non-zero status in a command list containing @t{&&} or @t{||} is ignored for "
"commands not at the end of the list.  Hence"
msgstr ""

#. type: example
#: zsh.texi:11513
#, no-wrap
msgid "false && true\n"
msgstr ""

#. type: table
#: zsh.texi:11517
msgid "does not trigger exit."
msgstr ""

#. type: table
#: zsh.texi:11522
msgid ""
"Exiting due to @t{ERR_EXIT} has certain interactions with asynchronous jobs "
"noted in @ref{Jobs & Signals}."
msgstr ""

#. type: t{#1}
#: zsh.texi:11523 zsh.texi:11529
#, no-wrap
msgid "ERR_RETURN"
msgstr ""

#. type: pindex
#: zsh.texi:11524
#, no-wrap
msgid "NO_ERR_RETURN"
msgstr ""

#. type: pindex
#: zsh.texi:11525
#, no-wrap
msgid "ERRRETURN"
msgstr ""

#. type: pindex
#: zsh.texi:11526
#, no-wrap
msgid "NOERRRETURN"
msgstr ""

#. type: cindex
#: zsh.texi:11527
#, no-wrap
msgid "function return, on error"
msgstr ""

#. type: cindex
#: zsh.texi:11528
#, no-wrap
msgid "return from function, on error"
msgstr ""

#. type: table
#: zsh.texi:11535
msgid ""
"If a command has a non-zero exit status, return immediately from the "
"enclosing function.  The logic is similar to that for @t{ERR_EXIT}, except "
"that an implicit @t{return} statement is executed instead of an @t{exit}.  "
"This will trigger an exit at the outermost level of a non-interactive "
"script."
msgstr ""

#. type: table
#: zsh.texi:11540
msgid ""
"Normally this option inherits the behaviour of @t{ERR_EXIT} that code "
"followed by `@t{&&}' `@t{||}' does not trigger a return.  Hence in the "
"following:"
msgstr ""

#. type: example
#: zsh.texi:11544
#, no-wrap
msgid "summit || true\n"
msgstr ""

#. type: table
#: zsh.texi:11549
msgid "no return is forced as the combined effect always has a zero return status."
msgstr ""

#. type: table
#: zsh.texi:11556
msgid ""
"Note. however, that if @t{summit} in the above example is itself a function, "
"code inside it is considered separately: it may force a return from "
"@t{summit} (assuming the option remains set within @t{summit}), but not from "
"the enclosing context.  This behaviour is different from @t{ERR_EXIT} which "
"is unaffected by function scope."
msgstr ""

#. type: pindex
#: zsh.texi:11557
#, no-wrap
msgid "EVAL_LINENO"
msgstr ""

#. type: pindex
#: zsh.texi:11558
#, no-wrap
msgid "NO_EVAL_LINENO"
msgstr ""

#. type: pindex
#: zsh.texi:11559
#, no-wrap
msgid "EVALLINENO"
msgstr ""

#. type: pindex
#: zsh.texi:11560
#, no-wrap
msgid "NOEVALLINENO"
msgstr ""

#. type: cindex
#: zsh.texi:11561
#, no-wrap
msgid "line number, in evaluated expression"
msgstr ""

#. type: item
#: zsh.texi:11562
#, no-wrap
msgid "@t{EVAL_LINENO} <Z>"
msgstr ""

#. type: table
#: zsh.texi:11572
msgid ""
"If set, line numbers of expressions evaluated using the builtin @t{eval} are "
"tracked separately of the enclosing environment.  This applies both to the "
"parameter @t{LINENO} and the line number output by the prompt escape "
"@t{%i}.  If the option is set, the prompt escape @t{%N} will output the "
"string `@t{(eval)}' instead of the script or function name as an "
"indication.  (The two prompt escapes are typically used in the parameter "
"@t{PS4} to be output when the option @t{XTRACE} is set.)  If @t{EVAL_LINENO} "
"is unset, the line number of the surrounding script or function is retained "
"during the evaluation."
msgstr ""

#. type: pindex
#: zsh.texi:11573
#, no-wrap
msgid "EXEC"
msgstr ""

#. type: pindex
#: zsh.texi:11574
#, no-wrap
msgid "NO_EXEC"
msgstr ""

#. type: pindex
#: zsh.texi:11575
#, no-wrap
msgid "NOEXEC"
msgstr ""

#. type: cindex
#: zsh.texi:11576
#, no-wrap
msgid "command execution, enabling"
msgstr ""

#. type: item
#: zsh.texi:11577
#, no-wrap
msgid "@t{EXEC} (@t{+n}, ksh: @t{+n}) <D>"
msgstr ""

#. type: table
#: zsh.texi:11582
msgid ""
"Do execute commands.  Without this option, commands are read and checked for "
"syntax errors, but not executed.  This option cannot be turned off in an "
"interactive shell, except when `@t{-n}' is supplied to the shell at startup."
msgstr ""

#. type: pindex
#: zsh.texi:11583
#, no-wrap
msgid "FUNCTION_ARGZERO"
msgstr ""

#. type: pindex
#: zsh.texi:11584
#, no-wrap
msgid "NO_FUNCTION_ARGZERO"
msgstr ""

#. type: pindex
#: zsh.texi:11585
#, no-wrap
msgid "FUNCTIONARGZERO"
msgstr ""

#. type: pindex
#: zsh.texi:11586
#, no-wrap
msgid "NOFUNCTIONARGZERO"
msgstr ""

#. type: cindex
#: zsh.texi:11587
#, no-wrap
msgid "$0, setting"
msgstr ""

#. type: item
#: zsh.texi:11588
#, no-wrap
msgid "@t{FUNCTION_ARGZERO} <C> <Z>"
msgstr ""

#. type: table
#: zsh.texi:11594
msgid ""
"When executing a shell function or sourcing a script, set @t{$0} temporarily "
"to the name of the function/script.  Note that toggling @t{FUNCTION_ARGZERO} "
"from on to off (or off to on) does not change the current value of @t{$0}.  "
"Only the state upon entry to the function or script has an effect.  Compare "
"@t{POSIX_ARGZERO}."
msgstr ""

#. type: t{#1}
#: zsh.texi:11595 zsh.texi:11602
#, no-wrap
msgid "LOCAL_LOOPS"
msgstr ""

#. type: pindex
#: zsh.texi:11596
#, no-wrap
msgid "NO_LOCAL_LOOPS"
msgstr ""

#. type: pindex
#: zsh.texi:11597
#, no-wrap
msgid "LOCALLOOPS"
msgstr ""

#. type: pindex
#: zsh.texi:11598
#, no-wrap
msgid "NOLOCALLOOPS"
msgstr ""

#. type: cindex
#: zsh.texi:11599
#, no-wrap
msgid "break, inside function"
msgstr ""

#. type: cindex
#: zsh.texi:11600
#, no-wrap
msgid "continue, inside function"
msgstr ""

#. type: cindex
#: zsh.texi:11601
#, no-wrap
msgid "function, scope of break and continue"
msgstr ""

#. type: table
#: zsh.texi:11609
msgid ""
"When this option is not set, the effect of @t{break} and @t{continue} "
"commands may propagate outside function scope, affecting loops in calling "
"functions.  When the option is set in a calling function, a @t{break} or a "
"@t{continue} that is not caught within a called function (regardless of the "
"setting of the option within that function)  produces a warning and the "
"effect is cancelled."
msgstr ""

#. type: pindex
#: zsh.texi:11610
#, no-wrap
msgid "LOCAL_OPTIONS"
msgstr ""

#. type: pindex
#: zsh.texi:11611
#, no-wrap
msgid "NO_LOCAL_OPTIONS"
msgstr ""

#. type: pindex
#: zsh.texi:11612
#, no-wrap
msgid "LOCALOPTIONS"
msgstr ""

#. type: pindex
#: zsh.texi:11613
#, no-wrap
msgid "NOLOCALOPTIONS"
msgstr ""

#. type: item
#: zsh.texi:11614
#, no-wrap
msgid "@t{LOCAL_OPTIONS} <K>"
msgstr ""

#. type: table
#: zsh.texi:11625
msgid ""
"If this option is set at the point of return from a shell function, most "
"options (including this one) which were in force upon entry to the function "
"are restored; options that are not restored are @t{PRIVILEGED} and "
"@t{RESTRICTED}.  Otherwise, only this option, and the @t{LOCAL_LOOPS}, "
"@t{XTRACE} and @t{PRINT_EXIT_VALUE} options are restored.  Hence if this is "
"explicitly unset by a shell function the other options in force at the point "
"of return will remain so.  A shell function can also guarantee itself a "
"known shell configuration with a formulation like `@t{emulate -L zsh}'; the "
"@t{-L} activates @t{LOCAL_OPTIONS}."
msgstr ""

#. type: t{#1}
#: zsh.texi:11626 zsh.texi:11630
#, no-wrap
msgid "LOCAL_PATTERNS"
msgstr ""

#. type: pindex
#: zsh.texi:11627
#, no-wrap
msgid "NO_LOCAL_PATTERNS"
msgstr ""

#. type: pindex
#: zsh.texi:11628
#, no-wrap
msgid "LOCALPATTERNS"
msgstr ""

#. type: pindex
#: zsh.texi:11629
#, no-wrap
msgid "NOLOCALPATTERNS"
msgstr ""

#. type: table
#: zsh.texi:11638
msgid ""
"If this option is set at the point of return from a shell function, the "
"state of pattern disables, as set with the builtin command `@t{disable -p}', "
"is restored to what it was when the function was entered.  The behaviour of "
"this option is similar to the effect of @t{LOCAL_OPTIONS} on options; hence "
"`@t{emulate -L sh}' (or indeed any other emulation with the @t{-L} option) "
"activates @t{LOCAL_PATTERNS}."
msgstr ""

#. type: pindex
#: zsh.texi:11639
#, no-wrap
msgid "LOCAL_TRAPS"
msgstr ""

#. type: pindex
#: zsh.texi:11640
#, no-wrap
msgid "NO_LOCAL_TRAPS"
msgstr ""

#. type: pindex
#: zsh.texi:11641
#, no-wrap
msgid "LOCALTRAPS"
msgstr ""

#. type: pindex
#: zsh.texi:11642
#, no-wrap
msgid "NOLOCALTRAPS"
msgstr ""

#. type: item
#: zsh.texi:11643
#, no-wrap
msgid "@t{LOCAL_TRAPS} <K>"
msgstr ""

#. type: table
#: zsh.texi:11651
msgid ""
"If this option is set when a signal trap is set inside a function, then the "
"previous status of the trap for that signal will be restored when the "
"function exits.  Note that this option must be set @emph{prior} to altering "
"the trap behaviour in a function; unlike @t{LOCAL_OPTIONS}, the value on "
"exit from the function is irrelevant.  However, it does not need to be set "
"before any global trap for that to be correctly restored by a function.  For "
"example,"
msgstr ""

#. type: example
#: zsh.texi:11657
#, no-wrap
msgid ""
"unsetopt localtraps\n"
"trap - INT\n"
"fn() @{ setopt localtraps; trap @value{dsq} INT; sleep 3; @}\n"
msgstr ""

#. type: table
#: zsh.texi:11661
msgid "will restore normal handling of @t{SIGINT} after the function exits."
msgstr ""

#. type: pindex
#: zsh.texi:11662
#, no-wrap
msgid "MULTI_FUNC_DEF"
msgstr ""

#. type: pindex
#: zsh.texi:11663
#, no-wrap
msgid "NO_MULTI_FUNC_DEF"
msgstr ""

#. type: pindex
#: zsh.texi:11664
#, no-wrap
msgid "MULTIFUNCDEF"
msgstr ""

#. type: pindex
#: zsh.texi:11665
#, no-wrap
msgid "NOMULTIFUNCDEF"
msgstr ""

#. type: item
#: zsh.texi:11666
#, no-wrap
msgid "@t{MULTI_FUNC_DEF} <Z>"
msgstr ""

#. type: table
#: zsh.texi:11672
msgid ""
"Allow definitions of multiple functions at once in the form `@t{fn1 "
"fn2}@var{...}@t{()}'; if the option is not set, this causes a parse error.  "
"Definition of multiple functions with the @t{function} keyword is always "
"allowed.  Multiple function definitions are not often used and can cause "
"obscure errors."
msgstr ""

#. type: pindex
#: zsh.texi:11673
#, no-wrap
msgid "MULTIOS"
msgstr ""

#. type: pindex
#: zsh.texi:11674
#, no-wrap
msgid "NO_MULTIOS"
msgstr ""

#. type: pindex
#: zsh.texi:11675
#, no-wrap
msgid "NOMULTIOS"
msgstr ""

#. type: item
#: zsh.texi:11676
#, no-wrap
msgid "@t{MULTIOS} <Z>"
msgstr ""

#. type: table
#: zsh.texi:11679
msgid ""
"Perform implicit @cite{tee}s or @cite{cat}s when multiple redirections are "
"attempted (see @ref{Redirection})."
msgstr ""

#. type: pindex
#: zsh.texi:11680
#, no-wrap
msgid "OCTAL_ZEROES"
msgstr ""

#. type: pindex
#: zsh.texi:11681
#, no-wrap
msgid "NO_OCTAL_ZEROES"
msgstr ""

#. type: pindex
#: zsh.texi:11682
#, no-wrap
msgid "OCTALZEROES"
msgstr ""

#. type: pindex
#: zsh.texi:11683
#, no-wrap
msgid "NOOCTALZEROES"
msgstr ""

#. type: cindex
#: zsh.texi:11684
#, no-wrap
msgid "octal, arithmetic expressions"
msgstr ""

#. type: item
#: zsh.texi:11685
#, no-wrap
msgid "@t{OCTAL_ZEROES} <S>"
msgstr ""

#. type: table
#: zsh.texi:11690
msgid ""
"Interpret any integer constant beginning with a 0 as octal, per IEEE Std "
"1003.2-1992 (ISO 9945-2:1993).  This is not enabled by default as it causes "
"problems with parsing of, for example, date and time strings with leading "
"zeroes."
msgstr ""

#. type: table
#: zsh.texi:11695
msgid ""
"Sequences of digits indicating a numeric base such as the `@t{08}' component "
"in `@t{08#77}' are always interpreted as decimal, regardless of leading "
"zeroes."
msgstr ""

#. type: t{#1}
#: zsh.texi:11696 zsh.texi:11703
#, no-wrap
msgid "PIPE_FAIL"
msgstr ""

#. type: pindex
#: zsh.texi:11697
#, no-wrap
msgid "NO_PIPE_FAIL"
msgstr ""

#. type: pindex
#: zsh.texi:11698
#, no-wrap
msgid "PIPEFAIL"
msgstr ""

#. type: pindex
#: zsh.texi:11699
#, no-wrap
msgid "NOPIPEFAIL"
msgstr ""

#. type: cindex
#: zsh.texi:11700
#, no-wrap
msgid "exit status from pipeline"
msgstr ""

#. type: cindex
#: zsh.texi:11701
#, no-wrap
msgid "status, on exit from pipeline"
msgstr ""

#. type: cindex
#: zsh.texi:11702
#, no-wrap
msgid "pipeline, exit status from"
msgstr ""

#. type: table
#: zsh.texi:11709
msgid ""
"By default, when a pipeline exits the exit status recorded by the shell and "
"returned by the shell variable @t{$?} reflects that of the rightmost element "
"of a pipeline.  If this option is set, the exit status instead reflects the "
"status of the rightmost element of the pipeline that was non-zero, or zero "
"if all elements exited with zero status."
msgstr ""

#. type: t{#1}
#: zsh.texi:11710 zsh.texi:11714
#, no-wrap
msgid "SOURCE_TRACE"
msgstr ""

#. type: pindex
#: zsh.texi:11711
#, no-wrap
msgid "NO_SOURCE_TRACE"
msgstr ""

#. type: pindex
#: zsh.texi:11712
#, no-wrap
msgid "SOURCETRACE"
msgstr ""

#. type: pindex
#: zsh.texi:11713
#, no-wrap
msgid "NOSOURCETRACE"
msgstr ""

#. type: table
#: zsh.texi:11721
msgid ""
"If set, zsh will print an informational message announcing the name of each "
"file it loads.  The format of the output is similar to that for the "
"@t{XTRACE} option, with the message @t{<sourcetrace>}.  A file may be loaded "
"by the shell itself when it starts up and shuts down (@t{Startup/Shutdown "
"Files}) or by the use of the `@t{source}' and `@t{dot}' builtin commands."
msgstr ""

#. type: t{#1}
#: zsh.texi:11722 zsh.texi:11726
#, no-wrap
msgid "TYPESET_SILENT"
msgstr ""

#. type: pindex
#: zsh.texi:11723
#, no-wrap
msgid "NO_TYPESET_SILENT"
msgstr ""

#. type: pindex
#: zsh.texi:11724
#, no-wrap
msgid "TYPESETSILENT"
msgstr ""

#. type: pindex
#: zsh.texi:11725
#, no-wrap
msgid "NOTYPESETSILENT"
msgstr ""

#. type: table
#: zsh.texi:11733
msgid ""
"If this is unset, executing any of the `@t{typeset}' family of commands with "
"no options and a list of parameters that have no values to be assigned but "
"already exist will display the value of the parameter.  If the option is "
"set, they will only be shown when parameters are selected with the `@t{-m}' "
"option.  The option `@t{-p}' is available whether or not the option is set."
msgstr ""

#. type: pindex
#: zsh.texi:11734
#, no-wrap
msgid "TYPESET_TO_UNSET"
msgstr ""

#. type: pindex
#: zsh.texi:11735
#, no-wrap
msgid "NO_TYPESET_TO_UNSET"
msgstr ""

#. type: pindex
#: zsh.texi:11736
#, no-wrap
msgid "TYPESETTOUNSET"
msgstr ""

#. type: pindex
#: zsh.texi:11737
#, no-wrap
msgid "NOTYPESETTOUNSET"
msgstr ""

#. type: item
#: zsh.texi:11738
#, no-wrap
msgid "@t{TYPESET_TO_UNSET} <K> <S>"
msgstr ""

#. type: table
#: zsh.texi:11743
msgid ""
"When declaring a new parameter with any of the `@t{typeset}' family of "
"related commands, the parameter remains unset unless and until a value is "
"explicity assigned to it, either in the `@t{typeset}' command itself or as a "
"later assignment statement."
msgstr ""

#. type: table
#: zsh.texi:11744 zsh.texi:12645 zsh.texi:12690
#, no-wrap
msgid "VERBOSE"
msgstr ""

#. type: pindex
#: zsh.texi:11745
#, no-wrap
msgid "NO_VERBOSE"
msgstr ""

#. type: pindex
#: zsh.texi:11746
#, no-wrap
msgid "NOVERBOSE"
msgstr ""

#. type: cindex
#: zsh.texi:11747
#, no-wrap
msgid "tracing, of input lines"
msgstr ""

#. type: cindex
#: zsh.texi:11748
#, no-wrap
msgid "input, tracing"
msgstr ""

#. type: item
#: zsh.texi:11749
#, no-wrap
msgid "@t{VERBOSE} (@t{-v}, ksh: @t{-v})"
msgstr ""

#. type: table
#: zsh.texi:11751
msgid "Print shell input lines as they are read."
msgstr ""

#. type: table
#: zsh.texi:11752 zsh.texi:12649 zsh.texi:12692
#, no-wrap
msgid "XTRACE"
msgstr ""

#. type: pindex
#: zsh.texi:11753
#, no-wrap
msgid "NO_XTRACE"
msgstr ""

#. type: pindex
#: zsh.texi:11754
#, no-wrap
msgid "NOXTRACE"
msgstr ""

#. type: cindex
#: zsh.texi:11755
#, no-wrap
msgid "tracing, of commands"
msgstr ""

#. type: cindex
#: zsh.texi:11756
#, no-wrap
msgid "commands, tracing"
msgstr ""

#. type: item
#: zsh.texi:11757
#, no-wrap
msgid "@t{XTRACE} (@t{-x}, ksh: @t{-x})"
msgstr ""

#. type: table
#: zsh.texi:11762
msgid ""
"Print commands and their arguments as they are executed.  The output is "
"preceded by the value of @t{$PS4}, formatted as described in @ref{Prompt "
"Expansion}."
msgstr ""

#. type: subsection
#: zsh.texi:11767
#, no-wrap
msgid "Shell Emulation"
msgstr ""

#. type: pindex
#: zsh.texi:11770
#, no-wrap
msgid "APPEND_CREATE"
msgstr ""

#. type: pindex
#: zsh.texi:11771
#, no-wrap
msgid "NO_APPEND_CREATE"
msgstr ""

#. type: pindex
#: zsh.texi:11772
#, no-wrap
msgid "APPENDCREATE"
msgstr ""

#. type: pindex
#: zsh.texi:11773
#, no-wrap
msgid "NOAPPENDCREATE"
msgstr ""

#. type: cindex
#: zsh.texi:11774
#, no-wrap
msgid "clobbering, POSIX compatibility"
msgstr ""

#. type: cindex
#: zsh.texi:11775
#, no-wrap
msgid "file clobbering, POSIX compatibility"
msgstr ""

#. type: cindex
#: zsh.texi:11776
#, no-wrap
msgid "no clobber, POSIX compatible"
msgstr ""

#. type: item
#: zsh.texi:11777
#, no-wrap
msgid "@t{APPEND_CREATE} <K> <S>"
msgstr ""

#. type: table
#: zsh.texi:11779
msgid "This option only applies when @t{NO_CLOBBER} (-@t{C}) is in effect."
msgstr ""

#. type: table
#: zsh.texi:11785
msgid ""
"If this option is not set, the shell will report an error when a append "
"redirection (@t{>>}) is used on a file that does not already exists (the "
"traditional zsh behaviour of @t{NO_CLOBBER}).  If the option is set, no "
"error is reported (POSIX behaviour)."
msgstr ""

#. type: t{#1}
#: zsh.texi:11786 zsh.texi:11792
#, no-wrap
msgid "BASH_REMATCH"
msgstr ""

#. type: pindex
#: zsh.texi:11787
#, no-wrap
msgid "NO_BASH_REMATCH"
msgstr ""

#. type: pindex
#: zsh.texi:11788
#, no-wrap
msgid "BASHREMATCH"
msgstr ""

#. type: pindex
#: zsh.texi:11789
#, no-wrap
msgid "NOBASHREMATCH"
msgstr ""

#. type: cindex
#: zsh.texi:11790
#, no-wrap
msgid "bash, BASH_REMATCH variable"
msgstr ""

#. type: cindex
#: zsh.texi:11791
#, no-wrap
msgid "regexp, bash BASH_REMATCH variable"
msgstr ""

#. type: table
#: zsh.texi:11802
msgid ""
"When set, matches performed with the @t{=~} operator will set the "
"@t{BASH_REMATCH} array variable, instead of the default @t{MATCH} and "
"@t{match} variables.  The first element of the @t{BASH_REMATCH} array will "
"contain the entire matched text and subsequent elements will contain "
"extracted substrings.  This option makes more sense when @t{KSH_ARRAYS} is "
"also set, so that the entire matched portion is stored at index 0 and the "
"first substring is at index 1.  Without this option, the @t{MATCH} variable "
"contains the entire matched text and the @t{match} array variable contains "
"substrings."
msgstr ""

#. type: pindex
#: zsh.texi:11803
#, no-wrap
msgid "BSD_ECHO"
msgstr ""

#. type: pindex
#: zsh.texi:11804
#, no-wrap
msgid "NO_BSD_ECHO"
msgstr ""

#. type: pindex
#: zsh.texi:11805
#, no-wrap
msgid "BSDECHO"
msgstr ""

#. type: pindex
#: zsh.texi:11806
#, no-wrap
msgid "NOBSDECHO"
msgstr ""

#. type: cindex
#: zsh.texi:11807
#, no-wrap
msgid "echo, BSD compatible"
msgstr ""

#. type: item
#: zsh.texi:11808
#, no-wrap
msgid "@t{BSD_ECHO} <S>"
msgstr ""

#. type: table
#: zsh.texi:11812
msgid ""
"Make the @t{echo} builtin compatible with the BSD echo(1) command.  This "
"disables backslashed escape sequences in echo strings unless the @t{-e} "
"option is specified."
msgstr ""

#. type: t{#1}
#: zsh.texi:11813 zsh.texi:11818
#, no-wrap
msgid "CONTINUE_ON_ERROR"
msgstr ""

#. type: pindex
#: zsh.texi:11814
#, no-wrap
msgid "NO_CONTINUE_ON_ERROR"
msgstr ""

#. type: pindex
#: zsh.texi:11815
#, no-wrap
msgid "CONTINUEONERROR"
msgstr ""

#. type: pindex
#: zsh.texi:11816
#, no-wrap
msgid "NOCONTINUEONERROR"
msgstr ""

#. type: cindex
#: zsh.texi:11817
#, no-wrap
msgid "error, option to continue script on"
msgstr ""

#. type: table
#: zsh.texi:11827
msgid ""
"If a fatal error is encountered (see @ref{Errors}), and the code is running "
"in a script, the shell will resume execution at the next statement in the "
"script at the top level, in other words outside all functions or shell "
"constructs such as loops and conditions.  This mimics the behaviour of "
"interactive shells, where the shell returns to the line editor to read a new "
"command; it was the normal behaviour in versions of zsh before 5.0.1."
msgstr ""

#. type: pindex
#: zsh.texi:11828
#, no-wrap
msgid "CSH_JUNKIE_HISTORY"
msgstr ""

#. type: pindex
#: zsh.texi:11829
#, no-wrap
msgid "NO_CSH_JUNKIE_HISTORY"
msgstr ""

#. type: pindex
#: zsh.texi:11830
#, no-wrap
msgid "CSHJUNKIEHISTORY"
msgstr ""

#. type: pindex
#: zsh.texi:11831
#, no-wrap
msgid "NOCSHJUNKIEHISTORY"
msgstr ""

#. type: cindex
#: zsh.texi:11832
#, no-wrap
msgid "csh, history style"
msgstr ""

#. type: cindex
#: zsh.texi:11833
#, no-wrap
msgid "history style, csh"
msgstr ""

#. type: item
#: zsh.texi:11834
#, no-wrap
msgid "@t{CSH_JUNKIE_HISTORY} <C>"
msgstr ""

#. type: table
#: zsh.texi:11839
msgid ""
"A history reference without an event specifier will always refer to the "
"previous command.  Without this option, such a history reference refers to "
"the same event as the previous history reference on the current command "
"line, defaulting to the previous command."
msgstr ""

#. type: pindex
#: zsh.texi:11840
#, no-wrap
msgid "CSH_JUNKIE_LOOPS"
msgstr ""

#. type: pindex
#: zsh.texi:11841
#, no-wrap
msgid "NO_CSH_JUNKIE_LOOPS"
msgstr ""

#. type: pindex
#: zsh.texi:11842
#, no-wrap
msgid "CSHJUNKIELOOPS"
msgstr ""

#. type: pindex
#: zsh.texi:11843
#, no-wrap
msgid "NOCSHJUNKIELOOPS"
msgstr ""

#. type: cindex
#: zsh.texi:11844
#, no-wrap
msgid "csh, loop style"
msgstr ""

#. type: cindex
#: zsh.texi:11845
#, no-wrap
msgid "loop style, csh"
msgstr ""

#. type: item
#: zsh.texi:11846
#, no-wrap
msgid "@t{CSH_JUNKIE_LOOPS} <C>"
msgstr ""

#. type: table
#: zsh.texi:11849
msgid ""
"Allow loop bodies to take the form `@var{list}@t{; end}' instead of `@t{do "
"}@var{list}@t{; done}'."
msgstr ""

#. type: pindex
#: zsh.texi:11850
#, no-wrap
msgid "CSH_JUNKIE_QUOTES"
msgstr ""

#. type: pindex
#: zsh.texi:11851
#, no-wrap
msgid "NO_CSH_JUNKIE_QUOTES"
msgstr ""

#. type: pindex
#: zsh.texi:11852
#, no-wrap
msgid "CSHJUNKIEQUOTES"
msgstr ""

#. type: pindex
#: zsh.texi:11853
#, no-wrap
msgid "NOCSHJUNKIEQUOTES"
msgstr ""

#. type: cindex
#: zsh.texi:11854
#, no-wrap
msgid "csh, quoting style"
msgstr ""

#. type: cindex
#: zsh.texi:11855
#, no-wrap
msgid "quoting style, csh"
msgstr ""

#. type: item
#: zsh.texi:11856
#, no-wrap
msgid "@t{CSH_JUNKIE_QUOTES} <C>"
msgstr ""

#. type: table
#: zsh.texi:11863
msgid ""
"Changes the rules for single- and double-quoted text to match that of "
"@cite{csh}.  These require that embedded newlines be preceded by a "
"backslash; unescaped newlines will cause an error message.  In double-quoted "
"strings, it is made impossible to escape `@t{$}', `@t{`}' or `@t{\"}' (and "
"`@t{\\}' itself no longer needs escaping).  Command substitutions are only "
"expanded once, and cannot be nested."
msgstr ""

#. type: pindex
#: zsh.texi:11864
#, no-wrap
msgid "CSH_NULLCMD"
msgstr ""

#. type: pindex
#: zsh.texi:11865
#, no-wrap
msgid "NO_CSH_NULLCMD"
msgstr ""

#. type: pindex
#: zsh.texi:11866
#, no-wrap
msgid "CSHNULLCMD"
msgstr ""

#. type: pindex
#: zsh.texi:11867
#, no-wrap
msgid "NOCSHNULLCMD"
msgstr ""

#. type: vindex
#: zsh.texi:11868 zsh.texi:12180
#, no-wrap
msgid "NULLCMD, ignoring"
msgstr ""

#. type: vindex
#: zsh.texi:11869 zsh.texi:12181
#, no-wrap
msgid "READNULLCMD, ignoring"
msgstr ""

#. type: cindex
#: zsh.texi:11870
#, no-wrap
msgid "redirections with no command, csh"
msgstr ""

#. type: cindex
#: zsh.texi:11871
#, no-wrap
msgid "csh, redirections with no command"
msgstr ""

#. type: item
#: zsh.texi:11872
#, no-wrap
msgid "@t{CSH_NULLCMD} <C>"
msgstr ""

#. type: table
#: zsh.texi:11876
msgid ""
"Do not use the values of @t{NULLCMD} and @t{READNULLCMD} when running "
"redirections with no command.  This make such redirections fail (see "
"@ref{Redirection})."
msgstr ""

#. type: pindex
#: zsh.texi:11877
#, no-wrap
msgid "KSH_ARRAYS"
msgstr ""

#. type: pindex
#: zsh.texi:11878
#, no-wrap
msgid "NO_KSH_ARRAYS"
msgstr ""

#. type: pindex
#: zsh.texi:11879
#, no-wrap
msgid "KSHARRAYS"
msgstr ""

#. type: pindex
#: zsh.texi:11880
#, no-wrap
msgid "NOKSHARRAYS"
msgstr ""

#. type: cindex
#: zsh.texi:11881
#, no-wrap
msgid "arrays, ksh style"
msgstr ""

#. type: cindex
#: zsh.texi:11882
#, no-wrap
msgid "array style, ksh"
msgstr ""

#. type: cindex
#: zsh.texi:11883
#, no-wrap
msgid "ksh, array style"
msgstr ""

#. type: item
#: zsh.texi:11884
#, no-wrap
msgid "@t{KSH_ARRAYS} <K> <S>"
msgstr ""

#. type: table
#: zsh.texi:11891
msgid ""
"Emulate @cite{ksh} array handling as closely as possible.  If this option is "
"set, array elements are numbered from zero, an array parameter without "
"subscript refers to the first element instead of the whole array, and braces "
"are required to delimit a subscript (`@t{$@{path[2]@}}' rather than just "
"`@t{$path[2]}') or to apply modifiers to any parameter (`@t{$@{PWD:h@}}' "
"rather than `@t{$PWD:h}')."
msgstr ""

#. type: pindex
#: zsh.texi:11892
#, no-wrap
msgid "KSH_AUTOLOAD"
msgstr ""

#. type: pindex
#: zsh.texi:11893
#, no-wrap
msgid "NO_KSH_AUTOLOAD"
msgstr ""

#. type: pindex
#: zsh.texi:11894
#, no-wrap
msgid "KSHAUTOLOAD"
msgstr ""

#. type: pindex
#: zsh.texi:11895
#, no-wrap
msgid "NOKSHAUTOLOAD"
msgstr ""

#. type: item
#: zsh.texi:11896
#, no-wrap
msgid "@t{KSH_AUTOLOAD} <K> <S>"
msgstr ""

#. type: table
#: zsh.texi:11903
msgid ""
"Emulate @cite{ksh} function autoloading.  This means that when a function is "
"autoloaded, the corresponding file is merely executed, and must define the "
"function itself.  (By default, the function is defined to the contents of "
"the file.  However, the most common @cite{ksh}-style case - of the file "
"containing only a simple definition of the function - is always handled in "
"the @cite{ksh}-compatible manner.)"
msgstr ""

#. type: pindex
#: zsh.texi:11904
#, no-wrap
msgid "KSH_OPTION_PRINT"
msgstr ""

#. type: pindex
#: zsh.texi:11905
#, no-wrap
msgid "NO_KSH_OPTION_PRINT"
msgstr ""

#. type: pindex
#: zsh.texi:11906
#, no-wrap
msgid "KSHOPTIONPRINT"
msgstr ""

#. type: pindex
#: zsh.texi:11907
#, no-wrap
msgid "NOKSHOPTIONPRINT"
msgstr ""

#. type: cindex
#: zsh.texi:11908
#, no-wrap
msgid "option printing, ksh style"
msgstr ""

#. type: cindex
#: zsh.texi:11909
#, no-wrap
msgid "option printing style, ksh"
msgstr ""

#. type: cindex
#: zsh.texi:11910
#, no-wrap
msgid "ksh, option printing style"
msgstr ""

#. type: item
#: zsh.texi:11911
#, no-wrap
msgid "@t{KSH_OPTION_PRINT} <K>"
msgstr ""

#. type: table
#: zsh.texi:11915
msgid ""
"Alters the way options settings are printed: instead of separate lists of "
"set and unset options, all options are shown, marked `on' if they are in the "
"non-default state, `off' otherwise."
msgstr ""

#. type: t{#1}
#: zsh.texi:11916 zsh.texi:11922
#, no-wrap
msgid "KSH_TYPESET"
msgstr ""

#. type: pindex
#: zsh.texi:11917
#, no-wrap
msgid "NO_KSH_TYPESET"
msgstr ""

#. type: pindex
#: zsh.texi:11918
#, no-wrap
msgid "KSHTYPESET"
msgstr ""

#. type: pindex
#: zsh.texi:11919
#, no-wrap
msgid "NOKSHTYPESET"
msgstr ""

#. type: cindex
#: zsh.texi:11920
#, no-wrap
msgid "argument splitting, in typeset etc."
msgstr ""

#. type: cindex
#: zsh.texi:11921
#, no-wrap
msgid "ksh, argument splitting in typeset"
msgstr ""

#. type: table
#: zsh.texi:11928
msgid ""
"This option is now obsolete: a better appropximation to the behaviour of "
"other shells is obtained with the reserved word interface to @t{declare}, "
"@t{export}, @t{float}, @t{integer}, @t{local}, @t{readonly} and "
"@t{typeset}.  Note that the option is only applied when the reserved word "
"interface is @emph{not} in use."
msgstr ""

#. type: table
#: zsh.texi:11935
msgid ""
"Alters the way arguments to the @t{typeset} family of commands, including "
"@t{declare}, @t{export}, @t{float}, @t{integer}, @t{local} and @t{readonly}, "
"are processed.  Without this option, zsh will perform normal word splitting "
"after command and parameter expansion in arguments of an assignment; with "
"it, word splitting does not take place in those cases."
msgstr ""

#. type: t{#1}
#: zsh.texi:11936 zsh.texi:11941
#, no-wrap
msgid "KSH_ZERO_SUBSCRIPT"
msgstr ""

#. type: pindex
#: zsh.texi:11937
#, no-wrap
msgid "NO_KSH_ZERO_SUBSCRIPT"
msgstr ""

#. type: pindex
#: zsh.texi:11938
#, no-wrap
msgid "KSHZEROSUBSCRIPT"
msgstr ""

#. type: pindex
#: zsh.texi:11939
#, no-wrap
msgid "NOKSHZEROSUBSCRIPT"
msgstr ""

#. type: cindex
#: zsh.texi:11940
#, no-wrap
msgid "arrays, behaviour of index zero"
msgstr ""

#. type: table
#: zsh.texi:11945
msgid ""
"Treat use of a subscript of value zero in array or string expressions as a "
"reference to the first element, i.e. the element that usually has the "
"subscript 1.  Ignored if @t{KSH_ARRAYS} is also set."
msgstr ""

#. type: table
#: zsh.texi:11953
msgid ""
"If neither this option nor @t{KSH_ARRAYS} is set, accesses to an element of "
"an array or string with subscript zero return an empty element or string, "
"while attempts to set element zero of an array or string are treated as an "
"error.  However, attempts to set an otherwise valid subscript range that "
"includes zero will succeed.  For example, if @t{KSH_ZERO_SUBSCRIPT} is not "
"set,"
msgstr ""

#. type: example
#: zsh.texi:11957
#, no-wrap
msgid "array[0]=(element)\n"
msgstr ""

#. type: table
#: zsh.texi:11961
msgid "is an error, while"
msgstr ""

#. type: example
#: zsh.texi:11965
#, no-wrap
msgid "array[0,1]=(element)\n"
msgstr ""

#. type: table
#: zsh.texi:11969
msgid "is not and will replace the first element of the array."
msgstr ""

#. type: table
#: zsh.texi:11973
msgid ""
"This option is for compatibility with older versions of the shell and is not "
"recommended in new code."
msgstr ""

#. type: pindex
#: zsh.texi:11974
#, no-wrap
msgid "POSIX_ALIASES"
msgstr ""

#. type: pindex
#: zsh.texi:11975
#, no-wrap
msgid "NO_POSIX_ALIASES"
msgstr ""

#. type: pindex
#: zsh.texi:11976
#, no-wrap
msgid "POSIXALIASES"
msgstr ""

#. type: pindex
#: zsh.texi:11977
#, no-wrap
msgid "NOPOSIXALIASES"
msgstr ""

#. type: item
#: zsh.texi:11978
#, no-wrap
msgid "@t{POSIX_ALIASES} <K> <S>"
msgstr ""

#. type: table
#: zsh.texi:11983
msgid ""
"When this option is set, reserved words are not candidates for alias "
"expansion: it is still possible to declare any of them as an alias, but the "
"alias will never be expanded.  Reserved words are described in @ref{Reserved "
"Words}."
msgstr ""

#. type: table
#: zsh.texi:11994
msgid ""
"Alias expansion takes place while text is being read; hence when this option "
"is set it does not take effect until the end of any function or other piece "
"of shell code parsed as one unit.  Note this may cause differences from "
"other shells even when the option is in effect.  For example, when running a "
"command with `@t{zsh -c}', or even `@t{zsh -o posixaliases -c}', the entire "
"command argument is parsed as one unit, so aliases defined within the "
"argument are not available even in later lines.  If in doubt, avoid use of "
"aliases in non-interactive code."
msgstr ""

#. type: t{#1}
#: zsh.texi:11995 zsh.texi:12000
#, no-wrap
msgid "POSIX_ARGZERO"
msgstr ""

#. type: pindex
#: zsh.texi:11996
#, no-wrap
msgid "NO_POSIX_ARGZERO"
msgstr ""

#. type: pindex
#: zsh.texi:11997
#, no-wrap
msgid "POSIXARGZERO"
msgstr ""

#. type: pindex
#: zsh.texi:11998
#, no-wrap
msgid "NOPOSIXARGZERO"
msgstr ""

#. type: cindex
#: zsh.texi:11999
#, no-wrap
msgid "$0, using"
msgstr ""

#. type: table
#: zsh.texi:12009
msgid ""
"This option may be used to temporarily disable @t{FUNCTION_ARGZERO} and "
"thereby restore the value of @t{$0} to the name used to invoke the shell (or "
"as set by the @t{-c} command line option).  For compatibility with previous "
"versions of the shell, emulations use @t{NO_FUNCTION_ARGZERO} instead of "
"@t{POSIX_ARGZERO}, which may result in unexpected scoping of @t{$0} if the "
"emulation mode is changed inside a function or script.  To avoid this, "
"explicitly enable @t{POSIX_ARGZERO} in the @t{emulate} command:"
msgstr ""

#. type: example
#: zsh.texi:12013
#, no-wrap
msgid "emulate sh -o POSIX_ARGZERO\n"
msgstr ""

#. type: table
#: zsh.texi:12018
msgid ""
"Note that @t{NO_POSIX_ARGZERO} has no effect unless @t{FUNCTION_ARGZERO} was "
"already enabled upon entry to the function or script."
msgstr ""

#. type: pindex
#: zsh.texi:12019
#, no-wrap
msgid "POSIX_BUILTINS"
msgstr ""

#. type: pindex
#: zsh.texi:12020
#, no-wrap
msgid "NO_POSIX_BUILTINS"
msgstr ""

#. type: pindex
#: zsh.texi:12021
#, no-wrap
msgid "POSIXBUILTINS"
msgstr ""

#. type: pindex
#: zsh.texi:12022
#, no-wrap
msgid "NOPOSIXBUILTINS"
msgstr ""

#. type: item
#: zsh.texi:12023
#, no-wrap
msgid "@t{POSIX_BUILTINS} <K> <S>"
msgstr ""

#. type: table
#: zsh.texi:12047
msgid ""
"When this option is set the @t{command} builtin can be used to execute shell "
"builtin commands.  Parameter assignments specified before shell functions "
"and special builtins are kept after the command completes unless the special "
"builtin is prefixed with the @t{command} builtin.  Special builtins are "
"@t{.}, @t{:}, @t{break}, @t{continue}, @t{declare}, @t{eval}, @t{exit}, "
"@t{export}, @t{integer}, @t{local}, @t{readonly}, @t{return}, @t{set}, "
"@t{shift}, @t{source}, @t{times}, @t{trap} and @t{unset}."
msgstr ""

#. type: table
#: zsh.texi:12052
msgid ""
"In addition, various error conditions associated with the above builtins or "
"@t{exec} cause a non-interactive shell to exit and an interactive shell to "
"return to its top-level processing."
msgstr ""

#. type: table
#: zsh.texi:12057
msgid ""
"Furthermore, functions and shell builtins are not executed after an @t{exec} "
"prefix; the command to be executed must be an external command found in the "
"path."
msgstr ""

#. type: table
#: zsh.texi:12063
msgid ""
"Furthermore, the @t{getopts} builtin behaves in a POSIX-compatible fashion "
"in that the associated variable @t{OPTIND} is not made local to functions, "
"and its value is calculated differently to match other shells."
msgstr ""

#. type: table
#: zsh.texi:12067
msgid ""
"Moreover, the warning and special exit code from @t{[[ -o "
"}@var{non_existent_option}@t{ ]]} are suppressed."
msgstr ""

#. type: pindex
#: zsh.texi:12068
#, no-wrap
msgid "POSIX_IDENTIFIERS"
msgstr ""

#. type: pindex
#: zsh.texi:12069
#, no-wrap
msgid "NO_POSIX_IDENTIFIERS"
msgstr ""

#. type: pindex
#: zsh.texi:12070
#, no-wrap
msgid "POSIXIDENTIFIERS"
msgstr ""

#. type: pindex
#: zsh.texi:12071
#, no-wrap
msgid "NOPOSIXIDENTIFIERS"
msgstr ""

#. type: cindex
#: zsh.texi:12072
#, no-wrap
msgid "identifiers, non-portable characters in"
msgstr ""

#. type: cindex
#: zsh.texi:12073
#, no-wrap
msgid "parameter names, non-portable characters in"
msgstr ""

#. type: item
#: zsh.texi:12074
#, no-wrap
msgid "@t{POSIX_IDENTIFIERS} <K> <S>"
msgstr ""

#. type: table
#: zsh.texi:12078
msgid ""
"When this option is set, only the ASCII characters @t{a} to @t{z}, @t{A} to "
"@t{Z}, @t{0} to @t{9} and @t{_} may be used in identifiers (names of shell "
"parameters and modules)."
msgstr ""

#. type: table
#: zsh.texi:12086
msgid ""
"In addition, setting this option limits the effect of parameter substitution "
"with no braces, so that the expression @t{$#} is treated as the parameter "
"@t{$#} even if followed by a valid parameter name.  When it is unset, zsh "
"allows expressions of the form @t{$#}@var{name} to refer to the length of "
"@t{$}@var{name}, even for special variables, for example in expressions such "
"as @t{$#-} and @t{$#*}."
msgstr ""

#. type: table
#: zsh.texi:12093
msgid ""
"Another difference is that with the option set assignment to an unset "
"variable in arithmetic context causes the variable to be created as a scalar "
"rather than a numeric type.  So after `@t{unset t; (( t = 3 ))}'. without "
"@t{POSIX_IDENTIFIERS} set @t{t} has integer type, while with it set it has "
"scalar type."
msgstr ""

#. type: table
#: zsh.texi:12103
msgid ""
"When the option is unset and multibyte character support is enabled (i.e. it "
"is compiled in and the option @t{MULTIBYTE} is set), then additionally any "
"alphanumeric characters in the local character set may be used in "
"identifiers.  Note that scripts and functions written with this feature are "
"not portable, and also that both options must be set before the script or "
"function is parsed; setting them during execution is not sufficient as the "
"syntax @var{variable}@t{=}@var{value} has already been parsed as a command "
"rather than an assignment."
msgstr ""

#. type: table
#: zsh.texi:12108
msgid ""
"If multibyte character support is not compiled into the shell this option is "
"ignored; all octets with the top bit set may be used in identifiers.  This "
"is non-standard but is the traditional zsh behaviour."
msgstr ""

#. type: pindex
#: zsh.texi:12109
#, no-wrap
msgid "POSIX_STRINGS"
msgstr ""

#. type: pindex
#: zsh.texi:12110
#, no-wrap
msgid "NO_POSIX_STRINGS"
msgstr ""

#. type: pindex
#: zsh.texi:12111
#, no-wrap
msgid "POSIXSTRINGS"
msgstr ""

#. type: pindex
#: zsh.texi:12112
#, no-wrap
msgid "NOPOSIXSTRINGS"
msgstr ""

#. type: cindex
#: zsh.texi:12113
#, no-wrap
msgid "discarding embedded nulls in $'...'"
msgstr ""

#. type: cindex
#: zsh.texi:12114
#, no-wrap
msgid "embedded nulls, in $'...'"
msgstr ""

#. type: cindex
#: zsh.texi:12115
#, no-wrap
msgid "nulls, embedded in $'...'"
msgstr ""

#. type: item
#: zsh.texi:12116
#, no-wrap
msgid "@t{POSIX_STRINGS} <K> <S>"
msgstr ""

#. type: table
#: zsh.texi:12120
msgid ""
"This option affects processing of quoted strings.  Currently it only affects "
"the behaviour of null characters, i.e. character 0 in the portable character "
"set corresponding to US ASCII."
msgstr ""

#. type: table
#: zsh.texi:12128
msgid ""
"When this option is not set, null characters embedded within strings of the "
"form @t{$'}@var{...}@t{'} are treated as ordinary characters. The entire "
"string is maintained within the shell and output to files where necessary, "
"although owing to restrictions of the library interface the string is "
"truncated at the null character in file names, environment variables, or in "
"arguments to external programs."
msgstr ""

#. type: table
#: zsh.texi:12133
msgid ""
"When this option is set, the @t{$'}@var{...}@t{'} expression is truncated at "
"the null character.  Note that remaining parts of the same string beyond the "
"termination of the quotes are not truncated."
msgstr ""

#. type: table
#: zsh.texi:12138
msgid ""
"For example, the command line argument @t{a$'b\\0c'd} is treated with the "
"option off as the characters @t{a}, @t{b}, null, @t{c}, @t{d}, and with the "
"option on as the characters @t{a}, @t{b}, @t{d}."
msgstr ""

#. type: pindex
#: zsh.texi:12139
#, no-wrap
msgid "POSIX_TRAPS"
msgstr ""

#. type: pindex
#: zsh.texi:12140
#, no-wrap
msgid "NO_POSIX_TRAPS"
msgstr ""

#. type: pindex
#: zsh.texi:12141
#, no-wrap
msgid "POSIXTRAPS"
msgstr ""

#. type: pindex
#: zsh.texi:12142
#, no-wrap
msgid "NOPOSIXTRAPS"
msgstr ""

#. type: cindex
#: zsh.texi:12143
#, no-wrap
msgid "traps, on function exit"
msgstr ""

#. type: cindex
#: zsh.texi:12144
#, no-wrap
msgid "traps, POSIX compatibility"
msgstr ""

#. type: item
#: zsh.texi:12145
#, no-wrap
msgid "@t{POSIX_TRAPS} <K> <S>"
msgstr ""

#. type: table
#: zsh.texi:12151
msgid ""
"When this option is set, the usual zsh behaviour of executing traps for "
"@t{EXIT} on exit from shell functions is suppressed.  In that case, "
"manipulating @t{EXIT} traps always alters the global trap for exiting the "
"shell; the @t{LOCAL_TRAPS} option is ignored for the @t{EXIT} trap."
msgstr ""

#. type: table
#: zsh.texi:12156
msgid ""
"Also, a @t{return} statement executed in a trap with no argument passes back "
"from the function the value from the surrounding context, not from code "
"executed within the trap."
msgstr ""

#. type: table
#: zsh.texi:12161
msgid ""
"Furthermore, if a trap is set to be ignored, this state persists when a "
"subshell is entered.  Without the option, the trap would be reset to its "
"default state at this point."
msgstr ""

#. type: pindex
#: zsh.texi:12162
#, no-wrap
msgid "SH_FILE_EXPANSION"
msgstr ""

#. type: pindex
#: zsh.texi:12163
#, no-wrap
msgid "NO_SH_FILE_EXPANSION"
msgstr ""

#. type: pindex
#: zsh.texi:12164
#, no-wrap
msgid "SHFILEEXPANSION"
msgstr ""

#. type: pindex
#: zsh.texi:12165
#, no-wrap
msgid "NOSHFILEEXPANSION"
msgstr ""

#. type: cindex
#: zsh.texi:12166
#, no-wrap
msgid "sh, expansion style"
msgstr ""

#. type: cindex
#: zsh.texi:12167
#, no-wrap
msgid "expansion style, sh"
msgstr ""

#. type: item
#: zsh.texi:12168
#, no-wrap
msgid "@t{SH_FILE_EXPANSION} <K> <S>"
msgstr ""

#. type: table
#: zsh.texi:12175
msgid ""
"Perform filename expansion (e.g., @t{~} expansion) @emph{before} parameter "
"expansion, command substitution, arithmetic expansion and brace expansion.  "
"If this option is unset, it is performed @emph{after} brace expansion, so "
"things like `@t{~$USERNAME}' and `@t{~@{pfalstad,rc@}}' will work."
msgstr ""

#. type: pindex
#: zsh.texi:12176
#, no-wrap
msgid "SH_NULLCMD"
msgstr ""

#. type: pindex
#: zsh.texi:12177
#, no-wrap
msgid "NO_SH_NULLCMD"
msgstr ""

#. type: pindex
#: zsh.texi:12178
#, no-wrap
msgid "SHNULLCMD"
msgstr ""

#. type: pindex
#: zsh.texi:12179
#, no-wrap
msgid "NOSHNULLCMD"
msgstr ""

#. type: cindex
#: zsh.texi:12182
#, no-wrap
msgid "sh, redirections with no command"
msgstr ""

#. type: cindex
#: zsh.texi:12183
#, no-wrap
msgid "ksh, redirections with no command"
msgstr ""

#. type: cindex
#: zsh.texi:12184
#, no-wrap
msgid "redirections with no command, sh"
msgstr ""

#. type: cindex
#: zsh.texi:12185
#, no-wrap
msgid "redirections with no command, ksh"
msgstr ""

#. type: item
#: zsh.texi:12186
#, no-wrap
msgid "@t{SH_NULLCMD} <K> <S>"
msgstr ""

#. type: table
#: zsh.texi:12189
msgid ""
"Do not use the values of @t{NULLCMD} and @t{READNULLCMD} when doing "
"redirections, use `@t{:}' instead (see @ref{Redirection})."
msgstr ""

#. type: pindex
#: zsh.texi:12190
#, no-wrap
msgid "SH_OPTION_LETTERS"
msgstr ""

#. type: pindex
#: zsh.texi:12191
#, no-wrap
msgid "NO_SH_OPTION_LETTERS"
msgstr ""

#. type: pindex
#: zsh.texi:12192
#, no-wrap
msgid "SHOPTIONLETTERS"
msgstr ""

#. type: pindex
#: zsh.texi:12193
#, no-wrap
msgid "NOSHOPTIONLETTERS"
msgstr ""

#. type: cindex
#: zsh.texi:12194
#, no-wrap
msgid "sh, single letter options style"
msgstr ""

#. type: cindex
#: zsh.texi:12195
#, no-wrap
msgid "ksh, single letter options style"
msgstr ""

#. type: cindex
#: zsh.texi:12196
#, no-wrap
msgid "single letter options, ksh style"
msgstr ""

#. type: cindex
#: zsh.texi:12197
#, no-wrap
msgid "options, single letter, ksh style"
msgstr ""

#. type: item
#: zsh.texi:12198
#, no-wrap
msgid "@t{SH_OPTION_LETTERS} <K> <S>"
msgstr ""

#. type: table
#: zsh.texi:12202
msgid ""
"If this option is set the shell tries to interpret single letter options "
"(which are used with @t{set} and @t{setopt}) like @cite{ksh} does.  This "
"also affects the value of the @t{-} special parameter."
msgstr ""

#. type: table
#: zsh.texi:12203 zsh.texi:12651
#, no-wrap
msgid "SH_WORD_SPLIT"
msgstr ""

#. type: pindex
#: zsh.texi:12204
#, no-wrap
msgid "NO_SH_WORD_SPLIT"
msgstr ""

#. type: pindex
#: zsh.texi:12205
#, no-wrap
msgid "SHWORDSPLIT"
msgstr ""

#. type: pindex
#: zsh.texi:12206
#, no-wrap
msgid "NOSHWORDSPLIT"
msgstr ""

#. type: cindex
#: zsh.texi:12207
#, no-wrap
msgid "field splitting, sh style"
msgstr ""

#. type: cindex
#: zsh.texi:12208
#, no-wrap
msgid "sh, field splitting style"
msgstr ""

#. type: item
#: zsh.texi:12209
#, no-wrap
msgid "@t{SH_WORD_SPLIT} (@t{-y}) <K> <S>"
msgstr ""

#. type: table
#: zsh.texi:12214
msgid ""
"Causes field splitting to be performed on unquoted parameter expansions.  "
"Note that this option has nothing to do with word splitting.  (See "
"@ref{Parameter Expansion}.)"
msgstr ""

#. type: table
#: zsh.texi:12215 zsh.texi:12220 zsh.texi:12660
#, no-wrap
msgid "TRAPS_ASYNC"
msgstr ""

#. type: pindex
#: zsh.texi:12216
#, no-wrap
msgid "NO_TRAPS_ASYNC"
msgstr ""

#. type: pindex
#: zsh.texi:12217
#, no-wrap
msgid "TRAPSASYNC"
msgstr ""

#. type: pindex
#: zsh.texi:12218
#, no-wrap
msgid "NOTRAPSASYNC"
msgstr ""

#. type: cindex
#: zsh.texi:12219
#, no-wrap
msgid "traps, asynchronous"
msgstr ""

#. type: table
#: zsh.texi:12225
msgid ""
"While waiting for a program to exit, handle signals and run traps "
"immediately.  Otherwise the trap is run after a child process has exited.  "
"Note this does not affect the point at which traps are run for any case "
"other than when the shell is waiting for a child process."
msgstr ""

#. type: subsection
#: zsh.texi:12230
#, no-wrap
msgid "Shell State"
msgstr ""

#. type: table
#: zsh.texi:12233 zsh.texi:12625 zsh.texi:12672
#, no-wrap
msgid "INTERACTIVE"
msgstr ""

#. type: pindex
#: zsh.texi:12234
#, no-wrap
msgid "NO_INTERACTIVE"
msgstr ""

#. type: pindex
#: zsh.texi:12235
#, no-wrap
msgid "NOINTERACTIVE"
msgstr ""

#. type: item
#: zsh.texi:12236
#, no-wrap
msgid "@t{INTERACTIVE} (@t{-i}, ksh: @t{-i})"
msgstr ""

#. type: table
#: zsh.texi:12245
msgid ""
"This is an interactive shell.  This option is set upon initialisation if the "
"standard input is a tty and commands are being read from standard input.  "
"(See the discussion of @t{SHIN_STDIN}.)  This heuristic may be overridden by "
"specifying a state for this option on the command line.  The value of this "
"option can only be changed via flags supplied at invocation of the shell.  "
"It cannot be changed once zsh is running."
msgstr ""

#. type: table
#: zsh.texi:12246 zsh.texi:12629 zsh.texi:12674
#, no-wrap
msgid "LOGIN"
msgstr ""

#. type: pindex
#: zsh.texi:12247
#, no-wrap
msgid "NO_LOGIN"
msgstr ""

#. type: pindex
#: zsh.texi:12248
#, no-wrap
msgid "NOLOGIN"
msgstr ""

#. type: item
#: zsh.texi:12249
#, no-wrap
msgid "@t{LOGIN} (@t{-l}, ksh: @t{-l})"
msgstr ""

#. type: table
#: zsh.texi:12253
msgid ""
"This is a login shell.  If this option is not explicitly set, the shell "
"becomes a login shell if the first character of the @t{argv[0]} passed to "
"the shell is a `@t{-}'."
msgstr ""

#. type: table
#: zsh.texi:12254 zsh.texi:12635 zsh.texi:12680
#, no-wrap
msgid "PRIVILEGED"
msgstr ""

#. type: pindex
#: zsh.texi:12255
#, no-wrap
msgid "NO_PRIVILEGED"
msgstr ""

#. type: pindex
#: zsh.texi:12256
#, no-wrap
msgid "NOPRIVILEGED"
msgstr ""

#. type: cindex
#: zsh.texi:12257
#, no-wrap
msgid "privileged mode"
msgstr ""

#. type: cindex
#: zsh.texi:12258
#, no-wrap
msgid "mode, privileged"
msgstr ""

#. type: item
#: zsh.texi:12259
#, no-wrap
msgid "@t{PRIVILEGED} (@t{-p}, ksh: @t{-p})"
msgstr ""

#. type: table
#: zsh.texi:12263
msgid ""
"Turn on privileged mode. Typically this is used when script is to be run "
"with elevated privileges. This should be done as follows directly with the "
"@t{-p} option to zsh so that it takes effect during startup."
msgstr ""

#. type: example
#: zsh.texi:12267
#, no-wrap
msgid "#!/bin/zsh -p\n"
msgstr ""

#. type: table
#: zsh.texi:12276
msgid ""
"The option is enabled automatically on startup if the effective user (group) "
"ID is not equal to the real user (group) ID. In this case, turning the "
"option off causes the effective user and group IDs to be set to the real "
"user and group IDs. Be aware that if that fails the shell may be running "
"with different IDs than was intended so a script should check for failure "
"and act accordingly, for example:"
msgstr ""

#. type: example
#: zsh.texi:12280
#, no-wrap
msgid "unsetopt privileged || exit\n"
msgstr ""

#. type: table
#: zsh.texi:12291
msgid ""
"The @t{PRIVILEGED} option disables sourcing user startup files.  If zsh is "
"invoked as `@t{sh}' or `@t{ksh}' with this option set, @t{/etc/suid_profile} "
"is sourced (after @t{/etc/profile} on interactive shells). Sourcing "
"@t{~/.profile} is disabled and the contents of the @t{ENV} variable is "
"ignored. This option cannot be changed using the @t{-m} option of @t{setopt} "
"and @t{unsetopt}, and changing it inside a function always changes it "
"globally regardless of the @t{LOCAL_OPTIONS} option."
msgstr ""

#. type: pindex
#: zsh.texi:12293
#, no-wrap
msgid "NO_RESTRICTED"
msgstr ""

#. type: pindex
#: zsh.texi:12294
#, no-wrap
msgid "NORESTRICTED"
msgstr ""

#. type: item
#: zsh.texi:12296
#, no-wrap
msgid "@t{RESTRICTED} (@t{-r})"
msgstr ""

#. type: table
#: zsh.texi:12301
msgid ""
"Enables restricted mode.  This option cannot be changed using @t{unsetopt}, "
"and setting it inside a function always changes it globally regardless of "
"the @t{LOCAL_OPTIONS} option.  See @ref{Restricted Shell}."
msgstr ""

#. type: table
#: zsh.texi:12302 zsh.texi:12639 zsh.texi:12684
#, no-wrap
msgid "SHIN_STDIN"
msgstr ""

#. type: pindex
#: zsh.texi:12303
#, no-wrap
msgid "NO_SHIN_STDIN"
msgstr ""

#. type: pindex
#: zsh.texi:12304
#, no-wrap
msgid "SHINSTDIN"
msgstr ""

#. type: pindex
#: zsh.texi:12305
#, no-wrap
msgid "NOSHINSTDIN"
msgstr ""

#. type: item
#: zsh.texi:12306
#, no-wrap
msgid "@t{SHIN_STDIN} (@t{-s}, ksh: @t{-s})"
msgstr ""

#. type: table
#: zsh.texi:12321
msgid ""
"Commands are being read from the standard input.  Commands are read from "
"standard input if no command is specified with @t{-c} and no file of "
"commands is specified.  If @t{SHIN_STDIN} is set explicitly on the command "
"line, any argument that would otherwise have been taken as a file to run "
"will instead be treated as a normal positional parameter.  Note that setting "
"or unsetting this option on the command line does not necessarily affect the "
"state the option will have while the shell is running - that is purely an "
"indicator of whether or not commands are @emph{actually} being read from "
"standard input.  The value of this option can only be changed via flags "
"supplied at invocation of the shell.  It cannot be changed once zsh is "
"running."
msgstr ""

#. type: table
#: zsh.texi:12322 zsh.texi:12641 zsh.texi:12686
#, no-wrap
msgid "SINGLE_COMMAND"
msgstr ""

#. type: pindex
#: zsh.texi:12323
#, no-wrap
msgid "NO_SINGLE_COMMAND"
msgstr ""

#. type: pindex
#: zsh.texi:12324
#, no-wrap
msgid "SINGLECOMMAND"
msgstr ""

#. type: pindex
#: zsh.texi:12325
#, no-wrap
msgid "NOSINGLECOMMAND"
msgstr ""

#. type: cindex
#: zsh.texi:12326
#, no-wrap
msgid "single command"
msgstr ""

#. type: pindex
#: zsh.texi:12327
#, no-wrap
msgid "INTERACTIVE, use of"
msgstr ""

#. type: item
#: zsh.texi:12328
#, no-wrap
msgid "@t{SINGLE_COMMAND} (@t{-t}, ksh: @t{-t})"
msgstr ""

#. type: table
#: zsh.texi:12335
msgid ""
"If the shell is reading from standard input, it exits after a single command "
"has been executed.  This also makes the shell non-interactive, unless the "
"@t{INTERACTIVE} option is explicitly set on the command line.  The value of "
"this option can only be changed via flags supplied at invocation of the "
"shell.  It cannot be changed once zsh is running."
msgstr ""

#. type: subsection
#: zsh.texi:12340
#, no-wrap
msgid "Zle"
msgstr ""

#. type: pindex
#: zsh.texi:12343
#, no-wrap
msgid "BEEP"
msgstr ""

#. type: pindex
#: zsh.texi:12344
#, no-wrap
msgid "NO_BEEP"
msgstr ""

#. type: pindex
#: zsh.texi:12345
#, no-wrap
msgid "NOBEEP"
msgstr ""

#. type: cindex
#: zsh.texi:12346
#, no-wrap
msgid "beep, enabling"
msgstr ""

#. type: cindex
#: zsh.texi:12347
#, no-wrap
msgid "enabling the beep"
msgstr ""

#. type: item
#: zsh.texi:12348
#, no-wrap
msgid "@t{BEEP} (@t{+B}) <D>"
msgstr ""

#. type: table
#: zsh.texi:12350
msgid "Beep on error in ZLE."
msgstr ""

#. type: t{#1}
#: zsh.texi:12351 zsh.texi:12358
#, no-wrap
msgid "COMBINING_CHARS"
msgstr ""

#. type: pindex
#: zsh.texi:12352
#, no-wrap
msgid "NO_COMBINING_CHARS"
msgstr ""

#. type: pindex
#: zsh.texi:12353
#, no-wrap
msgid "COMBININGCHARS"
msgstr ""

#. type: pindex
#: zsh.texi:12354
#, no-wrap
msgid "NOCOMBININGCHARS"
msgstr ""

#. type: cindex
#: zsh.texi:12355
#, no-wrap
msgid "characters, (Unicode) combining"
msgstr ""

#. type: cindex
#: zsh.texi:12356
#, no-wrap
msgid "combining characters (Unicode)"
msgstr ""

#. type: cindex
#: zsh.texi:12357
#, no-wrap
msgid "Unicode combining characters"
msgstr ""

#. type: table
#: zsh.texi:12366
msgid ""
"Assume that the terminal displays combining characters correctly.  "
"Specifically, if a base alphanumeric character is followed by one or more "
"zero-width punctuation characters, assume that the zero-width characters "
"will be displayed as modifications to the base character within the same "
"width.  Not all terminals handle this.  If this option is not set, "
"zero-width characters are displayed separately with special mark-up."
msgstr ""

#. type: table
#: zsh.texi:12372
msgid ""
"If this option is set, the pattern test @t{[[:WORD:]]} matches a zero-width "
"punctuation character on the assumption that it will be used as part of a "
"word in combination with a word character.  Otherwise the base shell does "
"not handle combining characters specially."
msgstr ""

#. type: t{#1}
#: zsh.texi:12373 zsh.texi:12376
#, no-wrap
msgid "EMACS"
msgstr ""

#. type: pindex
#: zsh.texi:12374
#, no-wrap
msgid "NO_EMACS"
msgstr ""

#. type: pindex
#: zsh.texi:12375
#, no-wrap
msgid "NOEMACS"
msgstr ""

#. type: table
#: zsh.texi:12382
msgid ""
"If ZLE is loaded, turning on this option has the equivalent effect of "
"`@t{bindkey -e}'.  In addition, the VI option is unset.  Turning it off has "
"no effect.  The option setting is not guaranteed to reflect the current "
"keymap.  This option is provided for compatibility; @t{bindkey} is the "
"recommended interface."
msgstr ""

#. type: t{#1}
#: zsh.texi:12383 zsh.texi:12388
#, no-wrap
msgid "OVERSTRIKE"
msgstr ""

#. type: pindex
#: zsh.texi:12384
#, no-wrap
msgid "NO_OVERSTRIKE"
msgstr ""

#. type: pindex
#: zsh.texi:12385
#, no-wrap
msgid "NOOVERSTRIKE"
msgstr ""

#. type: cindex
#: zsh.texi:12386
#, no-wrap
msgid "editor, overstrike mode"
msgstr ""

#. type: cindex
#: zsh.texi:12387
#, no-wrap
msgid "overstrike mode, of editor"
msgstr ""

#. type: table
#: zsh.texi:12390
msgid "Start up the line editor in overstrike mode."
msgstr ""

#. type: table
#: zsh.texi:12391 zsh.texi:12587
#, no-wrap
msgid "SINGLE_LINE_ZLE"
msgstr ""

#. type: pindex
#: zsh.texi:12392
#, no-wrap
msgid "NO_SINGLE_LINE_ZLE"
msgstr ""

#. type: pindex
#: zsh.texi:12393
#, no-wrap
msgid "SINGLELINEZLE"
msgstr ""

#. type: pindex
#: zsh.texi:12394
#, no-wrap
msgid "NOSINGLELINEZLE"
msgstr ""

#. type: cindex
#: zsh.texi:12395
#, no-wrap
msgid "editor, single line mode"
msgstr ""

#. type: item
#: zsh.texi:12396
#, no-wrap
msgid "@t{SINGLE_LINE_ZLE} (@t{-M}) <K>"
msgstr ""

#. type: table
#: zsh.texi:12398
msgid "Use single-line command line editing instead of multi-line."
msgstr ""

#. type: table
#: zsh.texi:12405
msgid ""
"Note that although this is on by default in ksh emulation it only provides "
"superficial compatibility with the ksh line editor and reduces the "
"effectiveness of the zsh line editor.  As it has no effect on shell syntax, "
"many users may wish to disable this option when using ksh emulation "
"interactively."
msgstr ""

#. type: t{#1}
#: zsh.texi:12406 zsh.texi:12409
#, no-wrap
msgid "VI"
msgstr ""

#. type: pindex
#: zsh.texi:12407
#, no-wrap
msgid "NO_VI"
msgstr ""

#. type: pindex
#: zsh.texi:12408
#, no-wrap
msgid "NOVI"
msgstr ""

#. type: table
#: zsh.texi:12415
msgid ""
"If ZLE is loaded, turning on this option has the equivalent effect of "
"`@t{bindkey -v}'.  In addition, the EMACS option is unset.  Turning it off "
"has no effect.  The option setting is not guaranteed to reflect the current "
"keymap.  This option is provided for compatibility; @t{bindkey} is the "
"recommended interface."
msgstr ""

#. type: cindex
#: zsh.texi:12416 zsh.texi:12613 zsh.texi:16085
#, no-wrap
msgid "ZLE"
msgstr ""

#. type: pindex
#: zsh.texi:12417
#, no-wrap
msgid "NO_ZLE"
msgstr ""

#. type: pindex
#: zsh.texi:12418
#, no-wrap
msgid "NOZLE"
msgstr ""

#. type: cindex
#: zsh.texi:12419
#, no-wrap
msgid "editor, enabling"
msgstr ""

#. type: cindex
#: zsh.texi:12420
#, no-wrap
msgid "enabling the editor"
msgstr ""

#. type: item
#: zsh.texi:12421
#, no-wrap
msgid "@t{ZLE} (@t{-Z})"
msgstr ""

#. type: table
#: zsh.texi:12424
msgid ""
"Use the zsh line editor.  Set by default in interactive shells connected to "
"a terminal."
msgstr ""

#. type: cindex
#: zsh.texi:12432
#, no-wrap
msgid "options, aliases"
msgstr ""

#. type: Plain text
#: zsh.texi:12436
msgid ""
"Some options have alternative names.  These aliases are never used for "
"output, but can be used just like normal option names when specifying "
"options to the shell."
msgstr ""

#. type: t{#1}
#: zsh.texi:12439 zsh.texi:12443
#, no-wrap
msgid "BRACE_EXPAND"
msgstr ""

#. type: pindex
#: zsh.texi:12440
#, no-wrap
msgid "NO_BRACE_EXPAND"
msgstr ""

#. type: pindex
#: zsh.texi:12441
#, no-wrap
msgid "BRACEEXPAND"
msgstr ""

#. type: pindex
#: zsh.texi:12442
#, no-wrap
msgid "NOBRACEEXPAND"
msgstr ""

#. type: table
#: zsh.texi:12446
msgid "@emph{NO_}@t{IGNORE_BRACES} (ksh and bash compatibility)"
msgstr ""

#. type: t{#1}
#: zsh.texi:12447 zsh.texi:12451
#, no-wrap
msgid "DOT_GLOB"
msgstr ""

#. type: pindex
#: zsh.texi:12448
#, no-wrap
msgid "NO_DOT_GLOB"
msgstr ""

#. type: pindex
#: zsh.texi:12449
#, no-wrap
msgid "DOTGLOB"
msgstr ""

#. type: pindex
#: zsh.texi:12450
#, no-wrap
msgid "NODOTGLOB"
msgstr ""

#. type: table
#: zsh.texi:12454
msgid "@t{GLOB_DOTS} (bash compatibility)"
msgstr ""

#. type: t{#1}
#: zsh.texi:12455 zsh.texi:12459
#, no-wrap
msgid "HASH_ALL"
msgstr ""

#. type: pindex
#: zsh.texi:12456
#, no-wrap
msgid "NO_HASH_ALL"
msgstr ""

#. type: pindex
#: zsh.texi:12457
#, no-wrap
msgid "HASHALL"
msgstr ""

#. type: pindex
#: zsh.texi:12458
#, no-wrap
msgid "NOHASHALL"
msgstr ""

#. type: table
#: zsh.texi:12462
msgid "@t{HASH_CMDS} (bash compatibility)"
msgstr ""

#. type: t{#1}
#: zsh.texi:12463 zsh.texi:12467
#, no-wrap
msgid "HIST_APPEND"
msgstr ""

#. type: pindex
#: zsh.texi:12464
#, no-wrap
msgid "NO_HIST_APPEND"
msgstr ""

#. type: pindex
#: zsh.texi:12465
#, no-wrap
msgid "HISTAPPEND"
msgstr ""

#. type: pindex
#: zsh.texi:12466
#, no-wrap
msgid "NOHISTAPPEND"
msgstr ""

#. type: table
#: zsh.texi:12470
msgid "@t{APPEND_HISTORY} (bash compatibility)"
msgstr ""

#. type: t{#1}
#: zsh.texi:12471 zsh.texi:12475
#, no-wrap
msgid "HIST_EXPAND"
msgstr ""

#. type: pindex
#: zsh.texi:12472
#, no-wrap
msgid "NO_HIST_EXPAND"
msgstr ""

#. type: pindex
#: zsh.texi:12473
#, no-wrap
msgid "HISTEXPAND"
msgstr ""

#. type: pindex
#: zsh.texi:12474
#, no-wrap
msgid "NOHISTEXPAND"
msgstr ""

#. type: table
#: zsh.texi:12478
msgid "@t{BANG_HIST} (bash compatibility)"
msgstr ""

#. type: t{#1}
#: zsh.texi:12479 zsh.texi:12482
#, no-wrap
msgid "LOG"
msgstr ""

#. type: pindex
#: zsh.texi:12480
#, no-wrap
msgid "NO_LOG"
msgstr ""

#. type: pindex
#: zsh.texi:12481
#, no-wrap
msgid "NOLOG"
msgstr ""

#. type: table
#: zsh.texi:12485
msgid "@emph{NO_}@t{HIST_NO_FUNCTIONS} (ksh compatibility)"
msgstr ""

#. type: t{#1}
#: zsh.texi:12486 zsh.texi:12490
#, no-wrap
msgid "MAIL_WARN"
msgstr ""

#. type: pindex
#: zsh.texi:12487
#, no-wrap
msgid "NO_MAIL_WARN"
msgstr ""

#. type: pindex
#: zsh.texi:12488
#, no-wrap
msgid "MAILWARN"
msgstr ""

#. type: pindex
#: zsh.texi:12489
#, no-wrap
msgid "NOMAILWARN"
msgstr ""

#. type: table
#: zsh.texi:12493
msgid "@t{MAIL_WARNING} (bash compatibility)"
msgstr ""

#. type: t{#1}
#: zsh.texi:12494 zsh.texi:12498
#, no-wrap
msgid "ONE_CMD"
msgstr ""

#. type: pindex
#: zsh.texi:12495
#, no-wrap
msgid "NO_ONE_CMD"
msgstr ""

#. type: pindex
#: zsh.texi:12496
#, no-wrap
msgid "ONECMD"
msgstr ""

#. type: pindex
#: zsh.texi:12497
#, no-wrap
msgid "NOONECMD"
msgstr ""

#. type: table
#: zsh.texi:12501
msgid "@t{SINGLE_COMMAND} (bash compatibility)"
msgstr ""

#. type: t{#1}
#: zsh.texi:12502 zsh.texi:12505
#, no-wrap
msgid "PHYSICAL"
msgstr ""

#. type: pindex
#: zsh.texi:12503
#, no-wrap
msgid "NO_PHYSICAL"
msgstr ""

#. type: pindex
#: zsh.texi:12504
#, no-wrap
msgid "NOPHYSICAL"
msgstr ""

#. type: table
#: zsh.texi:12508
msgid "@t{CHASE_LINKS} (ksh and bash compatibility)"
msgstr ""

#. type: t{#1}
#: zsh.texi:12509 zsh.texi:12513
#, no-wrap
msgid "PROMPT_VARS"
msgstr ""

#. type: pindex
#: zsh.texi:12510
#, no-wrap
msgid "NO_PROMPT_VARS"
msgstr ""

#. type: pindex
#: zsh.texi:12511
#, no-wrap
msgid "PROMPTVARS"
msgstr ""

#. type: pindex
#: zsh.texi:12512
#, no-wrap
msgid "NOPROMPTVARS"
msgstr ""

#. type: table
#: zsh.texi:12516
msgid "@t{PROMPT_SUBST} (bash compatibility)"
msgstr ""

#. type: t{#1}
#: zsh.texi:12517 zsh.texi:12520
#, no-wrap
msgid "STDIN"
msgstr ""

#. type: pindex
#: zsh.texi:12518
#, no-wrap
msgid "NO_STDIN"
msgstr ""

#. type: pindex
#: zsh.texi:12519
#, no-wrap
msgid "NOSTDIN"
msgstr ""

#. type: table
#: zsh.texi:12523
msgid "@t{SHIN_STDIN} (ksh compatibility)"
msgstr ""

#. type: t{#1}
#: zsh.texi:12524 zsh.texi:12528
#, no-wrap
msgid "TRACK_ALL"
msgstr ""

#. type: pindex
#: zsh.texi:12525
#, no-wrap
msgid "NO_TRACK_ALL"
msgstr ""

#. type: pindex
#: zsh.texi:12526
#, no-wrap
msgid "TRACKALL"
msgstr ""

#. type: pindex
#: zsh.texi:12527
#, no-wrap
msgid "NOTRACKALL"
msgstr ""

#. type: table
#: zsh.texi:12531
msgid "@t{HASH_CMDS} (ksh compatibility)"
msgstr ""

#. type: cindex
#: zsh.texi:12537
#, no-wrap
msgid "options, single letter"
msgstr ""

#. type: cindex
#: zsh.texi:12538
#, no-wrap
msgid "single letter options"
msgstr ""

#. type: subsection
#: zsh.texi:12540
#, no-wrap
msgid "Default set"
msgstr ""

#. type: t{#1}
#: zsh.texi:12543 zsh.texi:24794
#, no-wrap
msgid "-0"
msgstr ""

#. type: t{#1}
#: zsh.texi:12545 zsh.texi:19840 zsh.texi:27402 zsh.texi:38911
#, no-wrap
msgid "-1"
msgstr ""

#. type: t{#1}
#: zsh.texi:12547 zsh.texi:19846 zsh.texi:27407
#, no-wrap
msgid "-2"
msgstr ""

#. type: table
#: zsh.texi:12549
msgid "@emph{NO_}BAD_PATTERN"
msgstr ""

#. type: t{#1}
#: zsh.texi:12549 zsh.texi:38917
#, no-wrap
msgid "-3"
msgstr ""

#. type: table
#: zsh.texi:12551
msgid "@emph{NO_}NOMATCH"
msgstr ""

#. type: t{#1}
#: zsh.texi:12551
#, no-wrap
msgid "-4"
msgstr ""

#. type: t{#1}
#: zsh.texi:12553
#, no-wrap
msgid "-5"
msgstr ""

#. type: t{#1}
#: zsh.texi:12555
#, no-wrap
msgid "-6"
msgstr ""

#. type: t{#1}
#: zsh.texi:12557
#, no-wrap
msgid "-7"
msgstr ""

#. type: t{#1}
#: zsh.texi:12559
#, no-wrap
msgid "-8"
msgstr ""

#. type: t{#1}
#: zsh.texi:12561
#, no-wrap
msgid "-9"
msgstr ""

#. type: t{#1}
#: zsh.texi:12563 zsh.texi:27030
#, no-wrap
msgid "-B"
msgstr ""

#. type: table
#: zsh.texi:12565
msgid "@emph{NO_}BEEP"
msgstr ""

#. type: t{#1}
#: zsh.texi:12565 zsh.texi:12656 zsh.texi:19990 zsh.texi:24751 zsh.texi:26908
#: zsh.texi:38390 zsh.texi:41158
#, no-wrap
msgid "-C"
msgstr ""

#. type: table
#: zsh.texi:12567 zsh.texi:12658
msgid "@emph{NO_}CLOBBER"
msgstr ""

#. type: t{#1}
#: zsh.texi:12567 zsh.texi:13622 zsh.texi:14216 zsh.texi:26914 zsh.texi:32496
#: zsh.texi:33093
#, no-wrap
msgid "-D"
msgstr ""

#. type: t{#1}
#: zsh.texi:12569 zsh.texi:13609 zsh.texi:14466 zsh.texi:27085 zsh.texi:32503
#, no-wrap
msgid "-E"
msgstr ""

#. type: t{#1}
#: zsh.texi:12571 zsh.texi:27027 zsh.texi:32512
#, no-wrap
msgid "-F"
msgstr ""

#. type: table
#: zsh.texi:12573 zsh.texi:12670
msgid "@emph{NO_}GLOB"
msgstr ""

#. type: t{#1}
#: zsh.texi:12573 zsh.texi:27045
#, no-wrap
msgid "-G"
msgstr ""

#. type: t{#1}
#: zsh.texi:12575 zsh.texi:15235
#, no-wrap
msgid "-H"
msgstr ""

#. type: t{#1}
#: zsh.texi:12577 zsh.texi:13567 zsh.texi:16813 zsh.texi:27073
#, no-wrap
msgid "-I"
msgstr ""

#. type: t{#1}
#: zsh.texi:12579
#, no-wrap
msgid "-J"
msgstr ""

#. type: t{#1}
#: zsh.texi:12581 zsh.texi:32524
#, no-wrap
msgid "-K"
msgstr ""

#. type: table
#: zsh.texi:12583
msgid "@emph{NO_}BANG_HIST"
msgstr ""

#. type: t{#1}
#: zsh.texi:12583 zsh.texi:13569 zsh.texi:26941 zsh.texi:30481 zsh.texi:41159
#, no-wrap
msgid "-L"
msgstr ""

#. type: t{#1}
#: zsh.texi:12585 zsh.texi:15712 zsh.texi:32532 zsh.texi:38915 zsh.texi:41160
#, no-wrap
msgid "-M"
msgstr ""

#. type: t{#1}
#: zsh.texi:12587 zsh.texi:14238 zsh.texi:26026 zsh.texi:27067 zsh.texi:30494
#: zsh.texi:38913
#, no-wrap
msgid "-N"
msgstr ""

#. type: t{#1}
#: zsh.texi:12589 zsh.texi:14246 zsh.texi:27076
#, no-wrap
msgid "-O"
msgstr ""

#. type: t{#1}
#: zsh.texi:12591 zsh.texi:14252 zsh.texi:25980
#, no-wrap
msgid "-P"
msgstr ""

#. type: t{#1}
#: zsh.texi:12593 zsh.texi:19944 zsh.texi:27202 zsh.texi:41145
#, no-wrap
msgid "-Q"
msgstr ""

#. type: t{#1}
#: zsh.texi:12595 zsh.texi:14262 zsh.texi:15701 zsh.texi:24755 zsh.texi:27042
#, no-wrap
msgid "-R"
msgstr ""

#. type: t{#1}
#: zsh.texi:12597 zsh.texi:14273 zsh.texi:15578 zsh.texi:24759 zsh.texi:25728
#, no-wrap
msgid "-S"
msgstr ""

#. type: t{#1}
#: zsh.texi:12601 zsh.texi:15174 zsh.texi:15698 zsh.texi:19960 zsh.texi:27288
#, no-wrap
msgid "-U"
msgstr ""

#. type: t{#1}
#: zsh.texi:12603
#, no-wrap
msgid "-V"
msgstr ""

#. type: table
#: zsh.texi:12605
msgid "@emph{NO_}PROMPT_CR"
msgstr ""

#. type: t{#1}
#: zsh.texi:12605 zsh.texi:24744 zsh.texi:41155
#, no-wrap
msgid "-W"
msgstr ""

#. type: t{#1}
#: zsh.texi:12607 zsh.texi:12660
#, no-wrap
msgid "-X"
msgstr ""

#. type: t{#1}
#: zsh.texi:12609
#, no-wrap
msgid "-Y"
msgstr ""

#. type: t{#1}
#: zsh.texi:12611 zsh.texi:27082
#, no-wrap
msgid "-Z"
msgstr ""

#. type: t{#1}
#: zsh.texi:12613 zsh.texi:12662 zsh.texi:14199 zsh.texi:15194 zsh.texi:15341
#: zsh.texi:15565 zsh.texi:16318 zsh.texi:19774 zsh.texi:27039 zsh.texi:33071
#: zsh.texi:33629 zsh.texi:38895
#, no-wrap
msgid "-a"
msgstr ""

#. type: t{#1}
#: zsh.texi:12615 zsh.texi:12666 zsh.texi:14465 zsh.texi:16308 zsh.texi:19922
#: zsh.texi:27053 zsh.texi:36043
#, no-wrap
msgid "-e"
msgstr ""

#. type: t{#1}
#: zsh.texi:12617 zsh.texi:12668 zsh.texi:13606 zsh.texi:15201 zsh.texi:15349
#: zsh.texi:15556 zsh.texi:19914 zsh.texi:26029 zsh.texi:26121 zsh.texi:27017
#: zsh.texi:41132
#, no-wrap
msgid "-f"
msgstr ""

#. type: table
#: zsh.texi:12619
msgid "@emph{NO_}RCS"
msgstr ""

#. type: t{#1}
#: zsh.texi:12619 zsh.texi:15050 zsh.texi:30472
#, no-wrap
msgid "-g"
msgstr ""

#. type: t{#1}
#: zsh.texi:12621 zsh.texi:15219 zsh.texi:37976
#, no-wrap
msgid "-h"
msgstr ""

#. type: t{#1}
#: zsh.texi:12625 zsh.texi:15353 zsh.texi:15719 zsh.texi:19780
#, no-wrap
msgid "-k"
msgstr ""

#. type: t{#1}
#: zsh.texi:12627 zsh.texi:12672 zsh.texi:13127 zsh.texi:14224 zsh.texi:14475
#: zsh.texi:15262 zsh.texi:15355 zsh.texi:16334 zsh.texi:19798 zsh.texi:30476
#: zsh.texi:36032 zsh.texi:37971
#, no-wrap
msgid "-l"
msgstr ""

#. type: t{#1}
#: zsh.texi:12629 zsh.texi:12674 zsh.texi:12703 zsh.texi:13573 zsh.texi:14230
#: zsh.texi:15059 zsh.texi:15357 zsh.texi:15570 zsh.texi:16389 zsh.texi:27033
#: zsh.texi:33640
#, no-wrap
msgid "-m"
msgstr ""

#. type: t{#1}
#: zsh.texi:12631 zsh.texi:12676 zsh.texi:14235 zsh.texi:14483 zsh.texi:15359
#: zsh.texi:19956 zsh.texi:24711 zsh.texi:27088 zsh.texi:28836 zsh.texi:30489
#: zsh.texi:41140
#, no-wrap
msgid "-n"
msgstr ""

#. type: table
#: zsh.texi:12633 zsh.texi:12678
msgid "@emph{NO_}EXEC"
msgstr ""

#. type: t{#1}
#: zsh.texi:12633 zsh.texi:12678 zsh.texi:13130 zsh.texi:14249 zsh.texi:14493
#: zsh.texi:15361 zsh.texi:15561 zsh.texi:25567 zsh.texi:27079 zsh.texi:37973
#, no-wrap
msgid "-p"
msgstr ""

#. type: t{#1}
#: zsh.texi:12635 zsh.texi:12680 zsh.texi:14259 zsh.texi:14431 zsh.texi:15266
#: zsh.texi:15365 zsh.texi:27098 zsh.texi:28843 zsh.texi:30504 zsh.texi:33100
#: zsh.texi:33644 zsh.texi:36039 zsh.texi:38392
#, no-wrap
msgid "-r"
msgstr ""

#. type: t{#1}
#: zsh.texi:12639 zsh.texi:12684 zsh.texi:15289 zsh.texi:15373 zsh.texi:30514
#: zsh.texi:33663
#, no-wrap
msgid "-t"
msgstr ""

#. type: t{#1}
#: zsh.texi:12641 zsh.texi:12686 zsh.texi:15293 zsh.texi:15375 zsh.texi:27104
#, no-wrap
msgid "-u"
msgstr ""

#. type: table
#: zsh.texi:12643 zsh.texi:12688
msgid "@emph{NO_}UNSET"
msgstr ""

#. type: t{#1}
#: zsh.texi:12643 zsh.texi:12688 zsh.texi:13133 zsh.texi:15377 zsh.texi:15540
#: zsh.texi:16313 zsh.texi:27064 zsh.texi:33197 zsh.texi:41150
#, no-wrap
msgid "-v"
msgstr ""

#. type: t{#1}
#: zsh.texi:12645 zsh.texi:15380 zsh.texi:15547 zsh.texi:24734 zsh.texi:27036
#: zsh.texi:38384 zsh.texi:41152
#, no-wrap
msgid "-w"
msgstr ""

#. type: t{#1}
#: zsh.texi:12647 zsh.texi:12690 zsh.texi:15298 zsh.texi:15382
#, no-wrap
msgid "-x"
msgstr ""

#. type: t{#1}
#: zsh.texi:12649
#, no-wrap
msgid "-y"
msgstr ""

#. type: subsection
#: zsh.texi:12653
#, no-wrap
msgid "sh/ksh emulation set"
msgstr ""

#. type: t{#1}
#: zsh.texi:12664 zsh.texi:12699 zsh.texi:14203 zsh.texi:15343 zsh.texi:27091
#: zsh.texi:33075
#, no-wrap
msgid "-b"
msgstr ""

#. type: subsection
#: zsh.texi:12694
#, no-wrap
msgid "Also note"
msgstr ""

#. type: t{#1}
#: zsh.texi:12697 zsh.texi:14470 zsh.texi:15140 zsh.texi:27070 zsh.texi:33633
#, no-wrap
msgid "-A"
msgstr ""

#. type: table
#: zsh.texi:12699
msgid "Used by @t{set} for setting arrays"
msgstr ""

#. type: table
#: zsh.texi:12701
msgid "Used on the command line to specify end of option processing"
msgstr ""

#. type: table
#: zsh.texi:12703
msgid "Used on the command line to specify a single command"
msgstr ""

#. type: table
#: zsh.texi:12705
msgid "Used by @t{setopt} for pattern-matching option setting"
msgstr ""

#. type: t{#1}
#: zsh.texi:12705 zsh.texi:14243 zsh.texi:27060 zsh.texi:30497 zsh.texi:38905
#, no-wrap
msgid "-o"
msgstr ""

#. type: table
#: zsh.texi:12707
msgid "Used in all places to allow use of long option names"
msgstr ""

#. type: table
#: zsh.texi:12709
msgid "Used by @t{set} to sort positional parameters"
msgstr ""

#. type: cindex
#: zsh.texi:12717
#, no-wrap
msgid "builtin commands"
msgstr ""

#. type: cindex
#: zsh.texi:12718
#, no-wrap
msgid "commands, builtin"
msgstr ""

#. type: Plain text
#: zsh.texi:12725
msgid ""
"Some shell builtin commands take options as described in individual entries; "
"these are often referred to in the list below as `@t{flags}' to avoid "
"confusion with shell options, which may also have an effect on the behaviour "
"of builtin commands.  In this introductory section, `@t{option}' always has "
"the meaning of an option to a command that should be familiar to most "
"command line users."
msgstr ""

#. type: Plain text
#: zsh.texi:12735
msgid ""
"Typically, options are single letters preceded by a hyphen (@t{-}).  Options "
"that take an argument accept it either immediately following the option "
"letter or after white space, for example `@t{print -C3 @{1..9@}}' or "
"`@t{print -C 3 @{1..9@}}' are equivalent.  Arguments to options are not the "
"same as arguments to the command; the documentation indicates which is "
"which.  Options that do not take an argument may be combined in a single "
"word, for example `@t{print -rca -- *}' and `@t{print -r -c -a -- *}' are "
"equivalent."
msgstr ""

#. type: Plain text
#: zsh.texi:12740
msgid ""
"Some shell builtin commands also take options that begin with `@t{+}' "
"instead of `@t{-}'.  The list below makes clear which commands these are."
msgstr ""

#. type: Plain text
#: zsh.texi:12745
msgid ""
"Options (together with their individual arguments, if any) must appear in a "
"group before any non-option arguments; once the first non-option argument "
"has been found, option processing is terminated."
msgstr ""

#. type: Plain text
#: zsh.texi:12755
msgid ""
"All builtin commands other than `@t{echo}' and precommand modifiers, even "
"those that have no options, can be given the argument `@t{-}@t{-}' to "
"terminate option processing.  This indicates that the following words are "
"non-option arguments, but is otherwise ignored.  This is useful in cases "
"where arguments to the command may begin with `@t{-}'.  For historical "
"reasons, most builtin commands (including `@t{echo}') also recognize a "
"single `@t{-}' in a separate word for this purpose; note that this is less "
"standard and use of `@t{-}@t{-}' is recommended."
msgstr ""

#. type: item
#: zsh.texi:12758
#, no-wrap
msgid "@t{-} @var{simple command}"
msgstr ""

#. type: table
#: zsh.texi:12760 zsh.texi:14163
msgid "See @ref{Precommand Modifiers}."
msgstr ""

#. type: item
#: zsh.texi:12762
#, no-wrap
msgid "@t{.} @var{file} [ @var{arg} ... ]"
msgstr ""

#. type: table
#: zsh.texi:12765
msgid ""
"Read commands from @var{file} and execute them in the current shell "
"environment."
msgstr ""

#. type: table
#: zsh.texi:12774
msgid ""
"If @var{file} does not contain a slash, or if @t{PATH_DIRS} is set, the "
"shell looks in the components of @t{$path} to find the directory containing "
"@var{file}.  Files in the current directory are not read unless `@t{.}' "
"appears somewhere in @t{$path}.  If a file named `@var{file}@t{.zwc}' is "
"found, is newer than @var{file}, and is the compiled form (created with the "
"@t{zcompile} builtin) of @var{file}, then commands are read from that file "
"instead of @var{file}."
msgstr ""

#. type: table
#: zsh.texi:12782
msgid ""
"If any arguments @var{arg} are given, they become the positional parameters; "
"the old positional parameters are restored when the @var{file} is done "
"executing.  However, if no arguments are given, the positional parameters "
"remain those of the calling context, and no restoring is done."
msgstr ""

#. type: table
#: zsh.texi:12787
msgid ""
"If @var{file} was not found the return status is 127; if @var{file} was "
"found but contained a syntax error the return status is 126; else the return "
"status is the exit status of the last command executed."
msgstr ""

#. type: t{#1}
#: zsh.texi:12788 zsh.texi:38790
#, no-wrap
msgid ":"
msgstr ""

#. type: cindex
#: zsh.texi:12789
#, no-wrap
msgid "expanding parameters"
msgstr ""

#. type: cindex
#: zsh.texi:12790
#, no-wrap
msgid "parameters, expanding"
msgstr ""

#. type: cindex
#: zsh.texi:12791
#, no-wrap
msgid "doing nothing"
msgstr ""

#. type: item
#: zsh.texi:12792
#, no-wrap
msgid "@t{:} [ @var{arg} ... ]"
msgstr ""

#. type: table
#: zsh.texi:12795
msgid ""
"This command does nothing, although normal argument expansions is performed "
"which may have effects on shell parameters.  A zero exit status is returned."
msgstr ""

#. type: findex
#: zsh.texi:12796
#, no-wrap
msgid "alias"
msgstr ""

#. type: cindex
#: zsh.texi:12797
#, no-wrap
msgid "aliases, defining"
msgstr ""

#. type: cindex
#: zsh.texi:12798
#, no-wrap
msgid "aliases, listing"
msgstr ""

#. type: item
#: zsh.texi:12799
#, no-wrap
msgid "@t{alias} [ @{@t{+}|@t{-}@}@t{gmrsL} ] [ @var{name}[@t{=}@var{value}] ... ]"
msgstr ""

#. type: table
#: zsh.texi:12805
msgid ""
"For each @var{name} with a corresponding @var{value}, define an alias with "
"that value.  A trailing space in @var{value} causes the next word to be "
"checked for alias expansion.  If the @t{-g} flag is present, define a global "
"alias; global aliases are expanded even if they do not occur in command "
"position:"
msgstr ""

#. type: example
#: zsh.texi:12813
#, no-wrap
msgid ""
"% perldoc --help 2>&1 | grep 'built-in functions'\n"
"    -f   Search Perl built-in functions\n"
"% alias -g HG='--help 2>&1 | grep'\n"
"% perldoc HG 'built-in functions'\n"
"    -f   Search Perl built-in functions\n"
msgstr ""

#. type: table
#: zsh.texi:12822
msgid ""
"If the @t{-s} flag is present, define a suffix alias: if the command word on "
"a command line is in the form `@var{text}@t{.}@var{name}', where @var{text} "
"is any non-empty string, it is replaced by the text `@var{value} "
"@var{text}@t{.}@var{name}'.  Note that @var{name} is treated as a literal "
"string, not a pattern.  A trailing space in @var{value} is not special in "
"this case.  For example,"
msgstr ""

#. type: example
#: zsh.texi:12826
#, no-wrap
msgid "alias -s ps='gv --'\n"
msgstr ""

#. type: table
#: zsh.texi:12835
msgid ""
"will cause the command `@t{*.ps}' to be expanded to `@t{gv -- *.ps}'.  As "
"alias expansion is carried out earlier than globbing, the `@t{*.ps}' will "
"then be expanded.  Suffix aliases constitute a different name space from "
"other aliases (so in the above example it is still possible to create an "
"alias for the command @t{ps}) and the two sets are never listed together."
msgstr ""

#. type: table
#: zsh.texi:12848
msgid ""
"For each @var{name} with no @var{value}, print the value of @var{name}, if "
"any.  With no arguments, print all currently defined aliases other than "
"suffix aliases.  If the @t{-m} flag is given the arguments are taken as "
"patterns (they should be quoted to preserve them from being interpreted as "
"glob patterns), and the aliases matching these patterns are printed.  When "
"printing aliases and one of the @t{-g}, @t{-r} or @t{-s} flags is present, "
"restrict the printing to global, regular or suffix aliases, respectively; a "
"regular alias is one which is neither a global nor a suffix alias.  Using "
"`@t{+}' instead of `@t{-}', or ending the option list with a single `@t{+}', "
"prevents the values of the aliases from being printed."
msgstr ""

#. type: table
#: zsh.texi:12854
msgid ""
"If the @t{-L} flag is present, then print each alias in a manner suitable "
"for putting in a startup script.  The exit status is nonzero if a @var{name} "
"(with no @var{value}) is given for which no alias has been defined."
msgstr ""

#. type: table
#: zsh.texi:12858
msgid "For more on aliases, include common problems, see @ref{Aliasing}."
msgstr ""

#. type: findex
#: zsh.texi:12859
#, no-wrap
msgid "autoload"
msgstr ""

#. type: item
#: zsh.texi:12862
#, no-wrap
msgid ""
"@t{autoload} [ @{@t{+}|@t{-}@}@t{RTUXdkmrtWz} ] [ @t{-w} ] [ @var{name} "
"... ]"
msgstr ""

#. type: vindex
#: zsh.texi:12863
#, no-wrap
msgid "fpath, searching"
msgstr ""

#. type: table
#: zsh.texi:12867
msgid ""
"See the section `Autoloading Functions' in @ref{Functions} for full "
"details.  The @t{fpath} parameter will be searched to find the function "
"definition when the function is first referenced."
msgstr ""

#. type: table
#: zsh.texi:12878
msgid ""
"If @var{name} consists of an absolute path, the function is defined to load "
"from the file given (searching as usual for dump files in the given "
"location).  The name of the function is the basename (non-directory part) of "
"the file.  It is normally an error if the function is not found in the given "
"location; however, if the option @t{-d} is given, searching for the function "
"defaults to @t{$fpath}.  If a function is loaded by absolute path, any "
"functions loaded from it that are marked for @t{autoload} without an "
"absolute path have the load path of the parent function temporarily "
"prepended to @t{$fpath}."
msgstr ""

#. type: table
#: zsh.texi:12888
msgid ""
"If the option @t{-r} or @t{-R} is given, the function is searched for "
"immediately and the location is recorded internally for use when the "
"function is executed; a relative path is expanded using the value of "
"@t{$PWD}.  This protects against a change to @t{$fpath} after the call to "
"@t{autoload}.  With @t{-r}, if the function is not found, it is silently "
"left unresolved until execution; with @t{-R}, an error message is printed "
"and command processing aborted immediately the search fails, i.e. at the "
"@t{autoload} command rather than at function execution.."
msgstr ""

#. type: table
#: zsh.texi:12900
msgid ""
"The flag @t{-X} may be used only inside a shell function.  It causes the "
"calling function to be marked for autoloading and then immediately loaded "
"and executed, with the current array of positional parameters as arguments.  "
"This replaces the previous definition of the function.  If no function "
"definition is found, an error is printed and the function remains undefined "
"and marked for autoloading.  If an argument is given, it is used as a "
"directory (i.e. it does not include the name of the function) in which the "
"function is to be found; this may be combined with the @t{-d} option to "
"allow the function search to default to @t{$fpath} if it is not in the given "
"location."
msgstr ""

#. type: table
#: zsh.texi:12915
msgid ""
"The flag @t{+X} attempts to load each @var{name} as an autoloaded function, "
"but does @emph{not} execute it.  The exit status is zero (success) if the "
"function was not previously defined @emph{and} a definition for it was "
"found.  This does @emph{not} replace any existing definition of the "
"function.  The exit status is nonzero (failure) if the function was already "
"defined or when no definition was found.  In the latter case the function "
"remains undefined and marked for autoloading.  If ksh-style autoloading is "
"enabled, the function created will contain the contents of the file plus a "
"call to the function itself appended to it, thus giving normal ksh "
"autoloading behaviour on the first call to the function.  If the @t{-m} flag "
"is also given each @var{name} is treated as a pattern and all functions "
"already marked for autoload that match the pattern are loaded."
msgstr ""

#. type: table
#: zsh.texi:12920
msgid ""
"With the @t{-t} flag, turn on execution tracing; with @t{-T}, turn on "
"execution tracing only for the current function, turning it off on entry to "
"any called functions that do not also have tracing enabled."
msgstr ""

#. type: table
#: zsh.texi:12924
msgid ""
"With the @t{-U} flag, alias expansion is suppressed when the function is "
"loaded."
msgstr ""

#. type: table
#: zsh.texi:12929
msgid ""
"With the @t{-w} flag, the @var{name}s are taken as names of files compiled "
"with the @t{zcompile} builtin, and all functions defined in them are marked "
"for autoloading."
msgstr ""

#. type: table
#: zsh.texi:12935
msgid ""
"The flags @t{-z} and @t{-k} mark the function to be autoloaded using the zsh "
"or ksh style, as if the option @t{KSH_AUTOLOAD} were unset or were set, "
"respectively.  The flags override the setting of the option at the time the "
"function is loaded."
msgstr ""

#. type: table
#: zsh.texi:12940
msgid ""
"Note that the @t{autoload} command makes no attempt to ensure the shell "
"options set during the loading or execution of the file have any particular "
"value.  For this, the @t{emulate} command can be used:"
msgstr ""

#. type: example
#: zsh.texi:12944
#, no-wrap
msgid "emulate zsh -c 'autoload -Uz @var{func}'\n"
msgstr ""

#. type: table
#: zsh.texi:12949
msgid ""
"arranges that when @var{func} is loaded the shell is in native @t{zsh} "
"emulation, and this emulation is also applied when @var{func} is run."
msgstr ""

#. type: table
#: zsh.texi:12954
msgid ""
"Some of the functions of @t{autoload} are also provided by @t{functions -u} "
"or @t{functions -U}, but @t{autoload} is a more comprehensive interface."
msgstr ""

#. type: t{#1}
#: zsh.texi:12955 zsh.texi:40735
#, no-wrap
msgid "bg"
msgstr ""

#. type: cindex
#: zsh.texi:12956
#, no-wrap
msgid "jobs, backgrounding"
msgstr ""

#. type: item
#: zsh.texi:12957
#, no-wrap
msgid "@t{bg} [ @var{job} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:12958
#, no-wrap
msgid "@var{job} ... @t{&}"
msgstr ""

#. type: table
#: zsh.texi:12961
msgid ""
"Put each specified @var{job} in the background, or the current job if none "
"is specified."
msgstr ""

#. type: findex
#: zsh.texi:12962 zsh.texi:16286
#, no-wrap
msgid "bindkey"
msgstr ""

#. type: table
#: zsh.texi:12964 zsh.texi:15489 zsh.texi:15754
msgid "See @ref{Zle Builtins}."
msgstr ""

#. type: findex
#: zsh.texi:12965
#, no-wrap
msgid "break"
msgstr ""

#. type: cindex
#: zsh.texi:12966
#, no-wrap
msgid "exiting loops"
msgstr ""

#. type: cindex
#: zsh.texi:12967
#, no-wrap
msgid "loops, exiting"
msgstr ""

#. type: item
#: zsh.texi:12968
#, no-wrap
msgid "@t{break} [ @var{n} ]"
msgstr ""

#. type: table
#: zsh.texi:12972
msgid ""
"Exit from an enclosing @t{for}, @t{while}, @t{until}, @t{select} or "
"@t{repeat} loop. If an arithmetic expression @var{n} is specified, then "
"break @var{n} levels instead of just one."
msgstr ""

#. type: item
#: zsh.texi:12974
#, no-wrap
msgid "@t{builtin} @var{name} [ @var{args} ... ]"
msgstr ""

#. type: table
#: zsh.texi:12976
msgid "Executes the builtin @var{name}, with the given @var{args}."
msgstr ""

#. type: t{#1}
#: zsh.texi:12977 zsh.texi:12978
#, no-wrap
msgid "bye"
msgstr ""

#. type: table
#: zsh.texi:12980
msgid "Same as @t{exit}."
msgstr ""

#. type: findex
#: zsh.texi:12981 zsh.texi:27840
#, no-wrap
msgid "cap"
msgstr ""

#. type: table
#: zsh.texi:12983 zsh.texi:13841 zsh.texi:14652
msgid "See @ref{The zsh/cap Module}."
msgstr ""

#. type: findex
#: zsh.texi:12984
#, no-wrap
msgid "cd"
msgstr ""

#. type: cindex
#: zsh.texi:12985
#, no-wrap
msgid "directories, changing"
msgstr ""

#. type: item
#: zsh.texi:12986
#, no-wrap
msgid "@t{cd} [ @t{-qsLP} ] [ @var{arg} ]"
msgstr ""

#. type: itemx
#: zsh.texi:12987
#, no-wrap
msgid "@t{cd} [ @t{-qsLP} ] @var{old} @var{new}"
msgstr ""

#. type: itemx
#: zsh.texi:12988
#, no-wrap
msgid "@t{cd} [ @t{-qsLP} ] @{@t{+}|@t{-}@}@var{n}"
msgstr ""

#. type: table
#: zsh.texi:12993
msgid ""
"Change the current directory.  In the first form, change the current "
"directory to @var{arg}, or to the value of @t{$HOME} if @var{arg} is not "
"specified.  If @var{arg} is `@t{-}', change to the previous directory."
msgstr ""

#. type: table
#: zsh.texi:12997
msgid ""
"Otherwise, if @var{arg} begins with a slash, attempt to change to the "
"directory given by @var{arg}."
msgstr ""

#. type: table
#: zsh.texi:13007
msgid ""
"If @var{arg} does not begin with a slash, the behaviour depends on whether "
"the current directory `@t{.}' occurs in the list of directories contained in "
"the shell parameter @t{cdpath}.  If it does not, first attempt to change to "
"the directory @var{arg} under the current directory, and if that fails but "
"@t{cdpath} is set and contains at least one element attempt to change to the "
"directory @var{arg} under each component of @t{cdpath} in turn until "
"successful.  If `@t{.}' occurs in @t{cdpath}, then @t{cdpath} is searched "
"strictly in order so that `@t{.}' is only tried at the appropriate point."
msgstr ""

#. type: table
#: zsh.texi:13011
msgid ""
"The order of testing @t{cdpath} is modified if the option @t{POSIX_CD} is "
"set, as described in the documentation for the option."
msgstr ""

#. type: table
#: zsh.texi:13017
msgid ""
"If no directory is found, the option @t{CDABLE_VARS} is set, and a parameter "
"named @var{arg} exists whose value begins with a slash, treat its value as "
"the directory.  In that case, the parameter is added to the named directory "
"hash table."
msgstr ""

#. type: table
#: zsh.texi:13022
msgid ""
"The second form of @t{cd} substitutes the string @var{new} for the string "
"@var{old} in the name of the current directory, and tries to change to this "
"new directory."
msgstr ""

#. type: table
#: zsh.texi:13033
msgid ""
"The third form of @t{cd} extracts an entry from the directory stack, and "
"changes to that directory.  An argument of the form `@t{+}@var{n}' "
"identifies a stack entry by counting from the left of the list shown by the "
"@t{dirs} command, starting with zero.  An argument of the form "
"`@t{-}@var{n}' counts from the right.  If the @t{PUSHD_MINUS} option is set, "
"the meanings of `@t{+}' and `@t{-}' in this context are swapped.  If the "
"@t{POSIX_CD} option is set, this form of @t{cd} is not recognised and will "
"be interpreted as the first form."
msgstr ""

#. type: table
#: zsh.texi:13039
msgid ""
"If the @t{-q} (quiet) option is specified, the hook function @t{chpwd} and "
"the functions in the array @t{chpwd_functions} are not called.  This is "
"useful for calls to @t{cd} that do not change the environment seen by an "
"interactive user."
msgstr ""

#. type: table
#: zsh.texi:13047
msgid ""
"If the @t{-s} option is specified, @t{cd} refuses to change the current "
"directory if the given pathname contains symlinks.  If the @t{-P} option is "
"given or the @t{CHASE_LINKS} option is set, symbolic links are resolved to "
"their true values.  If the @t{-L} option is given symbolic links are "
"retained in the directory (and not resolved) regardless of the state of the "
"@t{CHASE_LINKS} option."
msgstr ""

#. type: t{#1}
#: zsh.texi:13048 zsh.texi:13049
#, no-wrap
msgid "chdir"
msgstr ""

#. type: table
#: zsh.texi:13051
msgid "Same as @t{cd}."
msgstr ""

#. type: findex
#: zsh.texi:13052 zsh.texi:27871
#, no-wrap
msgid "clone"
msgstr ""

#. type: table
#: zsh.texi:13054
msgid "See @ref{The zsh/clone Module}."
msgstr ""

#. type: item
#: zsh.texi:13056
#, no-wrap
msgid "@t{command} [ @t{-pvV} ] @var{simple command}"
msgstr ""

#. type: table
#: zsh.texi:13064
msgid ""
"The simple command argument is taken as an external command instead of a "
"function or builtin and is executed. If the @t{POSIX_BUILTINS} option is "
"set, builtins will also be executed but certain special properties of them "
"are suppressed. The @t{-p} flag causes a default path to be searched instead "
"of that in @t{$path}. With the @t{-v} flag, @t{command} is similar to "
"@t{whence} and with @t{-V}, it is equivalent to @t{whence -v}."
msgstr ""

#. type: table
#: zsh.texi:13067
msgid "See also @ref{Precommand Modifiers}."
msgstr ""

#. type: t{#1}
#: zsh.texi:13068 zsh.texi:28418 zsh.texi:28419
#, no-wrap
msgid "comparguments"
msgstr ""

#. type: table
#: zsh.texi:13070 zsh.texi:13079 zsh.texi:13082 zsh.texi:13085 zsh.texi:13088
#: zsh.texi:13091 zsh.texi:13094 zsh.texi:13097
msgid "See @ref{The zsh/computil Module}."
msgstr ""

#. type: t{#1}
#: zsh.texi:13071
#, no-wrap
msgid "compcall"
msgstr ""

#. type: table
#: zsh.texi:13073 zsh.texi:13076
msgid "See @ref{The zsh/compctl Module}."
msgstr ""

#. type: findex
#: zsh.texi:13074 zsh.texi:26839
#, no-wrap
msgid "compctl"
msgstr ""

#. type: t{#1}
#: zsh.texi:13077 zsh.texi:28425 zsh.texi:28426
#, no-wrap
msgid "compdescribe"
msgstr ""

#. type: t{#1}
#: zsh.texi:13080 zsh.texi:28446 zsh.texi:28447
#, no-wrap
msgid "compfiles"
msgstr ""

#. type: t{#1}
#: zsh.texi:13083 zsh.texi:28458 zsh.texi:28459
#, no-wrap
msgid "compgroups"
msgstr ""

#. type: findex
#: zsh.texi:13086 zsh.texi:28466
#, no-wrap
msgid "compquote"
msgstr ""

#. type: t{#1}
#: zsh.texi:13089 zsh.texi:28482 zsh.texi:28484
#, no-wrap
msgid "comptags"
msgstr ""

#. type: t{#1}
#: zsh.texi:13092 zsh.texi:28483 zsh.texi:28485
#, no-wrap
msgid "comptry"
msgstr ""

#. type: t{#1}
#: zsh.texi:13095 zsh.texi:28488 zsh.texi:28489
#, no-wrap
msgid "compvalues"
msgstr ""

#. type: findex
#: zsh.texi:13098
#, no-wrap
msgid "continue"
msgstr ""

#. type: cindex
#: zsh.texi:13099
#, no-wrap
msgid "loops, continuing"
msgstr ""

#. type: cindex
#: zsh.texi:13100
#, no-wrap
msgid "continuing loops"
msgstr ""

#. type: item
#: zsh.texi:13101
#, no-wrap
msgid "@t{continue} [ @var{n} ]"
msgstr ""

#. type: table
#: zsh.texi:13106
msgid ""
"Resume the next iteration of the enclosing @t{for}, @t{while}, @t{until}, "
"@t{select} or @t{repeat} loop. If an arithmetic expression @var{n} is "
"specified, break out of @var{n}-1 loops and resume at the @var{n}th "
"enclosing loop."
msgstr ""

#. type: t{#1}
#: zsh.texi:13107 zsh.texi:13108
#, no-wrap
msgid "declare"
msgstr ""

#. type: table
#: zsh.texi:13110
msgid "Same as @t{typeset}."
msgstr ""

#. type: findex
#: zsh.texi:13111
#, no-wrap
msgid "dirs"
msgstr ""

#. type: cindex
#: zsh.texi:13112
#, no-wrap
msgid "directory stack, printing"
msgstr ""

#. type: item
#: zsh.texi:13113
#, no-wrap
msgid "@t{dirs} [ @t{-c} ] [ @var{arg} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:13114
#, no-wrap
msgid "@t{dirs} [ @t{-lpv} ]"
msgstr ""

#. type: table
#: zsh.texi:13121
msgid ""
"With no arguments, print the contents of the directory stack.  Directories "
"are added to this stack with the @t{pushd} command, and removed with the "
"@t{cd} or @t{popd} commands.  If arguments are specified, load them onto the "
"directory stack, replacing anything that was there, and push the current "
"directory onto the stack."
msgstr ""

#. type: table
#: zsh.texi:13126
msgid "clear the directory stack."
msgstr ""

#. type: table
#: zsh.texi:13129
msgid ""
"print directory names in full instead of using of using @t{~} expressions "
"(@ref{Filename Expansion})."
msgstr ""

#. type: table
#: zsh.texi:13132
msgid "print directory entries one per line."
msgstr ""

#. type: table
#: zsh.texi:13135
msgid "number the directories in the stack when printing."
msgstr ""

#. type: t{#1}
#: zsh.texi:13140 zsh.texi:36791 zsh.texi:36792 zsh.texi:37008
#, no-wrap
msgid "disable"
msgstr ""

#. type: cindex
#: zsh.texi:13141
#, no-wrap
msgid "disabling commands"
msgstr ""

#. type: cindex
#: zsh.texi:13142
#, no-wrap
msgid "commands, disabling"
msgstr ""

#. type: item
#: zsh.texi:13143
#, no-wrap
msgid "@t{disable} [ @t{-afmprs} ] @var{name} ..."
msgstr ""

#. type: table
#: zsh.texi:13157
msgid ""
"Temporarily disable the @var{name}d hash table elements or patterns.  The "
"default is to disable builtin commands.  This allows you to use an external "
"command with the same name as a builtin command.  The @t{-a} option causes "
"@t{disable} to act on regular or global aliases.  The @t{-s} option causes "
"@t{disable} to act on suffix aliases.  The @t{-f} option causes @t{disable} "
"to act on shell functions.  The @t{-r} options causes @t{disable} to act on "
"reserved words.  Without arguments all disabled hash table elements from the "
"corresponding hash table are printed.  With the @t{-m} flag the arguments "
"are taken as patterns (which should be quoted to prevent them from "
"undergoing filename expansion), and all hash table elements from the "
"corresponding hash table matching these patterns are disabled.  Disabled "
"objects can be enabled with the @t{enable} command."
msgstr ""

#. type: table
#: zsh.texi:13162
msgid ""
"With the option @t{-p}, @var{name} ... refer to elements of the shell's "
"pattern syntax as described in @ref{Filename Generation}.  Certain elements "
"can be disabled separately, as given below."
msgstr ""

#. type: table
#: zsh.texi:13174
msgid ""
"Note that patterns not allowed by the current settings for the options "
"@t{EXTENDED_GLOB}, @t{KSH_GLOB} and @t{SH_GLOB} are never enabled, "
"regardless of the setting here.  For example, if @t{EXTENDED_GLOB} is not "
"active, the pattern @t{^} is ineffective even if `@t{disable -p \"^\"}' has "
"not been issued.  The list below indicates any option settings that restrict "
"the use of the pattern.  It should be noted that setting @t{SH_GLOB} has a "
"wider effect than merely disabling patterns as certain expressions, in "
"particular those involving parentheses, are parsed differently."
msgstr ""

#. type: table
#: zsh.texi:13180
msgid ""
"The following patterns may be disabled; all the strings need quoting on the "
"command line to prevent them from being interpreted immediately as patterns "
"and the patterns are shown below in single quotes as a reminder."
msgstr ""

#. type: t{#1}
#: zsh.texi:13183
#, no-wrap
msgid "'?'"
msgstr ""

#. type: table
#: zsh.texi:13186
msgid ""
"The pattern character @t{?} wherever it occurs, including when preceding a "
"parenthesis with @t{KSH_GLOB}."
msgstr ""

#. type: t{#1}
#: zsh.texi:13187
#, no-wrap
msgid "'*'"
msgstr ""

#. type: table
#: zsh.texi:13190
msgid ""
"The pattern character @t{*} wherever it occurs, including recursive globbing "
"and when preceding a parenthesis with @t{KSH_GLOB}."
msgstr ""

#. type: t{#1}
#: zsh.texi:13191
#, no-wrap
msgid "'['"
msgstr ""

#. type: table
#: zsh.texi:13193
msgid "Character classes."
msgstr ""

#. type: item
#: zsh.texi:13194
#, no-wrap
msgid "@t{'<'} (@t{NO_SH_GLOB})"
msgstr ""

#. type: table
#: zsh.texi:13196
msgid "Numeric ranges."
msgstr ""

#. type: item
#: zsh.texi:13197
#, no-wrap
msgid "@t{'|'} (@t{NO_SH_GLOB})"
msgstr ""

#. type: table
#: zsh.texi:13200
msgid ""
"Alternation in grouped patterns, case statements, or KSH_GLOB parenthesised "
"expressions."
msgstr ""

#. type: item
#: zsh.texi:13201
#, no-wrap
msgid "@t{'('} (@t{NO_SH_GLOB})"
msgstr ""

#. type: table
#: zsh.texi:13207
msgid ""
"Grouping using single parentheses.  Disabling this does not disable the use "
"of parentheses for @t{KSH_GLOB} where they are introduced by a special "
"character, nor for glob qualifiers (use `@t{setopt NO_BARE_GLOB_QUAL}' to "
"disable glob qualifiers that use parentheses only)."
msgstr ""

#. type: item
#: zsh.texi:13208
#, no-wrap
msgid "@t{'~'} (@t{EXTENDED_GLOB})"
msgstr ""

#. type: table
#: zsh.texi:13210
msgid "Exclusion in the form @var{A}@t{~}@var{B}."
msgstr ""

#. type: item
#: zsh.texi:13211
#, no-wrap
msgid "@t{'^'} (@t{EXTENDED_GLOB})"
msgstr ""

#. type: table
#: zsh.texi:13213
msgid "Exclusion in the form @var{A}@t{^}@var{B}."
msgstr ""

#. type: item
#: zsh.texi:13214
#, no-wrap
msgid "@t{'#'} (@t{EXTENDED_GLOB})"
msgstr ""

#. type: table
#: zsh.texi:13217
msgid ""
"The pattern character @t{#} wherever it occurs, both for repetition of a "
"previous pattern and for indicating globbing flags."
msgstr ""

#. type: item
#: zsh.texi:13218
#, no-wrap
msgid "@t{'?('} (@t{KSH_GLOB})"
msgstr ""

#. type: table
#: zsh.texi:13221
msgid ""
"The grouping form @t{?(}@var{...}@t{)}.  Note this is also disabled if "
"@t{'?'} is disabled."
msgstr ""

#. type: item
#: zsh.texi:13222
#, no-wrap
msgid "@t{'*('} (@t{KSH_GLOB})"
msgstr ""

#. type: table
#: zsh.texi:13225
msgid ""
"The grouping form @t{*(}@var{...}@t{)}.  Note this is also disabled if "
"@t{'*'} is disabled."
msgstr ""

#. type: item
#: zsh.texi:13226
#, no-wrap
msgid "@t{'+('} (@t{KSH_GLOB})"
msgstr ""

#. type: table
#: zsh.texi:13228
msgid "The grouping form @t{+(}@var{...}@t{)}."
msgstr ""

#. type: item
#: zsh.texi:13229
#, no-wrap
msgid "@t{'!('} (@t{KSH_GLOB})"
msgstr ""

#. type: table
#: zsh.texi:13231
msgid "The grouping form @t{!(}@var{...}@t{)}."
msgstr ""

#. type: item
#: zsh.texi:13232
#, no-wrap
msgid "@t{'@@('} (@t{KSH_GLOB})"
msgstr ""

#. type: table
#: zsh.texi:13234
msgid "The grouping form @t{@@(}@var{...}@t{)}."
msgstr ""

#. type: t{#1}
#: zsh.texi:13237 zsh.texi:40008
#, no-wrap
msgid "disown"
msgstr ""

#. type: item
#: zsh.texi:13239
#, no-wrap
msgid "@t{disown} [ @var{job} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:13240
#, no-wrap
msgid "@var{job} ... @t{&|}"
msgstr ""

#. type: itemx
#: zsh.texi:13241
#, no-wrap
msgid "@var{job} ... @t{&!}"
msgstr ""

#. type: table
#: zsh.texi:13246
msgid ""
"Remove the specified @var{job}s from the job table; the shell will no longer "
"report their status, and will not complain if you try to exit an interactive "
"shell with them running or stopped.  If no @var{job} is specified, disown "
"the current job."
msgstr ""

#. type: table
#: zsh.texi:13253
msgid ""
"If the @var{job}s are currently stopped and the @t{AUTO_CONTINUE} option is "
"not set, a warning is printed containing information about how to make them "
"running after they have been disowned.  If one of the latter two forms is "
"used, the @var{job}s will automatically be made running, independent of the "
"setting of the @t{AUTO_CONTINUE} option."
msgstr ""

#. type: findex
#: zsh.texi:13254
#, no-wrap
msgid "echo"
msgstr ""

#. type: item
#: zsh.texi:13255
#, no-wrap
msgid "@t{echo} [ @t{-neE} ] [ @var{arg} ... ]"
msgstr ""

#. type: table
#: zsh.texi:13260
msgid ""
"Write each @var{arg} on the standard output, with a space separating each "
"one.  If the @t{-n} flag is not present, print a newline at the end.  "
"@t{echo} recognizes the following escape sequences:"
msgstr ""

#. type: t{#1}
#: zsh.texi:13263 zsh.texi:16461
#, no-wrap
msgid "\\a"
msgstr ""

#. type: table
#: zsh.texi:13265 zsh.texi:16463
msgid "bell character"
msgstr ""

#. type: t{#1}
#: zsh.texi:13265 zsh.texi:16463
#, no-wrap
msgid "\\b"
msgstr ""

#. type: table
#: zsh.texi:13267 zsh.texi:16465
msgid "backspace"
msgstr ""

#. type: t{#1}
#: zsh.texi:13267
#, no-wrap
msgid "\\c"
msgstr ""

#. type: table
#: zsh.texi:13269
msgid "suppress subsequent characters and final newline"
msgstr ""

#. type: t{#1}
#: zsh.texi:13269
#, no-wrap
msgid "\\e"
msgstr ""

#. type: table
#: zsh.texi:13271 zsh.texi:16467
msgid "escape"
msgstr ""

#. type: t{#1}
#: zsh.texi:13271 zsh.texi:16467
#, no-wrap
msgid "\\f"
msgstr ""

#. type: table
#: zsh.texi:13273 zsh.texi:16469
msgid "form feed"
msgstr ""

#. type: t{#1}
#: zsh.texi:13273 zsh.texi:16469
#, no-wrap
msgid "\\n"
msgstr ""

#. type: table
#: zsh.texi:13275 zsh.texi:16471
msgid "linefeed (newline)"
msgstr ""

#. type: t{#1}
#: zsh.texi:13275 zsh.texi:16471
#, no-wrap
msgid "\\r"
msgstr ""

#. type: table
#: zsh.texi:13277 zsh.texi:16473
msgid "carriage return"
msgstr ""

#. type: t{#1}
#: zsh.texi:13277 zsh.texi:16473
#, no-wrap
msgid "\\t"
msgstr ""

#. type: table
#: zsh.texi:13279 zsh.texi:16475
msgid "horizontal tab"
msgstr ""

#. type: t{#1}
#: zsh.texi:13279 zsh.texi:16475
#, no-wrap
msgid "\\v"
msgstr ""

#. type: table
#: zsh.texi:13281 zsh.texi:16477
msgid "vertical tab"
msgstr ""

#. type: t{#1}
#: zsh.texi:13281
#, no-wrap
msgid "\\\\"
msgstr ""

#. type: table
#: zsh.texi:13283
msgid "backslash"
msgstr ""

#. type: item
#: zsh.texi:13283
#, no-wrap
msgid "@t{\\0}@var{NNN}"
msgstr ""

#. type: table
#: zsh.texi:13285 zsh.texi:16479
msgid "character code in octal"
msgstr ""

#. type: item
#: zsh.texi:13285 zsh.texi:16479
#, no-wrap
msgid "@t{\\x}@var{NN}"
msgstr ""

#. type: table
#: zsh.texi:13287 zsh.texi:16481
msgid "character code in hexadecimal"
msgstr ""

#. type: item
#: zsh.texi:13287 zsh.texi:16481
#, no-wrap
msgid "@t{\\u}@var{NNNN}"
msgstr ""

#. type: table
#: zsh.texi:13289 zsh.texi:13291 zsh.texi:16483 zsh.texi:16485
msgid "unicode character code in hexadecimal"
msgstr ""

#. type: item
#: zsh.texi:13289 zsh.texi:16483
#, no-wrap
msgid "@t{\\U}@var{NNNNNNNN}"
msgstr ""

#. type: pindex
#: zsh.texi:13294
#, no-wrap
msgid "BSD_ECHO, use of"
msgstr ""

#. type: table
#: zsh.texi:13298
msgid ""
"The @t{-E} flag, or the @t{BSD_ECHO} option, can be used to disable these "
"escape sequences.  In the latter case, @t{-e} flag can be used to enable "
"them."
msgstr ""

#. type: table
#: zsh.texi:13308
msgid ""
"Note that for standards compliance a double dash does not terminate option "
"processing; instead, it is printed directly.  However, a single dash does "
"terminate option processing, so the first dash, possibly following options, "
"is not printed, but everything following it is printed as an argument.  The "
"single dash behaviour is different from other shells.  For a more portable "
"way of printing text, see @t{printf}, and for a more controllable way of "
"printing text within zsh, see @t{print}."
msgstr ""

#. type: findex
#: zsh.texi:13309 zsh.texi:31078
#, no-wrap
msgid "echotc"
msgstr ""

#. type: table
#: zsh.texi:13311
msgid "See @ref{The zsh/termcap Module}."
msgstr ""

#. type: findex
#: zsh.texi:13312 zsh.texi:31108
#, no-wrap
msgid "echoti"
msgstr ""

#. type: table
#: zsh.texi:13314
msgid "See @ref{The zsh/terminfo Module}."
msgstr ""

#. type: findex
#: zsh.texi:13315
#, no-wrap
msgid "emulate"
msgstr ""

#. type: cindex
#: zsh.texi:13316
#, no-wrap
msgid "compatibility, sh"
msgstr ""

#. type: cindex
#: zsh.texi:13317
#, no-wrap
msgid "compatibility, ksh"
msgstr ""

#. type: cindex
#: zsh.texi:13318
#, no-wrap
msgid "compatibility, csh"
msgstr ""

#. type: cindex
#: zsh.texi:13319
#, no-wrap
msgid "sh, compatibility"
msgstr ""

#. type: cindex
#: zsh.texi:13320
#, no-wrap
msgid "ksh, compatibility"
msgstr ""

#. type: cindex
#: zsh.texi:13321
#, no-wrap
msgid "csh, compatibility"
msgstr ""

#. type: item
#: zsh.texi:13322
#, no-wrap
msgid ""
"@t{emulate} [ @t{-lLR} ] [ @{@t{zsh}|@t{sh}|@t{ksh}|@t{csh}@} [ @var{flags} "
"... ] ]"
msgstr ""

#. type: table
#: zsh.texi:13324
msgid "Without any argument print current emulation mode."
msgstr ""

#. type: table
#: zsh.texi:13337
msgid ""
"With single argument set up zsh options to emulate the specified shell as "
"much as possible.  @cite{csh} will never be fully emulated.  If the argument "
"is not one of the shells listed above, @t{zsh} will be used as a default; "
"more precisely, the tests performed on the argument are the same as those "
"used to determine the emulation at startup based on the shell name, see "
"@ref{Compatibility} .  In addition to setting shell options, the command "
"also restores the pristine state of pattern enables, as if all patterns had "
"been enabled using @t{enable -p}."
msgstr ""

#. type: table
#: zsh.texi:13345
msgid ""
"If the @t{emulate} command occurs inside a function that has been marked for "
"execution tracing with @t{functions -t} then the @t{xtrace} option will be "
"turned on regardless of emulation mode or other options.  Note that code "
"executed inside the function by the @t{.}, @t{source}, or @t{eval} commands "
"is not considered to be running directly from the function, hence does not "
"provoke this behaviour."
msgstr ""

#. type: table
#: zsh.texi:13360
msgid ""
"If the @t{-R} switch is given, all settable options are reset to their "
"default value corresponding to the specified emulation mode, except for "
"certain options describing the interactive environment; otherwise, only "
"those options likely to cause portability problems in scripts and functions "
"are altered.  If the @t{-L} switch is given, the options @t{LOCAL_OPTIONS}, "
"@t{LOCAL_PATTERNS} and @t{LOCAL_TRAPS} will be set as well, causing the "
"effects of the @t{emulate} command and any @t{setopt}, @t{disable -p} or "
"@t{enable -p}, and @t{trap} commands to be local to the immediately "
"surrounding shell function, if any; normally these options are turned off in "
"all emulation modes except @t{ksh}. The @t{-L} switch is mutually exclusive "
"with the use of @t{-c} in @var{flags}."
msgstr ""

#. type: table
#: zsh.texi:13369
msgid ""
"If there is a single argument and the @t{-l} switch is given, the options "
"that would be set or unset (the latter indicated with the prefix `@t{no}') "
"are listed.  @t{-l} can be combined with @t{-L} or @t{-R} and the list will "
"be modified in the appropriate way.  Note the list does not depend on the "
"current setting of options, i.e. it includes all options that may in "
"principle change, not just those that would actually change."
msgstr ""

#. type: table
#: zsh.texi:13375
msgid ""
"The @var{flags} may be any of the invocation-time flags described in "
"@ref{Invocation}, except that `@t{-o EMACS}' and `@t{-o VI}' may not be "
"used.  Flags such as `@t{+r}'/`@t{+o RESTRICTED}' may be prohibited in some "
"circumstances."
msgstr ""

#. type: table
#: zsh.texi:13383
msgid ""
"If @t{-c} @var{arg} appears in @var{flags}, @var{arg} is evaluated while the "
"requested emulation is temporarily in effect.  In this case the emulation "
"mode and all options are restored to their previous values before "
"@t{emulate} returns.  The @t{-R} switch may precede the name of the shell to "
"emulate; note this has a meaning distinct from including @t{-R} in "
"@var{flags}."
msgstr ""

#. type: table
#: zsh.texi:13399
msgid ""
"Use of @t{-c} enables `sticky' emulation mode for functions defined within "
"the evaluated expression: the emulation mode is associated thereafter with "
"the function so that whenever the function is executed the emulation "
"(respecting the @t{-R} switch, if present) and all options are set (and "
"pattern disables cleared)  before entry to the function, and the state is "
"restored after exit.  If the function is called when the sticky emulation is "
"already in effect, either within an `@t{emulate} @var{shell} @t{-c}' "
"expression or within another function with the same sticky emulation, entry "
"and exit from the function do not cause options to be altered (except due to "
"standard processing such as the @t{LOCAL_OPTIONS} option).  This also "
"applies to functions marked for autoload within the sticky emulation; the "
"appropriate set of options will be applied at the point the function is "
"loaded as well as when it is run."
msgstr ""

#. type: table
#: zsh.texi:13402 zsh.texi:22858 zsh.texi:23540 zsh.texi:24602 zsh.texi:25305
#: zsh.texi:26380 zsh.texi:32363
msgid "For example:"
msgstr ""

#. type: example
#: zsh.texi:13408
#, no-wrap
msgid ""
"emulate sh -c 'fni() @{ setopt cshnullglob; @}\n"
"fno() @{ fni; @}'\n"
"fno\n"
msgstr ""

#. type: table
#: zsh.texi:13420
msgid ""
"The two functions @t{fni} and @t{fno} are defined with sticky @t{sh} "
"emulation.  @t{fno} is then executed, causing options associated with "
"emulations to be set to their values in @t{sh}.  @t{fno} then calls @t{fni}; "
"because @t{fni} is also marked for sticky @t{sh} emulation, no option "
"changes take place on entry to or exit from it.  Hence the option "
"@t{cshnullglob}, turned off by @t{sh} emulation, will be turned on within "
"@t{fni} and remain on return to @t{fno}.  On exit from @t{fno}, the "
"emulation mode and all options will be restored to the state they were in "
"before entry to the temporary emulation."
msgstr ""

#. type: table
#: zsh.texi:13425
msgid ""
"The documentation above is typically sufficient for the intended purpose of "
"executing code designed for other shells in a suitable environment.  More "
"detailed rules follow."
msgstr ""

#. type: table
#: zsh.texi:13433
msgid ""
"The sticky emulation environment provided by `@t{emulate} @var{shell} "
"@t{-c}' is identical to that provided by entry to a function marked for "
"sticky emulation as a consequence of being defined in such an environment.  "
"Hence, for example, the sticky emulation is inherited by subfunctions "
"defined within functions with sticky emulation."
msgstr ""

#. type: table
#: zsh.texi:13438
msgid ""
"No change of options takes place on entry to or exit from functions that are "
"not marked for sticky emulation, other than those that would normally take "
"place, even if those functions are called within sticky emulation."
msgstr ""

#. type: table
#: zsh.texi:13442
msgid ""
"No special handling is provided for functions marked for @t{autoload} nor "
"for functions present in wordcode created by the @t{zcompile} command."
msgstr ""

#. type: table
#: zsh.texi:13447
msgid ""
"The presence or absence of the @t{-R} switch to @t{emulate} corresponds to "
"different sticky emulation modes, so for example `@t{emulate sh -c}', "
"`@t{emulate -R sh -c}' and `@t{emulate csh -c}' are treated as three "
"distinct sticky emulations."
msgstr ""

#. type: item
#: zsh.texi:13447 zsh.texi:31722
#, no-wrap
msgid "5."
msgstr ""

#. type: table
#: zsh.texi:13452
msgid ""
"Difference in shell options supplied in addition to the basic emulation also "
"mean the sticky emulations are different, so for example `@t{emulate zsh "
"-c}' and `@t{emulate zsh -o cbases -c}' are treated as distinct sticky "
"emulations."
msgstr ""

#. type: t{#1}
#: zsh.texi:13454 zsh.texi:36783 zsh.texi:36784 zsh.texi:37006
#, no-wrap
msgid "enable"
msgstr ""

#. type: cindex
#: zsh.texi:13455
#, no-wrap
msgid "enabling commands"
msgstr ""

#. type: cindex
#: zsh.texi:13456
#, no-wrap
msgid "commands, enabling"
msgstr ""

#. type: item
#: zsh.texi:13457
#, no-wrap
msgid "@t{enable} [ @t{-afmprs} ] @var{name} ..."
msgstr ""

#. type: table
#: zsh.texi:13469
msgid ""
"Enable the @var{name}d hash table elements, presumably disabled earlier with "
"@t{disable}.  The default is to enable builtin commands.  The @t{-a} option "
"causes @t{enable} to act on regular or global aliases.  The @t{-s} option "
"causes @t{enable} to act on suffix aliases.  The @t{-f} option causes "
"@t{enable} to act on shell functions.  The @t{-r} option causes @t{enable} "
"to act on reserved words.  Without arguments all enabled hash table elements "
"from the corresponding hash table are printed.  With the @t{-m} flag the "
"arguments are taken as patterns (should be quoted) and all hash table "
"elements from the corresponding hash table matching these patterns are "
"enabled.  Enabled objects can be disabled with the @t{disable} builtin "
"command."
msgstr ""

#. type: table
#: zsh.texi:13477
msgid ""
"@t{enable -p} reenables patterns disabled with @t{disable -p}.  Note that it "
"does not override globbing options; for example, `@t{enable -p \"~\"}' does "
"not cause the pattern character @t{~} to be active unless the "
"@t{EXTENDED_GLOB} option is also set.  To enable all possible patterns (so "
"that they may be individually disabled with @t{disable -p}), use `@t{setopt "
"EXTENDED_GLOB KSH_GLOB NO_SH_GLOB}'."
msgstr ""

#. type: cindex
#: zsh.texi:13479
#, no-wrap
msgid "evaluating arguments as commands"
msgstr ""

#. type: item
#: zsh.texi:13480
#, no-wrap
msgid "@t{eval} [ @var{arg} ... ]"
msgstr ""

#. type: table
#: zsh.texi:13486
msgid ""
"Read the arguments as input to the shell and execute the resulting "
"command(s) in the current shell process.  The return status is the same as "
"if the commands had been executed directly by the shell; if there are no "
"@var{args} or they contain no commands (i.e. are an empty string or "
"whitespace) the return status is zero."
msgstr ""

#. type: item
#: zsh.texi:13487
#, no-wrap
msgid ""
"@t{exec} [ @t{-cl} ] [ @t{-a} @var{argv0} ] [ @var{command} [ @var{arg} "
"... ] ]"
msgstr ""

#. type: table
#: zsh.texi:13491
msgid ""
"Replace the current shell with @var{command} rather than forking.  If "
"@var{command} is a shell builtin command or a shell function, the shell "
"executes it, and exits when the command is complete."
msgstr ""

#. type: table
#: zsh.texi:13498
msgid ""
"With @t{-c} clear the environment; with @t{-l} prepend @t{-} to the "
"@t{argv[0]} string of the command executed (to simulate a login shell); with "
"@t{-a} @var{argv0} set the @t{argv[0]} string of the command executed.  See "
"@ref{Precommand Modifiers}."
msgstr ""

#. type: table
#: zsh.texi:13505
msgid ""
"If the option @t{POSIX_BUILTINS} is set, @var{command} is never interpreted "
"as a shell builtin command or shell function.  This means further precommand "
"modifiers such as @t{builtin} and @t{noglob} are also not interpreted within "
"the shell.  Hence @var{command} is always found by searching the command "
"path."
msgstr ""

#. type: cindex
#: zsh.texi:13507
#, no-wrap
msgid "redirection, current shell's I/O"
msgstr ""

#. type: table
#: zsh.texi:13510
msgid ""
"If @var{command} is omitted but any redirections are specified, then the "
"redirections will take effect in the current shell."
msgstr ""

#. type: findex
#: zsh.texi:13511
#, no-wrap
msgid "exit"
msgstr ""

#. type: item
#: zsh.texi:13512
#, no-wrap
msgid "@t{exit} [ @var{n} ]"
msgstr ""

#. type: table
#: zsh.texi:13516
msgid ""
"Exit the shell with the exit status specified by an arithmetic expression "
"@var{n}; if none is specified, use the exit status from the last command "
"executed."
msgstr ""

#. type: pindex
#: zsh.texi:13516
#, no-wrap
msgid "IGNORE_EOF, use of"
msgstr ""

#. type: table
#: zsh.texi:13519
msgid ""
"An EOF condition will also cause the shell to exit, unless the "
"@t{IGNORE_EOF} option is set."
msgstr ""

#. type: table
#: zsh.texi:13524
msgid ""
"See notes at the end of @ref{Jobs & Signals} for some possibly unexpected "
"interactions of the @t{exit} command with jobs."
msgstr ""

#. type: item
#: zsh.texi:13526
#, no-wrap
msgid "@t{export} [ @var{name}[@t{=}@var{value}] ... ]"
msgstr ""

#. type: table
#: zsh.texi:13532
msgid ""
"The specified @var{name}s are marked for automatic export to the environment "
"of subsequently executed commands.  Equivalent to @t{typeset -gx}.  If a "
"parameter specified does not already exist, it is created in the global "
"scope."
msgstr ""

#. type: table
#: zsh.texi:13533 zsh.texi:37014 zsh.texi:37016 zsh.texi:37024 zsh.texi:37026
#: zsh.texi:37028 zsh.texi:37032 zsh.texi:37036 zsh.texi:37040 zsh.texi:37042
#: zsh.texi:37052
#, no-wrap
msgid "false"
msgstr ""

#. type: cindex
#: zsh.texi:13534
#, no-wrap
msgid "doing nothing, unsuccessfully"
msgstr ""

#. type: item
#: zsh.texi:13535
#, no-wrap
msgid "@t{false} [ @var{arg} ... ]"
msgstr ""

#. type: table
#: zsh.texi:13537
msgid "Do nothing and return an exit status of 1."
msgstr ""

#. type: cindex
#: zsh.texi:13539
#, no-wrap
msgid "history, editing"
msgstr ""

#. type: cindex
#: zsh.texi:13540
#, no-wrap
msgid "editing history"
msgstr ""

#. type: item
#: zsh.texi:13542
#, no-wrap
msgid ""
"@t{fc} [ @t{-e} @var{ename} ] [ @t{-s} ] [ @t{-LI} ] [ @t{-m} @var{match} ] "
"[ @var{old}@t{=}@var{new} ... ] [ @var{first} [ @var{last} ] ]"
msgstr ""

#. type: itemx
#: zsh.texi:13543
#, no-wrap
msgid ""
"@t{fc -l }[ @t{-LI} ] [ @t{-nrdfEiD} ] [ @t{-t} @var{timefmt} ] [ @t{-m} "
"@var{match} ]"
msgstr ""

#. type: itemx
#: zsh.texi:13544
#, no-wrap
msgid ""
"@t{@ @ @ @ @ @ }[ @var{old}@t{=}@var{new} ... ] [ @var{first} [ @var{last} ] "
"]"
msgstr ""

#. type: itemx
#: zsh.texi:13545
#, no-wrap
msgid ""
"@t{fc -p }[ @t{-a} ] [ @var{filename} [ @var{histsize} [ @var{savehistsize} "
"] ] ]"
msgstr ""

#. type: itemx
#: zsh.texi:13546
#, no-wrap
msgid "@t{fc} @t{-P}"
msgstr ""

#. type: itemx
#: zsh.texi:13547
#, no-wrap
msgid "@t{fc} @t{-ARWI} [ @var{filename} ]"
msgstr ""

#. type: table
#: zsh.texi:13553
msgid ""
"The @t{fc} command controls the interactive history mechanism.  Note that "
"reading and writing of history options is only performed if the shell is "
"interactive.  Usually this is detected automatically, but it can be forced "
"by setting the @t{interactive} option when starting the shell."
msgstr ""

#. type: table
#: zsh.texi:13562
msgid ""
"The first two forms of this command select a range of events from "
"@var{first} to @var{last} from the history list.  The arguments @var{first} "
"and @var{last} may be specified as a number or as a string.  A negative "
"number is used as an offset to the current history event number.  A string "
"specifies the most recent event beginning with the given string.  All "
"substitutions @var{old}@t{=}@var{new}, if any, are then performed on the "
"text of the events."
msgstr ""

#. type: table
#: zsh.texi:13566
msgid ""
"The range of events selected by numbers can be narrowed further by the "
"following flags."
msgstr ""

#. type: table
#: zsh.texi:13569
msgid "restricts to only internal events (not from @t{$HISTFILE})"
msgstr ""

#. type: table
#: zsh.texi:13573
msgid ""
"restricts to only local events (not from other shells, see @t{SHARE_HISTORY} "
"in @ref{Description of Options} -- note that @t{$HISTFILE} is considered "
"local when read at startup)"
msgstr ""

#. type: table
#: zsh.texi:13576
msgid ""
"takes the first argument as a pattern (which should be quoted) and only the "
"history events matching this pattern are considered"
msgstr ""

#. type: table
#: zsh.texi:13586
msgid ""
"If @var{first} is not specified, it will be set to -1 (the most recent "
"event), or to -16 if the @t{-l} flag is given.  If @var{last} is not "
"specified, it will be set to @var{first}, or to -1 if the @t{-l} flag is "
"given.  However, if the current event has added entries to the history with "
"`@t{print -s}' or `@t{fc -R}', then the default @var{last} for @t{-l} "
"includes all new history entries since the current event began."
msgstr ""

#. type: table
#: zsh.texi:13595
msgid ""
"When the @t{-l} flag is given, the resulting events are listed on standard "
"output.  Otherwise the editor program specified by @t{-e} @var{ename} is "
"invoked on a file containing these history events.  If @t{-e} is not given, "
"the value of the parameter @t{FCEDIT} is used; if that is not set the value "
"of the parameter @t{EDITOR} is used; if that is not set a builtin default, "
"usually `@t{vi}' is used.  If @var{ename} is `@t{-}', no editor is invoked.  "
"When editing is complete, the edited command is executed."
msgstr ""

#. type: table
#: zsh.texi:13600
msgid ""
"The flag `@t{-s}' is equivalent to `@t{-e -}'.  The flag @t{-r} reverses the "
"order of the events and the flag @t{-n} suppresses event numbers when "
"listing."
msgstr ""

#. type: table
#: zsh.texi:13603
msgid "Also when listing,"
msgstr ""

#. type: t{#1}
#: zsh.texi:13604 zsh.texi:15347 zsh.texi:16347 zsh.texi:27048 zsh.texi:33087
#: zsh.texi:33637
#, no-wrap
msgid "-d"
msgstr ""

#. type: table
#: zsh.texi:13606
msgid "prints timestamps for each event"
msgstr ""

#. type: table
#: zsh.texi:13609
msgid ""
"prints full time-date stamps in the US `@var{MM}@t{/}@var{DD}@t{/}@var{YY} "
"@var{hh}@t{:}@var{mm}' format"
msgstr ""

#. type: table
#: zsh.texi:13612
msgid ""
"prints full time-date stamps in the European "
"`@var{dd}@t{.}@var{mm}@t{.}@var{yyyy} @var{hh}@t{:}@var{mm}' format"
msgstr ""

#. type: table
#: zsh.texi:13615
msgid ""
"prints full time-date stamps in ISO8601 "
"`@var{yyyy}@t{-}@var{mm}@t{-}@var{dd} @var{hh}@t{:}@var{mm}' format"
msgstr ""

#. type: item
#: zsh.texi:13615
#, no-wrap
msgid "@t{-t} @var{fmt}"
msgstr ""

#. type: table
#: zsh.texi:13621
msgid ""
"prints time and date stamps in the given format; @var{fmt} is formatted with "
"the strftime function with the zsh extensions described for the "
"@t{%D@{}@var{string}@t{@}} prompt format in @ref{Prompt Expansion}.  The "
"resulting formatted string must be no more than 256 characters or will not "
"be printed"
msgstr ""

#. type: table
#: zsh.texi:13625
msgid "prints elapsed times; may be combined with one of the options above"
msgstr ""

#. type: cindex
#: zsh.texi:13628
#, no-wrap
msgid "history, stack"
msgstr ""

#. type: cindex
#: zsh.texi:13629
#, no-wrap
msgid "stack, history"
msgstr ""

#. type: table
#: zsh.texi:13644
msgid ""
"`@t{fc -p}' pushes the current history list onto a stack and switches to a "
"new history list.  If the @t{-a} option is also specified, this history list "
"will be automatically popped when the current function scope is exited, "
"which is a much better solution than creating a trap function to call `@t{fc "
"-P}' manually.  If no arguments are specified, the history list is left "
"empty, @t{$HISTFILE} is unset, and @t{$HISTSIZE} & @t{$SAVEHIST} are set to "
"their default values.  If one argument is given, @t{$HISTFILE} is set to "
"that filename, @t{$HISTSIZE} & @t{$SAVEHIST} are left unchanged, and the "
"history file is read in (if it exists) to initialize the new list.  If a "
"second argument is specified, @t{$HISTSIZE} & @t{$SAVEHIST} are instead set "
"to the single specified numeric value.  Finally, if a third argument is "
"specified, @t{$SAVEHIST} is set to a separate value from @t{$HISTSIZE}.  You "
"are free to change these environment values for the new history list however "
"you desire in order to manipulate the new history list."
msgstr ""

#. type: table
#: zsh.texi:13658
msgid ""
"`@t{fc -P}' pops the history list back to an older list saved by `@t{fc "
"-p}'.  The current list is saved to its @t{$HISTFILE} before it is destroyed "
"(assuming that @t{$HISTFILE} and @t{$SAVEHIST} are set appropriately, of "
"course).  The values of @t{$HISTFILE}, @t{$HISTSIZE}, and @t{$SAVEHIST} are "
"restored to the values they had when `@t{fc -p}' was called.  Note that this "
"restoration can conflict with making these variables \"local\", so your best "
"bet is to avoid local declarations for these variables in functions that use "
"`@t{fc -p}'.  The one other guaranteed-safe combination is declaring these "
"variables to be local at the top of your function and using the automatic "
"option (@t{-a}) with `@t{fc -p}'.  Finally, note that it is legal to "
"manually pop a push marked for automatic popping if you need to do so before "
"the function exits."
msgstr ""

#. type: cindex
#: zsh.texi:13660
#, no-wrap
msgid "history, file"
msgstr ""

#. type: cindex
#: zsh.texi:13661
#, no-wrap
msgid "file, history"
msgstr ""

#. type: table
#: zsh.texi:13673
msgid ""
"`@t{fc -R}' reads the history from the given file, `@t{fc -W}' writes the "
"history out to the given file, and `@t{fc -A}' appends the history out to "
"the given file.  If no filename is specified, the @t{$HISTFILE} is assumed.  "
"If the @t{-I} option is added to @t{-R}, only those events that are not "
"already contained within the internal history list are added.  If the @t{-I} "
"option is added to @t{-A} or @t{-W}, only those events that are new since "
"last incremental append/write to the history file are appended/written.  In "
"any case, the created file will have no more than @t{$SAVEHIST} entries."
msgstr ""

#. type: t{#1}
#: zsh.texi:13674 zsh.texi:40728
#, no-wrap
msgid "fg"
msgstr ""

#. type: cindex
#: zsh.texi:13675
#, no-wrap
msgid "jobs, foregrounding"
msgstr ""

#. type: cindex
#: zsh.texi:13676
#, no-wrap
msgid "jobs, resuming"
msgstr ""

#. type: item
#: zsh.texi:13677
#, no-wrap
msgid "@t{fg} [ @var{job} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:13678
#, no-wrap
msgid "@var{job} ..."
msgstr ""

#. type: table
#: zsh.texi:13681
msgid ""
"Bring each specified @var{job} in turn to the foreground.  If no @var{job} "
"is specified, resume the current job."
msgstr ""

#. type: findex
#: zsh.texi:13682
#, no-wrap
msgid "float"
msgstr ""

#. type: item
#: zsh.texi:13683
#, no-wrap
msgid ""
"@t{float} [ @{@t{+}|@t{-}@}@t{Hghlprtux} ] [ @{@t{+}|@t{-}@}@t{EFLRZ} [ "
"@var{n} ] ] [ @var{name}[@t{=}@var{value}] ... ]"
msgstr ""

#. type: table
#: zsh.texi:13686
msgid ""
"Equivalent to @t{typeset -E}, except that options irrelevant to floating "
"point numbers are not permitted."
msgstr ""

#. type: item
#: zsh.texi:13688
#, no-wrap
msgid ""
"@t{functions} [ @{@t{+}|@t{-}@}@t{UkmtTuWz} ] [ @t{-x} @var{num} ] [ "
"@var{name} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:13689
#, no-wrap
msgid "@t{functions -c} @var{oldfn} @var{newfn}"
msgstr ""

#. type: itemx
#: zsh.texi:13690
#, no-wrap
msgid ""
"@t{functions -M} [@t{-s}] @var{mathfn} [ @var{min} [ @var{max} [ "
"@var{shellfn} ] ] ]"
msgstr ""

#. type: itemx
#: zsh.texi:13691
#, no-wrap
msgid "@t{functions -M} [ @t{-m} @var{pattern} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:13692
#, no-wrap
msgid "@t{functions +M} [ @t{-m} ] @var{mathfn} ..."
msgstr ""

#. type: table
#: zsh.texi:13697
msgid ""
"Equivalent to @t{typeset -f}, with the exception of the @t{-c}, @t{-x}, "
"@t{-M} and @t{-W} options.  For @t{functions -u} and @t{functions -U}, see "
"@t{autoload}, which provides additional options.  For @t{functions -t} and "
"@t{functions -T}, see @t{typeset -f}."
msgstr ""

#. type: table
#: zsh.texi:13703
msgid ""
"The @t{-x} option indicates that any functions output will have each leading "
"tab for indentation, added by the shell to show syntactic structure, "
"expanded to the given number @var{num} of spaces.  @var{num} can also be 0 "
"to suppress all indentation."
msgstr ""

#. type: table
#: zsh.texi:13709
msgid ""
"The @t{-W} option turns on the option @t{WARN_NESTED_VAR} for the named "
"function or functions only.  The option is turned off at the start of nested "
"functions (apart from anonoymous functions) unless the called function also "
"has the @t{-W} attribute."
msgstr ""

#. type: table
#: zsh.texi:13718
msgid ""
"The @t{-c} option causes @var{oldfn} to be copied to @var{newfn}.  The copy "
"is efficiently handled internally by reference counting.  If @var{oldfn} was "
"marked for autoload it is first loaded and if this fails the copy fails.  "
"Either function may subsequently be redefined without affecting the other.  "
"A typical idiom is that @var{oldfn} is the name of a library shell function "
"which is then redefined to call @t{newfn}, thereby installing a modified "
"version of the function."
msgstr ""

#. type: table
#: zsh.texi:13721
msgid "@emph{The }@t{-M}@emph{ and }@t{+M}@emph{ flags}"
msgstr ""

#. type: cindex
#: zsh.texi:13721
#, no-wrap
msgid "defining mathematical functions"
msgstr ""

#. type: cindex
#: zsh.texi:13722
#, no-wrap
msgid "functions, defining mathematical"
msgstr ""

#. type: table
#: zsh.texi:13727
msgid ""
"Use of the @t{-M} option may not be combined with any of the options handled "
"by @t{typeset -f}."
msgstr ""

#. type: table
#: zsh.texi:13737
msgid ""
"@t{functions -M} @var{mathfn} defines @var{mathfn} as the name of a "
"mathematical function recognised in all forms of arithmetical expressions; "
"see @ref{Arithmetic Evaluation}.  By default @var{mathfn} may take any "
"number of comma-separated arguments.  If @var{min} is given, it must have "
"exactly @var{min} args; if @var{min} and @var{max} are both given, it must "
"have at least @var{min} and at most @var{max} args.  @var{max} may be -1 to "
"indicate that there is no upper limit."
msgstr ""

#. type: table
#: zsh.texi:13746
msgid ""
"By default the function is implemented by a shell function of the same name; "
"if @var{shellfn} is specified it gives the name of the corresponding shell "
"function while @var{mathfn} remains the name used in arithmetical "
"expressions.  The name of the function in @t{$0} is @var{mathfn} (not "
"@var{shellfn} as would usually be the case), provided the option "
"@t{FUNCTION_ARGZERO} is in effect.  The positional parameters in the shell "
"function correspond to the arguments of the mathematical function call."
msgstr ""

#. type: table
#: zsh.texi:13761
msgid ""
"The result of the last arithmetical expression evaluated inside the shell "
"function gives the result of the mathematical function.  This is not limited "
"to arithmetic substitutions of the form @t{$((}@var{...}@t{))}, but also "
"includes arithmetical expressions evaluated in any other way, including by "
"the @t{let} builtin, by @t{((}@var{...}@t{))} statements, and even by the "
"@t{return} builtin and by array subscripts.  Therefore, care must be taken "
"not to use syntactical constructs that perform arithmetic evaluation after "
"evaluating what is to be the result of the function.  For example:"
msgstr ""

#. type: findex
#: zsh.texi:13763
#, no-wrap
msgid "zmath_cube"
msgstr ""

#. type: findex
#: zsh.texi:13764
#, no-wrap
msgid "cube"
msgstr ""

#. type: example
#: zsh.texi:13773
#, no-wrap
msgid ""
"# WRONG\n"
"zmath_cube() @{\n"
"  (( $1 * $1 * $1 ))\n"
"  return 0\n"
"@}\n"
"functions -M cube 1 1 zmath_cube\n"
"print $(( cube(3) ))\n"
msgstr ""

#. type: table
#: zsh.texi:13777
msgid "This will print `@t{0}' because of the @t{return}."
msgstr ""

#. type: table
#: zsh.texi:13784
msgid ""
"Commenting the @t{return} out would lead to a different problem: the "
"@t{((}@var{...}@t{))} statement would become the last statement in the "
"function, so the @emph{return status} (@t{$?}) of the function would be "
"non-zero (indicating failure) whenever the @emph{arithmetic result} of the "
"function would happen to be zero (numerically):"
msgstr ""

#. type: example
#: zsh.texi:13793
#, no-wrap
msgid ""
"# WRONG\n"
"zmath_cube() @{\n"
"  (( $1 * $1 * $1 ))\n"
"@}\n"
"functions -M cube 1 1 zmath_cube\n"
"print $(( cube(0) ))\n"
msgstr ""

#. type: table
#: zsh.texi:13797
msgid "Instead, the @t{true} builtin can be used:"
msgstr ""

#. type: example
#: zsh.texi:13807
#, no-wrap
msgid ""
"# RIGHT\n"
"zmath_cube() @{\n"
"  (( $1 * $1 * $1 ))\n"
"  true\n"
"@}\n"
"functions -M cube 1 1 zmath_cube\n"
"print $(( cube(3) ))\n"
msgstr ""

#. type: table
#: zsh.texi:13818
msgid ""
"If the additional option @t{-s} is given to @t{functions -M}, the argument "
"to the function is a single string: anything between the opening and "
"matching closing parenthesis is passed to the function as a single argument, "
"even if it includes commas or white space.  The minimum and maximum argument "
"specifiers must therefore be 1 if given.  An empty argument list is passed "
"as a zero-length string.  Thus, the following string function takes a single "
"argument, including the commas, and prints 11:"
msgstr ""

#. type: example
#: zsh.texi:13824
#, no-wrap
msgid ""
"stringfn() @{ (( $#1 )); true @}\n"
"functions -Ms stringfn\n"
"print $(( stringfn(foo,bar,rod) ))\n"
msgstr ""

#. type: table
#: zsh.texi:13831
msgid ""
"@t{functions -M} with no arguments lists all such user-defined functions in "
"the same form as a definition.  With the additional option @t{-m} and a list "
"of arguments, all functions whose @var{mathfn} matches one of the pattern "
"arguments are listed."
msgstr ""

#. type: table
#: zsh.texi:13838
msgid ""
"@t{function +M} removes the list of mathematical functions; with the "
"additional option @t{-m} the arguments are treated as patterns and all "
"functions whose @var{mathfn} matches the pattern are removed.  Note that the "
"shell function implementing the behaviour is not removed (regardless of "
"whether its name coincides with @var{mathfn})."
msgstr ""

#. type: findex
#: zsh.texi:13839 zsh.texi:27846
#, no-wrap
msgid "getcap"
msgstr ""

#. type: findex
#: zsh.texi:13842
#, no-wrap
msgid "getln"
msgstr ""

#. type: cindex
#: zsh.texi:13843
#, no-wrap
msgid "line, reading"
msgstr ""

#. type: cindex
#: zsh.texi:13844
#, no-wrap
msgid "reading a line"
msgstr ""

#. type: item
#: zsh.texi:13845
#, no-wrap
msgid "@t{getln} [ @t{-AclneE} ] @var{name} ..."
msgstr ""

#. type: table
#: zsh.texi:13849
msgid ""
"Read the top value from the buffer stack and put it in the shell parameter "
"@var{name}.  Equivalent to @t{read -zr}."
msgstr ""

#. type: findex
#: zsh.texi:13850
#, no-wrap
msgid "getopts"
msgstr ""

#. type: cindex
#: zsh.texi:13851
#, no-wrap
msgid "options, processing"
msgstr ""

#. type: item
#: zsh.texi:13852
#, no-wrap
msgid "@t{getopts} @var{optstring} @var{name} [ @var{arg} ... ]"
msgstr ""

#. type: table
#: zsh.texi:13862
msgid ""
"Checks the @var{arg}s for legal options.  If the @var{arg}s are omitted, use "
"the positional parameters.  A valid option argument begins with a `@t{+}' or "
"a `@t{-}'.  An argument not beginning with a `@t{+}' or a `@t{-}', or the "
"argument `@t{-}@t{-}', ends the options.  Note that a single `@t{-}' is not "
"considered a valid option argument.  @var{optstring} contains the letters "
"that @t{getopts} recognizes.  If a letter is followed by a `@t{:}', that "
"option requires an argument.  The options can be separated from the argument "
"by blanks."
msgstr ""

#. type: table
#: zsh.texi:13869
msgid ""
"Each time it is invoked, @t{getopts} places the option letter it finds in "
"the shell parameter @var{name}, prepended with a `@t{+}' when @var{arg} "
"begins with a `@t{+}'.  The index of the next @var{arg} is stored in "
"@t{OPTIND}.  The option argument, if any, is stored in @t{OPTARG}."
msgstr ""

#. type: vindex
#: zsh.texi:13869
#, no-wrap
msgid "OPTIND, use of"
msgstr ""

#. type: vindex
#: zsh.texi:13870
#, no-wrap
msgid "OPTARG, use of"
msgstr ""

#. type: table
#: zsh.texi:13882
msgid ""
"The first option to be examined may be changed by explicitly assigning to "
"@t{OPTIND}.  @t{OPTIND} has an initial value of @t{1}, and is normally set "
"to @t{1} upon entry to a shell function and restored upon exit.  (The "
"@t{POSIX_BUILTINS} option disables this, and also changes the way the value "
"is calculated to match other shells.)  @t{OPTARG} is not reset and retains "
"its value from the most recent call to @t{getopts}.  If either of @t{OPTIND} "
"or @t{OPTARG} is explicitly unset, it remains unset, and the index or option "
"argument is not stored.  The option itself is still stored in @var{name} in "
"this case."
msgstr ""

#. type: table
#: zsh.texi:13890
msgid ""
"A leading `@t{:}' in @var{optstring} causes @t{getopts} to store the letter "
"of any invalid option in @t{OPTARG}, and to set @var{name} to `@t{?}' for an "
"unknown option and to `@t{:}' when a required argument is missing.  "
"Otherwise, @t{getopts} sets @var{name} to `@t{?}' and prints an error "
"message when an option is invalid.  The exit status is nonzero when there "
"are no more options."
msgstr ""

#. type: item
#: zsh.texi:13892
#, no-wrap
msgid "@t{hash} [ @t{-Ldfmrv} ] [ @var{name}[@t{=}@var{value}] ] ..."
msgstr ""

#. type: table
#: zsh.texi:13901
msgid ""
"@t{hash} can be used to directly modify the contents of the command hash "
"table, and the named directory hash table.  Normally one would modify these "
"tables by modifying one's @t{PATH} (for the command hash table) or by "
"creating appropriate shell parameters (for the named directory hash table).  "
"The choice of hash table to work on is determined by the @t{-d} option; "
"without the option the command hash table is used, and with the option the "
"named directory hash table is used."
msgstr ""

#. type: table
#: zsh.texi:13906
msgid ""
"A command @var{name} starting with a @t{/} is never hashed, whether by "
"explicit use of the @t{hash} command or otherwise.  Such a command is always "
"found by direct look up in the file system."
msgstr ""

#. type: table
#: zsh.texi:13910
msgid ""
"Given no arguments, and neither the @t{-r} or @t{-f} options, the selected "
"hash table will be listed in full."
msgstr ""

#. type: table
#: zsh.texi:13919
msgid ""
"The @t{-r} option causes the selected hash table to be emptied.  It will be "
"subsequently rebuilt in the normal fashion.  The @t{-f} option causes the "
"selected hash table to be fully rebuilt immediately.  For the command hash "
"table this hashes all the absolute directories in the @t{PATH}, and for the "
"named directory hash table this adds all users' home directories.  These two "
"options cannot be used with any arguments."
msgstr ""

#. type: table
#: zsh.texi:13925
msgid ""
"The @t{-m} option causes the arguments to be taken as patterns (which should "
"be quoted) and the elements of the hash table matching those patterns are "
"printed.  This is the only way to display a limited selection of hash table "
"elements."
msgstr ""

#. type: table
#: zsh.texi:13934
msgid ""
"For each @var{name} with a corresponding @var{value}, put `@var{name}' in "
"the selected hash table, associating it with the pathname `@var{value}'.  In "
"the command hash table, this means that whenever `@var{name}' is used as a "
"command argument, the shell will try to execute the file given by "
"`@var{value}'.  In the named directory hash table, this means that "
"`@var{value}' may be referred to as `@t{~}@var{name}'."
msgstr ""

#. type: table
#: zsh.texi:13941
msgid ""
"For each @var{name} with no corresponding @var{value}, attempt to add "
"@var{name} to the hash table, checking what the appropriate @t{value} is in "
"the normal manner for that hash table.  If an appropriate @t{value} can't be "
"found, then the hash table will be unchanged."
msgstr ""

#. type: table
#: zsh.texi:13945
msgid ""
"The @t{-v} option causes hash table entries to be listed as they are added "
"by explicit specification.  If has no effect if used with @t{-f}."
msgstr ""

#. type: table
#: zsh.texi:13949
msgid ""
"If the @t{-L} flag is present, then each hash table entry is printed in the "
"form of a call to hash."
msgstr ""

#. type: table
#: zsh.texi:13953
msgid "Same as @t{fc -l}."
msgstr ""

#. type: findex
#: zsh.texi:13954
#, no-wrap
msgid "integer"
msgstr ""

#. type: item
#: zsh.texi:13955
#, no-wrap
msgid ""
"@t{integer} [ @{@t{+}|@t{-}@}@t{Hghlprtux} ] [ @{@t{+}|@t{-}@}@t{LRZi} [ "
"@var{n} ] ] [ @var{name}[@t{=}@var{value}] ... ]"
msgstr ""

#. type: table
#: zsh.texi:13958
msgid ""
"Equivalent to @t{typeset -i}, except that options irrelevant to integers are "
"not permitted."
msgstr ""

#. type: item
#: zsh.texi:13960
#, no-wrap
msgid "@t{jobs} [ @t{-dlprs} ] [ @var{job} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:13961
#, no-wrap
msgid "@t{jobs -Z} @var{string}"
msgstr ""

#. type: table
#: zsh.texi:13970
msgid ""
"Lists information about each given job, or all jobs if @var{job} is "
"omitted.  The @t{-l} flag lists process IDs, and the @t{-p} flag lists "
"process groups.  If the @t{-r} flag is specified only running jobs will be "
"listed and if the @t{-s} flag is given only stopped jobs are shown.  If the "
"@t{-d} flag is given, the directory from which the job was started (which "
"may not be the current directory of the job) will also be shown."
msgstr ""

#. type: table
#: zsh.texi:13976
msgid ""
"The @t{-Z} option replaces the shell's argument and environment space with "
"the given string, truncated if necessary to fit.  This will normally be "
"visible in @t{ps} (ps(1)) listings.  This feature is typically used by "
"daemons, to indicate their state."
msgstr ""

#. type: table
#: zsh.texi:13986
msgid ""
"Full job control is only available in the top-level interactive shell, not "
"in commands run in the left hand side of pipelines or within the "
"@t{(}@var{...}@t{)} construct.  However, a snapshot of the job state at that "
"point is taken, so it is still possible to use the @t{jobs} builtin, or any "
"parameter providing job information.  This gives information about the state "
"of jobs at the point the subshell was created.  If background processes are "
"created within the subshell, then instead information about those processes "
"is provided."
msgstr ""

#. type: example
#: zsh.texi:13998
#, no-wrap
msgid ""
"sleep 10 &    # Job in background\n"
"(             # Shell forks\n"
"jobs          # Shows information about \"sleep 10 &\"\n"
"sleep 5 &     # Process in background (no job control)\n"
"jobs          # Shows information about \"sleep 5 &\"\n"
")\n"
msgstr ""

#. type: findex
#: zsh.texi:14000
#, no-wrap
msgid "kill"
msgstr ""

#. type: cindex
#: zsh.texi:14001
#, no-wrap
msgid "killing jobs"
msgstr ""

#. type: cindex
#: zsh.texi:14002
#, no-wrap
msgid "jobs, killing"
msgstr ""

#. type: item
#: zsh.texi:14003
#, no-wrap
msgid ""
"@t{kill} [ @t{-s} @var{signal_name} | @t{-n} @var{signal_number} | "
"@t{-}@var{sig} ] @var{job} ..."
msgstr ""

#. type: itemx
#: zsh.texi:14004
#, no-wrap
msgid "@t{kill} @t{-l} [ @var{sig} ... ]"
msgstr ""

#. type: table
#: zsh.texi:14019
msgid ""
"Sends either @t{SIGTERM} or the specified signal to the given jobs or "
"processes.  Signals are given by number or by names, with or without the "
"`@t{SIG}' prefix.  If the signal being sent is not `@t{KILL}' or `@t{CONT}', "
"then the job will be sent a `@t{CONT}' signal if it is stopped.  The "
"argument @var{job} can be the process ID of a job not in the job list.  In "
"the second form, @t{kill -l}, if @var{sig} is not specified the signal names "
"are listed.  Otherwise, for each @var{sig} that is a name, the corresponding "
"signal number is listed.  For each @var{sig} that is a signal number or a "
"number representing the exit status of a process which was terminated or "
"stopped by a signal the name of the signal is printed."
msgstr ""

#. type: table
#: zsh.texi:14028
msgid ""
"On some systems, alternative signal names are allowed for a few signals.  "
"Typical examples are @t{SIGCHLD} and @t{SIGCLD} or @t{SIGPOLL} and "
"@t{SIGIO}, assuming they correspond to the same signal number.  @t{kill -l} "
"will only list the preferred form, however @t{kill -l} @var{alt} will show "
"if the alternative form corresponds to a signal number.  For example, under "
"Linux @t{kill -l IO} and @t{kill -l POLL} both output 29, hence @t{kill -IO} "
"and @t{kill -POLL} have the same effect."
msgstr ""

#. type: table
#: zsh.texi:14032
msgid ""
"Many systems will allow process IDs to be negative to kill a process group "
"or zero to kill the current process group."
msgstr ""

#. type: findex
#: zsh.texi:14033
#, no-wrap
msgid "let"
msgstr ""

#. type: item
#: zsh.texi:14034
#, no-wrap
msgid "@t{let} @var{arg} ..."
msgstr ""

#. type: table
#: zsh.texi:14041
msgid ""
"Evaluate each @var{arg} as an arithmetic expression.  See @ref{Arithmetic "
"Evaluation} for a description of arithmetic expressions.  The exit status is "
"0 if the value of the last expression is nonzero, 1 if it is zero, and 2 if "
"an error occurred."
msgstr ""

#. type: findex
#: zsh.texi:14042
#, no-wrap
msgid "limit"
msgstr ""

#. type: cindex
#: zsh.texi:14043 zsh.texi:15308 zsh.texi:15438
#, no-wrap
msgid "resource limits"
msgstr ""

#. type: cindex
#: zsh.texi:14044 zsh.texi:15309 zsh.texi:15439
#, no-wrap
msgid "limits, resource"
msgstr ""

#. type: item
#: zsh.texi:14045
#, no-wrap
msgid "@t{limit} [ @t{-hs} ] [ @var{resource} [ @var{limit} ] ] ..."
msgstr ""

#. type: table
#: zsh.texi:14050
msgid ""
"Set or display resource limits.  Unless the @t{-s} flag is given, the limit "
"applies only the children of the shell.  If @t{-s} is given without other "
"arguments, the resource limits of the current shell is set to the previously "
"set resource limits of the children."
msgstr ""

#. type: table
#: zsh.texi:14057
msgid ""
"If @var{limit} is not specified, print the current limit placed on "
"@var{resource}, otherwise set the limit to the specified value.  If the "
"@t{-h} flag is given, use hard limits instead of soft limits.  If no "
"@var{resource} is given, print all limits."
msgstr ""

#. type: table
#: zsh.texi:14062 zsh.texi:15334
msgid ""
"When looping over multiple resources, the shell will abort immediately if it "
"detects a badly formed argument.  However, if it fails to set a limit for "
"some other reason it will continue trying to set the remaining limits."
msgstr ""

#. type: table
#: zsh.texi:14065
msgid "@var{resource} can be one of:"
msgstr ""

#. type: t{#1}
#: zsh.texi:14068
#, no-wrap
msgid "addressspace"
msgstr ""

#. type: table
#: zsh.texi:14070
msgid "Maximum amount of address space used."
msgstr ""

#. type: t{#1}
#: zsh.texi:14070
#, no-wrap
msgid "aiomemorylocked"
msgstr ""

#. type: table
#: zsh.texi:14072
msgid "Maximum amount of memory locked in RAM for AIO operations."
msgstr ""

#. type: t{#1}
#: zsh.texi:14072
#, no-wrap
msgid "aiooperations"
msgstr ""

#. type: table
#: zsh.texi:14074
msgid "Maximum number of AIO operations."
msgstr ""

#. type: t{#1}
#: zsh.texi:14074
#, no-wrap
msgid "cachedthreads"
msgstr ""

#. type: table
#: zsh.texi:14076
msgid "Maximum number of cached threads."
msgstr ""

#. type: t{#1}
#: zsh.texi:14076
#, no-wrap
msgid "coredumpsize"
msgstr ""

#. type: table
#: zsh.texi:14078
msgid "Maximum size of a core dump."
msgstr ""

#. type: t{#1}
#: zsh.texi:14078
#, no-wrap
msgid "cputime"
msgstr ""

#. type: table
#: zsh.texi:14080
msgid "Maximum CPU seconds per process."
msgstr ""

#. type: t{#1}
#: zsh.texi:14080
#, no-wrap
msgid "datasize"
msgstr ""

#. type: table
#: zsh.texi:14082
msgid "Maximum data size (including stack) for each process."
msgstr ""

#. type: t{#1}
#: zsh.texi:14082
#, no-wrap
msgid "descriptors"
msgstr ""

#. type: table
#: zsh.texi:14084
msgid "Maximum value for a file descriptor."
msgstr ""

#. type: t{#1}
#: zsh.texi:14084
#, no-wrap
msgid "filesize"
msgstr ""

#. type: table
#: zsh.texi:14086
msgid "Largest single file allowed."
msgstr ""

#. type: t{#1}
#: zsh.texi:14086
#, no-wrap
msgid "kqueues"
msgstr ""

#. type: table
#: zsh.texi:14088
msgid "Maximum number of kqueues allocated."
msgstr ""

#. type: t{#1}
#: zsh.texi:14088
#, no-wrap
msgid "maxproc"
msgstr ""

#. type: table
#: zsh.texi:14090
msgid "Maximum number of processes."
msgstr ""

#. type: t{#1}
#: zsh.texi:14090
#, no-wrap
msgid "maxpthreads"
msgstr ""

#. type: table
#: zsh.texi:14092
msgid "Maximum number of threads per process."
msgstr ""

#. type: t{#1}
#: zsh.texi:14092
#, no-wrap
msgid "memorylocked"
msgstr ""

#. type: table
#: zsh.texi:14094
msgid "Maximum amount of memory locked in RAM."
msgstr ""

#. type: t{#1}
#: zsh.texi:14094
#, no-wrap
msgid "memoryuse"
msgstr ""

#. type: table
#: zsh.texi:14096 zsh.texi:14104
msgid "Maximum resident set size."
msgstr ""

#. type: t{#1}
#: zsh.texi:14096
#, no-wrap
msgid "msgqueue"
msgstr ""

#. type: table
#: zsh.texi:14098
msgid "Maximum number of bytes in POSIX message queues."
msgstr ""

#. type: t{#1}
#: zsh.texi:14098
#, no-wrap
msgid "posixlocks"
msgstr ""

#. type: table
#: zsh.texi:14100
msgid "Maximum number of POSIX locks per user."
msgstr ""

#. type: t{#1}
#: zsh.texi:14100
#, no-wrap
msgid "pseudoterminals"
msgstr ""

#. type: table
#: zsh.texi:14102
msgid "Maximum number of pseudo-terminals."
msgstr ""

#. type: t{#1}
#: zsh.texi:14102
#, no-wrap
msgid "resident"
msgstr ""

#. type: t{#1}
#: zsh.texi:14104
#, no-wrap
msgid "sigpending"
msgstr ""

#. type: table
#: zsh.texi:14106
msgid "Maximum number of pending signals."
msgstr ""

#. type: t{#1}
#: zsh.texi:14106
#, no-wrap
msgid "sockbufsize"
msgstr ""

#. type: table
#: zsh.texi:14108
msgid "Maximum size of all socket buffers."
msgstr ""

#. type: t{#1}
#: zsh.texi:14108
#, no-wrap
msgid "stacksize"
msgstr ""

#. type: table
#: zsh.texi:14110
msgid "Maximum stack size for each process."
msgstr ""

#. type: t{#1}
#: zsh.texi:14110
#, no-wrap
msgid "swapsize"
msgstr ""

#. type: table
#: zsh.texi:14112
msgid "Maximum amount of swap used."
msgstr ""

#. type: t{#1}
#: zsh.texi:14112
#, no-wrap
msgid "vmemorysize"
msgstr ""

#. type: table
#: zsh.texi:14114
msgid "Maximum amount of virtual memory."
msgstr ""

#. type: table
#: zsh.texi:14121
msgid ""
"Which of these resource limits are available depends on the system.  "
"@var{resource} can be abbreviated to any unambiguous prefix.  It can also be "
"an integer, which corresponds to the integer defined for the resource by the "
"operating system."
msgstr ""

#. type: table
#: zsh.texi:14128
msgid ""
"If argument corresponds to a number which is out of the range of the "
"resources configured into the shell, the shell will try to read or write the "
"limit anyway, and will report an error if this fails.  As the shell does not "
"store such resources internally, an attempt to set the limit will fail "
"unless the @t{-s} option is present."
msgstr ""

#. type: table
#: zsh.texi:14131
msgid "@var{limit} is a number, with an optional scaling factor, as follows:"
msgstr ""

#. type: item
#: zsh.texi:14134
#, no-wrap
msgid "@var{n}@t{h}"
msgstr ""

#. type: table
#: zsh.texi:14136
msgid "hours"
msgstr ""

#. type: item
#: zsh.texi:14136
#, no-wrap
msgid "@var{n}@t{k}"
msgstr ""

#. type: table
#: zsh.texi:14138
msgid "kilobytes (default)"
msgstr ""

#. type: item
#: zsh.texi:14138
#, no-wrap
msgid "@var{n}@t{m}"
msgstr ""

#. type: table
#: zsh.texi:14140
msgid "megabytes or minutes"
msgstr ""

#. type: item
#: zsh.texi:14140
#, no-wrap
msgid "@var{n}@t{g}"
msgstr ""

#. type: table
#: zsh.texi:14142
msgid "gigabytes"
msgstr ""

#. type: item
#: zsh.texi:14142
#, no-wrap
msgid "[@var{mm}@t{:}]@var{ss}"
msgstr ""

#. type: table
#: zsh.texi:14144
msgid "minutes and seconds"
msgstr ""

#. type: table
#: zsh.texi:14150
msgid ""
"The @t{limit} command is not made available by default when the shell starts "
"in a mode emulating another shell.  It can be made available with the "
"command `@t{zmodload -F zsh/rlimits b:limit}'."
msgstr ""

#. type: item
#: zsh.texi:14152
#, no-wrap
msgid ""
"@t{local} [ @{@t{+}|@t{-}@}@t{AHUahlprtux} ] [ @{@t{+}|@t{-}@}@t{EFLRZi} [ "
"@var{n} ] ] [ @var{name}[@t{=}@var{value}] ... ]"
msgstr ""

#. type: table
#: zsh.texi:14156
msgid ""
"Same as @t{typeset}, except that the options @t{-g}, and @t{-f} are not "
"permitted.  In this case the @t{-x} option does not force the use of @t{-g}, "
"i.e. exported variables will be local to functions."
msgstr ""

#. type: findex
#: zsh.texi:14157
#, no-wrap
msgid "logout"
msgstr ""

#. type: item
#: zsh.texi:14158
#, no-wrap
msgid "@t{logout} [ @var{n} ]"
msgstr ""

#. type: table
#: zsh.texi:14160
msgid "Same as @t{exit}, except that it only works in a login shell."
msgstr ""

#. type: item
#: zsh.texi:14161
#, no-wrap
msgid "@t{noglob} @var{simple command}"
msgstr ""

#. type: findex
#: zsh.texi:14164
#, no-wrap
msgid "popd"
msgstr ""

#. type: item
#: zsh.texi:14165
#, no-wrap
msgid "@t{popd} [ @t{-q} ] [ @{@t{+}|@t{-}@}@var{n} ]"
msgstr ""

#. type: table
#: zsh.texi:14171
msgid ""
"Remove an entry from the directory stack, and perform a @t{cd} to the new "
"top directory.  With no argument, the current top entry is removed.  An "
"argument of the form `@t{+}@var{n}' identifies a stack entry by counting "
"from the left of the list shown by the @t{dirs} command, starting with "
"zero.  An argument of the form @t{-}@var{n} counts from the right."
msgstr ""

#. type: table
#: zsh.texi:14174
msgid ""
"If the @t{PUSHD_MINUS} option is set, the meanings of `@t{+}' and `@t{-}' in "
"this context are swapped."
msgstr ""

#. type: table
#: zsh.texi:14180
msgid ""
"If the @t{-q} (quiet) option is specified, the hook function @t{chpwd} and "
"the functions in the array @t{$chpwd_functions} are not called, and the new "
"directory stack is not printed.  This is useful for calls to @t{popd} that "
"do not change the environment seen by an interactive user."
msgstr ""

#. type: findex
#: zsh.texi:14181
#, no-wrap
msgid "print"
msgstr ""

#. type: item
#: zsh.texi:14182
#, no-wrap
msgid ""
"@t{print }[ @t{-abcDilmnNoOpPrsSz} ] [ @t{-u} @var{n} ] [ @t{-f} "
"@var{format} ] [ @t{-C} @var{cols} ]"
msgstr ""

#. type: itemx
#: zsh.texi:14183
#, no-wrap
msgid ""
"@t{@ @ @ @ @ @ }[ @t{-v} @var{name} ] [ @t{-xX} @var{tabstop} ] [ @t{-R} [ "
"@t{-en} ]] [ @var{arg} ... ]"
msgstr ""

#. type: table
#: zsh.texi:14196
msgid ""
"With the `@t{-f}' option the arguments are printed as described by "
"@t{printf}.  With no flags or with the flag `@t{-}', the arguments are "
"printed on the standard output as described by @t{echo}, with the following "
"differences: the escape sequence `@t{\\M-}@var{x}' (or `@t{\\M}@var{x}') "
"metafies the character @var{x} (sets the highest bit), `@t{\\C-}@var{x}' (or "
"`@t{\\C}@var{x}') produces a control character (`@t{\\C-@@}' and `@t{\\C-?}' "
"give the characters NULL and delete), a character code in octal is "
"represented by `@t{\\}@var{NNN}' (instead of `@t{\\0}@var{NNN}'), and "
"`@t{\\E}' is a synonym for `@t{\\e}'.  Finally, if not in an escape "
"sequence, `@t{\\}' escapes the following character and is not printed."
msgstr ""

#. type: table
#: zsh.texi:14202
msgid ""
"Print arguments with the column incrementing first.  Only useful with the "
"@t{-c} and @t{-C} options."
msgstr ""

#. type: table
#: zsh.texi:14207
msgid ""
"Recognize all the escape sequences defined for the @t{bindkey} command, see "
"@ref{Zle Builtins}."
msgstr ""

#. type: table
#: zsh.texi:14211
msgid ""
"Print the arguments in columns.  Unless @t{-a} is also given, arguments are "
"printed with the row incrementing first."
msgstr ""

#. type: item
#: zsh.texi:14212
#, no-wrap
msgid "@t{-C} @var{cols}"
msgstr ""

#. type: table
#: zsh.texi:14215
msgid ""
"Print the arguments in @var{cols} columns.  Unless @t{-a} is also given, "
"arguments are printed with the row incrementing first."
msgstr ""

#. type: table
#: zsh.texi:14219
msgid ""
"Treat the arguments as paths, replacing directory prefixes with @t{~} "
"expressions corresponding to directory names, as appropriate."
msgstr ""

#. type: table
#: zsh.texi:14223
msgid ""
"If given together with @t{-o} or @t{-O}, sorting is performed "
"case-independently."
msgstr ""

#. type: table
#: zsh.texi:14229
msgid ""
"Print the arguments separated by newlines instead of spaces.  Note: if the "
"list of arguments is empty, @t{print -l} will still output one empty "
"line. To print a possibly-empty list of arguments one per line, use @t{print "
"-C1}, as in `@t{print -rC1 -- \"$list[@@]\"}'."
msgstr ""

#. type: table
#: zsh.texi:14234
msgid ""
"Take the first argument as a pattern (should be quoted), and remove it from "
"the argument list together with subsequent arguments that do not match this "
"pattern."
msgstr ""

#. type: table
#: zsh.texi:14237
msgid "Do not add a newline to the output."
msgstr ""

#. type: table
#: zsh.texi:14242
msgid ""
"Print the arguments separated and terminated by nulls. Again, @t{print -rNC1 "
"-- \"$list[@@]\"} is a canonical way to print an arbitrary list as "
"null-delimited records."
msgstr ""

#. type: table
#: zsh.texi:14245
msgid "Print the arguments sorted in ascending order."
msgstr ""

#. type: table
#: zsh.texi:14248
msgid "Print the arguments sorted in descending order."
msgstr ""

#. type: table
#: zsh.texi:14251
msgid "Print the arguments to the input of the coprocess."
msgstr ""

#. type: table
#: zsh.texi:14258
msgid ""
"Perform prompt expansion (see @ref{Prompt Expansion}).  In combination with "
"`@t{-f}', prompt escape sequences are parsed only within interpolated "
"arguments, not within the format string."
msgstr ""

#. type: table
#: zsh.texi:14261
msgid "Ignore the escape conventions of @t{echo}."
msgstr ""

#. type: table
#: zsh.texi:14267
msgid ""
"Emulate the BSD @t{echo} command, which does not process escape sequences "
"unless the @t{-e} flag is given.  The @t{-n} flag suppresses the trailing "
"newline.  Only the @t{-e} and @t{-n} flags are recognized after @t{-R}; all "
"other arguments and options are printed."
msgstr ""

#. type: table
#: zsh.texi:14272
msgid ""
"Place the results in the history list instead of on the standard output.  "
"Each argument to the @t{print} command is treated as a single word in the "
"history, regardless of its content."
msgstr ""

#. type: table
#: zsh.texi:14279
msgid ""
"Place the results in the history list instead of on the standard output.  In "
"this case only a single argument is allowed; it will be split into words as "
"if it were a full shell command line.  The effect is similar to reading the "
"line from a history file with the @t{HIST_LEX_WORDS} option active."
msgstr ""

#. type: item
#: zsh.texi:14280 zsh.texi:14490
#, no-wrap
msgid "@t{-u} @var{n}"
msgstr ""

#. type: table
#: zsh.texi:14282
msgid "Print the arguments to file descriptor @var{n}."
msgstr ""

#. type: item
#: zsh.texi:14283
#, no-wrap
msgid "@t{-v} @var{name}"
msgstr ""

#. type: table
#: zsh.texi:14285
msgid "Store the printed arguments as the value of the parameter @var{name}."
msgstr ""

#. type: item
#: zsh.texi:14286
#, no-wrap
msgid "@t{-x} @var{tab-stop}"
msgstr ""

#. type: table
#: zsh.texi:14294
msgid ""
"Expand leading tabs on each line of output in the printed string assuming a "
"tab stop every @var{tab-stop} characters.  This is appropriate for "
"formatting code that may be indented with tabs.  Note that leading tabs of "
"any argument to print, not just the first, are expanded, even if @t{print} "
"is using spaces to separate arguments (the column count is maintained across "
"arguments but may be incorrect on output owing to previous unexpanded tabs)."
msgstr ""

#. type: table
#: zsh.texi:14302
msgid ""
"The start of the output of each print command is assumed to be aligned with "
"a tab stop.  Widths of multibyte characters are handled if the option "
"@t{MULTIBYTE} is in effect.  This option is ignored if other formatting "
"options are in effect, namely column alignment or @t{printf} style, or if "
"output is to a special location such as shell history or the command line "
"editor."
msgstr ""

#. type: item
#: zsh.texi:14303
#, no-wrap
msgid "@t{-X} @var{tab-stop}"
msgstr ""

#. type: table
#: zsh.texi:14307
msgid ""
"This is similar to @t{-x}, except that all tabs in the printed string are "
"expanded.  This is appropriate if tabs in the arguments are being used to "
"produce a table format."
msgstr ""

#. type: t{#1}
#: zsh.texi:14308 zsh.texi:14459 zsh.texi:15720 zsh.texi:27101
#, no-wrap
msgid "-z"
msgstr ""

#. type: table
#: zsh.texi:14310
msgid "Push the arguments onto the editing buffer stack, separated by spaces."
msgstr ""

#. type: table
#: zsh.texi:14317
msgid ""
"If any of `@t{-m}', `@t{-o}' or `@t{-O}' are used in combination with "
"`@t{-f}' and there are no arguments (after the removal process in the case "
"of `@t{-m}') then nothing is printed."
msgstr ""

#. type: findex
#: zsh.texi:14318
#, no-wrap
msgid "printf"
msgstr ""

#. type: item
#: zsh.texi:14319
#, no-wrap
msgid "@t{printf} [ @t{-v} @var{name} ] @var{format} [ @var{arg} ... ]"
msgstr ""

#. type: table
#: zsh.texi:14334
msgid ""
"Print the arguments according to the format specification. Formatting rules "
"are the same as used in C. The same escape sequences as for @t{echo} are "
"recognised in the format. All C conversion specifications ending in one of "
"@t{csdiouxXeEfgGn} are handled. In addition to this, `@t{%b}' can be used "
"instead of `@t{%s}' to cause escape sequences in the argument to be "
"recognised and `@t{%q}' can be used to quote the argument in such a way that "
"allows it to be reused as shell input. With the numeric format specifiers, "
"if the corresponding argument starts with a quote character, the numeric "
"value of the following character is used as the number to print; otherwise "
"the argument is evaluated as an arithmetic expression. See @ref{Arithmetic "
"Evaluation} for a description of arithmetic expressions. With `@t{%n}', the "
"corresponding argument is taken as an identifier which is created as an "
"integer parameter."
msgstr ""

#. type: table
#: zsh.texi:14342
msgid ""
"Normally, conversion specifications are applied to each argument in order "
"but they can explicitly specify the @var{n}th argument is to be used by "
"replacing `@t{%}' by `@t{%}@var{n}@t{$}' and `@t{*}' by "
"`@t{*}@var{n}@t{$}'.  It is recommended that you do not mix references of "
"this explicit style with the normal style and the handling of such mixed "
"styles may be subject to future change."
msgstr ""

#. type: table
#: zsh.texi:14349
msgid ""
"If arguments remain unused after formatting, the format string is reused "
"until all arguments have been consumed. With the @t{print} builtin, this can "
"be suppressed by using the @t{-r} option. If more arguments are required by "
"the format than have been specified, the behaviour is as if zero or an empty "
"string had been specified as the argument."
msgstr ""

#. type: table
#: zsh.texi:14355
msgid ""
"The @t{-v} option causes the output to be stored as the value of the "
"parameter @var{name}, instead of printed. If @var{name} is an array and the "
"format string is reused when consuming arguments then one array element will "
"be used for each use of the format string."
msgstr ""

#. type: findex
#: zsh.texi:14356
#, no-wrap
msgid "pushd"
msgstr ""

#. type: pindex
#: zsh.texi:14357
#, no-wrap
msgid "PUSHD_TO_HOME, use of"
msgstr ""

#. type: pindex
#: zsh.texi:14359
#, no-wrap
msgid "CDABLE_VARS, use of"
msgstr ""

#. type: pindex
#: zsh.texi:14360
#, no-wrap
msgid "PUSHD_SILENT, use of"
msgstr ""

#. type: item
#: zsh.texi:14361
#, no-wrap
msgid "@t{pushd} [ @t{-qsLP} ] [ @var{arg} ]"
msgstr ""

#. type: itemx
#: zsh.texi:14362
#, no-wrap
msgid "@t{pushd} [ @t{-qsLP} ] @var{old} @var{new}"
msgstr ""

#. type: itemx
#: zsh.texi:14363
#, no-wrap
msgid "@t{pushd} [ @t{-qsLP} ] @{@t{+}|@t{-}@}@var{n}"
msgstr ""

#. type: table
#: zsh.texi:14374
msgid ""
"Change the current directory, and push the old current directory onto the "
"directory stack.  In the first form, change the current directory to "
"@var{arg}.  If @var{arg} is not specified, change to the second directory on "
"the stack (that is, exchange the top two entries), or change to @t{$HOME} if "
"the @t{PUSHD_TO_HOME} option is set or if there is only one entry on the "
"stack.  Otherwise, @var{arg} is interpreted as it would be by @t{cd}.  The "
"meaning of @var{old} and @var{new} in the second form is also the same as "
"for @t{cd}."
msgstr ""

#. type: table
#: zsh.texi:14382
msgid ""
"The third form of @t{pushd} changes directory by rotating the directory "
"list.  An argument of the form `@t{+}@var{n}' identifies a stack entry by "
"counting from the left of the list shown by the @t{dirs} command, starting "
"with zero.  An argument of the form `@t{-}@var{n}' counts from the right.  "
"If the @t{PUSHD_MINUS} option is set, the meanings of `@t{+}' and `@t{-}' in "
"this context are swapped."
msgstr ""

#. type: table
#: zsh.texi:14388
msgid ""
"If the @t{-q} (quiet) option is specified, the hook function @t{chpwd} and "
"the functions in the array @t{$chpwd_functions} are not called, and the new "
"directory stack is not printed.  This is useful for calls to @t{pushd} that "
"do not change the environment seen by an interactive user."
msgstr ""

#. type: table
#: zsh.texi:14393
msgid ""
"If the option @t{-q} is not specified and the shell option @t{PUSHD_SILENT} "
"is not set, the directory stack will be printed after a @t{pushd} is "
"performed."
msgstr ""

#. type: table
#: zsh.texi:14397
msgid ""
"The options @t{-s}, @t{-L} and @t{-P} have the same meanings as for the "
"@t{cd} builtin."
msgstr ""

#. type: findex
#: zsh.texi:14398
#, no-wrap
msgid "pushln"
msgstr ""

#. type: item
#: zsh.texi:14399
#, no-wrap
msgid "@t{pushln} [ @var{arg} ... ]"
msgstr ""

#. type: table
#: zsh.texi:14401
msgid "Equivalent to @t{print -nz}."
msgstr ""

#. type: t{#1}
#: zsh.texi:14402 zsh.texi:22562
#, no-wrap
msgid "pwd"
msgstr ""

#. type: pindex
#: zsh.texi:14403
#, no-wrap
msgid "CHASE_LINKS, use of"
msgstr ""

#. type: item
#: zsh.texi:14404
#, no-wrap
msgid "@t{pwd} [ @t{-rLP} ]"
msgstr ""

#. type: table
#: zsh.texi:14409
msgid ""
"Print the absolute pathname of the current working directory.  If the @t{-r} "
"or the @t{-P} flag is specified, or the @t{CHASE_LINKS} option is set and "
"the @t{-L} flag is not given, the printed path will not contain symbolic "
"links."
msgstr ""

#. type: table
#: zsh.texi:14413
msgid "Same as @t{fc -e -}."
msgstr ""

#. type: findex
#: zsh.texi:14414
#, no-wrap
msgid "read"
msgstr ""

#. type: item
#: zsh.texi:14417
#, no-wrap
msgid ""
"@t{read }[ @t{-rszpqAclneE} ] [ @t{-t} [ @var{num} ] ] [ @t{-k} [ @var{num} "
"] ] [ @t{-d} @var{delim} ]"
msgstr ""

#. type: itemx
#: zsh.texi:14418
#, no-wrap
msgid ""
"@t{@ @ @ @ @ }[ @t{-u} @var{n} ] [ [@var{name}][@t{?}@var{prompt}] ] [ "
"@var{name} ...  ]"
msgstr ""

#. type: table
#: zsh.texi:14428
msgid ""
"Read one line and break it into fields using the characters in @t{$IFS} as "
"separators, except as noted below.  The first field is assigned to the first "
"@var{name}, the second field to the second @var{name}, etc., with leftover "
"fields assigned to the last @var{name}.  If @var{name} is omitted then "
"@t{REPLY} is used for scalars and @t{reply} for arrays."
msgstr ""

#. type: table
#: zsh.texi:14435
msgid ""
"Raw mode: a `@t{\\}' at the end of a line does not signify line continuation "
"and backslashes in the line don't quote the following character and are not "
"removed."
msgstr ""

#. type: table
#: zsh.texi:14438
msgid "Don't echo back characters if reading from the terminal."
msgstr ""

#. type: t{#1}
#: zsh.texi:14439 zsh.texi:15363 zsh.texi:19881 zsh.texi:20101 zsh.texi:27249
#: zsh.texi:28839 zsh.texi:41142
#, no-wrap
msgid "-q"
msgstr ""

#. type: table
#: zsh.texi:14447
msgid ""
"Read only one character from the terminal and set @var{name} to `@t{y}' if "
"this character was `@t{y}' or `@t{Y}' and to `@t{n}' otherwise.  With this "
"flag set the return status is zero only if the character was `@t{y}' or "
"`@t{Y}'.  This option may be used with a timeout (see @t{-t}); if the read "
"times out, or encounters end of file, status 2 is returned.  Input is read "
"from the terminal unless one of @t{-u} or @t{-p} is present.  This option "
"may also be used within zle widgets."
msgstr ""

#. type: item
#: zsh.texi:14448
#, no-wrap
msgid "@t{-k} [ @var{num} ]"
msgstr ""

#. type: table
#: zsh.texi:14453
msgid ""
"Read only one (or @var{num}) characters.  All are assigned to the first "
"@var{name}, without word splitting.  This flag is ignored when @t{-q} is "
"present.  Input is read from the terminal unless one of @t{-u} or @t{-p} is "
"present.  This option may also be used within zle widgets."
msgstr ""

#. type: table
#: zsh.texi:14458
msgid ""
"Note that despite the mnemonic `key' this option does read full characters, "
"which may consist of multiple bytes if the option @t{MULTIBYTE} is set."
msgstr ""

#. type: table
#: zsh.texi:14464
msgid ""
"Read one entry from the editor buffer stack and assign it to the first "
"@var{name}, without word splitting.  Text is pushed onto the stack with "
"`@t{print -z}' or with @t{push-line} from the line editor (see @ref{Zsh Line "
"Editor}).  This flag is ignored when the @t{-k} or @t{-q} flags are present."
msgstr ""

#. type: table
#: zsh.texi:14469
msgid ""
"The input read is printed (echoed) to the standard output.  If the @t{-e} "
"flag is used, no input is assigned to the parameters."
msgstr ""

#. type: table
#: zsh.texi:14473
msgid ""
"The first @var{name} is taken as the name of an array and all words are "
"assigned to it."
msgstr ""

#. type: table
#: zsh.texi:14482
msgid ""
"These flags are allowed only if called inside a function used for completion "
"(specified with the @t{-K} flag to @t{compctl}).  If the @t{-c} flag is "
"given, the words of the current command are read. If the @t{-l} flag is "
"given, the whole line is assigned as a scalar.  If both flags are present, "
"@t{-l} is used and @t{-c} is ignored."
msgstr ""

#. type: table
#: zsh.texi:14489
msgid ""
"Together with @t{-c}, the number of the word the cursor is on is read.  With "
"@t{-l}, the index of the character the cursor is on is read.  Note that the "
"command name is word number 1, not word 0, and that when the cursor is at "
"the end of the line, its character index is the length of the line plus one."
msgstr ""

#. type: table
#: zsh.texi:14492
msgid "Input is read from file descriptor @var{n}."
msgstr ""

#. type: table
#: zsh.texi:14495
msgid "Input is read from the coprocess."
msgstr ""

#. type: item
#: zsh.texi:14496
#, no-wrap
msgid "@t{-d} @var{delim}"
msgstr ""

#. type: table
#: zsh.texi:14499
msgid ""
"Input is terminated by the first character of @var{delim} instead of by "
"newline."
msgstr ""

#. type: item
#: zsh.texi:14500
#, no-wrap
msgid "@t{-t} [ @var{num} ]"
msgstr ""

#. type: table
#: zsh.texi:14508
msgid ""
"Test if input is available before attempting to read.  If @var{num} is "
"present, it must begin with a digit and will be evaluated to give a number "
"of seconds, which may be a floating point number; in this case the read "
"times out if input is not available within this time.  If @var{num} is not "
"present, it is taken to be zero, so that @t{read} returns immediately if no "
"input is available.  If no input is available, return status 1 and do not "
"set any variables."
msgstr ""

#. type: table
#: zsh.texi:14513
msgid ""
"This option is not available when reading from the editor buffer with "
"@t{-z}, when called from within completion with @t{-c} or @t{-l}, with "
"@t{-q} which clears the input queue before reading, or within zle where "
"other mechanisms should be used to test for input."
msgstr ""

#. type: table
#: zsh.texi:14522
msgid ""
"Note that read does not attempt to alter the input processing mode.  The "
"default mode is canonical input, in which an entire line is read at a time, "
"so usually `@t{read -t}' will not read anything until an entire line has "
"been typed.  However, when reading from the terminal with @t{-k} input is "
"processed one key at a time; in this case, only availability of the first "
"character is tested, so that e.g. `@t{read -t -k 2}' can still block on the "
"second character.  Use two instances of `@t{read -t -k}' if this is not what "
"is wanted."
msgstr ""

#. type: table
#: zsh.texi:14529
msgid ""
"If the first argument contains a `@t{?}', the remainder of this word is used "
"as a @var{prompt} on standard error when the shell is interactive."
msgstr ""

#. type: table
#: zsh.texi:14535
msgid ""
"The value (exit status) of @t{read} is 1 when an end-of-file is encountered, "
"or when @t{-c} or @t{-l} is present and the command is not called from a "
"@t{compctl} function, or as described for @t{-q}.  Otherwise the value is 0."
msgstr ""

#. type: table
#: zsh.texi:14541
msgid ""
"The behavior of some combinations of the @t{-k}, @t{-p}, @t{-q}, @t{-u} and "
"@t{-z} flags is undefined.  Presently @t{-q} cancels all the others, @t{-p} "
"cancels @t{-u}, @t{-k} cancels @t{-z}, and otherwise @t{-z} cancels both "
"@t{-p} and @t{-u}."
msgstr ""

#. type: table
#: zsh.texi:14544
msgid "The @t{-c} or @t{-l} flags cancel any and all of @t{-kpquz}."
msgstr ""

#. type: cindex
#: zsh.texi:14545
#, no-wrap
msgid "parameters, marking readonly"
msgstr ""

#. type: table
#: zsh.texi:14549
msgid ""
"Same as @t{typeset -r}.  With the @t{POSIX_BUILTINS} option set, same as "
"@t{typeset -gr}."
msgstr ""

#. type: t{#1}
#: zsh.texi:14550 zsh.texi:14551 zsh.texi:23349
#, no-wrap
msgid "rehash"
msgstr ""

#. type: table
#: zsh.texi:14553
msgid "Same as @t{hash -r}."
msgstr ""

#. type: findex
#: zsh.texi:14554
#, no-wrap
msgid "return"
msgstr ""

#. type: cindex
#: zsh.texi:14555
#, no-wrap
msgid "functions, returning from"
msgstr ""

#. type: item
#: zsh.texi:14556
#, no-wrap
msgid "@t{return} [ @var{n} ]"
msgstr ""

#. type: table
#: zsh.texi:14561
msgid ""
"Causes a shell function or `@t{.}' script to return to the invoking script "
"with the return status specified by an arithmetic expression @var{n}.  For "
"example, the following prints `@t{42}':"
msgstr ""

#. type: example
#: zsh.texi:14566
#, no-wrap
msgid ""
"() @{ integer foo=40; return \"foo + 2\" @}\n"
"echo $?\n"
msgstr ""

#. type: table
#: zsh.texi:14572
msgid ""
"If @var{n} is omitted, the return status is that of the last command "
"executed."
msgstr ""

#. type: table
#: zsh.texi:14583
msgid ""
"If @t{return} was executed from a trap in a @t{TRAP}@var{NAL} function, the "
"effect is different for zero and non-zero return status.  With zero status "
"(or after an implicit return at the end of the trap), the shell will return "
"to whatever it was previously processing; with a non-zero status, the shell "
"will behave as interrupted except that the return status of the trap is "
"retained.  Note that the numeric value of the signal which caused the trap "
"is passed as the first argument, so the statement `@t{return \"128+$1\"}' "
"will return the same status as if the signal had not been trapped."
msgstr ""

#. type: findex
#: zsh.texi:14587
#, no-wrap
msgid "set"
msgstr ""

#. type: cindex
#: zsh.texi:14588
#, no-wrap
msgid "parameters, listing"
msgstr ""

#. type: cindex
#: zsh.texi:14589 zsh.texi:14686
#, no-wrap
msgid "parameters, positional"
msgstr ""

#. type: cindex
#: zsh.texi:14590
#, no-wrap
msgid "parameters, setting array"
msgstr ""

#. type: cindex
#: zsh.texi:14591
#, no-wrap
msgid "array parameters, setting"
msgstr ""

#. type: item
#: zsh.texi:14594
#, no-wrap
msgid ""
"@t{set }[ @{@t{+}|@t{-}@}@var{options} | @{@t{+}|@t{-}@}@t{o} [ "
"@var{option_name} ] ] ... [ @{@t{+}|@t{-}@}@t{A} [ @var{name} ] ]"
msgstr ""

#. type: itemx
#: zsh.texi:14595
#, no-wrap
msgid "@t{@ @ @ @ }[ @var{arg} ... ]"
msgstr ""

#. type: table
#: zsh.texi:14606
msgid ""
"Set the options for the shell and/or set the positional parameters, or "
"declare and set an array.  If the @t{-s} option is given, it causes the "
"specified arguments to be sorted before assigning them to the positional "
"parameters (or to the array @var{name} if @t{-A} is used).  With @t{+s} sort "
"arguments in descending order.  For the meaning of the other flags, see "
"@ref{Options}.  Flags may be specified by name using the @t{-o} option. If "
"no option name is supplied with @t{-o}, the current option states are "
"printed: see the description of @t{setopt} below for more information on the "
"format.  With @t{+o} they are printed in a form that can be used as input to "
"the shell."
msgstr ""

#. type: table
#: zsh.texi:14611
msgid ""
"If the @t{-A} flag is specified, @var{name} is set to an array containing "
"the given @var{arg}s; if no @var{name} is specified, all arrays are printed "
"together with their values."
msgstr ""

#. type: table
#: zsh.texi:14616
msgid ""
"If @t{+A} is used and @var{name} is an array, the given arguments will "
"replace the initial elements of that array; if no @var{name} is specified, "
"all arrays are printed without their values."
msgstr ""

#. type: table
#: zsh.texi:14624
msgid ""
"The behaviour of arguments after @t{-A} @var{name} or @t{+A} @var{name} "
"depends on whether the option @t{KSH_ARRAYS} is set.  If it is not set, all "
"arguments following @var{name} are treated as values for the array, "
"regardless of their form.  If the option is set, normal option processing "
"continues at that point; only regular arguments are treated as values for "
"the array.  This means that"
msgstr ""

#. type: example
#: zsh.texi:14628
#, no-wrap
msgid "set -A array -x -- foo\n"
msgstr ""

#. type: table
#: zsh.texi:14633
msgid ""
"sets @t{array} to `@t{-x -}@t{- foo}' if @t{KSH_ARRAYS} is not set, but sets "
"the array to @t{foo} and turns on the option `@t{-x}' if it is set."
msgstr ""

#. type: table
#: zsh.texi:14639
msgid ""
"If the @t{-A} flag is not present, but there are arguments beyond the "
"options, the positional parameters are set.  If the option list (if any)  is "
"terminated by `@t{-}@t{-}', and there are no further arguments, the "
"positional parameters will be unset."
msgstr ""

#. type: table
#: zsh.texi:14644
msgid ""
"If no arguments and no `@t{-}@t{-}' are given, then the names and values of "
"all parameters are printed on the standard output.  If the only argument is "
"`@t{+}', the names of all parameters are printed."
msgstr ""

#. type: table
#: zsh.texi:14649
msgid ""
"For historical reasons, `@t{set -}' is treated as `@t{set +xv}' and `@t{set "
"-} @var{args}' as `@t{set +xv --} @var{args}' when in any other emulation "
"mode than zsh's native mode."
msgstr ""

#. type: findex
#: zsh.texi:14650 zsh.texi:27852
#, no-wrap
msgid "setcap"
msgstr ""

#. type: findex
#: zsh.texi:14653
#, no-wrap
msgid "setopt"
msgstr ""

#. type: cindex
#: zsh.texi:14654
#, no-wrap
msgid "options, setting"
msgstr ""

#. type: item
#: zsh.texi:14655
#, no-wrap
msgid ""
"@t{setopt} [ @{@t{+}|@t{-}@}@var{options} | @{@t{+}|@t{-}@}@t{o} "
"@var{option_name} ] [ @t{-m} ] [ @var{name} ... ]"
msgstr ""

#. type: table
#: zsh.texi:14658
msgid ""
"Set the options for the shell.  All options specified either with flags or "
"by name are set."
msgstr ""

#. type: table
#: zsh.texi:14673
msgid ""
"If no arguments are supplied, the names of all options currently set are "
"printed.  The form is chosen so as to minimize the differences from the "
"default options for the current emulation (the default emulation being "
"native @t{zsh}, shown as @t{<Z>} in @ref{Description of Options}).  Options "
"that are on by default for the emulation are shown with the prefix @t{no} "
"only if they are off, while other options are shown without the prefix "
"@t{no} and only if they are on.  In addition to options changed from the "
"default state by the user, any options activated automatically by the shell "
"(for example, @t{SHIN_STDIN} or @t{INTERACTIVE})  will be shown in the "
"list.  The format is further modified by the option @t{KSH_OPTION_PRINT}, "
"however the rationale for choosing options with or without the @t{no} prefix "
"remains the same in this case."
msgstr ""

#. type: table
#: zsh.texi:14678
msgid ""
"If the @t{-m} flag is given the arguments are taken as patterns (which "
"should be quoted to protect them from filename expansion), and all options "
"with names matching these patterns are set."
msgstr ""

#. type: table
#: zsh.texi:14684
msgid ""
"Note that a bad option name does not cause execution of subsequent shell "
"code to be aborted; this is behaviour is different from that of `@t{set "
"-o}'.  This is because @t{set} is regarded as a special builtin by the POSIX "
"standard, but @t{setopt} is not."
msgstr ""

#. type: findex
#: zsh.texi:14685
#, no-wrap
msgid "shift"
msgstr ""

#. type: item
#: zsh.texi:14687
#, no-wrap
msgid "@t{shift} [ @t{-p} ] [ @var{n} ] [ @var{name} ... ]"
msgstr ""

#. type: table
#: zsh.texi:14693
msgid ""
"The positional parameters @t{$@{}@var{n}+1@t{@}} ... are renamed to @t{$1} "
"..., where @var{n} is an arithmetic expression that defaults to 1.  If any "
"@var{name}s are given then the arrays with these names are shifted instead "
"of the positional parameters."
msgstr ""

#. type: table
#: zsh.texi:14697
msgid ""
"If the option @t{-p} is given arguments are instead removed (popped)  from "
"the end rather than the start of the array."
msgstr ""

#. type: findex
#: zsh.texi:14698
#, no-wrap
msgid "source"
msgstr ""

#. type: item
#: zsh.texi:14699
#, no-wrap
msgid "@t{source} @var{file} [ @var{arg} ... ]"
msgstr ""

#. type: table
#: zsh.texi:14702
msgid ""
"Same as `@t{.}', except that the current directory is always searched and is "
"always searched first, before directories in @t{$path}."
msgstr ""

#. type: findex
#: zsh.texi:14703 zsh.texi:30354
#, no-wrap
msgid "stat"
msgstr ""

#. type: table
#: zsh.texi:14705
msgid "See @ref{The zsh/stat Module}."
msgstr ""

#. type: findex
#: zsh.texi:14706
#, no-wrap
msgid "suspend"
msgstr ""

#. type: cindex
#: zsh.texi:14707
#, no-wrap
msgid "shell, suspending"
msgstr ""

#. type: cindex
#: zsh.texi:14708
#, no-wrap
msgid "suspending the shell"
msgstr ""

#. type: item
#: zsh.texi:14709
#, no-wrap
msgid "@t{suspend} [ @t{-f} ]"
msgstr ""

#. type: table
#: zsh.texi:14713
msgid ""
"Suspend the execution of the shell (send it a @t{SIGTSTP})  until it "
"receives a @t{SIGCONT}.  Unless the @t{-f} option is given, this will refuse "
"to suspend a login shell."
msgstr ""

#. type: t{#1}
#: zsh.texi:14714 zsh.texi:31415
#, no-wrap
msgid "test"
msgstr ""

#. type: item
#: zsh.texi:14715
#, no-wrap
msgid "@t{test} [ @var{arg} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:14716
#, no-wrap
msgid "@t{[} [ @var{arg} ... ] @t{]}"
msgstr ""

#. type: table
#: zsh.texi:14725
msgid ""
"Like the system version of @t{test}.  Added for compatibility; use "
"conditional expressions instead (see @ref{Conditional Expressions}).  The "
"main differences between the conditional expression syntax and the @t{test} "
"and @t{[} builtins are: these commands are not handled syntactically, so for "
"example an empty variable expansion may cause an argument to be omitted; "
"syntax errors cause status 2 to be returned instead of a shell error; and "
"arithmetic operators expect integer arguments rather than arithmetic "
"expressions."
msgstr ""

#. type: table
#: zsh.texi:14734
msgid ""
"The command attempts to implement POSIX and its extensions where these are "
"specified.  Unfortunately there are intrinsic ambiguities in the syntax; in "
"particular there is no distinction between test operators and strings that "
"resemble them.  The standard attempts to resolve these for small numbers of "
"arguments (up to four); for five or more arguments compatibility cannot be "
"relied on.  Users are urged wherever possible to use the `@t{[[}' test "
"syntax which does not have these ambiguities."
msgstr ""

#. type: t{#1}
#: zsh.texi:14735 zsh.texi:14738
#, no-wrap
msgid "times"
msgstr ""

#. type: cindex
#: zsh.texi:14736
#, no-wrap
msgid "shell, timing"
msgstr ""

#. type: cindex
#: zsh.texi:14737
#, no-wrap
msgid "timing the shell"
msgstr ""

#. type: table
#: zsh.texi:14741
msgid ""
"Print the accumulated user and system times for the shell and for processes "
"run from the shell."
msgstr ""

#. type: item
#: zsh.texi:14745
#, no-wrap
msgid "@t{trap} [ @var{arg} ] [ @var{sig} ... ]"
msgstr ""

#. type: table
#: zsh.texi:14752
msgid ""
"@var{arg} is a series of commands (usually quoted to protect it from "
"immediate evaluation by the shell) to be read and executed when the shell "
"receives any of the signals specified by one or more @var{sig} args.  Each "
"@var{sig} can be given as a number, or as the name of a signal either with "
"or without the string @t{SIG} in front (e.g. 1, HUP, and SIGHUP are all the "
"same signal)."
msgstr ""

#. type: table
#: zsh.texi:14756
msgid ""
"If @var{arg} is `@t{-}', then the specified signals are reset to their "
"defaults, or, if no @var{sig} args are present, all traps are reset."
msgstr ""

#. type: table
#: zsh.texi:14760
msgid ""
"If @var{arg} is an empty string, then the specified signals are ignored by "
"the shell (and by the commands it invokes)."
msgstr ""

#. type: table
#: zsh.texi:14765
msgid ""
"If @var{arg} is omitted but one or more @var{sig} args are provided (i.e.  "
"the first argument is a valid signal number or name), the effect is the same "
"as if @var{arg} had been specified as `@t{-}'."
msgstr ""

#. type: table
#: zsh.texi:14769
msgid ""
"The @t{trap} command with no arguments prints a list of commands associated "
"with each signal."
msgstr ""

#. type: table
#: zsh.texi:14775
msgid ""
"If @var{sig} is @t{ZERR} then @var{arg} will be executed after each command "
"with a nonzero exit status.  @t{ERR} is an alias for @t{ZERR} on systems "
"that have no @t{SIGERR} signal (this is the usual case)."
msgstr ""

#. type: table
#: zsh.texi:14790
msgid ""
"If @var{sig} is @t{DEBUG} then @var{arg} will be executed before each "
"command if the option @t{DEBUG_BEFORE_CMD} is set (as it is by default), "
"else after each command.  Here, a `command' is what is described as a "
"`sublist' in the shell grammar, see @ref{Simple Commands & Pipelines}.  If "
"@t{DEBUG_BEFORE_CMD} is set various additional features are available.  "
"First, it is possible to skip the next command by setting the option "
"@t{ERR_EXIT}; see the description of the @t{ERR_EXIT} option in "
"@ref{Description of Options}.  Also, the shell parameter @t{ZSH_DEBUG_CMD} "
"is set to the string corresponding to the command to be executed following "
"the trap.  Note that this string is reconstructed from the internal format "
"and may not be formatted the same way as the original text.  The parameter "
"is unset after the trap is executed."
msgstr ""

#. type: table
#: zsh.texi:14801
msgid ""
"If @var{sig} is @t{0} or @t{EXIT} and the @t{trap} statement is executed "
"inside the body of a function, then the command @var{arg} is executed after "
"the function completes.  The value of @t{$?} at the start of execution is "
"the exit status of the shell or the return status of the function exiting.  "
"If @var{sig} is @t{0} or @t{EXIT} and the @t{trap} statement is not executed "
"inside the body of a function, then the command @var{arg} is executed when "
"the shell terminates; the trap runs before any @t{zshexit} hook functions."
msgstr ""

#. type: table
#: zsh.texi:14806
msgid ""
"@t{ZERR}, @t{DEBUG}, and @t{EXIT} traps are not executed inside other "
"traps.  @t{ZERR} and @t{DEBUG} traps are kept within subshells, while other "
"traps are reset."
msgstr ""

#. type: table
#: zsh.texi:14813
msgid ""
"Note that traps defined with the @t{trap} builtin are slightly different "
"from those defined as `@t{TRAP}@var{NAL} () @{ ... @}', as the latter have "
"their own function environment (line numbers, local variables, etc.) while "
"the former use the environment of the command in which they were called.  "
"For example,"
msgstr ""

#. type: example
#: zsh.texi:14817
#, no-wrap
msgid "trap 'print $LINENO' DEBUG\n"
msgstr ""

#. type: table
#: zsh.texi:14821
msgid "will print the line number of a command executed after it has run, while"
msgstr ""

#. type: example
#: zsh.texi:14825
#, no-wrap
msgid "TRAPDEBUG() @{ print $LINENO; @}\n"
msgstr ""

#. type: table
#: zsh.texi:14829
msgid "will always print the number zero."
msgstr ""

#. type: table
#: zsh.texi:14835
msgid ""
"Alternative signal names are allowed as described under @t{kill} above.  "
"Defining a trap under either name causes any trap under an alternative name "
"to be removed.  However, it is recommended that for consistency users stick "
"exclusively to one name or another."
msgstr ""

#. type: table
#: zsh.texi:14836 zsh.texi:37030 zsh.texi:37034
#, no-wrap
msgid "true"
msgstr ""

#. type: cindex
#: zsh.texi:14837
#, no-wrap
msgid "doing nothing, successfully"
msgstr ""

#. type: item
#: zsh.texi:14838
#, no-wrap
msgid "@t{true} [ @var{arg} ... ]"
msgstr ""

#. type: table
#: zsh.texi:14840
msgid "Do nothing and return an exit status of 0."
msgstr ""

#. type: findex
#: zsh.texi:14841
#, no-wrap
msgid "ttyctl"
msgstr ""

#. type: cindex
#: zsh.texi:14842
#, no-wrap
msgid "tty, freezing"
msgstr ""

#. type: item
#: zsh.texi:14843
#, no-wrap
msgid "@t{ttyctl} [ @t{-fu} ]"
msgstr ""

#. type: table
#: zsh.texi:14854
msgid ""
"The @t{-f} option freezes the tty (i.e. terminal or terminal emulator), and "
"@t{-u} unfreezes it.  When the tty is frozen, no changes made to the tty "
"settings by external programs will be honored by the shell, except for "
"changes in the size of the screen; the shell will simply reset the settings "
"to their previous values as soon as each command exits or is suspended.  "
"Thus, @t{stty} and similar programs have no effect when the tty is frozen.  "
"Freezing the tty does not cause the current state to be remembered: instead, "
"it causes future changes to the state to be blocked."
msgstr ""

#. type: table
#: zsh.texi:14857
msgid "Without options it reports whether the terminal is frozen or not."
msgstr ""

#. type: table
#: zsh.texi:14867
msgid ""
"Note that, regardless of whether the tty is frozen or not, the shell needs "
"to change the settings when the line editor starts, so unfreezing the tty "
"does not guarantee settings made on the command line are preserved.  Strings "
"of commands run between editing the command line will see a consistent tty "
"state.  See also the shell variable @t{STTY} for a means of initialising the "
"tty before running external commands and/or freezing the tty around a single "
"command."
msgstr ""

#. type: findex
#: zsh.texi:14868
#, no-wrap
msgid "type"
msgstr ""

#. type: item
#: zsh.texi:14869
#, no-wrap
msgid "@t{type} [ @t{-wfpamsS} ] @var{name} ..."
msgstr ""

#. type: table
#: zsh.texi:14871
msgid "Equivalent to @t{whence -v}."
msgstr ""

#. type: findex
#: zsh.texi:14872
#, no-wrap
msgid "typeset"
msgstr ""

#. type: cindex
#: zsh.texi:14873
#, no-wrap
msgid "parameters, setting"
msgstr ""

#. type: cindex
#: zsh.texi:14874
#, no-wrap
msgid "parameters, declaring"
msgstr ""

#. type: item
#: zsh.texi:14876
#, no-wrap
msgid ""
"@t{typeset }[ @{@t{+}|@t{-}@}@t{AHUaghlmrtux} ] [ @{@t{+}|@t{-}@}@t{EFLRZip} "
"[ @var{n} ] ]"
msgstr ""

#. type: itemx
#: zsh.texi:14877
#, no-wrap
msgid "@t{@ @ @ @ @ @ @ @ }[ @t{+} ] [ @var{name}[@t{=}@var{value}] ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:14878
#, no-wrap
msgid ""
"@t{typeset }@t{-T} [ @{@t{+}|@t{-}@}@t{Uglrux} ] [ @{@t{+}|@t{-}@}@t{LRZp} [ "
"@var{n} ] ]"
msgstr ""

#. type: itemx
#: zsh.texi:14879
#, no-wrap
msgid ""
"@t{@ @ @ @ @ @ @ @ }[ @t{+} | @var{SCALAR}[@t{=}@var{value}] "
"@var{array}[@t{=(}@var{value} ...@t{)}] [ @var{sep} ] ]"
msgstr ""

#. type: itemx
#: zsh.texi:14880
#, no-wrap
msgid ""
"@t{typeset} @t{-f} [ @{@t{+}|@t{-}@}@t{TUkmtuz} ] [ @t{+} ] [ @var{name} "
"... ]"
msgstr ""

#. type: table
#: zsh.texi:14882
msgid "Set or display attributes and values for shell parameters."
msgstr ""

#. type: table
#: zsh.texi:14891
msgid ""
"Except as noted below for control flags that change the behavior, a "
"parameter is created for each @var{name} that does not already refer to "
"one.  When inside a function, a new parameter is created for every "
"@var{name} (even those that already exist), and is unset again when the "
"function completes.  See @ref{Local Parameters}.  The same rules apply to "
"special shell parameters, which retain their special attributes when made "
"local."
msgstr ""

#. type: table
#: zsh.texi:14899
msgid ""
"For each @var{name}@t{=}@var{value} assignment, the parameter @var{name} is "
"set to @var{value}.  If the assignment is omitted and @var{name} does "
"@emph{not} refer to an existing parameter, a new parameter is intialized to "
"empty string, zero, or empty array (as appropriate), @emph{unless} the shell "
"option @t{TYPESET_TO_UNSET} is set.  When that option is set, the parameter "
"attributes are recorded but the parameter remains unset."
msgstr ""

#. type: table
#: zsh.texi:14907
msgid ""
"If the shell option @t{TYPESET_SILENT} is not set, for each remaining "
"@var{name} that refers to a parameter that is already set, the name and "
"value of the parameter are printed in the form of an assignment.  Nothing is "
"printed for newly-created parameters, or when any attribute flags listed "
"below are given along with the @var{name}.  Using `@t{+}' instead of minus "
"to introduce an attribute turns it off."
msgstr ""

#. type: table
#: zsh.texi:14914
msgid ""
"If no @var{name} is present, the names and values of all parameters are "
"printed.  In this case the attribute flags restrict the display to only "
"those parameters that have the specified attributes, and using `@t{+}' "
"rather than `@t{-}' to introduce the flag suppresses printing of the values "
"of parameters when there is no parameter name."
msgstr ""

#. type: table
#: zsh.texi:14924
msgid ""
"All forms of the command handle scalar assignment.  Array assignment is "
"possible if any of the reserved words @t{declare}, @t{export}, @t{float}, "
"@t{integer}, @t{local}, @t{readonly} or @t{typeset} is matched when the line "
"is parsed (N.B. not when it is executed).  In this case the arguments are "
"parsed as assignments, except that the `@t{+=}' syntax and the "
"@t{GLOB_ASSIGN} option are not supported, and scalar values after @t{=} are "
"@emph{not} split further into words, even if expanded (regardless of the "
"setting of the @t{KSH_TYPESET} option; this option is obsolete)."
msgstr ""

#. type: table
#: zsh.texi:14927
msgid "Examples of the differences between command and reserved word parsing:"
msgstr ""

#. type: example
#: zsh.texi:14932
#, no-wrap
msgid ""
"# Reserved word parsing\n"
"typeset svar=$(echo one word) avar=(several words)\n"
msgstr ""

#. type: table
#: zsh.texi:14937
msgid ""
"The above creates a scalar parameter @t{svar} and an array parameter "
"@t{avar} as if the assignments had been"
msgstr ""

#. type: example
#: zsh.texi:14942
#, no-wrap
msgid ""
"svar=\"one word\"\n"
"avar=(several words)\n"
msgstr ""

#. type: table
#: zsh.texi:14946
msgid "On the other hand:"
msgstr ""

#. type: example
#: zsh.texi:14951
#, no-wrap
msgid ""
"# Normal builtin interface\n"
"builtin typeset svar=$(echo two words)\n"
msgstr ""

#. type: table
#: zsh.texi:14960
msgid ""
"The @t{builtin} keyword causes the above to use the standard builtin "
"interface to @t{typeset} in which argument parsing is performed in the same "
"way as for other commands.  This example creates a scalar @t{svar} "
"containing the value @t{two} and another scalar parameter @t{words} with no "
"value.  An array value in this case would either cause an error or be "
"treated as an obscure set of glob qualifiers."
msgstr ""

#. type: table
#: zsh.texi:14965
msgid ""
"Arbitrary arguments are allowed if they take the form of assignments after "
"command line expansion; however, these only perform scalar assignment:"
msgstr ""

#. type: example
#: zsh.texi:14970
#, no-wrap
msgid ""
"var='svar=val'\n"
"typeset $var\n"
msgstr ""

#. type: table
#: zsh.texi:14978
msgid ""
"The above sets the scalar parameter @t{svar} to the value @t{val}.  "
"Parentheses around the value within @t{var} would not cause array assignment "
"as they will be treated as ordinary characters when @t{$var} is "
"substituted.  Any non-trivial expansion in the name part of the assignment "
"causes the argument to be treated in this fashion:"
msgstr ""

#. type: example
#: zsh.texi:14982
#, no-wrap
msgid "typeset @{var1,var2,var3@}=name\n"
msgstr ""

#. type: table
#: zsh.texi:14990
msgid ""
"The above syntax is valid, and has the expected effect of setting the three "
"parameters to the same value, but the command line is parsed as a set of "
"three normal command line arguments to @t{typeset} after expansion.  Hence "
"it is not possible to assign to multiple arrays by this means."
msgstr ""

#. type: table
#: zsh.texi:14999
msgid ""
"Note that each interface to any of the commands may be disabled separately.  "
"For example, `@t{disable -r typeset}' disables the reserved word interface "
"to @t{typeset}, exposing the builtin interface, while `@t{disable typeset}' "
"disables the builtin.  Note that disabling the reserved word interface for "
"@t{typeset} may cause problems with the output of `@t{typeset -p}', which "
"assumes the reserved word interface is available in order to restore array "
"and associative array values."
msgstr ""

#. type: table
#: zsh.texi:15006
msgid ""
"Unlike parameter assignment statements, @t{typeset}'s exit status on an "
"assignment that involves a command substitution does not reflect the exit "
"status of the command substitution.  Therefore, to test for an error in a "
"command substitution, separate the declaration of the parameter from its "
"initialization:"
msgstr ""

#. type: example
#: zsh.texi:15011
#, no-wrap
msgid ""
"# WRONG\n"
"typeset var1=$(exit 1) || echo \"Trouble with var1\"\n"
"\n"
msgstr ""

#. type: example
#: zsh.texi:15014
#, no-wrap
msgid ""
"# RIGHT\n"
"typeset var1 && var1=$(exit 1) || echo \"Trouble with var1\"\n"
"\n"
msgstr ""

#. type: table
#: zsh.texi:15021
msgid ""
"To initialize a parameter @var{param} to a command output and mark it "
"readonly, use @t{typeset -r }@var{param} or @t{readonly }@var{param} after "
"the parameter assignment statement."
msgstr ""

#. type: table
#: zsh.texi:15031
msgid ""
"If no attribute flags are given, and either no @var{name} arguments are "
"present or the flag @t{+m} is used, then each parameter name printed is "
"preceded by a list of the attributes of that parameter (@t{array}, "
"@t{association}, @t{exported}, @t{float}, @t{integer}, @t{readonly}, or "
"@t{undefined} for autoloaded parameters not yet loaded).  If @t{+m} is used "
"with attribute flags, and all those flags are introduced with @t{+}, the "
"matching parameter names are printed but their values are not."
msgstr ""

#. type: table
#: zsh.texi:15034
msgid "The following control flags change the behavior of @t{typeset}:"
msgstr ""

#. type: t{#1}
#: zsh.texi:15037
#, no-wrap
msgid "+"
msgstr ""

#. type: table
#: zsh.texi:15049
msgid ""
"If `@t{+}' appears by itself in a separate word as the last option, then the "
"names of all parameters (functions with @t{-f}) are printed, but the values "
"(function bodies) are not.  No @var{name} arguments may appear, and it is an "
"error for any other options to follow `@t{+}'.  The effect of `@t{+}' is as "
"if all attribute flags which precede it were given with a `@t{+}' prefix.  "
"For example, `@t{typeset -U +}' is equivalent to `@t{typeset +U}' and "
"displays the names of all arrays having the uniqueness attribute, whereas "
"`@t{typeset -f -U +}' displays the names of all autoloadable functions.  If "
"@t{+} is the only option, then type information (array, readonly, etc.) is "
"also printed for each parameter, in the same manner as `@t{typeset +m "
"\"*\"}'."
msgstr ""

#. type: table
#: zsh.texi:15058
msgid ""
"The @t{-g} (global) means that any resulting parameter will not be "
"restricted to local scope.  Note that this does not necessarily mean that "
"the parameter will be global, as the flag will apply to any existing "
"parameter (even if unset) from an enclosing function.  This flag does not "
"affect the parameter after creation, hence it has no effect when listing "
"existing parameters, nor does the flag @t{+g} have any effect except in "
"combination with @t{-m} (see below)."
msgstr ""

#. type: table
#: zsh.texi:15065
msgid ""
"If the @t{-m} flag is given the @var{name} arguments are taken as patterns "
"(use quoting to prevent these from being interpreted as file patterns).  "
"With no attribute flags, all parameters (or functions with the @t{-f} flag) "
"with matching names are printed (the shell option @t{TYPESET_SILENT} is not "
"used in this case)."
msgstr ""

#. type: table
#: zsh.texi:15070
msgid ""
"If the @t{+g} flag is combined with @t{-m}, a new local parameter is created "
"for every matching parameter that is not already local.  Otherwise @t{-m} "
"applies all other flags or assignments to the existing parameters."
msgstr ""

#. type: table
#: zsh.texi:15077
msgid ""
"Except when assignments are made with @var{name}@t{=}@var{value}, using "
"@t{+m} forces the matching parameters and their attributes to be printed, "
"even inside a function.  Note that @t{-m} is ignored if no patterns are "
"given, so `@t{typeset -m}' displays attributes but `@t{typeset -a +m}' does "
"not."
msgstr ""

#. type: item
#: zsh.texi:15078
#, no-wrap
msgid "@t{-p} [ @var{n} ]"
msgstr ""

#. type: table
#: zsh.texi:15083
msgid ""
"If the @t{-p} option is given, parameters and values are printed in the form "
"of a typeset command with an assignment, regardless of other flags and "
"options.  Note that the @t{-H} flag on parameters is respected; no value "
"will be shown for these parameters."
msgstr ""

#. type: table
#: zsh.texi:15089
msgid ""
"@t{-p} may be followed by an optional integer argument.  Currently only the "
"value @t{1} is supported.  In this case arrays and associative arrays are "
"printed with newlines between indented elements for readability."
msgstr ""

#. type: item
#: zsh.texi:15090
#, no-wrap
msgid ""
"@t{-T} [ @var{scalar}[@t{=}@var{value}] @var{array}[@t{=(}@var{value} "
"...@t{)}] [ @var{sep} ] ]"
msgstr ""

#. type: table
#: zsh.texi:15102
msgid ""
"This flag has a different meaning when used with @t{-f}; see below.  "
"Otherwise the @t{-T} option requires zero, two, or three arguments to be "
"present.  With no arguments, the list of parameters created in this fashion "
"is shown.  With two or three arguments, the first two are the name of a "
"scalar and of an array parameter (in that order) that will be tied together "
"in the manner of @t{$PATH} and @t{$path}.  The optional third argument is a "
"single-character separator which will be used to join the elements of the "
"array to form the scalar; if absent, a colon is used, as with @t{$PATH}.  "
"Only the first character of the separator is significant; any remaining "
"characters are ignored.  Multibyte characters are not yet supported."
msgstr ""

#. type: table
#: zsh.texi:15106
msgid ""
"Only one of the scalar and array parameters may be assigned an initial value "
"(the restrictions on assignment forms described above also apply)."
msgstr ""

#. type: table
#: zsh.texi:15114
msgid ""
"Both the scalar and the array may be manipulated as normal.  If one is "
"unset, the other will automatically be unset too.  There is no way of "
"untying the variables without unsetting them, nor of converting the type of "
"one of them with another @t{typeset} command; @t{+T} does not work, "
"assigning an array to @var{scalar} is an error, and assigning a scalar to "
"@var{array} sets it to be a single-element array."
msgstr ""

#. type: table
#: zsh.texi:15122
msgid ""
"Note that both `@t{typeset -xT ...}' and `@t{export -T ...}' work, but only "
"the scalar will be marked for export.  Setting the value using the scalar "
"version causes a split on all separators (which cannot be quoted).  It is "
"possible to apply @t{-T} to two previously tied variables but with a "
"different separator character, in which case the variables remain joined as "
"before but the separator is changed."
msgstr ""

#. type: table
#: zsh.texi:15126
msgid ""
"When an existing scalar is tied to a new array, the value of the scalar is "
"preserved but no attribute other than export will be preserved."
msgstr ""

#. type: table
#: zsh.texi:15134
msgid ""
"Attribute flags that transform the final value (@t{-L}, @t{-R}, @t{-Z}, "
"@t{-l}, @t{-u}) are only applied to the expanded value at the point of a "
"parameter expansion expression using `@t{$}'.  They are not applied when a "
"parameter is retrieved internally by the shell for any purpose."
msgstr ""

#. type: table
#: zsh.texi:15137
msgid "The following attribute flags may be specified:"
msgstr ""

#. type: table
#: zsh.texi:15143
msgid "The names refer to associative array parameters; see @ref{Array Parameters}."
msgstr ""

#. type: item
#: zsh.texi:15144
#, no-wrap
msgid "@t{-L} [ @var{n} ]"
msgstr ""

#. type: table
#: zsh.texi:15152
msgid ""
"Left justify and remove leading blanks from the value when the parameter is "
"expanded.  If @var{n} is nonzero, it defines the width of the field.  If "
"@var{n} is zero, the width is determined by the width of the value of the "
"first assignment.  In the case of numeric parameters, the length of the "
"complete value assigned to the parameter is used to determine the width, not "
"the value that would be output."
msgstr ""

#. type: table
#: zsh.texi:15161
msgid ""
"The width is the count of characters, which may be multibyte characters if "
"the @t{MULTIBYTE} option is in effect.  Note that the screen width of the "
"character is not taken into account; if this is required, use padding with "
"parameter expansion flags @t{$@{(ml}@var{...}@t{)}@var{...}@t{@}} as "
"described in `Parameter Expansion Flags' in @ref{Parameter Expansion}."
msgstr ""

#. type: table
#: zsh.texi:15167
msgid ""
"When the parameter is expanded, it is filled on the right with blanks or "
"truncated if necessary to fit the field.  Note truncation can lead to "
"unexpected results with numeric parameters.  Leading zeros are removed if "
"the @t{-Z} flag is also set."
msgstr ""

#. type: item
#: zsh.texi:15168
#, no-wrap
msgid "@t{-R} [ @var{n} ]"
msgstr ""

#. type: table
#: zsh.texi:15173
msgid ""
"Similar to @t{-L}, except that right justification is used; when the "
"parameter is expanded, the field is left filled with blanks or truncated "
"from the end.  May not be combined with the @t{-Z} flag."
msgstr ""

#. type: table
#: zsh.texi:15182
msgid ""
"For arrays (but not for associative arrays), keep only the first occurrence "
"of each duplicated value.  This may also be set for tied parameters (see "
"@t{-T}) or colon-separated special parameters like @t{PATH} or @t{FIGNORE}, "
"etc.  Note the flag takes effect on assignment, and the type of the variable "
"being assigned to is determinative; for variables with shared values it is "
"therefore recommended to set the flag for all interfaces, e.g. `@t{typeset "
"-U PATH path}'."
msgstr ""

#. type: table
#: zsh.texi:15185
msgid "This flag has a different meaning when used with @t{-f}; see below."
msgstr ""

#. type: item
#: zsh.texi:15186
#, no-wrap
msgid "@t{-Z} [ @var{n} ]"
msgstr ""

#. type: table
#: zsh.texi:15193
msgid ""
"Specially handled if set along with the @t{-L} flag.  Otherwise, similar to "
"@t{-R}, except that leading zeros are used for padding instead of blanks if "
"the first non-blank character is a digit.  Numeric parameters are specially "
"handled: they are always eligible for padding with zeroes, and the zeroes "
"are inserted at an appropriate place in the output."
msgstr ""

#. type: table
#: zsh.texi:15200
msgid ""
"The names refer to array parameters.  An array parameter may be created this "
"way, but it may be assigned to in the @t{typeset} statement only if the "
"reserved word form of @t{typeset} is enabled (as it is by default).  When "
"displaying, both normal and associative arrays are shown."
msgstr ""

#. type: table
#: zsh.texi:15212
msgid ""
"The names refer to functions rather than parameters.  No assignments can be "
"made, and the only other valid flags are @t{-t}, @t{-T}, @t{-k}, @t{-u}, "
"@t{-U} and @t{-z}.  The flag @t{-t} turns on execution tracing for this "
"function; the flag @t{-T} does the same, but turns off tracing for any named "
"(not anonymous) function called from the present one, unless that function "
"also has the @t{-t} or @t{-T} flag.  The @t{-u} and @t{-U} flags cause the "
"function to be marked for autoloading; @t{-U} also causes alias expansion to "
"be suppressed when the function is loaded.  See the description of the "
"`@t{autoload}' builtin for details."
msgstr ""

#. type: table
#: zsh.texi:15218
msgid ""
"Note that the builtin @t{functions} provides the same basic capabilities as "
"@t{typeset -f} but gives access to a few extra options; @t{autoload} gives "
"further additional options for the case @t{typeset -fu} and @t{typeset -fU}."
msgstr ""

#. type: table
#: zsh.texi:15234
msgid ""
"Hide: only useful for special parameters (those marked `<S>' in the table in "
"@ref{Parameters Set By The Shell}), and for local parameters with the same "
"name as a special parameter, though harmless for others.  A special "
"parameter with this attribute will not retain its special effect when made "
"local.  Thus after `@t{typeset -h PATH}', a function containing `@t{typeset "
"PATH}' will create an ordinary local parameter without the usual behaviour "
"of @t{PATH}.  Alternatively, the local parameter may itself be given this "
"attribute; hence inside a function `@t{typeset -h PATH}' creates an ordinary "
"local parameter and the special @t{PATH} parameter is not altered in any "
"way.  It is also possible to create a local parameter using `@t{typeset +h "
"}@var{special}', where the local copy of @var{special} will retain its "
"special properties regardless of having the @t{-h} attribute.  Global "
"special parameters loaded from shell modules (currently those in "
"@t{zsh/mapfile} and @t{zsh/parameter}) are automatically given the @t{-h} "
"attribute to avoid name clashes."
msgstr ""

#. type: table
#: zsh.texi:15244
msgid ""
"Hide value: specifies that @t{typeset} will not display the value of the "
"parameter when listing parameters; the display for such parameters is always "
"as if the `@t{+}' flag had been given.  Use of the parameter is in other "
"respects normal, and the option does not apply if the parameter is specified "
"by name, or by pattern with the @t{-m} option.  This is on by default for "
"the parameters in the @t{zsh/parameter} and @t{zsh/mapfile} modules.  Note, "
"however, that unlike the @t{-h} flag this is also useful for non-special "
"parameters."
msgstr ""

#. type: item
#: zsh.texi:15245
#, no-wrap
msgid "@t{-i} [ @var{n} ]"
msgstr ""

#. type: table
#: zsh.texi:15249
msgid ""
"Use an internal integer representation.  If @var{n} is nonzero it defines "
"the output arithmetic base, otherwise it is determined by the first "
"assignment.  Bases from 2 to 36 inclusive are allowed."
msgstr ""

#. type: item
#: zsh.texi:15250
#, no-wrap
msgid "@t{-E} [ @var{n} ]"
msgstr ""

#. type: table
#: zsh.texi:15255
msgid ""
"Use an internal double-precision floating point representation.  On output "
"the variable will be converted to scientific notation.  If @var{n} is "
"nonzero it defines the number of significant figures to display; the default "
"is ten."
msgstr ""

#. type: item
#: zsh.texi:15256
#, no-wrap
msgid "@t{-F} [ @var{n} ]"
msgstr ""

#. type: table
#: zsh.texi:15261
msgid ""
"Use an internal double-precision floating point representation.  On output "
"the variable will be converted to fixed-point decimal notation.  If @var{n} "
"is nonzero it defines the number of digits to display after the decimal "
"point; the default is ten."
msgstr ""

#. type: table
#: zsh.texi:15265
msgid ""
"Convert the result to lower case whenever the parameter is expanded.  The "
"value is @emph{not} converted when assigned."
msgstr ""

#. type: table
#: zsh.texi:15270
msgid ""
"The given @var{name}s are marked readonly.  Note that if @var{name} is a "
"special parameter, the readonly attribute can be turned on, but cannot then "
"be turned off."
msgstr ""

#. type: table
#: zsh.texi:15276
msgid ""
"If the @t{POSIX_BUILTINS} option is set, the readonly attribute is more "
"restrictive: unset variables can be marked readonly and cannot then be set; "
"furthermore, the readonly attribute cannot be removed from any variable."
msgstr ""

#. type: table
#: zsh.texi:15281
msgid ""
"It is still possible to change other attributes of the variable though, some "
"of which like @t{-U} or @t{-Z} would affect the value. More generally, the "
"readonly attribute should not be relied on as a security mechanism."
msgstr ""

#. type: table
#: zsh.texi:15288
msgid ""
"Note that in zsh (like in pdksh but unlike most other shells) it is still "
"possible to create a local variable of the same name as this is considered a "
"different variable (though this variable, too, can be marked "
"readonly). Special variables that have been made readonly retain their value "
"and readonly attribute when made local."
msgstr ""

#. type: table
#: zsh.texi:15292
msgid ""
"Tags the named parameters.  Tags have no special meaning to the shell.  This "
"flag has a different meaning when used with @t{-f}; see above."
msgstr ""

#. type: table
#: zsh.texi:15297
msgid ""
"Convert the result to upper case whenever the parameter is expanded.  The "
"value is @emph{not} converted when assigned.  This flag has a different "
"meaning when used with @t{-f}; see above."
msgstr ""

#. type: table
#: zsh.texi:15304
msgid ""
"Mark for automatic export to the environment of subsequently executed "
"commands.  If the option @t{GLOBAL_EXPORT} is set, this implies the option "
"@t{-g}, unless @t{+g} is also explicitly given; in other words the parameter "
"is not made local to the enclosing function.  This is for compatibility with "
"previous versions of zsh."
msgstr ""

#. type: findex
#: zsh.texi:15307
#, no-wrap
msgid "ulimit"
msgstr ""

#. type: item
#: zsh.texi:15310
#, no-wrap
msgid ""
"@t{ulimit} [ @t{-HSa} ] [ @{ @t{-bcdfiklmnpqrsTtvwx} | @t{-N} @var{resource} "
"@} [ @var{limit} ] ... ]"
msgstr ""

#. type: table
#: zsh.texi:15316
msgid ""
"Set or display resource limits of the shell and the processes started by the "
"shell.  The value of @var{limit} can be a number in the unit specified below "
"or one of the values `@t{unlimited}', which removes the limit on the "
"resource, or `@t{hard}', which uses the current value of the hard limit on "
"the resource."
msgstr ""

#. type: table
#: zsh.texi:15321
msgid ""
"By default, only soft limits are manipulated. If the @t{-H} flag is given "
"use hard limits instead of soft limits.  If the @t{-S} flag is given "
"together with the @t{-H} flag set both hard and soft limits."
msgstr ""

#. type: table
#: zsh.texi:15324
msgid "If no options are used, the file size limit (@t{-f}) is assumed."
msgstr ""

#. type: table
#: zsh.texi:15329
msgid ""
"If @var{limit} is omitted the current value of the specified resources are "
"printed.  When more than one resource value is printed, the limit name and "
"unit is printed before each value."
msgstr ""

#. type: table
#: zsh.texi:15338
msgid ""
"Not all the following resources are supported on all systems.  Running "
"@t{ulimit -a} will show which are supported."
msgstr ""

#. type: table
#: zsh.texi:15343
msgid "Lists all of the current resource limits."
msgstr ""

#. type: table
#: zsh.texi:15345
msgid "Socket buffer size in bytes (N.B. not kilobytes)"
msgstr ""

#. type: table
#: zsh.texi:15347
msgid "512-byte blocks on the size of core dumps."
msgstr ""

#. type: table
#: zsh.texi:15349
msgid "Kilobytes on the size of the data segment."
msgstr ""

#. type: table
#: zsh.texi:15351
msgid "512-byte blocks on the size of files written."
msgstr ""

#. type: table
#: zsh.texi:15353
msgid "The number of pending signals."
msgstr ""

#. type: table
#: zsh.texi:15355
msgid "The number of kqueues allocated."
msgstr ""

#. type: table
#: zsh.texi:15357
msgid "Kilobytes on the size of locked-in memory."
msgstr ""

#. type: table
#: zsh.texi:15359
msgid "Kilobytes on the size of physical memory."
msgstr ""

#. type: table
#: zsh.texi:15361
msgid "open file descriptors."
msgstr ""

#. type: table
#: zsh.texi:15363
msgid "The number of pseudo-terminals."
msgstr ""

#. type: table
#: zsh.texi:15365
msgid "Bytes in POSIX message queues."
msgstr ""

#. type: table
#: zsh.texi:15369
msgid ""
"Maximum real time priority.  On some systems where this is not available, "
"such as NetBSD, this has the same effect as @t{-T} for compatibility with "
"@t{sh}."
msgstr ""

#. type: table
#: zsh.texi:15371
msgid "Kilobytes on the size of the stack."
msgstr ""

#. type: table
#: zsh.texi:15373
msgid "The number of simultaneous threads available to the user."
msgstr ""

#. type: table
#: zsh.texi:15375
msgid "CPU seconds to be used."
msgstr ""

#. type: table
#: zsh.texi:15377
msgid "The number of processes available to the user."
msgstr ""

#. type: table
#: zsh.texi:15380
msgid ""
"Kilobytes on the size of virtual memory.  On some systems this refers to the "
"limit called `address space'."
msgstr ""

#. type: table
#: zsh.texi:15382
msgid "Kilobytes on the size of swapped out memory."
msgstr ""

#. type: table
#: zsh.texi:15384
msgid "The number of locks on files."
msgstr ""

#. type: table
#: zsh.texi:15392
msgid ""
"A resource may also be specified by integer in the form `@t{-N} "
"@var{resource}', where @var{resource} corresponds to the integer defined for "
"the resource by the operating system.  This may be used to set the limits "
"for resources known to the shell which do not correspond to option letters.  "
"Such limits will be shown by number in the output of `@t{ulimit -a}'."
msgstr ""

#. type: table
#: zsh.texi:15397
msgid ""
"The number may alternatively be out of the range of limits compiled into the "
"shell.  The shell will try to read or write the limit anyway, and will "
"report an error if this fails."
msgstr ""

#. type: cindex
#: zsh.texi:15398 zsh.texi:15399
#, no-wrap
msgid "umask"
msgstr ""

#. type: item
#: zsh.texi:15400
#, no-wrap
msgid "@t{umask} [ @t{-S} ] [ @var{mask} ]"
msgstr ""

#. type: table
#: zsh.texi:15408
msgid ""
"The umask is set to @var{mask}.  @var{mask} can be either an octal number or "
"a symbolic value as described in the chmod(1) man page.  If @var{mask} is "
"omitted, the current value is printed.  The @t{-S} option causes the mask to "
"be printed as a symbolic value.  Otherwise, the mask is printed as an octal "
"number.  Note that in the symbolic form the permissions you specify are "
"those which are to be allowed (not denied) to the users specified."
msgstr ""

#. type: cindex
#: zsh.texi:15409
#, no-wrap
msgid "aliases, removing"
msgstr ""

#. type: item
#: zsh.texi:15410
#, no-wrap
msgid "@t{unalias} [ @t{-ams} ] @var{name} ..."
msgstr ""

#. type: table
#: zsh.texi:15417
msgid ""
"Removes aliases.  This command works the same as @t{unhash -a}, except that "
"the @t{-a} option removes all regular or global aliases, or with @t{-s} all "
"suffix aliases: in this case no @var{name} arguments may appear.  The "
"options @t{-m} (remove by pattern) and @t{-s} without @t{-a} (remove listed "
"suffix aliases) behave as for @t{unhash -a}.  Note that the meaning of "
"@t{-a} is different between @t{unalias} and @t{unhash}."
msgstr ""

#. type: cindex
#: zsh.texi:15418
#, no-wrap
msgid "functions, removing"
msgstr ""

#. type: t{#1}
#: zsh.texi:15419 zsh.texi:15420
#, no-wrap
msgid "unfunction"
msgstr ""

#. type: table
#: zsh.texi:15422
msgid "Same as @t{unhash -f}."
msgstr ""

#. type: findex
#: zsh.texi:15423
#, no-wrap
msgid "unhash"
msgstr ""

#. type: item
#: zsh.texi:15424
#, no-wrap
msgid "@t{unhash} [ @t{-adfms} ] @var{name} ..."
msgstr ""

#. type: table
#: zsh.texi:15436
msgid ""
"Remove the element named @var{name} from an internal hash table.  The "
"default is remove elements from the command hash table.  The @t{-a} option "
"causes @t{unhash} to remove regular or global aliases; note when removing a "
"global aliases that the argument must be quoted to prevent it from being "
"expanded before being passed to the command.  The @t{-s} option causes "
"@t{unhash} to remove suffix aliases.  The @t{-f} option causes @t{unhash} to "
"remove shell functions.  The @t{-d} options causes @t{unhash} to remove "
"named directories.  If the @t{-m} flag is given the arguments are taken as "
"patterns (should be quoted) and all elements of the corresponding hash table "
"with matching names will be removed."
msgstr ""

#. type: findex
#: zsh.texi:15437
#, no-wrap
msgid "unlimit"
msgstr ""

#. type: item
#: zsh.texi:15440
#, no-wrap
msgid "@t{unlimit} [ @t{-hs} ] @var{resource} ..."
msgstr ""

#. type: table
#: zsh.texi:15446
msgid ""
"The resource limit for each @var{resource} is set to the hard limit.  If the "
"@t{-h} flag is given and the shell has appropriate privileges, the hard "
"resource limit for each @var{resource} is removed.  The resources of the "
"shell process are only changed if the @t{-s} flag is given."
msgstr ""

#. type: table
#: zsh.texi:15451
msgid ""
"The @t{unlimit} command is not made available by default when the shell "
"starts in a mode emulating another shell.  It can be made available with the "
"command `@t{zmodload -F zsh/rlimits b:unlimit}'."
msgstr ""

#. type: findex
#: zsh.texi:15452
#, no-wrap
msgid "unset"
msgstr ""

#. type: cindex
#: zsh.texi:15453
#, no-wrap
msgid "parameters, unsetting"
msgstr ""

#. type: item
#: zsh.texi:15454
#, no-wrap
msgid "@t{unset} [ @t{-fmv} ] @var{name} ..."
msgstr ""

#. type: table
#: zsh.texi:15458
msgid ""
"Each named parameter is unset.  Local parameters remain local even if unset; "
"they appear unset within scope, but the previous value will still reappear "
"when the scope ends."
msgstr ""

#. type: table
#: zsh.texi:15463
msgid ""
"Individual elements of associative array parameters may be unset by using "
"subscript syntax on @var{name}, which should be quoted (or the entire "
"command prefixed with @t{noglob}) to protect the subscript from filename "
"generation."
msgstr ""

#. type: table
#: zsh.texi:15469
msgid ""
"If the @t{-m} flag is specified the arguments are taken as patterns (should "
"be quoted) and all parameters with matching names are unset.  Note that this "
"cannot be used when unsetting associative array elements, as the subscript "
"will be treated as part of the pattern."
msgstr ""

#. type: table
#: zsh.texi:15473
msgid ""
"The @t{-v} flag specifies that @var{name} refers to parameters. This is the "
"default behaviour."
msgstr ""

#. type: table
#: zsh.texi:15476
msgid "@t{unset -f} is equivalent to @t{unfunction}."
msgstr ""

#. type: findex
#: zsh.texi:15477
#, no-wrap
msgid "unsetopt"
msgstr ""

#. type: cindex
#: zsh.texi:15478
#, no-wrap
msgid "options, unsetting"
msgstr ""

#. type: item
#: zsh.texi:15479
#, no-wrap
msgid ""
"@t{unsetopt} [ @{@t{+}|@t{-}@}@var{options} | @{@t{+}|@t{-}@}@t{o} "
"@var{option_name} ] [ @var{name} ... ]"
msgstr ""

#. type: table
#: zsh.texi:15486
msgid ""
"Unset the options for the shell.  All options specified either with flags or "
"by name are unset.  If no arguments are supplied, the names of all options "
"currently unset are printed.  If the @t{-m} flag is given the arguments are "
"taken as patterns (which should be quoted to preserve them from being "
"interpreted as glob patterns), and all options with names matching these "
"patterns are unset."
msgstr ""

#. type: t{#1}
#: zsh.texi:15487 zsh.texi:16500 zsh.texi:17040 zsh.texi:19676
#, no-wrap
msgid "vared"
msgstr ""

#. type: findex
#: zsh.texi:15490
#, no-wrap
msgid "wait"
msgstr ""

#. type: cindex
#: zsh.texi:15491
#, no-wrap
msgid "waiting for jobs"
msgstr ""

#. type: cindex
#: zsh.texi:15492
#, no-wrap
msgid "jobs, waiting for"
msgstr ""

#. type: item
#: zsh.texi:15493
#, no-wrap
msgid "@t{wait} [ @var{job} ... ]"
msgstr ""

#. type: table
#: zsh.texi:15501
msgid ""
"Wait for the specified jobs or processes.  If @var{job} is not given then "
"all currently active child processes are waited for.  Each @var{job} can be "
"either a job specification or the process ID of a job in the job table.  The "
"exit status from this command is that of the job waited for.  If @var{job} "
"represents an unknown job or process ID, a warning is printed (unless the "
"@t{POSIX_BUILTINS} option is set) and the exit status is 127."
msgstr ""

#. type: table
#: zsh.texi:15511
msgid ""
"It is possible to wait for recent processes (specified by process ID, not by "
"job) that were running in the background even if the process has exited.  "
"Typically the process ID will be recorded by capturing the value of the "
"variable @t{$!} immediately after the process has been started.  There is a "
"limit on the number of process IDs remembered by the shell; this is given by "
"the value of the system configuration parameter @t{CHILD_MAX}.  When this "
"limit is reached, older process IDs are discarded, least recently started "
"processes first."
msgstr ""

#. type: table
#: zsh.texi:15519
msgid ""
"Note there is no protection against the process ID wrapping, i.e. if the "
"wait is not executed soon enough there is a chance the process waited for is "
"the wrong one.  A conflict implies both process IDs have been generated by "
"the shell, as other processes are not recorded, and that the user is "
"potentially interested in both, so this problem is intrinsic to process IDs."
msgstr ""

#. type: findex
#: zsh.texi:15520
#, no-wrap
msgid "whence"
msgstr ""

#. type: item
#: zsh.texi:15521
#, no-wrap
msgid "@t{whence} [ @t{-vcwfpamsS} ] [ @t{-x} @var{num} ] @var{name} ..."
msgstr ""

#. type: table
#: zsh.texi:15524
msgid ""
"For each @var{name}, indicate how it would be interpreted if used as a "
"command name."
msgstr ""

#. type: table
#: zsh.texi:15531
msgid ""
"If @var{name} is not an alias, built-in command, external command, shell "
"function, hashed command, or a reserved word, the exit status shall be "
"non-zero, and --- if @t{-v}, @t{-c}, or @t{-w} was passed --- a message will "
"be written to standard output.  (This is different from other shells that "
"write that message to standard error.)"
msgstr ""

#. type: table
#: zsh.texi:15537
msgid ""
"@t{whence} is most useful when @var{name} is only the last path component of "
"a command, i.e. does not include a `@t{/}'; in particular, pattern matching "
"only succeeds if just the non-directory component of the command is passed."
msgstr ""

#. type: table
#: zsh.texi:15542
msgid "Produce a more verbose report."
msgstr ""

#. type: table
#: zsh.texi:15546
msgid ""
"Print the results in a @cite{csh}-like format.  This takes precedence over "
"@t{-v}."
msgstr ""

#. type: table
#: zsh.texi:15555
msgid ""
"For each @var{name}, print `@var{name}@t{:} @var{word}' where @var{word} is "
"one of @t{alias}, @t{builtin}, @t{command}, @t{function}, @t{hashed}, "
"@t{reserved} or @t{none}, according as @var{name} corresponds to an alias, a "
"built-in command, an external command, a shell function, a command defined "
"with the @t{hash} builtin, a reserved word, or is not recognised.  This "
"takes precedence over @t{-v} and @t{-c}."
msgstr ""

#. type: table
#: zsh.texi:15560
msgid ""
"Causes the contents of a shell function to be displayed, which would "
"otherwise not happen unless the @t{-c} flag were used."
msgstr ""

#. type: table
#: zsh.texi:15564
msgid ""
"Do a path search for @var{name} even if it is an alias, reserved word, shell "
"function or builtin."
msgstr ""

#. type: table
#: zsh.texi:15569
msgid ""
"Do a search for all occurrences of @var{name} throughout the command path.  "
"Normally only the first occurrence is printed."
msgstr ""

#. type: table
#: zsh.texi:15574
msgid ""
"The arguments are taken as patterns (pattern characters should be quoted), "
"and the information is displayed for each command matching one of these "
"patterns."
msgstr ""

#. type: table
#: zsh.texi:15577
msgid "If a pathname contains symlinks, print the symlink-free pathname as well."
msgstr ""

#. type: table
#: zsh.texi:15582
msgid ""
"As @t{-s}, but if the pathname had to be resolved by following multiple "
"symlinks, the intermediate steps are printed, too.  The symlink resolved at "
"each step might be anywhere in the path."
msgstr ""

#. type: item
#: zsh.texi:15583
#, no-wrap
msgid "@t{-x} @var{num}"
msgstr ""

#. type: table
#: zsh.texi:15587
msgid ""
"Expand tabs when outputting shell functions using the @t{-c} option.  This "
"has the same effect as the @t{-x} option to the @t{functions} builtin."
msgstr ""

#. type: findex
#: zsh.texi:15590
#, no-wrap
msgid "where"
msgstr ""

#. type: item
#: zsh.texi:15591
#, no-wrap
msgid "@t{where} [ @t{-wpmsS} ] [ @t{-x} @var{num} ] @var{name} ..."
msgstr ""

#. type: table
#: zsh.texi:15593
msgid "Equivalent to @t{whence -ca}."
msgstr ""

#. type: findex
#: zsh.texi:15594
#, no-wrap
msgid "which"
msgstr ""

#. type: item
#: zsh.texi:15595
#, no-wrap
msgid "@t{which} [ @t{-wpamsS} ] [ @t{-x} @var{num} ] @var{name} ..."
msgstr ""

#. type: table
#: zsh.texi:15597
msgid "Equivalent to @t{whence -c}."
msgstr ""

#. type: findex
#: zsh.texi:15598
#, no-wrap
msgid "zcompile"
msgstr ""

#. type: cindex
#: zsh.texi:15599
#, no-wrap
msgid ".zwc files, creation"
msgstr ""

#. type: cindex
#: zsh.texi:15600
#, no-wrap
msgid "compilation"
msgstr ""

#. type: item
#: zsh.texi:15601
#, no-wrap
msgid ""
"@t{zcompile} [ @t{-U} ] [ @t{-z} | @t{-k} ] [ @t{-R} | @t{-M} ] @var{file} [ "
"@var{name} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:15602
#, no-wrap
msgid ""
"@t{zcompile} @t{-ca} [ @t{-m} ] [ @t{-R} | @t{-M} ] @var{file} [ @var{name} "
"... ]"
msgstr ""

#. type: itemx
#: zsh.texi:15603
#, no-wrap
msgid "@t{zcompile -t} @var{file} [ @var{name} ... ]"
msgstr ""

#. type: table
#: zsh.texi:15609
msgid ""
"This builtin command can be used to compile functions or scripts, storing "
"the compiled form in a file, and to examine files containing the compiled "
"form.  This allows faster autoloading of functions and sourcing of scripts "
"by avoiding parsing of the text when the files are read."
msgstr ""

#. type: table
#: zsh.texi:15620
msgid ""
"The first form (without the @t{-c}, @t{-a} or @t{-t} options) creates a "
"compiled file.  If only the @var{file} argument is given, the output file "
"has the name `@var{file}@t{.zwc}' and will be placed in the same directory "
"as the @var{file}.  The shell will load the compiled file instead of the "
"normal function file when the function is autoloaded; see @ref{Functions} "
"for a description of how autoloaded functions are searched.  The extension "
"@t{.zwc} stands for `zsh word code'."
msgstr ""

#. type: vindex
#: zsh.texi:15622
#, no-wrap
msgid "fpath, with zcompile"
msgstr ""

#. type: table
#: zsh.texi:15629
msgid ""
"If there is at least one @var{name} argument, all the named files are "
"compiled into the output @var{file} given as the first argument.  If "
"@var{file} does not end in @t{.zwc}, this extension is automatically "
"appended.  Files containing multiple compiled functions are called `digest' "
"files, and are intended to be used as elements of the @t{FPATH}/@t{fpath} "
"special array."
msgstr ""

#. type: table
#: zsh.texi:15642
msgid ""
"The second form, with the @t{-c} or @t{-a} options, writes the compiled "
"definitions for all the named functions into @var{file}.  For @t{-c}, the "
"names must be functions currently defined in the shell, not those marked for "
"autoloading.  Undefined functions that are marked for autoloading may be "
"written by using the @t{-a} option, in which case the @t{fpath} is searched "
"and the contents of the definition files for those functions, if found, are "
"compiled into @var{file}.  If both @t{-c} and @t{-a} are given, names of "
"both defined functions and functions marked for autoloading may be given.  "
"In either case, the functions in files written with the @t{-c} or @t{-a} "
"option will be autoloaded as if the @t{KSH_AUTOLOAD} option were unset."
msgstr ""

#. type: table
#: zsh.texi:15651
msgid ""
"The reason for handling loaded and not-yet-loaded functions with different "
"options is that some definition files for autoloading define multiple "
"functions, including the function with the same name as the file, and, at "
"the end, call that function.  In such cases the output of `@t{zcompile -c}' "
"does not include the additional functions defined in the file, and any other "
"initialization code in the file is lost.  Using `@t{zcompile -a}' captures "
"all this extra information."
msgstr ""

#. type: table
#: zsh.texi:15658
msgid ""
"If the @t{-m} option is combined with @t{-c} or @t{-a}, the @var{name}s are "
"used as patterns and all functions whose names match one of these patterns "
"will be written. If no @var{name} is given, the definitions of all functions "
"currently defined or marked as autoloaded will be written."
msgstr ""

#. type: table
#: zsh.texi:15663
msgid ""
"Note the second form cannot be used for compiling functions that include "
"redirections as part of the definition rather than within the body of the "
"function; for example"
msgstr ""

#. type: example
#: zsh.texi:15667
#, no-wrap
msgid "fn1() @{ @{ ... @} >~/logfile @}\n"
msgstr ""

#. type: table
#: zsh.texi:15671
msgid "can be compiled but"
msgstr ""

#. type: example
#: zsh.texi:15675
#, no-wrap
msgid "fn1() @{ ... @} >~/logfile\n"
msgstr ""

#. type: table
#: zsh.texi:15681
msgid ""
"cannot.  It is possible to use the first form of @t{zcompile} to compile "
"autoloadable functions that include the full function definition instead of "
"just the body of the function."
msgstr ""

#. type: table
#: zsh.texi:15692
msgid ""
"The third form, with the @t{-t} option, examines an existing compiled file.  "
"Without further arguments, the names of the original files compiled into it "
"are listed.  The first line of output shows the version of the shell which "
"compiled the file and how the file will be used (i.e. by reading it directly "
"or by mapping it into memory).  With arguments, nothing is output and the "
"return status is set to zero if definitions for @emph{all} @var{name}s were "
"found in the compiled file, and non-zero if the definition for at least one "
"@var{name} was not found."
msgstr ""

#. type: table
#: zsh.texi:15695
msgid "Other options:"
msgstr ""

#. type: table
#: zsh.texi:15700
msgid "Aliases are not expanded when compiling the @var{name}d files."
msgstr ""

#. type: table
#: zsh.texi:15705
msgid ""
"When the compiled file is read, its contents are copied into the shell's "
"memory, rather than memory-mapped (see @t{-M}).  This happens automatically "
"on systems that do not support memory mapping."
msgstr ""

#. type: table
#: zsh.texi:15711
msgid ""
"When compiling scripts instead of autoloadable functions, it is often "
"desirable to use this option; otherwise the whole file, including the code "
"to define functions which have already been defined, will remain mapped, "
"consequently wasting memory."
msgstr ""

#. type: table
#: zsh.texi:15718
msgid ""
"The compiled file is mapped into the shell's memory when read. This is done "
"in such a way that multiple instances of the shell running on the same host "
"will share this mapped file.  If neither @t{-R} nor @t{-M} is given, the "
"@t{zcompile} builtin decides what to do based on the size of the compiled "
"file."
msgstr ""

#. type: table
#: zsh.texi:15731
msgid ""
"These options are used when the compiled file contains functions which are "
"to be autoloaded. If @t{-z} is given, the function will be autoloaded as if "
"the @t{KSH_AUTOLOAD} option is @emph{not} set, even if it is set at the time "
"the compiled file is read, while if the @t{-k} is given, the function will "
"be loaded as if @t{KSH_AUTOLOAD} @emph{is} set.  These options also take "
"precedence over any @t{-k} or @t{-z} options specified to the @t{autoload} "
"builtin. If neither of these options is given, the function will be loaded "
"as determined by the setting of the @t{KSH_AUTOLOAD} option at the time the "
"compiled file is read."
msgstr ""

#. type: table
#: zsh.texi:15735
msgid ""
"These options may also appear as many times as necessary between the listed "
"@var{name}s to specify the loading style of all following functions, up to "
"the next @t{-k} or @t{-z}."
msgstr ""

#. type: table
#: zsh.texi:15744
msgid ""
"The created file always contains two versions of the compiled format, one "
"for big-endian machines and one for small-endian machines.  The upshot of "
"this is that the compiled file is machine independent and if it is read or "
"mapped, only one half of the file is actually used (and mapped)."
msgstr ""

#. type: findex
#: zsh.texi:15746 zsh.texi:32320
#, no-wrap
msgid "zformat"
msgstr ""

#. type: table
#: zsh.texi:15748 zsh.texi:16057 zsh.texi:16066 zsh.texi:16072
msgid "See @ref{The zsh/zutil Module}."
msgstr ""

#. type: findex
#: zsh.texi:15749 zsh.texi:31301
#, no-wrap
msgid "zftp"
msgstr ""

#. type: table
#: zsh.texi:15751
msgid "See @ref{The zsh/zftp Module}."
msgstr ""

#. type: t{#1}
#: zsh.texi:15752 zsh.texi:16558 zsh.texi:16569
#, no-wrap
msgid "zle"
msgstr ""

#. type: findex
#: zsh.texi:15755
#, no-wrap
msgid "zmodload"
msgstr ""

#. type: cindex
#: zsh.texi:15756
#, no-wrap
msgid "modules, loading"
msgstr ""

#. type: cindex
#: zsh.texi:15757
#, no-wrap
msgid "loading modules"
msgstr ""

#. type: item
#: zsh.texi:15758
#, no-wrap
msgid "@t{zmodload} [ @t{-dL} ] [ @t{-s} ] [ ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:15759
#, no-wrap
msgid ""
"@t{zmodload -F} [ @t{-alLme} @t{-P} @var{param} ] @var{module} [ "
"[@t{+-}]@var{feature} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:15760
#, no-wrap
msgid "@t{zmodload -e} [ @t{-A} ] [ ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:15761
#, no-wrap
msgid "@t{zmodload} [ @t{-a} [ @t{-bcpf} [ @t{-I} ] ] ] [ @t{-iL} ] ..."
msgstr ""

#. type: itemx
#: zsh.texi:15762
#, no-wrap
msgid "@t{zmodload} @t{-u} [ @t{-abcdpf} [ @t{-I} ] ] [ @t{-iL} ] ..."
msgstr ""

#. type: item
#: zsh.texi:15763 zsh.texi:16004
#, no-wrap
msgid "@t{zmodload} @t{-A} [ @t{-L} ] [ @var{modalias}[@t{=}@var{module}] ... ]"
msgstr ""

#. type: item
#: zsh.texi:15764 zsh.texi:16040
#, no-wrap
msgid "@t{zmodload} @t{-R} @var{modalias} ..."
msgstr ""

#. type: table
#: zsh.texi:15771
msgid ""
"Performs operations relating to zsh's loadable modules.  Loading of modules "
"while the shell is running (`dynamical loading') is not available on all "
"operating systems, or on all installations on a particular operating system, "
"although the @t{zmodload} command itself is always available and can be used "
"to manipulate modules built into versions of the shell executable without "
"dynamical loading."
msgstr ""

#. type: table
#: zsh.texi:15776
msgid ""
"Without arguments the names of all currently loaded binary modules are "
"printed.  The @t{-L} option causes this list to be in the form of a series "
"of @t{zmodload} commands.  Forms with arguments are:"
msgstr ""

#. type: item
#: zsh.texi:15779
#, no-wrap
msgid "@t{zmodload} [ @t{-is} ] @var{name} ..."
msgstr ""

#. type: itemx
#: zsh.texi:15780
#, no-wrap
msgid "@t{zmodload} @t{-u} [ @t{-i} ] @var{name} ..."
msgstr ""

#. type: table
#: zsh.texi:15790
msgid ""
"In the simplest case, @t{zmodload} loads a binary module.  The module must "
"be in a file with a name consisting of the specified @var{name} followed by "
"a standard suffix, usually `@t{.so}' (`@t{.sl}' on HPUX).  If the module to "
"be loaded is already loaded the duplicate module is ignored.  If "
"@t{zmodload} detects an inconsistency, such as an invalid module name or "
"circular dependency list, the current code block is aborted.  If it is "
"available, the module is loaded if necessary, while if it is not available, "
"non-zero status is silently returned.  The option @t{-i} is accepted for "
"compatibility but has no effect."
msgstr ""

#. type: table
#: zsh.texi:15796
msgid ""
"The @var{name}d module is searched for in the same way a command is, using "
"@t{$module_path} instead of @t{$path}.  However, the path search is "
"performed even when the module name contains a `@t{/}', which it usually "
"does.  There is no way to prevent the path search."
msgstr ""

#. type: table
#: zsh.texi:15801
msgid ""
"If the module supports features (see below), @t{zmodload} tries to enable "
"all features when loading a module.  If the module was successfully loaded "
"but not all features could be enabled, @t{zmodload} returns status 2."
msgstr ""

#. type: table
#: zsh.texi:15807
msgid ""
"If the option @t{-s} is given, no error is printed if the module was not "
"available (though other errors indicating a problem with the module are "
"printed).  The return status indicates if the module was loaded.  This is "
"appropriate if the caller considers the module optional."
msgstr ""

#. type: table
#: zsh.texi:15814
msgid ""
"With @t{-u}, @t{zmodload} unloads modules.  The same @var{name} must be "
"given that was given when the module was loaded, but it is not necessary for "
"the module to exist in the file system.  The @t{-i} option suppresses the "
"error if the module is already unloaded (or was never loaded)."
msgstr ""

#. type: table
#: zsh.texi:15819
msgid ""
"Each module has a boot and a cleanup function.  The module will not be "
"loaded if its boot function fails.  Similarly a module can only be unloaded "
"if its cleanup function runs successfully."
msgstr ""

#. type: item
#: zsh.texi:15820
#, no-wrap
msgid ""
"@t{zmodload -F} [ @t{-almLe} @t{-P} @var{param} ] @var{module} [ "
"[@t{+-}]@var{feature} ... ]"
msgstr ""

#. type: table
#: zsh.texi:15835
msgid ""
"@t{zmodload -F} allows more selective control over the features provided by "
"modules.  With no options apart from @t{-F}, the module named @var{module} "
"is loaded, if it was not already loaded, and the list of @var{feature}s is "
"set to the required state.  If no @var{feature}s are specified, the module "
"is loaded, if it was not already loaded, but the state of features is "
"unchanged.  Each feature may be preceded by a @t{+} to turn the feature on, "
"or @t{-} to turn it off; the @t{+} is assumed if neither character is "
"present.  Any feature not explicitly mentioned is left in its current state; "
"if the module was not previously loaded this means any such features will "
"remain disabled.  The return status is zero if all features were set, 1 if "
"the module failed to load, and 2 if some features could not be set (for "
"example, a parameter couldn't be added because there was a different "
"parameter of the same name) but the module was loaded."
msgstr ""

#. type: table
#: zsh.texi:15845
msgid ""
"The standard features are builtins, conditions, parameters and math "
"functions; these are indicated by the prefix `@t{b:}', `@t{c:}' (`@t{C:}' "
"for an infix condition), `@t{p:}' and `@t{f:}', respectively, followed by "
"the name that the corresponding feature would have in the shell.  For "
"example, `@t{b:strftime}' indicates a builtin named @t{strftime} and "
"@t{p:EPOCHSECONDS} indicates a parameter named @t{EPOCHSECONDS}.  The module "
"may provide other (`abstract') features of its own as indicated by its "
"documentation; these have no prefix."
msgstr ""

#. type: table
#: zsh.texi:15856
msgid ""
"With @t{-l} or @t{-L}, features provided by the module are listed.  With "
"@t{-l} alone, a list of features together with their states is shown, one "
"feature per line.  With @t{-L} alone, a @t{zmodload -F} command that would "
"cause enabled features of the module to be turned on is shown.  With "
"@t{-lL}, a @t{zmodload -F} command that would cause all the features to be "
"set to their current state is shown.  If one of these combinations is given "
"with the option @t{-P} @var{param} then the parameter @var{param} is set to "
"an array of features, either features together with their state or (if "
"@t{-L} alone is given) enabled features."
msgstr ""

#. type: table
#: zsh.texi:15862
msgid ""
"With the option @t{-L} the module name may be omitted; then a list of all "
"enabled features for all modules providing features is printed in the form "
"of @t{zmodload -F} commands.  If @t{-l} is also given, the state of both "
"enabled and disabled features is output in that form."
msgstr ""

#. type: table
#: zsh.texi:15869
msgid ""
"A set of features may be provided together with @t{-l} or @t{-L} and a "
"module name; in that case only the state of those features is considered.  "
"Each feature may be preceded by @t{+} or @t{-} but the character has no "
"effect.  If no set of features is provided, all features are considered."
msgstr ""

#. type: table
#: zsh.texi:15878
msgid ""
"With @t{-e}, the command first tests that the module is loaded; if it is "
"not, status 1 is returned.  If the module is loaded, the list of features "
"given as an argument is examined.  Any feature given with no prefix is "
"simply tested to see if the module provides it; any feature given with a "
"prefix @t{+} or @t{-} is tested to see if is provided and in the given "
"state.  If the tests on all features in the list succeed, status 0 is "
"returned, else status 1."
msgstr ""

#. type: table
#: zsh.texi:15885
msgid ""
"With @t{-m}, each entry in the given list of features is taken as a pattern "
"to be matched against the list of features provided by the module.  An "
"initial @t{+} or @t{-} must be given explicitly.  This may not be combined "
"with the @t{-a} option as autoloads must be specified explicitly."
msgstr ""

#. type: table
#: zsh.texi:15897
msgid ""
"With @t{-a}, the given list of features is marked for autoload from the "
"specified module, which may not yet be loaded.  An optional @t{+} may appear "
"before the feature name.  If the feature is prefixed with @t{-}, any "
"existing autoload is removed.  The options @t{-l} and @t{-L} may be used to "
"list autoloads.  Autoloading is specific to individual features; when the "
"module is loaded only the requested feature is enabled.  Autoload requests "
"are preserved if the module is subsequently unloaded until an explicit "
"`@t{zmodload -Fa} @var{module} @t{-}@var{feature}' is issued.  It is not an "
"error to request an autoload for a feature of a module that is already "
"loaded."
msgstr ""

#. type: table
#: zsh.texi:15906
msgid ""
"When the module is loaded each autoload is checked against the features "
"actually provided by the module; if the feature is not provided the autoload "
"request is deleted.  A warning message is output; if the module is being "
"loaded to provide a different feature, and that autoload is successful, "
"there is no effect on the status of the current command.  If the module is "
"already loaded at the time when @t{zmodload -Fa} is run, an error message is "
"printed and status 1 returned."
msgstr ""

#. type: table
#: zsh.texi:15912
msgid ""
"@t{zmodload -Fa} can be used with the @t{-l}, @t{-L}, @t{-e} and @t{-P} "
"options for listing and testing the existence of autoloadable features.  In "
"this case @t{-l} is ignored if @t{-L} is specified.  @t{zmodload -FaL} with "
"no module name lists autoloads for all modules."
msgstr ""

#. type: table
#: zsh.texi:15916
msgid ""
"Note that only standard features as described above can be autoloaded; other "
"features require the module to be loaded before enabling."
msgstr ""

#. type: item
#: zsh.texi:15917
#, no-wrap
msgid "@t{zmodload} @t{-d} [ @t{-L} ] [ @var{name} ]"
msgstr ""

#. type: itemx
#: zsh.texi:15918
#, no-wrap
msgid "@t{zmodload} @t{-d} @var{name} @var{dep} ..."
msgstr ""

#. type: itemx
#: zsh.texi:15919
#, no-wrap
msgid "@t{zmodload} @t{-ud} @var{name} [ @var{dep} ... ]"
msgstr ""

#. type: table
#: zsh.texi:15923
msgid ""
"The @t{-d} option can be used to specify module dependencies.  The modules "
"named in the second and subsequent arguments will be loaded before the "
"module named in the first argument."
msgstr ""

#. type: table
#: zsh.texi:15929
msgid ""
"With @t{-d} and one argument, all dependencies for that module are listed.  "
"With @t{-d} and no arguments, all module dependencies are listed.  This "
"listing is by default in a Makefile-like format.  The @t{-L} option changes "
"this format to a list of @t{zmodload -d} commands."
msgstr ""

#. type: table
#: zsh.texi:15933
msgid ""
"If @t{-d} and @t{-u} are both used, dependencies are removed.  If only one "
"argument is given, all dependencies for that module are removed."
msgstr ""

#. type: item
#: zsh.texi:15934
#, no-wrap
msgid "@t{zmodload} @t{-ab} [ @t{-L} ]"
msgstr ""

#. type: itemx
#: zsh.texi:15935
#, no-wrap
msgid "@t{zmodload} @t{-ab} [ @t{-i} ] @var{name} [ @var{builtin} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:15936
#, no-wrap
msgid "@t{zmodload} @t{-ub} [ @t{-i} ] @var{builtin} ..."
msgstr ""

#. type: table
#: zsh.texi:15945
msgid ""
"The @t{-ab} option defines autoloaded builtins.  It defines the specified "
"@var{builtin}s.  When any of those builtins is called, the module specified "
"in the first argument is loaded and all its features are enabled (for "
"selective control of features use `@t{zmodload -F -a}' as described above).  "
"If only the @var{name} is given, one builtin is defined, with the same name "
"as the module.  @t{-i} suppresses the error if the builtin is already "
"defined or autoloaded, but not if another builtin of the same name is "
"already defined."
msgstr ""

#. type: table
#: zsh.texi:15951
msgid ""
"With @t{-ab} and no arguments, all autoloaded builtins are listed, with the "
"module name (if different) shown in parentheses after the builtin name.  The "
"@t{-L} option changes this format to a list of @t{zmodload -a} commands."
msgstr ""

#. type: table
#: zsh.texi:15957
msgid ""
"If @t{-b} is used together with the @t{-u} option, it removes builtins "
"previously defined with @t{-ab}.  This is only possible if the builtin is "
"not yet loaded.  @t{-i} suppresses the error if the builtin is already "
"removed (or never existed)."
msgstr ""

#. type: table
#: zsh.texi:15961
msgid ""
"Autoload requests are retained if the module is subsequently unloaded until "
"an explicit `@t{zmodload -ub} @var{builtin}' is issued."
msgstr ""

#. type: item
#: zsh.texi:15962
#, no-wrap
msgid "@t{zmodload} @t{-ac} [ @t{-IL} ]"
msgstr ""

#. type: itemx
#: zsh.texi:15963
#, no-wrap
msgid "@t{zmodload} @t{-ac} [ @t{-iI} ] @var{name} [ @var{cond} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:15964
#, no-wrap
msgid "@t{zmodload} @t{-uc} [ @t{-iI} ] @var{cond} ..."
msgstr ""

#. type: table
#: zsh.texi:15969
msgid ""
"The @t{-ac} option is used to define autoloaded condition codes. The "
"@var{cond} strings give the names of the conditions defined by the "
"module. The optional @t{-I} option is used to define infix condition "
"names. Without this option prefix condition names are defined."
msgstr ""

#. type: table
#: zsh.texi:15973
msgid ""
"If given no condition names, all defined names are listed (as a series of "
"@t{zmodload} commands if the @t{-L} option is given)."
msgstr ""

#. type: table
#: zsh.texi:15976
msgid "The @t{-uc} option removes definitions for autoloaded conditions."
msgstr ""

#. type: item
#: zsh.texi:15977
#, no-wrap
msgid "@t{zmodload} @t{-ap} [ @t{-L} ]"
msgstr ""

#. type: itemx
#: zsh.texi:15978
#, no-wrap
msgid "@t{zmodload} @t{-ap} [ @t{-i} ] @var{name} [ @var{parameter} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:15979
#, no-wrap
msgid "@t{zmodload} @t{-up} [ @t{-i} ] @var{parameter} ..."
msgstr ""

#. type: table
#: zsh.texi:15982
msgid ""
"The @t{-p} option is like the @t{-b} and @t{-c} options, but makes "
"@t{zmodload} work on autoloaded parameters instead."
msgstr ""

#. type: item
#: zsh.texi:15983
#, no-wrap
msgid "@t{zmodload} @t{-af} [ @t{-L} ]"
msgstr ""

#. type: itemx
#: zsh.texi:15984
#, no-wrap
msgid "@t{zmodload} @t{-af} [ @t{-i} ] @var{name} [ @var{function} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:15985
#, no-wrap
msgid "@t{zmodload} @t{-uf} [ @t{-i} ] @var{function} ..."
msgstr ""

#. type: table
#: zsh.texi:15988
msgid ""
"The @t{-f} option is like the @t{-b}, @t{-p}, and @t{-c} options, but makes "
"@t{zmodload} work on autoloaded math functions instead."
msgstr ""

#. type: item
#: zsh.texi:15989
#, no-wrap
msgid "@t{zmodload} @t{-a} [ @t{-L} ]"
msgstr ""

#. type: itemx
#: zsh.texi:15990
#, no-wrap
msgid "@t{zmodload} @t{-a} [ @t{-i} ] @var{name} [ @var{builtin} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:15991
#, no-wrap
msgid "@t{zmodload} @t{-ua} [ @t{-i} ] @var{builtin} ..."
msgstr ""

#. type: table
#: zsh.texi:15993
msgid "Equivalent to @t{-ab} and @t{-ub}."
msgstr ""

#. type: item
#: zsh.texi:15994
#, no-wrap
msgid "@t{zmodload -e} [ @t{-A} ] [ @var{string} ... ]"
msgstr ""

#. type: table
#: zsh.texi:16003
msgid ""
"The @t{-e} option without arguments lists all loaded modules; if the @t{-A} "
"option is also given, module aliases corresponding to loaded modules are "
"also shown.  If arguments are provided, nothing is printed; the return "
"status is set to zero if all @var{string}s given as arguments are names of "
"loaded modules and to one if at least on @var{string} is not the name of a "
"loaded module.  This can be used to test for the availability of things "
"implemented by modules.  In this case, any aliases are automatically "
"resolved and the @t{-A} flag is not used."
msgstr ""

#. type: table
#: zsh.texi:16013
msgid ""
"For each argument, if both @var{modalias} and @var{module} are given, define "
"@var{modalias} to be an alias for the module @var{module}.  If the module "
"@var{modalias} is ever subsequently requested, either via a call to "
"@t{zmodload} or implicitly, the shell will attempt to load @var{module} "
"instead.  If @var{module} is not given, show the definition of "
"@var{modalias}.  If no arguments are given, list all defined module "
"aliases.  When listing, if the @t{-L} flag was also given, list the "
"definition as a @t{zmodload} command to recreate the alias."
msgstr ""

#. type: table
#: zsh.texi:16026
msgid ""
"The existence of aliases for modules is completely independent of whether "
"the name resolved is actually loaded as a module: while the alias exists, "
"loading and unloading the module under any alias has exactly the same effect "
"as using the resolved name, and does not affect the connection between the "
"alias and the resolved name which can be removed either by @t{zmodload -R} "
"or by redefining the alias.  Chains of aliases (i.e. where the first "
"resolved name is itself an alias) are valid so long as these are not "
"circular.  As the aliases take the same format as module names, they may "
"include path separators: in this case, there is no requirement for any part "
"of the path named to exist as the alias will be resolved first.  For "
"example, `@t{any/old/alias}' is always a valid alias."
msgstr ""

#. type: table
#: zsh.texi:16034
msgid ""
"Dependencies added to aliased modules are actually added to the resolved "
"module; these remain if the alias is removed.  It is valid to create an "
"alias whose name is one of the standard shell modules and which resolves to "
"a different module.  However, if a module has dependencies, it will not be "
"possible to use the module name as an alias as the module will already be "
"marked as a loadable module in its own right."
msgstr ""

#. type: table
#: zsh.texi:16039
msgid ""
"Apart from the above, aliases can be used in the @t{zmodload} command "
"anywhere module names are required.  However, aliases will not be shown in "
"lists of loaded modules with a bare `@t{zmodload}'."
msgstr ""

#. type: table
#: zsh.texi:16044
msgid ""
"For each @var{modalias} argument that was previously defined as a module "
"alias via @t{zmodload -A}, delete the alias.  If any was not defined, an "
"error is caused and the remainder of the line is ignored."
msgstr ""

#. type: table
#: zsh.texi:16054
msgid ""
"Note that @t{zsh} makes no distinction between modules that were linked into "
"the shell and modules that are loaded dynamically. In both cases this "
"builtin command has to be used to make available the builtins and other "
"things defined by modules (unless the module is autoloaded on these "
"definitions). This is true even for systems that don't support dynamic "
"loading of modules."
msgstr ""

#. type: findex
#: zsh.texi:16055 zsh.texi:32400
#, no-wrap
msgid "zparseopts"
msgstr ""

#. type: findex
#: zsh.texi:16058 zsh.texi:31902
#, no-wrap
msgid "zprof"
msgstr ""

#. type: table
#: zsh.texi:16060
msgid "See @ref{The zsh/zprof Module}."
msgstr ""

#. type: table
#: zsh.texi:16063
msgid "See @ref{The zsh/zpty Module}."
msgstr ""

#. type: t{#1}
#: zsh.texi:16064 zsh.texi:32396 zsh.texi:32397
#, no-wrap
msgid "zregexparse"
msgstr ""

#. type: findex
#: zsh.texi:16067 zsh.texi:30255
#, no-wrap
msgid "zsocket"
msgstr ""

#. type: table
#: zsh.texi:16069
msgid "See @ref{The zsh/net/socket Module}."
msgstr ""

#. type: findex
#: zsh.texi:16070 zsh.texi:32157
#, no-wrap
msgid "zstyle"
msgstr ""

#. type: findex
#: zsh.texi:16073 zsh.texi:30857
#, no-wrap
msgid "ztcp"
msgstr ""

#. type: table
#: zsh.texi:16075
msgid "See @ref{The zsh/net/tcp Module}."
msgstr ""

#. type: cindex
#: zsh.texi:16083
#, no-wrap
msgid "line editor"
msgstr ""

#. type: cindex
#: zsh.texi:16084
#, no-wrap
msgid "editor, line"
msgstr ""

#. type: pindex
#: zsh.texi:16089
#, no-wrap
msgid "ZLE, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:16093
msgid ""
"If the @t{ZLE} option is set (which it is by default in interactive shells)  "
"and the shell input is attached to the terminal, the user is able to edit "
"command lines."
msgstr ""

#. type: Plain text
#: zsh.texi:16100
msgid ""
"There are two display modes.  The first, multiline mode, is the default.  It "
"only works if the @t{TERM} parameter is set to a valid terminal type that "
"can move the cursor up.  The second, single line mode, is used if @t{TERM} "
"is invalid or incapable of moving the cursor up, or if the "
"@t{SINGLE_LINE_ZLE} option is set."
msgstr ""

#. type: pindex
#: zsh.texi:16100
#, no-wrap
msgid "SINGLE_LINE_ZLE, use of"
msgstr ""

#. type: cindex
#: zsh.texi:16101
#, no-wrap
msgid "ksh, editor mode"
msgstr ""

#. type: cindex
#: zsh.texi:16102
#, no-wrap
msgid "editor ksh style"
msgstr ""

#. type: Plain text
#: zsh.texi:16106
msgid ""
"This mode is similar to @cite{ksh}, and uses no termcap sequences.  If "
"@t{TERM} is \"emacs\", the @t{ZLE} option will be unset by default."
msgstr ""

#. type: vindex
#: zsh.texi:16108
#, no-wrap
msgid "BAUD, use of"
msgstr ""

#. type: vindex
#: zsh.texi:16109
#, no-wrap
msgid "COLUMNS, use of"
msgstr ""

#. type: vindex
#: zsh.texi:16110
#, no-wrap
msgid "LINES, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:16114
msgid ""
"The parameters @t{BAUD}, @t{COLUMNS}, and @t{LINES} are also used by the "
"line editor. See @ref{Parameters Used By The Shell}."
msgstr ""

#. type: vindex
#: zsh.texi:16116
#, no-wrap
msgid "zle_highlight, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:16125
msgid ""
"The parameter @t{zle_highlight} is also used by the line editor; see "
"@ref{Character Highlighting}.  Highlighting of special characters and the "
"region between the cursor and the mark (as set with @t{set-mark-command} in "
"Emacs mode, or by @t{visual-mode} in Vi mode) is enabled by default; consult "
"this reference for more information.  Irascible conservatives will wish to "
"know that all highlighting may be disabled by the following setting:"
msgstr ""

#. type: example
#: zsh.texi:16129
#, no-wrap
msgid "zle_highlight=(none)\n"
msgstr ""

#. type: Plain text
#: zsh.texi:16140
msgid ""
"In many places, references are made to the @t{numeric argument}.  This can "
"by default be entered in emacs mode by holding the alt key and typing a "
"number, or pressing escape before each digit, and in vi command mode by "
"typing the number before entering a command.  Generally the numeric argument "
"causes the next command entered to be repeated the specified number of "
"times, unless otherwise noted below; this is implemented by the "
"@t{digit-argument} widget. See also @ref{Arguments}for some other ways the "
"numeric argument can be modified."
msgstr ""

#. type: node
#: zsh.texi:16152 zsh.texi:16154 zsh.texi:16273
#, no-wrap
msgid "Keymaps"
msgstr ""

#. type: node
#: zsh.texi:16152 zsh.texi:16273 zsh.texi:16275 zsh.texi:16937
#, no-wrap
msgid "Zle Builtins"
msgstr ""

#. type: t{#1}
#: zsh.texi:16156 zsh.texi:16291 zsh.texi:21588 zsh.texi:31867 zsh.texi:31868
#, no-wrap
msgid "keymaps"
msgstr ""

#. type: cindex
#: zsh.texi:16157
#, no-wrap
msgid "key bindings"
msgstr ""

#. type: cindex
#: zsh.texi:16158
#, no-wrap
msgid "bindings, key"
msgstr ""

#. type: Plain text
#: zsh.texi:16161
msgid ""
"A keymap in ZLE contains a set of bindings between key sequences and ZLE "
"commands.  The empty key sequence cannot be bound."
msgstr ""

#. type: Plain text
#: zsh.texi:16165
msgid ""
"There can be any number of keymaps at any time, and each keymap has one or "
"more names.  If all of a keymap's names are deleted, it disappears."
msgstr ""

#. type: findex
#: zsh.texi:16165
#, no-wrap
msgid "bindkey, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:16167
msgid "@t{bindkey} can be used to manipulate keymap names."
msgstr ""

#. type: Plain text
#: zsh.texi:16170
msgid "Initially, there are eight keymaps:"
msgstr ""

#. type: t{#1}
#: zsh.texi:16173
#, no-wrap
msgid "emacs"
msgstr ""

#. type: table
#: zsh.texi:16175
msgid "EMACS emulation"
msgstr ""

#. type: t{#1}
#: zsh.texi:16175
#, no-wrap
msgid "viins"
msgstr ""

#. type: table
#: zsh.texi:16177
msgid "vi emulation - insert mode"
msgstr ""

#. type: t{#1}
#: zsh.texi:16177
#, no-wrap
msgid "vicmd"
msgstr ""

#. type: table
#: zsh.texi:16179
msgid "vi emulation - command mode"
msgstr ""

#. type: t{#1}
#: zsh.texi:16179
#, no-wrap
msgid "viopp"
msgstr ""

#. type: table
#: zsh.texi:16181
msgid "vi emulation - operator pending"
msgstr ""

#. type: t{#1}
#: zsh.texi:16181
#, no-wrap
msgid "visual"
msgstr ""

#. type: table
#: zsh.texi:16183
msgid "vi emulation - selection active"
msgstr ""

#. type: t{#1}
#: zsh.texi:16183 zsh.texi:19003
#, no-wrap
msgid "isearch"
msgstr ""

#. type: table
#: zsh.texi:16185
msgid "incremental search mode"
msgstr ""

#. type: table
#: zsh.texi:16187
msgid "read a command name"
msgstr ""

#. type: t{#1}
#: zsh.texi:16187
#, no-wrap
msgid ".safe"
msgstr ""

#. type: table
#: zsh.texi:16189
msgid "fallback keymap"
msgstr ""

#. type: Plain text
#: zsh.texi:16196
msgid ""
"The `@t{.safe}' keymap is special.  It can never be altered, and the name "
"can never be removed.  However, it can be linked to other names, which can "
"be removed.  In the future other special keymaps may be added; users should "
"avoid using names beginning with `@t{.}' for their own keymaps."
msgstr ""

#. type: vindex
#: zsh.texi:16198
#, no-wrap
msgid "VISUAL"
msgstr ""

#. type: vindex
#: zsh.texi:16199
#, no-wrap
msgid "EDITOR"
msgstr ""

#. type: Plain text
#: zsh.texi:16206
msgid ""
"In addition to these names, either `@t{emacs}' or `@t{viins}' is also linked "
"to the name `@t{main}'.  If one of the @t{VISUAL} or @t{EDITOR} environment "
"variables contain the string `@t{vi}' when the shell starts up then it will "
"be `@t{viins}', otherwise it will be `@t{emacs}'.  @t{bindkey}'s @t{-e} and "
"@t{-v} options provide a convenient way to override this default choice."
msgstr ""

#. type: Plain text
#: zsh.texi:16210
msgid ""
"When the editor starts up, it will select the `@t{main}' keymap.  If that "
"keymap doesn't exist, it will use `@t{.safe}' instead."
msgstr ""

#. type: Plain text
#: zsh.texi:16216
msgid ""
"In the `@t{.safe}' keymap, each single key is bound to @t{self-insert}, "
"except for ^J (line feed) and ^M (return) which are bound to "
"@t{accept-line}.  This is deliberately not pleasant to use; if you are using "
"it, it means you deleted the main keymap, and you should put it back."
msgstr ""

#. type: subsection
#: zsh.texi:16219
#, no-wrap
msgid "Reading Commands"
msgstr ""

#. type: Plain text
#: zsh.texi:16228
msgid ""
"When ZLE is reading a command from the terminal, it may read a sequence that "
"is bound to some command and is also a prefix of a longer bound string.  In "
"this case ZLE will wait a certain time to see if more characters are typed, "
"and if not (or they don't match any longer string) it will execute the "
"binding.  This timeout is defined by the @t{KEYTIMEOUT} parameter; its "
"default is 0.4 sec.  There is no timeout if the prefix string is not itself "
"bound to a command."
msgstr ""

#. type: Plain text
#: zsh.texi:16237
msgid ""
"The key timeout is also applied when ZLE is reading the bytes from a "
"multibyte character string when it is in the appropriate mode.  (This "
"requires that the shell was compiled with multibyte mode enabled; typically "
"also the locale has characters with the UTF-8 encoding, although any "
"multibyte encoding known to the operating system is supported.)  If the "
"second or a subsequent byte is not read within the timeout period, the shell "
"acts as if @t{?} were typed and resets the input state."
msgstr ""

#. type: Plain text
#: zsh.texi:16246
msgid ""
"As well as ZLE commands, key sequences can be bound to other strings, by "
"using `@t{bindkey -s}'.  When such a sequence is read, the replacement "
"string is pushed back as input, and the command reading process starts again "
"using these fake keystrokes.  This input can itself invoke further "
"replacement strings, but in order to detect loops the process will be "
"stopped if there are twenty such replacements without a real command being "
"read."
msgstr ""

#. type: Plain text
#: zsh.texi:16251
msgid ""
"A key sequence typed by the user can be turned into a command name for use "
"in user-defined widgets with the @t{read-command} widget, described in "
"@ref{Miscellaneous} below."
msgstr ""

#. type: subsection
#: zsh.texi:16254
#, no-wrap
msgid "Local Keymaps"
msgstr ""

#. type: cindex
#: zsh.texi:16256
#, no-wrap
msgid "local keymaps"
msgstr ""

#. type: Plain text
#: zsh.texi:16262
msgid ""
"While for normal editing a single keymap is used exclusively, in many modes "
"a local keymap allows for some keys to be customised. For example, in an "
"incremental search mode, a binding in the @t{isearch} keymap will override a "
"binding in the @t{main} keymap but all keys that are not overridden can "
"still be used."
msgstr ""

#. type: Plain text
#: zsh.texi:16271
msgid ""
"If a key sequence is defined in a local keymap, it will hide a key sequence "
"in the global keymap that is a prefix of that sequence. An example of this "
"occurs with the binding of @t{iw} in @t{viopp} as this hides the binding of "
"@t{i} in @t{vicmd}. However, a longer sequence in the global keymap that "
"shares the same prefix can still apply so for example the binding of @t{^Xa} "
"in the global keymap will be unaffected by the binding of @t{^Xb} in the "
"local keymap."
msgstr ""

#. type: node
#: zsh.texi:16273 zsh.texi:16937 zsh.texi:16939 zsh.texi:16964
#, no-wrap
msgid "Zle Widgets"
msgstr ""

#. type: cindex
#: zsh.texi:16277
#, no-wrap
msgid "zle, builtin commands"
msgstr ""

#. type: Plain text
#: zsh.texi:16283
msgid ""
"The ZLE module contains three related builtin commands. The @t{bindkey} "
"command manipulates keymaps and key bindings; the @t{vared} command invokes "
"ZLE on the value of a shell parameter; and the @t{zle} command manipulates "
"editing widgets and allows command line access to ZLE commands from within "
"shell functions."
msgstr ""

#. type: cindex
#: zsh.texi:16287
#, no-wrap
msgid "keys, rebinding"
msgstr ""

#. type: cindex
#: zsh.texi:16288
#, no-wrap
msgid "rebinding keys"
msgstr ""

#. type: cindex
#: zsh.texi:16289
#, no-wrap
msgid "keys, binding"
msgstr ""

#. type: cindex
#: zsh.texi:16290
#, no-wrap
msgid "binding keys"
msgstr ""

#. type: item
#: zsh.texi:16292
#, no-wrap
msgid "@t{bindkey} [ @var{options} ] @t{-l} [ @t{-L} ] [ @var{keymap} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:16293
#, no-wrap
msgid "@t{bindkey} [ @var{options} ] @t{-d}"
msgstr ""

#. type: itemx
#: zsh.texi:16294
#, no-wrap
msgid "@t{bindkey} [ @var{options} ] @t{-D} @var{keymap} ..."
msgstr ""

#. type: itemx
#: zsh.texi:16295
#, no-wrap
msgid "@t{bindkey} [ @var{options} ] @t{-A} @var{old-keymap new-keymap}"
msgstr ""

#. type: itemx
#: zsh.texi:16296
#, no-wrap
msgid "@t{bindkey} [ @var{options} ] @t{-N} @var{new-keymap} [ @var{old-keymap} ]"
msgstr ""

#. type: itemx
#: zsh.texi:16297
#, no-wrap
msgid "@t{bindkey} [ @var{options} ] @t{-m}"
msgstr ""

#. type: itemx
#: zsh.texi:16298
#, no-wrap
msgid "@t{bindkey} [ @var{options} ] @t{-r} @var{in-string} ..."
msgstr ""

#. type: itemx
#: zsh.texi:16299
#, no-wrap
msgid "@t{bindkey} [ @var{options} ] @t{-s} @var{in-string out-string} ..."
msgstr ""

#. type: itemx
#: zsh.texi:16300
#, no-wrap
msgid "@t{bindkey} [ @var{options} ] @var{in-string command} ..."
msgstr ""

#. type: itemx
#: zsh.texi:16301
#, no-wrap
msgid "@t{bindkey} [ @var{options} ] [ @var{in-string} ]"
msgstr ""

#. type: table
#: zsh.texi:16305
msgid ""
"@t{bindkey}'s options can be divided into three categories: keymap selection "
"for the current command, operation selection, and others.  The keymap "
"selection options are:"
msgstr ""

#. type: table
#: zsh.texi:16312
msgid ""
"Selects keymap `@t{emacs}' for any operations by the current command, and "
"also links `@t{emacs}' to `@t{main}' so that it is selected by default the "
"next time the editor starts."
msgstr ""

#. type: table
#: zsh.texi:16317
msgid ""
"Selects keymap `@t{viins}' for any operations by the current command, and "
"also links `@t{viins}' to `@t{main}' so that it is selected by default the "
"next time the editor starts."
msgstr ""

#. type: table
#: zsh.texi:16320
msgid "Selects keymap `@t{vicmd}' for any operations by the current command."
msgstr ""

#. type: item
#: zsh.texi:16321
#, no-wrap
msgid "@t{-M} @var{keymap}"
msgstr ""

#. type: table
#: zsh.texi:16324
msgid ""
"The @var{keymap} specifies a keymap name that is selected for any operations "
"by the current command."
msgstr ""

#. type: table
#: zsh.texi:16331
msgid ""
"If a keymap selection is required and none of the options above are used, "
"the `@t{main}' keymap is used.  Some operations do not permit a keymap to be "
"selected, namely:"
msgstr ""

#. type: table
#: zsh.texi:16337
msgid ""
"List all existing keymap names; if any arguments are given, list just those "
"keymaps."
msgstr ""

#. type: table
#: zsh.texi:16346
msgid ""
"If the @t{-L} option is also used, list in the form of @t{bindkey} commands "
"to create or link the keymaps.  `@t{bindkey -lL main}' shows which keymap is "
"linked to `@t{main}', if any, and hence if the standard emacs or vi "
"emulation is in effect.  This option does not show the @t{.safe} keymap "
"because it cannot be created in that fashion; however, neither is "
"`@t{bindkey -lL .safe}' reported as an error, it simply outputs nothing."
msgstr ""

#. type: table
#: zsh.texi:16349
msgid "Delete all existing keymaps and reset to the default state."
msgstr ""

#. type: item
#: zsh.texi:16350
#, no-wrap
msgid "@t{-D} @var{keymap} ..."
msgstr ""

#. type: table
#: zsh.texi:16352
msgid "Delete the named @var{keymap}s."
msgstr ""

#. type: item
#: zsh.texi:16353
#, no-wrap
msgid "@t{-A} @var{old-keymap new-keymap}"
msgstr ""

#. type: table
#: zsh.texi:16358
msgid ""
"Make the @var{new-keymap} name an alias for @var{old-keymap}, so that both "
"names refer to the same keymap.  The names have equal standing; if either is "
"deleted, the other remains.  If there is already a keymap with the "
"@var{new-keymap} name, it is deleted."
msgstr ""

#. type: item
#: zsh.texi:16359
#, no-wrap
msgid "@t{-N} @var{new-keymap} [ @var{old-keymap} ]"
msgstr ""

#. type: table
#: zsh.texi:16364
msgid ""
"Create a new keymap, named @var{new-keymap}.  If a keymap already has that "
"name, it is deleted.  If an @var{old-keymap} name is given, the new keymap "
"is initialized to be a duplicate of it, otherwise the new keymap will be "
"empty."
msgstr ""

#. type: table
#: zsh.texi:16371
msgid ""
"To use a newly created keymap, it should be linked to @t{main}.  Hence the "
"sequence of commands to create and use a new keymap `@t{mymap}' initialized "
"from the @t{emacs} keymap (which remains unchanged) is:"
msgstr ""

#. type: example
#: zsh.texi:16376
#, no-wrap
msgid ""
"bindkey -N mymap emacs\n"
"bindkey -A mymap main\n"
msgstr ""

#. type: table
#: zsh.texi:16382
msgid ""
"Note that while `@t{bindkey -A} @var{newmap} @t{main}' will work when "
"@var{newmap} is @t{emacs} or @t{viins}, it will not work for @t{vicmd}, as "
"switching from vi insert to command mode becomes impossible."
msgstr ""

#. type: table
#: zsh.texi:16386
msgid ""
"The following operations act on the `@t{main}' keymap if no keymap selection "
"option was given:"
msgstr ""

#. type: table
#: zsh.texi:16392
msgid ""
"Add the built-in set of meta-key bindings to the selected keymap.  Only keys "
"that are unbound or bound to @t{self-insert} are affected."
msgstr ""

#. type: item
#: zsh.texi:16393
#, no-wrap
msgid "@t{-r} @var{in-string} ..."
msgstr ""

#. type: table
#: zsh.texi:16396
msgid ""
"Unbind the specified @var{in-string}s in the selected keymap.  This is "
"exactly equivalent to binding the strings to @t{undefined-key}."
msgstr ""

#. type: table
#: zsh.texi:16399
msgid "When @t{-R} is also used, interpret the @var{in-string}s as ranges."
msgstr ""

#. type: table
#: zsh.texi:16405
msgid ""
"When @t{-p} is also used, the @var{in-string}s specify prefixes.  Any "
"binding that has the given @var{in-string} as a prefix, not including the "
"binding for the @var{in-string} itself, if any, will be removed.  For "
"example,"
msgstr ""

#. type: example
#: zsh.texi:16409
#, no-wrap
msgid "bindkey -rpM viins '^['\n"
msgstr ""

#. type: table
#: zsh.texi:16416
msgid ""
"will remove all bindings in the vi-insert keymap beginning with an escape "
"character (probably cursor keys), but leave the binding for the escape "
"character itself (probably @t{vi-cmd-mode}).  This is incompatible with the "
"option @t{-R}."
msgstr ""

#. type: item
#: zsh.texi:16417
#, no-wrap
msgid "@t{-s} @var{in-string out-string} ..."
msgstr ""

#. type: table
#: zsh.texi:16422
msgid ""
"Bind each @var{in-string} to each @var{out-string}.  When @var{in-string} is "
"typed, @var{out-string} will be pushed back and treated as input to the line "
"editor.  When @t{-R} is also used, interpret the @var{in-string}s as ranges."
msgstr ""

#. type: table
#: zsh.texi:16426
msgid ""
"Note that both @var{in-string} and @var{out-string} are subject to the same "
"form of interpretation, as described below."
msgstr ""

#. type: item
#: zsh.texi:16427
#, no-wrap
msgid "@var{in-string command} ..."
msgstr ""

#. type: table
#: zsh.texi:16430
msgid ""
"Bind each @var{in-string} to each @var{command}.  When @t{-R} is used, "
"interpret the @var{in-string}s as ranges."
msgstr ""

#. type: item
#: zsh.texi:16431
#, no-wrap
msgid "[ @var{in-string} ]"
msgstr ""

#. type: table
#: zsh.texi:16438
msgid ""
"List key bindings.  If an @var{in-string} is specified, the binding of that "
"string in the selected keymap is displayed.  Otherwise, all key bindings in "
"the selected keymap are displayed.  (As a special case, if the @t{-e} or "
"@t{-v} option is used alone, the keymap is @emph{not} displayed - the "
"implicit linking of keymaps is the only thing that happens.)"
msgstr ""

#. type: table
#: zsh.texi:16443
msgid ""
"When the option @t{-p} is used, the @var{in-string} must be present.  The "
"listing shows all bindings which have the given key sequence as a prefix, "
"not including any bindings for the key sequence itself."
msgstr ""

#. type: table
#: zsh.texi:16447
msgid ""
"When the @t{-L} option is used, the list is in the form of @t{bindkey} "
"commands to create the key bindings."
msgstr ""

#. type: table
#: zsh.texi:16454
msgid ""
"When the @t{-R} option is used as noted above, a valid range consists of two "
"characters, with an optional `@t{-}' between them.  All characters between "
"the two specified, inclusive, are bound as specified."
msgstr ""

#. type: table
#: zsh.texi:16458
msgid ""
"For either @var{in-string} or @var{out-string}, the following escape "
"sequences are recognised:"
msgstr ""

#. type: item
#: zsh.texi:16465
#, no-wrap
msgid "@t{\\e}, @t{\\E}"
msgstr ""

#. type: item
#: zsh.texi:16477
#, no-wrap
msgid "@t{\\}@var{NNN}"
msgstr ""

#. type: item
#: zsh.texi:16485
#, no-wrap
msgid "@t{\\M}[@t{-}]@var{X}"
msgstr ""

#. type: table
#: zsh.texi:16487
msgid "character with meta bit set"
msgstr ""

#. type: item
#: zsh.texi:16487
#, no-wrap
msgid "@t{\\C}[@t{-}]@var{X}"
msgstr ""

#. type: table
#: zsh.texi:16489 zsh.texi:16491
msgid "control character"
msgstr ""

#. type: item
#: zsh.texi:16489
#, no-wrap
msgid "@t{^}@var{X}"
msgstr ""

#. type: table
#: zsh.texi:16499
msgid ""
"In all other cases, `@t{\\}' escapes the following character.  Delete is "
"written as `@t{^?}'.  Note that `@t{\\M^?}' and `@t{^\\M?}' are not the "
"same, and that (unlike emacs), the bindings `@t{\\M-}@var{X}' and "
"`@t{\\e}@var{X}' are entirely distinct, although they are initialized to the "
"same bindings by `@t{bindkey -m}'."
msgstr ""

#. type: cindex
#: zsh.texi:16501
#, no-wrap
msgid "parameters, editing"
msgstr ""

#. type: cindex
#: zsh.texi:16502
#, no-wrap
msgid "editing parameters"
msgstr ""

#. type: item
#: zsh.texi:16504
#, no-wrap
msgid "@t{vared }[ @t{-Aacghe} ] [ @t{-p} @var{prompt} ] [ @t{-r} @var{rprompt} ]"
msgstr ""

#. type: itemx
#: zsh.texi:16505
#, no-wrap
msgid "@t{@ @ @ @ @ @ }[ @t{-M} @var{main-keymap} ] [ @t{-m} @var{vicmd-keymap} ]"
msgstr ""

#. type: itemx
#: zsh.texi:16506
#, no-wrap
msgid "@t{@ @ @ @ @ @ }[ @t{-i} @var{init-widget} ] [ @t{-f} @var{finish-widget} ]"
msgstr ""

#. type: itemx
#: zsh.texi:16507
#, no-wrap
msgid "@t{@ @ @ @ @ @ }[ @t{-t} @var{tty} ] @var{name}"
msgstr ""

#. type: table
#: zsh.texi:16518
msgid ""
"The value of the parameter @var{name} is loaded into the edit buffer, and "
"the line editor is invoked.  When the editor exits, @var{name} is set to the "
"string value returned by the editor.  When the @t{-c} flag is given, the "
"parameter is created if it doesn't already exist.  The @t{-a} flag may be "
"given with @t{-c} to create an array parameter, or the @t{-A} flag to create "
"an associative array.  If the type of an existing parameter does not match "
"the type to be created, the parameter is unset and recreated.  The @t{-g} "
"flag may be given to suppress warnings from the @t{WARN_CREATE_GLOBAL} and "
"@t{WARN_NESTED_VAR} options."
msgstr ""

#. type: table
#: zsh.texi:16526
msgid ""
"If an array or array slice is being edited, separator characters as defined "
"in @t{$IFS} will be shown quoted with a backslash, as will backslashes "
"themselves.  Conversely, when the edited text is split into an array, a "
"backslash quotes an immediately following separator character or backslash; "
"no other special handling of backslashes, or any handling of quotes, is "
"performed."
msgstr ""

#. type: table
#: zsh.texi:16531
msgid ""
"Individual elements of existing array or associative array parameters may be "
"edited by using subscript syntax on @var{name}.  New elements are created "
"automatically, even without @t{-c}."
msgstr ""

#. type: table
#: zsh.texi:16539
msgid ""
"If the @t{-p} flag is given, the following string will be taken as the "
"prompt to display at the left.  If the @t{-r} flag is given, the following "
"string gives the prompt to display at the right.  If the @t{-h} flag is "
"specified, the history can be accessed from ZLE. If the @t{-e} flag is "
"given, typing @t{^D} (Control-D) on an empty line causes @t{vared} to exit "
"immediately with a non-zero return value."
msgstr ""

#. type: table
#: zsh.texi:16547
msgid ""
"The @t{-M} option gives a keymap to link to the @t{main} keymap during "
"editing, and the @t{-m} option gives a keymap to link to the @t{vicmd} "
"keymap during editing.  For vi-style editing, this allows a pair of keymaps "
"to override @t{viins} and @t{vicmd}.  For emacs-style editing, only @t{-M} "
"is normally needed but the @t{-m} option may still be used.  On exit, the "
"previous keymaps will be restored."
msgstr ""

#. type: table
#: zsh.texi:16552
msgid ""
"@t{Vared} calls the usual `@t{zle-line-init}' and `@t{zle-line-finish}' "
"hooks before and after it takes control. Using the @t{-i} and @t{-f} "
"options, it is possible to replace these with other custom widgets."
msgstr ""

#. type: table
#: zsh.texi:16557
msgid ""
"If `@t{-t} @var{tty}' is given, @var{tty} is the name of a terminal device "
"to be used instead of the default @t{/dev/tty}.  If @var{tty} does not refer "
"to a terminal an error is reported."
msgstr ""

#. type: cindex
#: zsh.texi:16559
#, no-wrap
msgid "widgets, rebinding"
msgstr ""

#. type: cindex
#: zsh.texi:16560
#, no-wrap
msgid "rebinding widgets"
msgstr ""

#. type: cindex
#: zsh.texi:16561
#, no-wrap
msgid "widgets, binding"
msgstr ""

#. type: cindex
#: zsh.texi:16562
#, no-wrap
msgid "binding widgets"
msgstr ""

#. type: cindex
#: zsh.texi:16563
#, no-wrap
msgid "widgets, invoking"
msgstr ""

#. type: cindex
#: zsh.texi:16564
#, no-wrap
msgid "invoking widgets"
msgstr ""

#. type: cindex
#: zsh.texi:16565
#, no-wrap
msgid "widgets, calling"
msgstr ""

#. type: cindex
#: zsh.texi:16566
#, no-wrap
msgid "calling widgets"
msgstr ""

#. type: cindex
#: zsh.texi:16567
#, no-wrap
msgid "widgets, defining"
msgstr ""

#. type: cindex
#: zsh.texi:16568
#, no-wrap
msgid "defining widgets"
msgstr ""

#. type: itemx
#: zsh.texi:16570
#, no-wrap
msgid "@t{zle} @t{-l} [ @t{-L} | @t{-a} ] [ @var{string} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:16571
#, no-wrap
msgid "@t{zle} @t{-D} @var{widget} ..."
msgstr ""

#. type: itemx
#: zsh.texi:16572
#, no-wrap
msgid "@t{zle} @t{-A} @var{old-widget} @var{new-widget}"
msgstr ""

#. type: itemx
#: zsh.texi:16573
#, no-wrap
msgid "@t{zle} @t{-N} @var{widget} [ @var{function} ]"
msgstr ""

#. type: itemx
#: zsh.texi:16574
#, no-wrap
msgid "@t{zle} @t{-f} @var{flag} [ @var{flag}... ]"
msgstr ""

#. type: itemx
#: zsh.texi:16575
#, no-wrap
msgid "@t{zle} @t{-C} @var{widget} @var{completion-widget} @var{function}"
msgstr ""

#. type: itemx
#: zsh.texi:16576
#, no-wrap
msgid "@t{zle} @t{-R} [ @t{-c} ] [ @var{display-string} ] [ @var{string} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:16577
#, no-wrap
msgid "@t{zle} @t{-M} @var{string}"
msgstr ""

#. type: itemx
#: zsh.texi:16578
#, no-wrap
msgid "@t{zle} @t{-U} @var{string}"
msgstr ""

#. type: itemx
#: zsh.texi:16579
#, no-wrap
msgid "@t{zle} @t{-K} @var{keymap}"
msgstr ""

#. type: itemx
#: zsh.texi:16580
#, no-wrap
msgid "@t{zle} @t{-F} [ @t{-L} | @t{-w} ] [ @var{fd} [ @var{handler} ] ]"
msgstr ""

#. type: itemx
#: zsh.texi:16581
#, no-wrap
msgid "@t{zle} @t{-I}"
msgstr ""

#. type: itemx
#: zsh.texi:16582
#, no-wrap
msgid "@t{zle} @t{-T} [ @t{tc} @var{function} | @t{-r} @t{tc} | @t{-L} ]"
msgstr ""

#. type: itemx
#: zsh.texi:16583
#, no-wrap
msgid ""
"@t{zle} @var{widget} [ @t{-n} @var{num} ] [ @t{-f} @var{flag} ] [ @t{-Nw} ] "
"[ @t{-K} @var{keymap} ] @var{args} ..."
msgstr ""

#. type: table
#: zsh.texi:16586
msgid "The @t{zle} builtin performs a number of different actions concerning ZLE."
msgstr ""

#. type: table
#: zsh.texi:16594
msgid ""
"With no options and no arguments, only the return status will be set.  It is "
"zero if ZLE is currently active and widgets could be invoked using this "
"builtin command and non-zero otherwise.  Note that even if non-zero status "
"is returned, zle may still be active as part of the completion system; this "
"does not allow direct calls to ZLE widgets."
msgstr ""

#. type: table
#: zsh.texi:16597
msgid "Otherwise, which operation it performs depends on its options:"
msgstr ""

#. type: item
#: zsh.texi:16600
#, no-wrap
msgid "@t{-l} [ @t{-L} | @t{-a} ] [ @var{string} ]"
msgstr ""

#. type: table
#: zsh.texi:16604
msgid ""
"List all existing user-defined widgets.  If the @t{-L} option is used, list "
"in the form of @t{zle} commands to create the widgets."
msgstr ""

#. type: table
#: zsh.texi:16608
msgid ""
"When combined with the @t{-a} option, all widget names are listed, including "
"the builtin ones. In this case the @t{-L} option is ignored."
msgstr ""

#. type: table
#: zsh.texi:16616
msgid ""
"If at least one @var{string} is given, and @t{-a} is present or @t{-L} is "
"not used, nothing will be printed.  The return status will be zero if all "
"@var{string}s are names of existing widgets and non-zero if at least one "
"@var{string} is not a name of a defined widget.  If @t{-a} is also present, "
"all widget names are used for the comparison including builtin widgets, else "
"only user-defined widgets are used."
msgstr ""

#. type: table
#: zsh.texi:16621
msgid ""
"If at least one @var{string} is present and the @t{-L} option is used, "
"user-defined widgets matching any @var{string} are listed in the form of "
"@t{zle} commands to create the widgets."
msgstr ""

#. type: item
#: zsh.texi:16622
#, no-wrap
msgid "@t{-D} @var{widget} ..."
msgstr ""

#. type: table
#: zsh.texi:16624
msgid "Delete the named @var{widget}s."
msgstr ""

#. type: item
#: zsh.texi:16625
#, no-wrap
msgid "@t{-A} @var{old-widget} @var{new-widget}"
msgstr ""

#. type: table
#: zsh.texi:16630
msgid ""
"Make the @var{new-widget} name an alias for @var{old-widget}, so that both "
"names refer to the same widget.  The names have equal standing; if either is "
"deleted, the other remains.  If there is already a widget with the "
"@var{new-widget} name, it is deleted."
msgstr ""

#. type: item
#: zsh.texi:16631
#, no-wrap
msgid "@t{-N} @var{widget} [ @var{function} ]"
msgstr ""

#. type: table
#: zsh.texi:16638
msgid ""
"Create a user-defined widget.  If there is already a widget with the "
"specified name, it is overwritten.  When the new widget is invoked from "
"within the editor, the specified shell @var{function} is called.  If no "
"function name is specified, it defaults to the same name as the widget.  For "
"further information, see @ref{Zle Widgets}."
msgstr ""

#. type: item
#: zsh.texi:16639
#, no-wrap
msgid "@t{-f} @var{flag} [ @var{flag}... ]"
msgstr ""

#. type: table
#: zsh.texi:16641
msgid ""
"Set various flags on the running widget.  Possible values for @var{flag} "
"are:"
msgstr ""

#. type: table
#: zsh.texi:16649
msgid ""
"@t{yank} for indicating that the widget has yanked text into the buffer.  If "
"the widget is wrapping an existing internal widget, no further action is "
"necessary, but if it has inserted the text manually, then it should also "
"take care to set @t{YANK_START} and @t{YANK_END} correctly.  @t{yankbefore} "
"does the same but is used when the yanked text appears after the cursor."
msgstr ""

#. type: table
#: zsh.texi:16655
msgid ""
"@t{kill} for indicating that text has been killed into the cutbuffer.  When "
"repeatedly invoking a kill widget, text is appended to the cutbuffer instead "
"of replacing it, but when wrapping such widgets, it is necessary to call "
"`@t{zle -f kill}' to retain this effect."
msgstr ""

#. type: table
#: zsh.texi:16663
msgid ""
"@t{vichange} for indicating that the widget represents a vi change that can "
"be repeated as a whole with `@t{vi-repeat-change}'. The flag should be set "
"early in the function before inspecting the value of @t{NUMERIC} or invoking "
"other widgets. This has no effect for a widget invoked from insert mode. If "
"insert mode is active when the widget finishes, the change extends until "
"next returning to command mode."
msgstr ""

#. type: cindex
#: zsh.texi:16664
#, no-wrap
msgid "completion widgets, creating"
msgstr ""

#. type: item
#: zsh.texi:16665
#, no-wrap
msgid "@t{-C} @var{widget} @var{completion-widget} @var{function}"
msgstr ""

#. type: table
#: zsh.texi:16672
msgid ""
"Create a user-defined completion widget named @var{widget}. The completion "
"widget will behave like the built-in completion-widget whose name is given "
"as @var{completion-widget}. To generate the completions, the shell function "
"@var{function} will be called.  For further information, see @ref{Completion "
"Widgets}."
msgstr ""

#. type: item
#: zsh.texi:16673
#, no-wrap
msgid "@t{-R} [ @t{-c} ] [ @var{display-string} ] [ @var{string} ... ]"
msgstr ""

#. type: table
#: zsh.texi:16677
msgid ""
"Redisplay the command line.  If a @var{display-string} is given and not "
"empty, this is shown in the status line (immediately below the line being "
"edited)."
msgstr ""

#. type: table
#: zsh.texi:16683
msgid ""
"If the optional @var{string}s are given they are listed below the prompt in "
"the same way as completion lists are printed. If no @var{string}s are given "
"but the @t{-c} option is used such a list is cleared."
msgstr ""

#. type: table
#: zsh.texi:16688
msgid ""
"Note that immediately after returning from running widgets, the command line "
"will be redisplayed and the strings displayed will be erased.  Therefore, "
"this option is only useful for widgets that do not exit immediately after "
"using it."
msgstr ""

#. type: table
#: zsh.texi:16694
msgid ""
"This command can safely be called outside user defined widgets; if zle is "
"active, the display will be refreshed, while if zle is not active, the "
"command has no effect.  In this case there will usually be no other "
"arguments."
msgstr ""

#. type: table
#: zsh.texi:16697
msgid "The status is zero if zle was active, else one."
msgstr ""

#. type: item
#: zsh.texi:16698
#, no-wrap
msgid "@t{-M} @var{string}"
msgstr ""

#. type: table
#: zsh.texi:16704
msgid ""
"As with the @t{-R} option, the @var{string} will be displayed below the "
"command line; unlike the @t{-R} option, the string will not be put into the "
"status line but will instead be printed normally below the prompt.  This "
"means that the @var{string} will still be displayed after the widget returns "
"(until it is overwritten by subsequent commands)."
msgstr ""

#. type: item
#: zsh.texi:16705
#, no-wrap
msgid "@t{-U} @var{string}"
msgstr ""

#. type: table
#: zsh.texi:16709
msgid ""
"This pushes the characters in the @var{string} onto the input stack of ZLE.  "
"After the widget currently executed finishes ZLE will behave as if the "
"characters in the @var{string} were typed by the user."
msgstr ""

#. type: table
#: zsh.texi:16715
msgid ""
"As ZLE uses a stack, if this option is used repeatedly the last string "
"pushed onto the stack will be processed first.  However, the characters in "
"each @var{string} will be processed in the order in which they appear in the "
"string."
msgstr ""

#. type: item
#: zsh.texi:16716
#, no-wrap
msgid "@t{-K} @var{keymap}"
msgstr ""

#. type: table
#: zsh.texi:16719
msgid ""
"Selects the keymap named @var{keymap}.  An error message will be displayed "
"if there is no such keymap."
msgstr ""

#. type: table
#: zsh.texi:16724
msgid ""
"This keymap selection affects the interpretation of following keystrokes "
"within this invocation of ZLE.  Any following invocation (e.g., the next "
"command line) will start as usual with the `@t{main}' keymap selected."
msgstr ""

#. type: item
#: zsh.texi:16725
#, no-wrap
msgid "@t{-F} [ @t{-L} | @t{-w} ] [ @var{fd} [ @var{handler} ] ]"
msgstr ""

#. type: table
#: zsh.texi:16728
msgid ""
"Only available if your system supports one of the `poll' or `select' system "
"calls; most modern systems do."
msgstr ""

#. type: table
#: zsh.texi:16737
msgid ""
"Installs @var{handler} (the name of a shell function) to handle input from "
"file descriptor @var{fd}.  Installing a handler for an @var{fd} which is "
"already handled causes the existing handler to be replaced.  Any number of "
"handlers for any number of readable file descriptors may be installed.  Note "
"that zle makes no attempt to check whether this @var{fd} is actually "
"readable when installing the handler.  The user must make their own "
"arrangements for handling the file descriptor when zle is not active."
msgstr ""

#. type: table
#: zsh.texi:16747
msgid ""
"When zle is attempting to read data, it will examine both the terminal and "
"the list of handled @var{fd}'s.  If data becomes available on a handled "
"@var{fd}, zle calls @var{handler} with the fd which is ready for reading as "
"the first argument.  Under normal circumstances this is the only argument, "
"but if an error was detected, a second argument provides details: `@t{hup}' "
"for a disconnect, `@t{nval}' for a closed or otherwise invalid descriptor, "
"or `@t{err}' for any other condition.  Systems that support only the "
"`select' system call always use `@t{err}'."
msgstr ""

#. type: table
#: zsh.texi:16758
msgid ""
"If the option @t{-w} is also given, the @var{handler} is instead a line "
"editor widget, typically a shell function made into a widget using `@t{zle "
"-N}'.  In that case @var{handler} can use all the facilities of zle to "
"update the current editing line.  Note, however, that as handling @var{fd} "
"takes place at a low level changes to the display will not automatically "
"appear; the widget should call `@t{zle -R}' to force redisplay.  As of this "
"writing, widget handlers only support a single argument and thus are never "
"passed a string for error state, so widgets must be prepared to test the "
"descriptor themselves."
msgstr ""

#. type: table
#: zsh.texi:16763
msgid ""
"If either type of handler produces output to the terminal, it should call "
"`@t{zle -I}' before doing so (see below).  Handlers should not attempt to "
"read from the terminal."
msgstr ""

#. type: table
#: zsh.texi:16768
msgid ""
"If no @var{handler} is given, but an @var{fd} is present, any handler for "
"that @var{fd} is removed.  If there is none, an error message is printed and "
"status 1 is returned."
msgstr ""

#. type: table
#: zsh.texi:16772
msgid ""
"If no arguments are given, or the @t{-L} option is supplied, a list of "
"handlers is printed in a form which can be stored for later execution."
msgstr ""

#. type: table
#: zsh.texi:16777
msgid ""
"An @var{fd} (but not a @var{handler}) may optionally be given with the "
"@t{-L} option; in this case, the function will list the handler if any, else "
"silently return status 1."
msgstr ""

#. type: table
#: zsh.texi:16783
msgid ""
"Note that this feature should be used with care.  Activity on one of the "
"@var{fd}'s which is not properly handled can cause the terminal to become "
"unusable.  Removing an @var{fd} handler from within a signal trap may cause "
"unpredictable behavior."
msgstr ""

#. type: table
#: zsh.texi:16792
msgid ""
"Here is a simple example of using this feature.  A connection to a remote "
"TCP port is created using the ztcp command; see @ref{The zsh/net/tcp "
"Module}.  Then a handler is installed which simply prints out any data which "
"arrives on this connection.  Note that `select' will indicate that the file "
"descriptor needs handling if the remote side has closed the connection; we "
"handle that by testing for a failed read."
msgstr ""

#. type: example
#: zsh.texi:16811
#, no-wrap
msgid ""
"if ztcp pwspc 2811; then\n"
"  tcpfd=$REPLY\n"
"  handler() @{\n"
"    zle -I\n"
"    local line\n"
"    if ! read -r line <&$1; then\n"
"      # select marks this fd if we reach EOF,\n"
"      # so handle this specially.\n"
"      print \"[Read on fd $1 failed, removing.]\" >&2\n"
"      zle -F $1\n"
"      return 1\n"
"    fi\n"
"    print -r - $line\n"
"  @}\n"
"  zle -F $tcpfd handler\n"
"fi\n"
msgstr ""

#. type: table
#: zsh.texi:16821
msgid ""
"Unusually, this option is most useful outside ordinary widget functions, "
"though it may be used within if normal output to the terminal is required.  "
"It invalidates the current zle display in preparation for output; typically "
"this will be from a trap function.  It has no effect if zle is not active.  "
"When a trap exits, the shell checks to see if the display needs restoring, "
"hence the following will print output in such a way as not to disturb the "
"line being edited:"
msgstr ""

#. type: example
#: zsh.texi:16830
#, no-wrap
msgid ""
"TRAPUSR1() @{\n"
"  # Invalidate zle display\n"
"  [[ -o zle ]] && zle -I\n"
"  # Show output\n"
"  print Hello\n"
"@}\n"
msgstr ""

#. type: table
#: zsh.texi:16836
msgid ""
"In general, the trap function may need to test whether zle is active before "
"using this method (as shown in the example), since the @t{zsh/zle} module "
"may not even be loaded; if it is not, the command can be skipped."
msgstr ""

#. type: table
#: zsh.texi:16841
msgid ""
"It is possible to call `@t{zle -I}' several times before control is returned "
"to the editor; the display will only be invalidated the first time to "
"minimise disruption."
msgstr ""

#. type: table
#: zsh.texi:16845
msgid ""
"Note that there are normally better ways of manipulating the display from "
"within zle widgets; see, for example, `@t{zle -R}' above."
msgstr ""

#. type: table
#: zsh.texi:16851
msgid ""
"The returned status is zero if zle was invalidated, even though this may "
"have been by a previous call to `@t{zle -I}' or by a system notification.  "
"To test if a zle widget may be called at this point, execute @t{zle} with no "
"arguments and examine the return status."
msgstr ""

#. type: table
#: zsh.texi:16857
msgid ""
"This is used to add, list or remove internal transformations on the "
"processing performed by the line editor.  It is typically used only for "
"debugging or testing and is therefore of little interest to the general "
"user."
msgstr ""

#. type: table
#: zsh.texi:16862
msgid ""
"`@t{zle -T} @var{transformation} @var{func}' specifies that the given "
"@var{transformation} (see below) is effected by shell function @var{func}."
msgstr ""

#. type: table
#: zsh.texi:16866
msgid ""
"`@t{zle -Tr} @var{transformation}' removes the given @var{transformation} if "
"it was present (it is not an error if none was)."
msgstr ""

#. type: table
#: zsh.texi:16870
msgid ""
"`@t{zle -TL}' can be used to list all transformations currently in "
"operation."
msgstr ""

#. type: table
#: zsh.texi:16882
msgid ""
"Currently the only transformation is @t{tc}.  This is used instead of "
"outputting termcap codes to the terminal.  When the transformation is in "
"operation the shell function is passed the termcap code that would be output "
"as its first argument; if the operation required a numeric argument, that is "
"passed as a second argument.  The function should set the shell variable "
"@t{REPLY} to the transformed termcap code.  Typically this is used to "
"produce some simply formatted version of the code and optional argument for "
"debugging or testing.  Note that this transformation is not applied to other "
"non-printing characters such as carriage returns and newlines."
msgstr ""

#. type: item
#: zsh.texi:16883
#, no-wrap
msgid ""
"@var{widget} [ @t{-n} @var{num} ] [ @t{-f} @var{flag} ] [ @t{-Nw} ] [ @t{-K} "
"@var{keymap} ] @var{args} ..."
msgstr ""

#. type: table
#: zsh.texi:16886
msgid ""
"Invoke the specified @var{widget}.  This can only be done when ZLE is "
"active; normally this will be within a user-defined widget."
msgstr ""

#. type: table
#: zsh.texi:16892
msgid ""
"With the options @t{-n} and @t{-N}, the current numeric argument will be "
"saved and then restored after the call to @var{widget}; `@t{-n} @var{num}' "
"sets the numeric argument temporarily to @var{num}, while `@t{-N}' sets it "
"to the default, i.e. as if there were none."
msgstr ""

#. type: table
#: zsh.texi:16897
msgid ""
"With the option @t{-K}, @var{keymap} will be used as the current keymap "
"during the execution of the widget.  The previous keymap will be restored "
"when the widget exits."
msgstr ""

#. type: table
#: zsh.texi:16904
msgid ""
"Normally, calling a widget in this way does not set the special parameter "
"@t{WIDGET} and related parameters, so that the environment appears as if the "
"top-level widget called by the user were still active.  With the option "
"@t{-w}, @t{WIDGET} and related parameters are set to reflect the widget "
"being executed by the @t{zle} call."
msgstr ""

#. type: table
#: zsh.texi:16908
msgid ""
"Normally, when @var{widget} returns the special parameter @t{LASTWIDGET} "
"will point to it.  This can be inhibited by passing the option @t{-f "
"nolast}."
msgstr ""

#. type: table
#: zsh.texi:16920
msgid ""
"Any further arguments will be passed to the widget; note that as standard "
"argument handling is performed, any general argument list should be preceded "
"by @t{-}@t{-}.  If it is a shell function, these are passed down as "
"positional parameters; for builtin widgets it is up to the widget in "
"question what it does with them.  Currently arguments are only handled by "
"the incremental-search commands, the @t{history-search-forward} and "
"@t{-backward} and the corresponding functions prefixed by @t{vi-}, and by "
"@t{universal-argument}.  No error is flagged if the command does not use the "
"arguments, or only uses some of them."
msgstr ""

#. type: table
#: zsh.texi:16925
msgid ""
"The return status reflects the success or failure of the operation carried "
"out by the widget, or if it is a user-defined widget the return status of "
"the shell function."
msgstr ""

#. type: table
#: zsh.texi:16931
msgid ""
"A non-zero return status causes the shell to beep when the widget exits, "
"unless the @t{BEEP} options was unset or the widget was called via the "
"@t{zle} command.  Thus if a user defined widget requires an immediate beep, "
"it should call the @t{beep} widget directly."
msgstr ""

#. type: node
#: zsh.texi:16937 zsh.texi:16964 zsh.texi:16966 zsh.texi:17475
#, no-wrap
msgid "User-Defined Widgets"
msgstr ""

#. type: t{#1}
#: zsh.texi:16941 zsh.texi:21778 zsh.texi:31871 zsh.texi:31872
#, no-wrap
msgid "widgets"
msgstr ""

#. type: Plain text
#: zsh.texi:16946
msgid ""
"All actions in the editor are performed by `widgets'.  A widget's job is "
"simply to perform some small action.  The ZLE commands that key sequences in "
"keymaps are bound to are in fact widgets.  Widgets can be user-defined or "
"built in."
msgstr ""

#. type: Plain text
#: zsh.texi:16955
msgid ""
"The standard widgets built into ZLE are listed in @ref{Standard Widgets}.  "
"Other built-in widgets can be defined by other modules (see @ref{Zsh "
"Modules}).  Each built-in widget has two names: its normal canonical name, "
"and the same name preceded by a `@t{.}'.  The `@t{.}' name is special: it "
"can't be rebound to a different widget.  This makes the widget available "
"even when its usual name has been redefined."
msgstr ""

#. type: Plain text
#: zsh.texi:16962
msgid ""
"User-defined widgets are defined using `@t{zle -N}', and implemented as "
"shell functions.  When the widget is executed, the corresponding shell "
"function is executed, and can perform editing (or other) actions.  It is "
"recommended that user-defined widgets should not have names starting with "
"`@t{.}'."
msgstr ""

#. type: node
#: zsh.texi:16964 zsh.texi:17475 zsh.texi:17477 zsh.texi:17503 zsh.texi:17652
#: zsh.texi:18031 zsh.texi:18366 zsh.texi:18422 zsh.texi:18499 zsh.texi:18923
#: zsh.texi:18972
#, no-wrap
msgid "Standard Widgets"
msgstr ""

#. type: cindex
#: zsh.texi:16968
#, no-wrap
msgid "widgets, user-defined"
msgstr ""

#. type: Plain text
#: zsh.texi:16977
msgid ""
"User-defined widgets, being implemented as shell functions, can execute any "
"normal shell command.  They can also run other widgets (whether built-in or "
"user-defined) using the @t{zle} builtin command. The standard input of the "
"function is redirected from /dev/null to prevent external commands from "
"unintentionally blocking ZLE by reading from the terminal, but @t{read -k} "
"or @t{read -q} can be used to read characters.  Finally, they can examine "
"and edit the ZLE buffer being edited by reading and setting the special "
"parameters described below."
msgstr ""

#. type: cindex
#: zsh.texi:16979
#, no-wrap
msgid "parameters, editor"
msgstr ""

#. type: cindex
#: zsh.texi:16980
#, no-wrap
msgid "parameters, zle"
msgstr ""

#. type: Plain text
#: zsh.texi:16986
msgid ""
"These special parameters are always available in widget functions, but are "
"not in any way special outside ZLE.  If they have some normal value outside "
"ZLE, that value is temporarily inaccessible, but will return when the widget "
"function exits.  These special parameters in fact have local scope, like "
"parameters created in a function using @t{local}."
msgstr ""

#. type: Plain text
#: zsh.texi:16990
msgid ""
"Inside completion widgets and traps called while ZLE is active, these "
"parameters are available read-only."
msgstr ""

#. type: Plain text
#: zsh.texi:16995
msgid ""
"Note that the parameters appear as local to any ZLE widget in which they "
"appear.  Hence if it is desired to override them this needs to be done "
"within a nested function:"
msgstr ""

#. type: example
#: zsh.texi:17008
#, no-wrap
msgid ""
"widget-function() @{\n"
"  # $WIDGET here refers to the special variable\n"
"  # that is local inside widget-function\n"
"  () @{\n"
"     # This anonymous nested function allows WIDGET\n"
"     # to be used as a local variable.  The -h\n"
"     # removes the special status of the variable.\n"
"     local -h WIDGET\n"
"  @}\n"
"@}\n"
msgstr ""

#. type: vindex
#: zsh.texi:17012
#, no-wrap
msgid "BUFFER"
msgstr ""

#. type: item
#: zsh.texi:17013
#, no-wrap
msgid "@t{BUFFER} (scalar)"
msgstr ""

#. type: table
#: zsh.texi:17017
msgid ""
"The entire contents of the edit buffer.  If it is written to, the cursor "
"remains at the same offset, unless that would put it outside the buffer."
msgstr ""

#. type: vindex
#: zsh.texi:17018
#, no-wrap
msgid "BUFFERLINES"
msgstr ""

#. type: item
#: zsh.texi:17019
#, no-wrap
msgid "@t{BUFFERLINES} (integer)"
msgstr ""

#. type: table
#: zsh.texi:17023
msgid ""
"The number of screen lines needed for the edit buffer currently displayed on "
"screen (i.e. without any changes to the preceding parameters done after the "
"last redisplay); read-only."
msgstr ""

#. type: vindex
#: zsh.texi:17024
#, no-wrap
msgid "CONTEXT"
msgstr ""

#. type: item
#: zsh.texi:17025
#, no-wrap
msgid "@t{CONTEXT} (scalar)"
msgstr ""

#. type: table
#: zsh.texi:17028
msgid ""
"The context in which zle was called to read a line; read-only.  One of the "
"values:"
msgstr ""

#. type: t{#1}
#: zsh.texi:17031
#, no-wrap
msgid "start"
msgstr ""

#. type: table
#: zsh.texi:17033
msgid "The start of a command line (at prompt @t{PS1})."
msgstr ""

#. type: t{#1}
#: zsh.texi:17034
#, no-wrap
msgid "cont"
msgstr ""

#. type: table
#: zsh.texi:17036
msgid "A continuation to a command line (at prompt @t{PS2})."
msgstr ""

#. type: table
#: zsh.texi:17039
msgid "In a @t{select} loop (at prompt @t{PS3})."
msgstr ""

#. type: table
#: zsh.texi:17042
msgid "Editing a variable in @t{vared}."
msgstr ""

#. type: vindex
#: zsh.texi:17045
#, no-wrap
msgid "CURSOR"
msgstr ""

#. type: item
#: zsh.texi:17046
#, no-wrap
msgid "@t{CURSOR} (integer)"
msgstr ""

#. type: table
#: zsh.texi:17051
msgid ""
"The offset of the cursor, within the edit buffer.  This is in the range 0 to "
"@t{$#BUFFER}, and is by definition equal to @t{$#LBUFFER}.  Attempts to move "
"the cursor outside the buffer will result in the cursor being moved to the "
"appropriate end of the buffer."
msgstr ""

#. type: vindex
#: zsh.texi:17052
#, no-wrap
msgid "CUTBUFFER"
msgstr ""

#. type: item
#: zsh.texi:17053
#, no-wrap
msgid "@t{CUTBUFFER} (scalar)"
msgstr ""

#. type: table
#: zsh.texi:17060
msgid ""
"The last item cut using one of the `@t{kill-}' commands; the string which "
"the next yank would insert in the line.  Later entries in the kill ring are "
"in the array @t{killring}.  Note that the command `@t{zle "
"copy-region-as-kill} @var{string}' can be used to set the text of the cut "
"buffer from a shell function and cycle the kill ring in the same way as "
"interactively killing text."
msgstr ""

#. type: vindex
#: zsh.texi:17061
#, no-wrap
msgid "HISTNO"
msgstr ""

#. type: item
#: zsh.texi:17062
#, no-wrap
msgid "@t{HISTNO} (integer)"
msgstr ""

#. type: table
#: zsh.texi:17070
msgid ""
"The current history number.  Setting this has the same effect as moving up "
"or down in the history to the corresponding history line.  An attempt to set "
"it is ignored if the line is not stored in the history.  Note this is not "
"the same as the parameter @t{HISTCMD}, which always gives the number of the "
"history line being added to the main shell's history.  @t{HISTNO} refers to "
"the line being retrieved within zle."
msgstr ""

#. type: vindex
#: zsh.texi:17071
#, no-wrap
msgid "ISEARCHMATCH_ACTIVE"
msgstr ""

#. type: vindex
#: zsh.texi:17072
#, no-wrap
msgid "ISEARCHMATCH_START"
msgstr ""

#. type: vindex
#: zsh.texi:17073
#, no-wrap
msgid "ISEARCHMATCH_END"
msgstr ""

#. type: item
#: zsh.texi:17074
#, no-wrap
msgid "@t{ISEARCHMATCH_ACTIVE} (integer)"
msgstr ""

#. type: itemx
#: zsh.texi:17075
#, no-wrap
msgid "@t{ISEARCHMATCH_START} (integer)"
msgstr ""

#. type: itemx
#: zsh.texi:17076
#, no-wrap
msgid "@t{ISEARCHMATCH_END} (integer)"
msgstr ""

#. type: table
#: zsh.texi:17082
msgid ""
"@t{ISEARCHMATCH_ACTIVE} indicates whether a part of the @t{BUFFER} is "
"currently matched by an incremental search pattern. @t{ISEARCHMATCH_START} "
"and @t{ISEARCHMATCH_END} give the location of the matched part and are in "
"the same units as @t{CURSOR}. They are only valid for reading when "
"@t{ISEARCHMATCH_ACTIVE} is non-zero."
msgstr ""

#. type: table
#: zsh.texi:17085 zsh.texi:17286
msgid "All parameters are read-only."
msgstr ""

#. type: vindex
#: zsh.texi:17086
#, no-wrap
msgid "KEYMAP"
msgstr ""

#. type: item
#: zsh.texi:17087
#, no-wrap
msgid "@t{KEYMAP} (scalar)"
msgstr ""

#. type: table
#: zsh.texi:17089
msgid "The name of the currently selected keymap; read-only."
msgstr ""

#. type: vindex
#: zsh.texi:17090
#, no-wrap
msgid "KEYS"
msgstr ""

#. type: item
#: zsh.texi:17091
#, no-wrap
msgid "@t{KEYS} (scalar)"
msgstr ""

#. type: table
#: zsh.texi:17093
msgid "The keys typed to invoke this widget, as a literal string; read-only."
msgstr ""

#. type: vindex
#: zsh.texi:17094
#, no-wrap
msgid "KEYS_QUEUED_COUNT"
msgstr ""

#. type: item
#: zsh.texi:17095
#, no-wrap
msgid "@t{KEYS_QUEUED_COUNT} (integer)"
msgstr ""

#. type: table
#: zsh.texi:17099
msgid ""
"The number of bytes pushed back to the input queue and therefore available "
"for reading immediately before any I/O is done; read-only.  See also "
"@t{PENDING}; the two values are distinct."
msgstr ""

#. type: vindex
#: zsh.texi:17100
#, no-wrap
msgid "killring"
msgstr ""

#. type: item
#: zsh.texi:17101
#, no-wrap
msgid "@t{killring} (array)"
msgstr ""

#. type: table
#: zsh.texi:17106
msgid ""
"The array of previously killed items, with the most recently killed first.  "
"This gives the items that would be retrieved by a @t{yank-pop} in the same "
"order.  Note, however, that the most recently killed item is in "
"@t{$CUTBUFFER}; @t{$killring} shows the array of previous entries."
msgstr ""

#. type: table
#: zsh.texi:17114
msgid ""
"The default size for the kill ring is eight, however the length may be "
"changed by normal array operations.  Any empty string in the kill ring is "
"ignored by the @t{yank-pop} command, hence the size of the array effectively "
"sets the maximum length of the kill ring, while the number of non-zero "
"strings gives the current length, both as seen by the user at the command "
"line."
msgstr ""

#. type: vindex
#: zsh.texi:17115
#, no-wrap
msgid "LASTABORTEDSEARCH"
msgstr ""

#. type: item
#: zsh.texi:17116
#, no-wrap
msgid "@t{LASTABORTEDSEARCH} (scalar)"
msgstr ""

#. type: table
#: zsh.texi:17119
msgid ""
"The last search string used by an interactive search that was aborted by the "
"user (status 3 returned by the search widget)."
msgstr ""

#. type: vindex
#: zsh.texi:17120
#, no-wrap
msgid "LASTSEARCH"
msgstr ""

#. type: item
#: zsh.texi:17121
#, no-wrap
msgid "@t{LASTSEARCH} (scalar)"
msgstr ""

#. type: table
#: zsh.texi:17125
msgid ""
"The last search string used by an interactive search; read-only.  This is "
"set even if the search failed (status 0, 1 or 2 returned by the search "
"widget), but not if it was aborted by the user."
msgstr ""

#. type: vindex
#: zsh.texi:17126
#, no-wrap
msgid "LASTWIDGET"
msgstr ""

#. type: item
#: zsh.texi:17127
#, no-wrap
msgid "@t{LASTWIDGET} (scalar)"
msgstr ""

#. type: table
#: zsh.texi:17129
msgid "The name of the last widget that was executed; read-only."
msgstr ""

#. type: vindex
#: zsh.texi:17130
#, no-wrap
msgid "LBUFFER"
msgstr ""

#. type: item
#: zsh.texi:17131
#, no-wrap
msgid "@t{LBUFFER} (scalar)"
msgstr ""

#. type: table
#: zsh.texi:17135
msgid ""
"The part of the buffer that lies to the left of the cursor position.  If it "
"is assigned to, only that part of the buffer is replaced, and the cursor "
"remains between the new @t{$LBUFFER} and the old @t{$RBUFFER}."
msgstr ""

#. type: vindex
#: zsh.texi:17136
#, no-wrap
msgid "MARK"
msgstr ""

#. type: item
#: zsh.texi:17137
#, no-wrap
msgid "@t{MARK} (integer)"
msgstr ""

#. type: table
#: zsh.texi:17142
msgid ""
"Like @t{CURSOR}, but for the mark. With vi-mode operators that wait for a "
"movement command to select a region of text, setting @t{MARK} allows the "
"selection to extend in both directions from the initial cursor position."
msgstr ""

#. type: vindex
#: zsh.texi:17143
#, no-wrap
msgid "NUMERIC"
msgstr ""

#. type: item
#: zsh.texi:17144
#, no-wrap
msgid "@t{NUMERIC} (integer)"
msgstr ""

#. type: table
#: zsh.texi:17150
msgid ""
"The numeric argument. If no numeric argument was given, this parameter is "
"unset. When this is set inside a widget function, builtin widgets called "
"with the @t{zle} builtin command will use the value assigned. If it is unset "
"inside a widget function, builtin widgets called behave as if no numeric "
"argument was given."
msgstr ""

#. type: vindex
#: zsh.texi:17151
#, no-wrap
msgid "PENDING"
msgstr ""

#. type: item
#: zsh.texi:17152
#, no-wrap
msgid "@t{PENDING} (integer)"
msgstr ""

#. type: table
#: zsh.texi:17158
msgid ""
"The number of bytes pending for input, i.e. the number of bytes which have "
"already been typed and can immediately be read. On systems where the shell "
"is not able to get this information, this parameter will always have a value "
"of zero.  Read-only.  See also @t{KEYS_QUEUED_COUNT}; the two values are "
"distinct."
msgstr ""

#. type: vindex
#: zsh.texi:17159
#, no-wrap
msgid "PREBUFFER"
msgstr ""

#. type: item
#: zsh.texi:17160
#, no-wrap
msgid "@t{PREBUFFER} (scalar)"
msgstr ""

#. type: table
#: zsh.texi:17164
msgid ""
"In a multi-line input at the secondary prompt, this read-only parameter "
"contains the contents of the lines before the one the cursor is currently "
"in."
msgstr ""

#. type: vindex
#: zsh.texi:17165
#, no-wrap
msgid "PREDISPLAY"
msgstr ""

#. type: item
#: zsh.texi:17166
#, no-wrap
msgid "@t{PREDISPLAY} (scalar)"
msgstr ""

#. type: table
#: zsh.texi:17171
msgid ""
"Text to be displayed before the start of the editable text buffer.  This "
"does not have to be a complete line; to display a complete line, a newline "
"must be appended explicitly.  The text is reset on each new invocation (but "
"not recursive invocation) of zle."
msgstr ""

#. type: vindex
#: zsh.texi:17172
#, no-wrap
msgid "POSTDISPLAY"
msgstr ""

#. type: item
#: zsh.texi:17173
#, no-wrap
msgid "@t{POSTDISPLAY} (scalar)"
msgstr ""

#. type: table
#: zsh.texi:17178
msgid ""
"Text to be displayed after the end of the editable text buffer.  This does "
"not have to be a complete line; to display a complete line, a newline must "
"be prepended explicitly.  The text is reset on each new invocation (but not "
"recursive invocation) of zle."
msgstr ""

#. type: vindex
#: zsh.texi:17179
#, no-wrap
msgid "RBUFFER"
msgstr ""

#. type: item
#: zsh.texi:17180
#, no-wrap
msgid "@t{RBUFFER} (scalar)"
msgstr ""

#. type: table
#: zsh.texi:17184
msgid ""
"The part of the buffer that lies to the right of the cursor position.  If it "
"is assigned to, only that part of the buffer is replaced, and the cursor "
"remains between the old @t{$LBUFFER} and the new @t{$RBUFFER}."
msgstr ""

#. type: vindex
#: zsh.texi:17185
#, no-wrap
msgid "REGION_ACTIVE"
msgstr ""

#. type: item
#: zsh.texi:17186
#, no-wrap
msgid "@t{REGION_ACTIVE} (integer)"
msgstr ""

#. type: table
#: zsh.texi:17192
msgid ""
"Indicates if the region is currently active.  It can be assigned 0 or 1 to "
"deactivate and activate the region respectively. A value of 2 activates the "
"region in line-wise mode with the highlighted text extending for whole lines "
"only; see @ref{Character Highlighting}."
msgstr ""

#. type: vindex
#: zsh.texi:17193
#, no-wrap
msgid "region_highlight"
msgstr ""

#. type: item
#: zsh.texi:17194
#, no-wrap
msgid "@t{region_highlight} (array)"
msgstr ""

#. type: table
#: zsh.texi:17201
msgid ""
"Each element of this array may be set to a string that describes "
"highlighting for an arbitrary region of the command line that will take "
"effect the next time the command line is redisplayed.  Highlighting of the "
"non-editable parts of the command line in @t{PREDISPLAY} and @t{POSTDISPLAY} "
"are possible, but note that the @t{P} flag is needed for character indexing "
"to include @t{PREDISPLAY}."
msgstr ""

#. type: table
#: zsh.texi:17204
msgid "Each string consists of the following whitespace-separated parts:"
msgstr ""

#. type: itemize
#: zsh.texi:17213
msgid ""
"Optionally, a `@t{P}' to signify that the start and end offset that follow "
"include any string set by the @t{PREDISPLAY} special parameter; this is "
"needed if the predisplay string itself is to be highlighted.  Whitespace "
"between the `@t{P}' and the start offset is optional."
msgstr ""

#. type: itemize
#: zsh.texi:17215
msgid "A start offset in the same units as @t{CURSOR}."
msgstr ""

#. type: itemize
#: zsh.texi:17217
msgid "An end offset in the same units as @t{CURSOR}."
msgstr ""

#. type: itemize
#: zsh.texi:17222
msgid ""
"A highlight specification in the same format as used for contexts in the "
"parameter @t{zle_highlight}, see @ref{Character Highlighting}; for example, "
"@t{standout} or @t{fg=red,bold}."
msgstr ""

#. type: itemize
#: zsh.texi:17227
msgid ""
"Optionally, a string of the form `@t{memo=}@var{token}'.  The @var{token} "
"consists of everything between the `@t{=}' and the next whitespace, comma, "
"NUL, or the end of the string.  The @var{token} is preserved verbatim but "
"not parsed in any way."
msgstr ""

#. type: itemize
#: zsh.texi:17233
msgid ""
"Plugins may use this to identify array elements they have added: for "
"example, a plugin might set @var{token} to its (the plugin's) name and then "
"use `@t{region_highlight=( $@{region_highlight:#*memo=}@var{token}@t{@} )}' "
"in order to remove array elements it have added."
msgstr ""

#. type: itemize
#: zsh.texi:17238
msgid ""
"(This example uses the `@t{$@{}@var{name}@t{:#}@var{pattern}@t{@}}' "
"array-grepping syntax described in @ref{Parameter Expansion}.)"
msgstr ""

#. type: example
#: zsh.texi:17246
#, no-wrap
msgid "region_highlight=(\"P0 20 bold memo=foobar\")\n"
msgstr ""

#. type: table
#: zsh.texi:17251
msgid ""
"specifies that the first twenty characters of the text including any "
"predisplay string should be highlighted in bold."
msgstr ""

#. type: table
#: zsh.texi:17255
msgid ""
"Note that the effect of @t{region_highlight} is not saved and disappears as "
"soon as the line is accepted."
msgstr ""

#. type: table
#: zsh.texi:17260
msgid ""
"Note that zsh 5.8 and older do not support the `@t{memo=}@var{token}' field "
"and may misparse the third (highlight specification) field when a memo is "
"given."
msgstr ""

#. type: table
#: zsh.texi:17266
msgid ""
"The final highlighting on the command line depends on both "
"@t{region_highlight} and @t{zle_highlight}; see @ref{Character Highlighting} "
"for details."
msgstr ""

#. type: vindex
#: zsh.texi:17267
#, no-wrap
msgid "registers"
msgstr ""

#. type: item
#: zsh.texi:17268
#, no-wrap
msgid "@t{registers} (associative array)"
msgstr ""

#. type: table
#: zsh.texi:17272
msgid ""
"The contents of each of the vi register buffers. These are typically set "
"using @t{vi-set-buffer} followed by a delete, change or yank command."
msgstr ""

#. type: vindex
#: zsh.texi:17273
#, no-wrap
msgid "SUFFIX_ACTIVE"
msgstr ""

#. type: vindex
#: zsh.texi:17274
#, no-wrap
msgid "SUFFIX_START"
msgstr ""

#. type: vindex
#: zsh.texi:17275
#, no-wrap
msgid "SUFFIX_END"
msgstr ""

#. type: item
#: zsh.texi:17276
#, no-wrap
msgid "@t{SUFFIX_ACTIVE} (integer)"
msgstr ""

#. type: itemx
#: zsh.texi:17277
#, no-wrap
msgid "@t{SUFFIX_START} (integer)"
msgstr ""

#. type: itemx
#: zsh.texi:17278
#, no-wrap
msgid "@t{SUFFIX_END} (integer)"
msgstr ""

#. type: table
#: zsh.texi:17283
msgid ""
"@t{SUFFIX_ACTIVE} indicates whether an auto-removable completion suffix is "
"currently active. @t{SUFFIX_START} and @t{SUFFIX_END} give the location of "
"the suffix and are in the same units as @t{CURSOR}. They are only valid for "
"reading when @t{SUFFIX_ACTIVE} is non-zero."
msgstr ""

#. type: vindex
#: zsh.texi:17287
#, no-wrap
msgid "UNDO_CHANGE_NO"
msgstr ""

#. type: item
#: zsh.texi:17288
#, no-wrap
msgid "@t{UNDO_CHANGE_NO} (integer)"
msgstr ""

#. type: table
#: zsh.texi:17292
msgid ""
"A number representing the state of the undo history.  The only use of this "
"is passing as an argument to the @t{undo} widget in order to undo back to "
"the recorded point.  Read-only."
msgstr ""

#. type: vindex
#: zsh.texi:17293
#, no-wrap
msgid "UNDO_LIMIT_NO"
msgstr ""

#. type: item
#: zsh.texi:17294
#, no-wrap
msgid "@t{UNDO_LIMIT_NO} (integer)"
msgstr ""

#. type: table
#: zsh.texi:17302
msgid ""
"A number corresponding to an existing change in the undo history; compare "
"@t{UNDO_CHANGE_NO}.  If this is set to a value greater than zero, the "
"@t{undo} command will not allow the line to be undone beyond the given "
"change number.  It is still possible to use `@t{zle undo} @var{change}' in a "
"widget to undo beyond that point; in that case, it will not be possible to "
"undo at all until @t{UNDO_LIMIT_NO} is reduced.  Set to 0 to disable the "
"limit."
msgstr ""

#. type: table
#: zsh.texi:17306
msgid ""
"A typical use of this variable in a widget function is as follows (note the "
"additional function scope is required):"
msgstr ""

#. type: example
#: zsh.texi:17313
#, no-wrap
msgid ""
"() @{\n"
"  local UNDO_LIMIT_NO=$UNDO_CHANGE_NO\n"
"  # Perform some form of recursive edit.\n"
"@}\n"
msgstr ""

#. type: vindex
#: zsh.texi:17315
#, no-wrap
msgid "WIDGET"
msgstr ""

#. type: item
#: zsh.texi:17316
#, no-wrap
msgid "@t{WIDGET} (scalar)"
msgstr ""

#. type: table
#: zsh.texi:17318
msgid "The name of the widget currently being executed; read-only."
msgstr ""

#. type: vindex
#: zsh.texi:17319
#, no-wrap
msgid "WIDGETFUNC"
msgstr ""

#. type: item
#: zsh.texi:17320
#, no-wrap
msgid "@t{WIDGETFUNC} (scalar)"
msgstr ""

#. type: table
#: zsh.texi:17327
msgid ""
"The name of the shell function that implements a widget defined with either "
"@t{zle -N} or @t{zle -C}.  In the former case, this is the second argument "
"to the @t{zle -N} command that defined the widget, or the first argument if "
"there was no second argument.  In the latter case this is the third argument "
"to the @t{zle -C} command that defined the widget.  Read-only."
msgstr ""

#. type: vindex
#: zsh.texi:17328
#, no-wrap
msgid "WIDGETSTYLE"
msgstr ""

#. type: item
#: zsh.texi:17329
#, no-wrap
msgid "@t{WIDGETSTYLE} (scalar)"
msgstr ""

#. type: table
#: zsh.texi:17334
msgid ""
"Describes the implementation behind the completion widget currently being "
"executed; the second argument that followed @t{zle -C} when the widget was "
"defined.  This is the name of a builtin completion widget.  For widgets "
"defined with @t{zle -N} this is set to the empty string.  Read-only."
msgstr ""

#. type: vindex
#: zsh.texi:17335
#, no-wrap
msgid "YANK_ACTIVE"
msgstr ""

#. type: vindex
#: zsh.texi:17336
#, no-wrap
msgid "YANK_START"
msgstr ""

#. type: vindex
#: zsh.texi:17337
#, no-wrap
msgid "YANK_END"
msgstr ""

#. type: item
#: zsh.texi:17338
#, no-wrap
msgid "@t{YANK_ACTIVE} (integer)"
msgstr ""

#. type: itemx
#: zsh.texi:17339
#, no-wrap
msgid "@t{YANK_START} (integer)"
msgstr ""

#. type: itemx
#: zsh.texi:17340
#, no-wrap
msgid "@t{YANK_END} (integer)"
msgstr ""

#. type: table
#: zsh.texi:17347
msgid ""
"@t{YANK_ACTIVE} indicates whether text has just been yanked (pasted)  into "
"the buffer.  @t{YANK_START} and @t{YANK_END} give the location of the pasted "
"text and are in the same units as @t{CURSOR}.  They are only valid for "
"reading when @t{YANK_ACTIVE} is non-zero.  They can also be assigned by "
"widgets that insert text in a yank-like fashion, for example wrappers of "
"@t{bracketed-paste}.  See also @t{zle -f}."
msgstr ""

#. type: table
#: zsh.texi:17350
msgid "@t{YANK_ACTIVE} is read-only."
msgstr ""

#. type: vindex
#: zsh.texi:17351
#, no-wrap
msgid "ZLE_RECURSIVE"
msgstr ""

#. type: item
#: zsh.texi:17352
#, no-wrap
msgid "@t{ZLE_RECURSIVE} (integer)"
msgstr ""

#. type: table
#: zsh.texi:17355
msgid ""
"Usually zero, but incremented inside any instance of @t{recursive-edit}.  "
"Hence indicates the current recursion level."
msgstr ""

#. type: table
#: zsh.texi:17358
msgid "@t{ZLE_RECURSIVE} is read-only."
msgstr ""

#. type: vindex
#: zsh.texi:17359
#, no-wrap
msgid "ZLE_STATE"
msgstr ""

#. type: item
#: zsh.texi:17360
#, no-wrap
msgid "@t{ZLE_STATE} (scalar)"
msgstr ""

#. type: table
#: zsh.texi:17363
msgid ""
"Contains a set of space-separated words that describe the current @t{zle} "
"state."
msgstr ""

#. type: table
#: zsh.texi:17373
msgid ""
"Currently, the states shown are the insert mode as set by the "
"@t{overwrite-mode} or @t{vi-replace} widgets and whether history commands "
"will visit imported entries as controlled by the set-local-history widget.  "
"The string contains `@t{insert}' if characters to be inserted on the command "
"line move existing characters to the right or `@t{overwrite}' if characters "
"to be inserted overwrite existing characters. It contains `@t{localhistory}' "
"if only local history commands will be visited or `@t{globalhistory}' if "
"imported history commands will also be visited."
msgstr ""

#. type: table
#: zsh.texi:17378
msgid ""
"The substrings are sorted in alphabetical order so that if you want to test "
"for two specific substrings in a future-proof way, you can do match by "
"doing:"
msgstr ""

#. type: example
#: zsh.texi:17382
#, no-wrap
msgid "if [[ $ZLE_STATE == *globalhistory*insert* ]]; then ...; fi\n"
msgstr ""

#. type: subsection
#: zsh.texi:17388
#, no-wrap
msgid "Special Widgets"
msgstr ""

#. type: Plain text
#: zsh.texi:17395
msgid ""
"There are a few user-defined widgets which are special to the shell.  If "
"they do not exist, no special action is taken.  The environment provided is "
"identical to that for any other editing widget."
msgstr ""

#. type: t{#1}
#: zsh.texi:17398 zsh.texi:17399
#, no-wrap
msgid "zle-isearch-exit"
msgstr ""

#. type: table
#: zsh.texi:17403
msgid ""
"Executed at the end of incremental search at the point where the isearch "
"prompt is removed from the display.  See @t{zle-isearch-update} for an "
"example."
msgstr ""

#. type: t{#1}
#: zsh.texi:17404 zsh.texi:17405
#, no-wrap
msgid "zle-isearch-update"
msgstr ""

#. type: table
#: zsh.texi:17409
msgid ""
"Executed within incremental search when the display is about to be redrawn.  "
"Additional output below the incremental search prompt can be generated by "
"using `@t{zle -M}' within the widget.  For example,"
msgstr ""

#. type: example
#: zsh.texi:17414
#, no-wrap
msgid ""
"zle-isearch-update() @{ zle -M \"Line $HISTNO\"; @}\n"
"zle -N zle-isearch-update\n"
msgstr ""

#. type: table
#: zsh.texi:17420
msgid ""
"Note the line output by `@t{zle -M}' is not deleted on exit from incremental "
"search.  This can be done from a @t{zle-isearch-exit} widget:"
msgstr ""

#. type: example
#: zsh.texi:17425
#, no-wrap
msgid ""
"zle-isearch-exit() @{ zle -M \"\"; @}\n"
"zle -N zle-isearch-exit\n"
msgstr ""

#. type: t{#1}
#: zsh.texi:17427 zsh.texi:17428
#, no-wrap
msgid "zle-line-pre-redraw"
msgstr ""

#. type: table
#: zsh.texi:17431
msgid ""
"Executed whenever the input line is about to be redrawn, providing an "
"opportunity to update the region_highlight array."
msgstr ""

#. type: t{#1}
#: zsh.texi:17432 zsh.texi:17433
#, no-wrap
msgid "zle-line-init"
msgstr ""

#. type: table
#: zsh.texi:17437
msgid ""
"Executed every time the line editor is started to read a new line of input.  "
"The following example puts the line editor into vi command mode when it "
"starts up."
msgstr ""

#. type: example
#: zsh.texi:17442
#, no-wrap
msgid ""
"zle-line-init() @{ zle -K vicmd; @}\n"
"zle -N zle-line-init\n"
msgstr ""

#. type: table
#: zsh.texi:17447
msgid ""
"(The command inside the function sets the keymap directly; it is equivalent "
"to @t{zle vi-cmd-mode}.)"
msgstr ""

#. type: t{#1}
#: zsh.texi:17448 zsh.texi:17449
#, no-wrap
msgid "zle-line-finish"
msgstr ""

#. type: table
#: zsh.texi:17452
msgid ""
"This is similar to @t{zle-line-init} but is executed every time the line "
"editor has finished reading a line of input."
msgstr ""

#. type: t{#1}
#: zsh.texi:17453 zsh.texi:17454
#, no-wrap
msgid "zle-history-line-set"
msgstr ""

#. type: table
#: zsh.texi:17456
msgid "Executed when the history line changes."
msgstr ""

#. type: t{#1}
#: zsh.texi:17457 zsh.texi:17458
#, no-wrap
msgid "zle-keymap-select"
msgstr ""

#. type: table
#: zsh.texi:17463
msgid ""
"Executed every time the keymap changes, i.e. the special parameter "
"@t{KEYMAP} is set to a different value, while the line editor is active.  "
"Initialising the keymap when the line editor starts does not cause the "
"widget to be called."
msgstr ""

#. type: table
#: zsh.texi:17467
msgid ""
"The value @t{$KEYMAP} within the function reflects the new keymap.  The old "
"keymap is passed as the sole argument."
msgstr ""

#. type: table
#: zsh.texi:17471
msgid ""
"This can be used for detecting switches between the vi command (@t{vicmd}) "
"and insert (usually @t{main}) keymaps."
msgstr ""

#. type: cindex
#: zsh.texi:17479
#, no-wrap
msgid "widgets, standard"
msgstr ""

#. type: Plain text
#: zsh.texi:17484
msgid ""
"The following is a list of all the standard widgets, and their default "
"bindings in emacs mode, vi command mode and vi insert mode (the `@t{emacs}', "
"`@t{vicmd}' and `@t{viins}' keymaps, respectively)."
msgstr ""

#. type: Plain text
#: zsh.texi:17494
msgid ""
"Note that cursor keys are bound to movement keys in all three keymaps; the "
"shell assumes that the cursor keys send the key sequences reported by the "
"terminal-handling library (termcap or terminfo).  The key sequences shown in "
"the list are those based on the VT100, common on many modern terminals, but "
"in fact these are not necessarily bound.  In the case of the @t{viins} "
"keymap, the initial escape character of the sequences serves also to return "
"to the @t{vicmd} keymap: whether this happens is determined by the "
"@t{KEYTIMEOUT} parameter, see @ref{Parameters}."
msgstr ""

#. type: menuentry
#: zsh.texi:17502
msgid "Movement::"
msgstr ""

#. type: menuentry
#: zsh.texi:17502
msgid "History Control::"
msgstr ""

#. type: menuentry
#: zsh.texi:17502
msgid "Modifying Text::"
msgstr ""

#. type: menuentry
#: zsh.texi:17502
msgid "Arguments::"
msgstr ""

#. type: menuentry
#: zsh.texi:17502
msgid "Completion::"
msgstr ""

#. type: menuentry
#: zsh.texi:17502
msgid "Miscellaneous::"
msgstr ""

#. type: subsection
#: zsh.texi:17502 zsh.texi:18499 zsh.texi:18923 zsh.texi:18925
#, no-wrap
msgid "Text Objects"
msgstr ""

#. type: node
#: zsh.texi:17503 zsh.texi:17505 zsh.texi:17652
#, no-wrap
msgid "Movement"
msgstr ""

#. type: node
#: zsh.texi:17503 zsh.texi:17652 zsh.texi:17654 zsh.texi:18031
#, no-wrap
msgid "History Control"
msgstr ""

#. type: t{#1}
#: zsh.texi:17508 zsh.texi:28333
#, no-wrap
msgid "vi-backward-blank-word"
msgstr ""

#. type: item
#: zsh.texi:17509
#, no-wrap
msgid "@t{vi-backward-blank-word} (unbound) (@t{B}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17512
msgid ""
"Move backward one word, where a word is defined as a series of non-blank "
"characters."
msgstr ""

#. type: tindex
#: zsh.texi:17513
#, no-wrap
msgid "vi-backward-blank-word-end"
msgstr ""

#. type: item
#: zsh.texi:17514
#, no-wrap
msgid "@t{vi-backward-blank-word-end} (unbound) (@t{gE}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17517
msgid ""
"Move to the end of the previous word, where a word is defined as a series of "
"non-blank characters."
msgstr ""

#. type: tindex
#: zsh.texi:17518
#, no-wrap
msgid "backward-char"
msgstr ""

#. type: item
#: zsh.texi:17519
#, no-wrap
msgid "@t{backward-char} (@t{^B ESC-[D}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17521
msgid "Move backward one character."
msgstr ""

#. type: tindex
#: zsh.texi:17522
#, no-wrap
msgid "vi-backward-char"
msgstr ""

#. type: item
#: zsh.texi:17523
#, no-wrap
msgid "@t{vi-backward-char} (unbound) (@t{^H h ^?}) (@t{ESC-[D})"
msgstr ""

#. type: table
#: zsh.texi:17525
msgid "Move backward one character, without changing lines."
msgstr ""

#. type: tindex
#: zsh.texi:17526
#, no-wrap
msgid "backward-word"
msgstr ""

#. type: item
#: zsh.texi:17527
#, no-wrap
msgid "@t{backward-word} (@t{ESC-B ESC-b}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17529 zsh.texi:17533
msgid "Move to the beginning of the previous word."
msgstr ""

#. type: t{#1}
#: zsh.texi:17530 zsh.texi:17531
#, no-wrap
msgid "emacs-backward-word"
msgstr ""

#. type: tindex
#: zsh.texi:17534
#, no-wrap
msgid "vi-backward-word"
msgstr ""

#. type: item
#: zsh.texi:17535
#, no-wrap
msgid "@t{vi-backward-word} (unbound) (@t{b}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17537
msgid "Move to the beginning of the previous word, vi-style."
msgstr ""

#. type: tindex
#: zsh.texi:17538
#, no-wrap
msgid "vi-backward-word-end"
msgstr ""

#. type: item
#: zsh.texi:17539
#, no-wrap
msgid "@t{vi-backward-word-end} (unbound) (@t{ge}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17541
msgid "Move to the end of the previous word, vi-style."
msgstr ""

#. type: tindex
#: zsh.texi:17542
#, no-wrap
msgid "beginning-of-line"
msgstr ""

#. type: item
#: zsh.texi:17543
#, no-wrap
msgid "@t{beginning-of-line} (@t{^A}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17546
msgid ""
"Move to the beginning of the line.  If already at the beginning of the line, "
"move to the beginning of the previous line, if any."
msgstr ""

#. type: t{#1}
#: zsh.texi:17547 zsh.texi:17548
#, no-wrap
msgid "vi-beginning-of-line"
msgstr ""

#. type: table
#: zsh.texi:17550
msgid "Move to the beginning of the line, without changing lines."
msgstr ""

#. type: tindex
#: zsh.texi:17551
#, no-wrap
msgid "down-line"
msgstr ""

#. type: item
#: zsh.texi:17552
#, no-wrap
msgid "@t{down-line} (unbound) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17554
msgid "Move down a line in the buffer."
msgstr ""

#. type: tindex
#: zsh.texi:17555
#, no-wrap
msgid "end-of-line"
msgstr ""

#. type: item
#: zsh.texi:17556
#, no-wrap
msgid "@t{end-of-line} (@t{^E}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17559
msgid ""
"Move to the end of the line.  If already at the end of the line, move to the "
"end of the next line, if any."
msgstr ""

#. type: tindex
#: zsh.texi:17560
#, no-wrap
msgid "vi-end-of-line"
msgstr ""

#. type: item
#: zsh.texi:17561
#, no-wrap
msgid "@t{vi-end-of-line} (unbound) (@t{$}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17565
msgid ""
"Move to the end of the line.  If an argument is given to this command, the "
"cursor will be moved to the end of the line (argument - 1) lines down."
msgstr ""

#. type: tindex
#: zsh.texi:17566
#, no-wrap
msgid "vi-forward-blank-word"
msgstr ""

#. type: item
#: zsh.texi:17567
#, no-wrap
msgid "@t{vi-forward-blank-word} (unbound) (@t{W}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17570
msgid ""
"Move forward one word, where a word is defined as a series of non-blank "
"characters."
msgstr ""

#. type: tindex
#: zsh.texi:17571
#, no-wrap
msgid "vi-forward-blank-word-end"
msgstr ""

#. type: item
#: zsh.texi:17572
#, no-wrap
msgid "@t{vi-forward-blank-word-end} (unbound) (@t{E}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17576
msgid ""
"Move to the end of the current word, or, if at the end of the current word, "
"to the end of the next word, where a word is defined as a series of "
"non-blank characters."
msgstr ""

#. type: tindex
#: zsh.texi:17577
#, no-wrap
msgid "forward-char"
msgstr ""

#. type: item
#: zsh.texi:17578
#, no-wrap
msgid "@t{forward-char} (@t{^F ESC-[C}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17580 zsh.texi:17584
msgid "Move forward one character."
msgstr ""

#. type: tindex
#: zsh.texi:17581
#, no-wrap
msgid "vi-forward-char"
msgstr ""

#. type: item
#: zsh.texi:17582
#, no-wrap
msgid "@t{vi-forward-char} (unbound) (@t{space l}) (@t{ESC-[C})"
msgstr ""

#. type: tindex
#: zsh.texi:17585
#, no-wrap
msgid "vi-find-next-char"
msgstr ""

#. type: item
#: zsh.texi:17586
#, no-wrap
msgid "@t{vi-find-next-char} (@t{^X^F}) (@t{f}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17589
msgid ""
"Read a character from the keyboard, and move to the next occurrence of it in "
"the line."
msgstr ""

#. type: tindex
#: zsh.texi:17590
#, no-wrap
msgid "vi-find-next-char-skip"
msgstr ""

#. type: item
#: zsh.texi:17591
#, no-wrap
msgid "@t{vi-find-next-char-skip} (unbound) (@t{t}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17594
msgid ""
"Read a character from the keyboard, and move to the position just before the "
"next occurrence of it in the line."
msgstr ""

#. type: tindex
#: zsh.texi:17595
#, no-wrap
msgid "vi-find-prev-char"
msgstr ""

#. type: item
#: zsh.texi:17596
#, no-wrap
msgid "@t{vi-find-prev-char} (unbound) (@t{F}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17599
msgid ""
"Read a character from the keyboard, and move to the previous occurrence of "
"it in the line."
msgstr ""

#. type: tindex
#: zsh.texi:17600
#, no-wrap
msgid "vi-find-prev-char-skip"
msgstr ""

#. type: item
#: zsh.texi:17601
#, no-wrap
msgid "@t{vi-find-prev-char-skip} (unbound) (@t{T}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17604
msgid ""
"Read a character from the keyboard, and move to the position just after the "
"previous occurrence of it in the line."
msgstr ""

#. type: tindex
#: zsh.texi:17605
#, no-wrap
msgid "vi-first-non-blank"
msgstr ""

#. type: item
#: zsh.texi:17606
#, no-wrap
msgid "@t{vi-first-non-blank} (unbound) (@t{^}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17608
msgid "Move to the first non-blank character in the line."
msgstr ""

#. type: tindex
#: zsh.texi:17609
#, no-wrap
msgid "vi-forward-word"
msgstr ""

#. type: item
#: zsh.texi:17610
#, no-wrap
msgid "@t{vi-forward-word} (unbound) (@t{w}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17612
msgid "Move forward one word, vi-style."
msgstr ""

#. type: tindex
#: zsh.texi:17613
#, no-wrap
msgid "forward-word"
msgstr ""

#. type: item
#: zsh.texi:17614
#, no-wrap
msgid "@t{forward-word} (@t{ESC-F ESC-f}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17618
msgid ""
"Move to the beginning of the next word.  The editor's idea of a word is "
"specified with the @t{WORDCHARS} parameter."
msgstr ""

#. type: t{#1}
#: zsh.texi:17619 zsh.texi:17620
#, no-wrap
msgid "emacs-forward-word"
msgstr ""

#. type: table
#: zsh.texi:17622 zsh.texi:17626
msgid "Move to the end of the next word."
msgstr ""

#. type: tindex
#: zsh.texi:17623
#, no-wrap
msgid "vi-forward-word-end"
msgstr ""

#. type: item
#: zsh.texi:17624
#, no-wrap
msgid "@t{vi-forward-word-end} (unbound) (@t{e}) (unbound)"
msgstr ""

#. type: tindex
#: zsh.texi:17627
#, no-wrap
msgid "vi-goto-column"
msgstr ""

#. type: item
#: zsh.texi:17628
#, no-wrap
msgid "@t{vi-goto-column} (@t{ESC-|}) (@t{|}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17630
msgid "Move to the column specified by the numeric argument."
msgstr ""

#. type: tindex
#: zsh.texi:17631
#, no-wrap
msgid "vi-goto-mark"
msgstr ""

#. type: item
#: zsh.texi:17632
#, no-wrap
msgid "@t{vi-goto-mark} (unbound) (@t{`}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17634
msgid "Move to the specified mark."
msgstr ""

#. type: tindex
#: zsh.texi:17635
#, no-wrap
msgid "vi-goto-mark-line"
msgstr ""

#. type: item
#: zsh.texi:17636
#, no-wrap
msgid "@t{vi-goto-mark-line} (unbound) (@t{'}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17638
msgid "Move to beginning of the line containing the specified mark."
msgstr ""

#. type: tindex
#: zsh.texi:17639
#, no-wrap
msgid "vi-repeat-find"
msgstr ""

#. type: item
#: zsh.texi:17640
#, no-wrap
msgid "@t{vi-repeat-find} (unbound) (@t{;}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17642
msgid "Repeat the last @t{vi-find} command."
msgstr ""

#. type: tindex
#: zsh.texi:17643
#, no-wrap
msgid "vi-rev-repeat-find"
msgstr ""

#. type: item
#: zsh.texi:17644
#, no-wrap
msgid "@t{vi-rev-repeat-find} (unbound) (@t{,}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17646
msgid "Repeat the last @t{vi-find} command in the opposite direction."
msgstr ""

#. type: tindex
#: zsh.texi:17647
#, no-wrap
msgid "up-line"
msgstr ""

#. type: item
#: zsh.texi:17648
#, no-wrap
msgid "@t{up-line} (unbound) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17650
msgid "Move up a line in the buffer."
msgstr ""

#. type: node
#: zsh.texi:17652 zsh.texi:18031 zsh.texi:18033 zsh.texi:18366
#, no-wrap
msgid "Modifying Text"
msgstr ""

#. type: tindex
#: zsh.texi:17657
#, no-wrap
msgid "beginning-of-buffer-or-history"
msgstr ""

#. type: item
#: zsh.texi:17658
#, no-wrap
msgid "@t{beginning-of-buffer-or-history} (@t{ESC-<}) (@t{gg}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17661
msgid ""
"Move to the beginning of the buffer, or if already there, move to the first "
"event in the history list."
msgstr ""

#. type: t{#1}
#: zsh.texi:17662 zsh.texi:17663
#, no-wrap
msgid "beginning-of-line-hist"
msgstr ""

#. type: table
#: zsh.texi:17666
msgid ""
"Move to the beginning of the line.  If already at the beginning of the "
"buffer, move to the previous history line."
msgstr ""

#. type: t{#1}
#: zsh.texi:17667 zsh.texi:17668 zsh.texi:28336
#, no-wrap
msgid "beginning-of-history"
msgstr ""

#. type: table
#: zsh.texi:17670
msgid "Move to the first event in the history list."
msgstr ""

#. type: tindex
#: zsh.texi:17671
#, no-wrap
msgid "down-line-or-history"
msgstr ""

#. type: item
#: zsh.texi:17672
#, no-wrap
msgid "@t{down-line-or-history} (@t{^N ESC-[B}) (@t{j}) (@t{ESC-[B})"
msgstr ""

#. type: table
#: zsh.texi:17675
msgid ""
"Move down a line in the buffer, or if already at the bottom line, move to "
"the next event in the history list."
msgstr ""

#. type: tindex
#: zsh.texi:17676
#, no-wrap
msgid "vi-down-line-or-history"
msgstr ""

#. type: item
#: zsh.texi:17677
#, no-wrap
msgid "@t{vi-down-line-or-history} (unbound) (@t{+}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17681
msgid ""
"Move down a line in the buffer, or if already at the bottom line, move to "
"the next event in the history list.  Then move to the first non-blank "
"character on the line."
msgstr ""

#. type: t{#1}
#: zsh.texi:17682 zsh.texi:17683
#, no-wrap
msgid "down-line-or-search"
msgstr ""

#. type: table
#: zsh.texi:17687
msgid ""
"Move down a line in the buffer, or if already at the bottom line, search "
"forward in the history for a line beginning with the first word in the "
"buffer."
msgstr ""

#. type: table
#: zsh.texi:17692 zsh.texi:17871 zsh.texi:17905 zsh.texi:17915 zsh.texi:18012
msgid ""
"If called from a function by the @t{zle} command with arguments, the first "
"argument is taken as the string for which to search, rather than the first "
"word in the buffer."
msgstr ""

#. type: tindex
#: zsh.texi:17693
#, no-wrap
msgid "down-history"
msgstr ""

#. type: item
#: zsh.texi:17694
#, no-wrap
msgid "@t{down-history} (unbound) (@t{^N}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17696
msgid "Move to the next event in the history list."
msgstr ""

#. type: t{#1}
#: zsh.texi:17697 zsh.texi:17698
#, no-wrap
msgid "history-beginning-search-backward"
msgstr ""

#. type: table
#: zsh.texi:17702
msgid ""
"Search backward in the history for a line beginning with the current line up "
"to the cursor.  This leaves the cursor in its original position."
msgstr ""

#. type: tindex
#: zsh.texi:17703
#, no-wrap
msgid "end-of-buffer-or-history"
msgstr ""

#. type: item
#: zsh.texi:17704
#, no-wrap
msgid "@t{end-of-buffer-or-history} (@t{ESC->}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17707
msgid ""
"Move to the end of the buffer, or if already there, move to the last event "
"in the history list."
msgstr ""

#. type: t{#1}
#: zsh.texi:17708 zsh.texi:17709
#, no-wrap
msgid "end-of-line-hist"
msgstr ""

#. type: table
#: zsh.texi:17712
msgid ""
"Move to the end of the line.  If already at the end of the buffer, move to "
"the next history line."
msgstr ""

#. type: t{#1}
#: zsh.texi:17713 zsh.texi:17714 zsh.texi:28339
#, no-wrap
msgid "end-of-history"
msgstr ""

#. type: table
#: zsh.texi:17716
msgid "Move to the last event in the history list."
msgstr ""

#. type: tindex
#: zsh.texi:17717
#, no-wrap
msgid "vi-fetch-history"
msgstr ""

#. type: item
#: zsh.texi:17718
#, no-wrap
msgid "@t{vi-fetch-history} (unbound) (@t{G}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17722
msgid ""
"Fetch the history line specified by the numeric argument.  This defaults to "
"the current history line (i.e. the one that isn't history yet)."
msgstr ""

#. type: t{#1}
#: zsh.texi:17723 zsh.texi:17777 zsh.texi:28368
#, no-wrap
msgid "history-incremental-search-backward"
msgstr ""

#. type: item
#: zsh.texi:17724
#, no-wrap
msgid "@t{history-incremental-search-backward} (@t{^R ^Xr}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17732
msgid ""
"Search backward incrementally for a specified string.  The search is "
"case-insensitive if the search string does not have uppercase letters and no "
"numeric argument was given.  The string may begin with `@t{^}' to anchor the "
"search to the beginning of the line.  When called from a user-defined "
"function returns the following statuses: 0, if the search succeeded; 1, if "
"the search failed; 2, if the search term was a bad pattern; 3, if the search "
"was aborted by the @t{send-break} command."
msgstr ""

#. type: table
#: zsh.texi:17744
msgid ""
"A restricted set of editing functions is available in the mini-buffer.  Keys "
"are looked up in the special @t{isearch} keymap, and if not found there in "
"the main keymap (note that by default the @t{isearch} keymap is empty).  An "
"interrupt signal, as defined by the stty setting, will stop the search and "
"go back to the original line.  An undefined key will have the same effect.  "
"Note that the following always perform the same task within incremental "
"searches and cannot be replaced by user defined widgets, nor can the set of "
"functions be extended.  The supported functions are:"
msgstr ""

#. type: tindex
#: zsh.texi:17747 zsh.texi:18504
#, no-wrap
msgid "accept-and-hold"
msgstr ""

#. type: t{#1}
#: zsh.texi:17748 zsh.texi:18509 zsh.texi:18510 zsh.texi:28296
#, no-wrap
msgid "accept-and-infer-next-history"
msgstr ""

#. type: tindex
#: zsh.texi:17749 zsh.texi:18515
#, no-wrap
msgid "accept-line"
msgstr ""

#. type: tindex
#: zsh.texi:17750 zsh.texi:18520
#, no-wrap
msgid "accept-line-and-down-history"
msgstr ""

#. type: table
#: zsh.texi:17753
msgid ""
"Perform the usual function after exiting incremental search.  The command "
"line displayed is executed."
msgstr ""

#. type: tindex
#: zsh.texi:17754 zsh.texi:18044
#, no-wrap
msgid "backward-delete-char"
msgstr ""

#. type: tindex
#: zsh.texi:17755 zsh.texi:18048
#, no-wrap
msgid "vi-backward-delete-char"
msgstr ""

#. type: table
#: zsh.texi:17759
msgid ""
"Back up one place in the search history.  If the search has been repeated "
"this does not immediately erase a character in the minibuffer."
msgstr ""

#. type: t{#1}
#: zsh.texi:17760 zsh.texi:28169
#, no-wrap
msgid "accept-search"
msgstr ""

#. type: table
#: zsh.texi:17764
msgid ""
"Exit incremental search, retaining the command line but performing no "
"further action.  Note that this function is not bound by default and has no "
"effect outside incremental search."
msgstr ""

#. type: t{#1}
#: zsh.texi:17765 zsh.texi:18054 zsh.texi:18055
#, no-wrap
msgid "backward-delete-word"
msgstr ""

#. type: tindex
#: zsh.texi:17766 zsh.texi:18062
#, no-wrap
msgid "backward-kill-word"
msgstr ""

#. type: tindex
#: zsh.texi:17767 zsh.texi:18066
#, no-wrap
msgid "vi-backward-kill-word"
msgstr ""

#. type: table
#: zsh.texi:17773
msgid ""
"Back up one character in the minibuffer; if multiple searches have been "
"performed since the character was inserted the search history is rewound to "
"the point just before the character was entered.  Hence this has the effect "
"of repeating @t{backward-delete-char}."
msgstr ""

#. type: tindex
#: zsh.texi:17774 zsh.texi:18584
#, no-wrap
msgid "clear-screen"
msgstr ""

#. type: table
#: zsh.texi:17776
msgid "Clear the screen, remaining in incremental search mode."
msgstr ""

#. type: table
#: zsh.texi:17781
msgid ""
"Find the next occurrence of the contents of the mini-buffer. If the "
"mini-buffer is empty, the most recent previously used search string is "
"reinstated."
msgstr ""

#. type: t{#1}
#: zsh.texi:17782 zsh.texi:17832 zsh.texi:28367
#, no-wrap
msgid "history-incremental-search-forward"
msgstr ""

#. type: table
#: zsh.texi:17784
msgid "Invert the sense of the search."
msgstr ""

#. type: t{#1}
#: zsh.texi:17785 zsh.texi:18472 zsh.texi:18473
#, no-wrap
msgid "magic-space"
msgstr ""

#. type: table
#: zsh.texi:17787
msgid "Inserts a non-magical space."
msgstr ""

#. type: tindex
#: zsh.texi:17788 zsh.texi:18246
#, no-wrap
msgid "quoted-insert"
msgstr ""

#. type: tindex
#: zsh.texi:17789 zsh.texi:18251
#, no-wrap
msgid "vi-quoted-insert"
msgstr ""

#. type: table
#: zsh.texi:17791
msgid "Quote the character to insert into the minibuffer."
msgstr ""

#. type: tindex
#: zsh.texi:17792 zsh.texi:18763
#, no-wrap
msgid "redisplay"
msgstr ""

#. type: table
#: zsh.texi:17794
msgid "Redisplay the command line, remaining in incremental search mode."
msgstr ""

#. type: tindex
#: zsh.texi:17795 zsh.texi:18573
#, no-wrap
msgid "vi-cmd-mode"
msgstr ""

#. type: table
#: zsh.texi:17798
msgid ""
"Select the `@t{vicmd}' keymap; the `@t{main}' keymap (insert mode) will be "
"selected initially."
msgstr ""

#. type: table
#: zsh.texi:17802
msgid ""
"In addition, the modifications that were made while in vi insert mode are "
"merged to form a single undo event."
msgstr ""

#. type: tindex
#: zsh.texi:17803 zsh.texi:17983
#, no-wrap
msgid "vi-repeat-search"
msgstr ""

#. type: tindex
#: zsh.texi:17804 zsh.texi:17987
#, no-wrap
msgid "vi-rev-repeat-search"
msgstr ""

#. type: table
#: zsh.texi:17807
msgid ""
"Repeat the search.  The direction of the search is indicated in the "
"mini-buffer."
msgstr ""

#. type: table
#: zsh.texi:17815
msgid ""
"Any character that is not bound to one of the above functions, or "
"@t{self-insert} or @t{self-insert-unmeta}, will cause the mode to be "
"exited.  The character is then looked up and executed in the keymap in "
"effect at that point."
msgstr ""

#. type: table
#: zsh.texi:17822
msgid ""
"When called from a widget function by the @t{zle} command, the incremental "
"search commands can take a string argument.  This will be treated as a "
"string of keys, as for arguments to the @t{bindkey} command, and used as "
"initial input for the command.  Any characters in the string which are "
"unused by the incremental search will be silently ignored.  For example,"
msgstr ""

#. type: example
#: zsh.texi:17826
#, no-wrap
msgid "zle history-incremental-search-backward forceps\n"
msgstr ""

#. type: table
#: zsh.texi:17831
msgid ""
"will search backwards for @t{forceps}, leaving the minibuffer containing the "
"string `@t{forceps}'."
msgstr ""

#. type: item
#: zsh.texi:17833
#, no-wrap
msgid "@t{history-incremental-search-forward} (@t{^S ^Xs}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17839
msgid ""
"Search forward incrementally for a specified string.  The search is "
"case-insensitive if the search string does not have uppercase letters and no "
"numeric argument was given.  The string may begin with `@t{^}' to anchor the "
"search to the beginning of the line.  The functions available in the "
"mini-buffer are the same as for @t{history-incremental-search-backward}."
msgstr ""

#. type: t{#1}
#: zsh.texi:17840 zsh.texi:17842
#, no-wrap
msgid "history-incremental-pattern-search-backward"
msgstr ""

#. type: t{#1}
#: zsh.texi:17841 zsh.texi:17843
#, no-wrap
msgid "history-incremental-pattern-search-forward"
msgstr ""

#. type: table
#: zsh.texi:17852
msgid ""
"These widgets behave similarly to the corresponding widgets with no "
"@t{-pattern}, but the search string typed by the user is treated as a "
"pattern, respecting the current settings of the various options affecting "
"pattern matching.  See @ref{Filename Generation} for a description of "
"patterns.  If no numeric argument was given lowercase letters in the search "
"string may match uppercase letters in the history.  The string may begin "
"with `@t{^}' to anchor the search to the beginning of the line."
msgstr ""

#. type: table
#: zsh.texi:17856
msgid ""
"The prompt changes to indicate an invalid pattern; this may simply indicate "
"the pattern is not yet complete."
msgstr ""

#. type: table
#: zsh.texi:17861
msgid ""
"Note that only non-overlapping matches are reported, so an expression with "
"wildcards may return fewer matches on a line than are visible by inspection."
msgstr ""

#. type: tindex
#: zsh.texi:17862
#, no-wrap
msgid "history-search-backward"
msgstr ""

#. type: item
#: zsh.texi:17863
#, no-wrap
msgid "@t{history-search-backward} (@t{ESC-P ESC-p}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17866
msgid ""
"Search backward in the history for a line beginning with the first word in "
"the buffer."
msgstr ""

#. type: tindex
#: zsh.texi:17872
#, no-wrap
msgid "vi-history-search-backward"
msgstr ""

#. type: item
#: zsh.texi:17873
#, no-wrap
msgid "@t{vi-history-search-backward} (unbound) (@t{/}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17877
msgid ""
"Search backward in the history for a specified string.  The string may begin "
"with `@t{^}' to anchor the search to the beginning of the line."
msgstr ""

#. type: table
#: zsh.texi:17893
msgid ""
"A restricted set of editing functions is available in the mini-buffer.  An "
"interrupt signal, as defined by the stty setting, will stop the search.  The "
"functions available in the mini-buffer are: @t{accept-line}, "
"@t{backward-delete-char}, @t{vi-backward-delete-char}, "
"@t{backward-kill-word}, @t{vi-backward-kill-word}, @t{clear-screen}, "
"@t{redisplay}, @t{quoted-insert} and @t{vi-quoted-insert}."
msgstr ""

#. type: table
#: zsh.texi:17900
msgid ""
"@t{vi-cmd-mode} is treated the same as accept-line, and @t{magic-space} is "
"treated as a space.  Any other character that is not bound to self-insert or "
"self-insert-unmeta will beep and be ignored. If the function is called from "
"vi command mode, the bindings of the current insert mode will be used."
msgstr ""

#. type: tindex
#: zsh.texi:17906
#, no-wrap
msgid "history-search-forward"
msgstr ""

#. type: item
#: zsh.texi:17907
#, no-wrap
msgid "@t{history-search-forward} (@t{ESC-N ESC-n}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17910
msgid ""
"Search forward in the history for a line beginning with the first word in "
"the buffer."
msgstr ""

#. type: tindex
#: zsh.texi:17916
#, no-wrap
msgid "vi-history-search-forward"
msgstr ""

#. type: item
#: zsh.texi:17917
#, no-wrap
msgid "@t{vi-history-search-forward} (unbound) (@t{?}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17923
msgid ""
"Search forward in the history for a specified string.  The string may begin "
"with `@t{^}' to anchor the search to the beginning of the line. The "
"functions available in the mini-buffer are the same as for "
"@t{vi-history-search-backward}.  Argument handling is also the same as for "
"that command."
msgstr ""

#. type: tindex
#: zsh.texi:17924
#, no-wrap
msgid "infer-next-history"
msgstr ""

#. type: item
#: zsh.texi:17925
#, no-wrap
msgid "@t{infer-next-history} (@t{^X^N}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17928
msgid ""
"Search in the history list for a line matching the current one and fetch the "
"event following it."
msgstr ""

#. type: tindex
#: zsh.texi:17929
#, no-wrap
msgid "insert-last-word"
msgstr ""

#. type: item
#: zsh.texi:17930
#, no-wrap
msgid "@t{insert-last-word} (@t{ESC-_ ESC-.}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17939
msgid ""
"Insert the last word from the previous history event at the cursor "
"position.  If a positive numeric argument is given, insert that word from "
"the end of the previous history event.  If the argument is zero or negative "
"insert that word from the left (zero inserts the previous command word).  "
"Repeating this command replaces the word just inserted with the last word "
"from the history event prior to the one just used; numeric arguments can be "
"used in the same way to pick a word from that event."
msgstr ""

#. type: table
#: zsh.texi:17949
msgid ""
"When called from a shell function invoked from a user-defined widget, the "
"command can take one to three arguments.  The first argument specifies a "
"history offset which applies to successive calls to this widget: if it is "
"-1, the default behaviour is used, while if it is 1, successive calls will "
"move forwards through the history.  The value 0 can be used to indicate that "
"the history line examined by the previous execution of the command will be "
"reexamined.  Note that negative numbers should be preceded by a `@t{-}@t{-}' "
"argument to avoid confusing them with options."
msgstr ""

#. type: table
#: zsh.texi:17955
msgid ""
"If two arguments are given, the second specifies the word on the command "
"line in normal array index notation (as a more natural alternative to the "
"numeric argument).  Hence 1 is the first word, and -1 (the default) is the "
"last word."
msgstr ""

#. type: table
#: zsh.texi:17961
msgid ""
"If a third argument is given, its value is ignored, but it is used to "
"signify that the history offset is relative to the current history line, "
"rather than the one remembered after the previous invocations of "
"@t{insert-last-word}."
msgstr ""

#. type: table
#: zsh.texi:17964
msgid "For example, the default behaviour of the command corresponds to"
msgstr ""

#. type: example
#: zsh.texi:17968
#, no-wrap
msgid "zle insert-last-word -- -1 -1\n"
msgstr ""

#. type: table
#: zsh.texi:17972
msgid "while the command"
msgstr ""

#. type: example
#: zsh.texi:17976
#, no-wrap
msgid "zle insert-last-word -- -1 1 -\n"
msgstr ""

#. type: table
#: zsh.texi:17982
msgid ""
"always copies the first word of the line in the history immediately before "
"the line being edited.  This has the side effect that later invocations of "
"the widget will be relative to that line."
msgstr ""

#. type: item
#: zsh.texi:17984
#, no-wrap
msgid "@t{vi-repeat-search} (unbound) (@t{n}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17986
msgid "Repeat the last vi history search."
msgstr ""

#. type: item
#: zsh.texi:17988
#, no-wrap
msgid "@t{vi-rev-repeat-search} (unbound) (@t{N}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:17990
msgid "Repeat the last vi history search, but in reverse."
msgstr ""

#. type: tindex
#: zsh.texi:17991
#, no-wrap
msgid "up-line-or-history"
msgstr ""

#. type: item
#: zsh.texi:17992
#, no-wrap
msgid "@t{up-line-or-history} (@t{^P ESC-[A}) (@t{k}) (@t{ESC-[A})"
msgstr ""

#. type: table
#: zsh.texi:17995
msgid ""
"Move up a line in the buffer, or if already at the top line, move to the "
"previous event in the history list."
msgstr ""

#. type: tindex
#: zsh.texi:17996
#, no-wrap
msgid "vi-up-line-or-history"
msgstr ""

#. type: item
#: zsh.texi:17997
#, no-wrap
msgid "@t{vi-up-line-or-history} (unbound) (@t{-}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18001
msgid ""
"Move up a line in the buffer, or if already at the top line, move to the "
"previous event in the history list.  Then move to the first non-blank "
"character on the line."
msgstr ""

#. type: t{#1}
#: zsh.texi:18002 zsh.texi:18003
#, no-wrap
msgid "up-line-or-search"
msgstr ""

#. type: table
#: zsh.texi:18007
msgid ""
"Move up a line in the buffer, or if already at the top line, search backward "
"in the history for a line beginning with the first word in the buffer."
msgstr ""

#. type: tindex
#: zsh.texi:18013
#, no-wrap
msgid "up-history"
msgstr ""

#. type: item
#: zsh.texi:18014
#, no-wrap
msgid "@t{up-history} (unbound) (@t{^P}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18016
msgid "Move to the previous event in the history list."
msgstr ""

#. type: t{#1}
#: zsh.texi:18017 zsh.texi:18018
#, no-wrap
msgid "history-beginning-search-forward"
msgstr ""

#. type: table
#: zsh.texi:18022
msgid ""
"Search forward in the history for a line beginning with the current line up "
"to the cursor.  This leaves the cursor in its original position."
msgstr ""

#. type: t{#1}
#: zsh.texi:18023 zsh.texi:18024
#, no-wrap
msgid "set-local-history"
msgstr ""

#. type: table
#: zsh.texi:18029
msgid ""
"By default, history movement commands visit the imported lines as well as "
"the local lines. This widget lets you toggle this on and off, or set it with "
"the numeric argument. Zero for both local and imported lines and nonzero for "
"only local lines."
msgstr ""

#. type: node
#: zsh.texi:18031 zsh.texi:18366 zsh.texi:18368 zsh.texi:18422
#, no-wrap
msgid "Arguments"
msgstr ""

#. type: tindex
#: zsh.texi:18036
#, no-wrap
msgid "vi-add-eol"
msgstr ""

#. type: item
#: zsh.texi:18037
#, no-wrap
msgid "@t{vi-add-eol} (unbound) (@t{A}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18039
msgid "Move to the end of the line and enter insert mode."
msgstr ""

#. type: tindex
#: zsh.texi:18040
#, no-wrap
msgid "vi-add-next"
msgstr ""

#. type: item
#: zsh.texi:18041
#, no-wrap
msgid "@t{vi-add-next} (unbound) (@t{a}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18043
msgid "Enter insert mode after the current cursor position, without changing lines."
msgstr ""

#. type: item
#: zsh.texi:18045
#, no-wrap
msgid "@t{backward-delete-char} (@t{^H ^?}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18047
msgid "Delete the character behind the cursor."
msgstr ""

#. type: item
#: zsh.texi:18049
#, no-wrap
msgid "@t{vi-backward-delete-char} (unbound) (@t{X}) (@t{^H})"
msgstr ""

#. type: table
#: zsh.texi:18053
msgid ""
"Delete the character behind the cursor, without changing lines.  If in "
"insert mode, this won't delete past the point where insert mode was last "
"entered."
msgstr ""

#. type: table
#: zsh.texi:18057
msgid "Delete the word behind the cursor."
msgstr ""

#. type: t{#1}
#: zsh.texi:18058 zsh.texi:18059
#, no-wrap
msgid "backward-kill-line"
msgstr ""

#. type: table
#: zsh.texi:18061
msgid "Kill from the beginning of the line to the cursor position."
msgstr ""

#. type: item
#: zsh.texi:18063
#, no-wrap
msgid "@t{backward-kill-word} (@t{^W ESC-^H ESC-^?}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18065
msgid "Kill the word behind the cursor."
msgstr ""

#. type: item
#: zsh.texi:18067
#, no-wrap
msgid "@t{vi-backward-kill-word} (unbound) (unbound) (@t{^W})"
msgstr ""

#. type: table
#: zsh.texi:18070
msgid ""
"Kill the word behind the cursor, without going past the point where insert "
"mode was last entered."
msgstr ""

#. type: tindex
#: zsh.texi:18071
#, no-wrap
msgid "capitalize-word"
msgstr ""

#. type: item
#: zsh.texi:18072
#, no-wrap
msgid "@t{capitalize-word} (@t{ESC-C ESC-c}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18074
msgid "Capitalize the current word and move past it."
msgstr ""

#. type: tindex
#: zsh.texi:18075
#, no-wrap
msgid "vi-change"
msgstr ""

#. type: item
#: zsh.texi:18076
#, no-wrap
msgid "@t{vi-change} (unbound) (@t{c}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18081
msgid ""
"Read a movement command from the keyboard, and kill from the cursor position "
"to the endpoint of the movement.  Then enter insert mode.  If the command is "
"@t{vi-change}, change the current line."
msgstr ""

#. type: table
#: zsh.texi:18087
msgid ""
"For compatibility with vi, if the command is @t{vi-forward-word} or "
"@t{vi-forward-blank-word}, the whitespace after the word is not included. If "
"you prefer the more consistent behaviour with the whitespace included use "
"the following key binding:"
msgstr ""

#. type: example
#: zsh.texi:18091
#, no-wrap
msgid "bindkey -a -s cw dwi\n"
msgstr ""

#. type: tindex
#: zsh.texi:18093
#, no-wrap
msgid "vi-change-eol"
msgstr ""

#. type: item
#: zsh.texi:18094
#, no-wrap
msgid "@t{vi-change-eol} (unbound) (@t{C}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18096
msgid "Kill to the end of the line and enter insert mode."
msgstr ""

#. type: tindex
#: zsh.texi:18097
#, no-wrap
msgid "vi-change-whole-line"
msgstr ""

#. type: item
#: zsh.texi:18098
#, no-wrap
msgid "@t{vi-change-whole-line} (unbound) (@t{S}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18100
msgid "Kill the current line and enter insert mode."
msgstr ""

#. type: tindex
#: zsh.texi:18101
#, no-wrap
msgid "copy-region-as-kill"
msgstr ""

#. type: item
#: zsh.texi:18102
#, no-wrap
msgid "@t{copy-region-as-kill} (@t{ESC-W ESC-w}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18104
msgid "Copy the area from the cursor to the mark to the kill buffer."
msgstr ""

#. type: table
#: zsh.texi:18110
msgid ""
"If called from a ZLE widget function in the form `@t{zle "
"copy-region-as-kill} @var{string}' then @var{string} will be taken as the "
"text to copy to the kill buffer.  The cursor, the mark and the text on the "
"command line are not used in this case."
msgstr ""

#. type: tindex
#: zsh.texi:18111
#, no-wrap
msgid "copy-prev-word"
msgstr ""

#. type: item
#: zsh.texi:18112
#, no-wrap
msgid "@t{copy-prev-word} (@t{ESC-^_}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18114
msgid "Duplicate the word to the left of the cursor."
msgstr ""

#. type: t{#1}
#: zsh.texi:18115 zsh.texi:18116
#, no-wrap
msgid "copy-prev-shell-word"
msgstr ""

#. type: table
#: zsh.texi:18120
msgid ""
"Like @t{copy-prev-word}, but the word is found by using shell parsing, "
"whereas @t{copy-prev-word} looks for blanks. This makes a difference when "
"the word is quoted and contains spaces."
msgstr ""

#. type: tindex
#: zsh.texi:18121
#, no-wrap
msgid "vi-delete"
msgstr ""

#. type: item
#: zsh.texi:18122
#, no-wrap
msgid "@t{vi-delete} (unbound) (@t{d}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18126
msgid ""
"Read a movement command from the keyboard, and kill from the cursor position "
"to the endpoint of the movement.  If the command is @t{vi-delete}, kill the "
"current line."
msgstr ""

#. type: t{#1}
#: zsh.texi:18127 zsh.texi:18128
#, no-wrap
msgid "delete-char"
msgstr ""

#. type: table
#: zsh.texi:18130
msgid "Delete the character under the cursor."
msgstr ""

#. type: tindex
#: zsh.texi:18131
#, no-wrap
msgid "vi-delete-char"
msgstr ""

#. type: item
#: zsh.texi:18132
#, no-wrap
msgid "@t{vi-delete-char} (unbound) (@t{x}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18135
msgid ""
"Delete the character under the cursor, without going past the end of the "
"line."
msgstr ""

#. type: t{#1}
#: zsh.texi:18136 zsh.texi:18137
#, no-wrap
msgid "delete-word"
msgstr ""

#. type: table
#: zsh.texi:18139
msgid "Delete the current word."
msgstr ""

#. type: tindex
#: zsh.texi:18140
#, no-wrap
msgid "down-case-word"
msgstr ""

#. type: item
#: zsh.texi:18141
#, no-wrap
msgid "@t{down-case-word} (@t{ESC-L ESC-l}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18143
msgid "Convert the current word to all lowercase and move past it."
msgstr ""

#. type: tindex
#: zsh.texi:18144
#, no-wrap
msgid "vi-down-case"
msgstr ""

#. type: item
#: zsh.texi:18145
#, no-wrap
msgid "@t{vi-down-case} (unbound) (@t{gu}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18150
msgid ""
"Read a movement command from the keyboard, and convert all characters from "
"the cursor position to the endpoint of the movement to lowercase.  If the "
"movement command is @t{vi-down-case}, swap the case of all characters on the "
"current line."
msgstr ""

#. type: tindex
#: zsh.texi:18151
#, no-wrap
msgid "kill-word"
msgstr ""

#. type: item
#: zsh.texi:18152
#, no-wrap
msgid "@t{kill-word} (@t{ESC-D ESC-d}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18154
msgid "Kill the current word."
msgstr ""

#. type: t{#1}
#: zsh.texi:18155 zsh.texi:18156
#, no-wrap
msgid "gosmacs-transpose-chars"
msgstr ""

#. type: table
#: zsh.texi:18158
msgid "Exchange the two characters behind the cursor."
msgstr ""

#. type: tindex
#: zsh.texi:18159
#, no-wrap
msgid "vi-indent"
msgstr ""

#. type: item
#: zsh.texi:18160
#, no-wrap
msgid "@t{vi-indent} (unbound) (@t{>}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18162
msgid "Indent a number of lines."
msgstr ""

#. type: t{#1}
#: zsh.texi:18163 zsh.texi:28357
#, no-wrap
msgid "vi-insert"
msgstr ""

#. type: item
#: zsh.texi:18164
#, no-wrap
msgid "@t{vi-insert} (unbound) (@t{i}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18166
msgid "Enter insert mode."
msgstr ""

#. type: tindex
#: zsh.texi:18167
#, no-wrap
msgid "vi-insert-bol"
msgstr ""

#. type: item
#: zsh.texi:18168
#, no-wrap
msgid "@t{vi-insert-bol} (unbound) (@t{I}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18170
msgid "Move to the first non-blank character on the line and enter insert mode."
msgstr ""

#. type: tindex
#: zsh.texi:18171
#, no-wrap
msgid "vi-join"
msgstr ""

#. type: item
#: zsh.texi:18172
#, no-wrap
msgid "@t{vi-join} (@t{^X^J}) (@t{J}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18174
msgid "Join the current line with the next one."
msgstr ""

#. type: tindex
#: zsh.texi:18175
#, no-wrap
msgid "kill-line"
msgstr ""

#. type: item
#: zsh.texi:18176
#, no-wrap
msgid "@t{kill-line} (@t{^K}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18179
msgid ""
"Kill from the cursor to the end of the line.  If already on the end of the "
"line, kill the newline character."
msgstr ""

#. type: tindex
#: zsh.texi:18180
#, no-wrap
msgid "vi-kill-line"
msgstr ""

#. type: item
#: zsh.texi:18181
#, no-wrap
msgid "@t{vi-kill-line} (unbound) (unbound) (@t{^U})"
msgstr ""

#. type: table
#: zsh.texi:18183
msgid "Kill from the cursor back to wherever insert mode was last entered."
msgstr ""

#. type: tindex
#: zsh.texi:18184
#, no-wrap
msgid "vi-kill-eol"
msgstr ""

#. type: item
#: zsh.texi:18185
#, no-wrap
msgid "@t{vi-kill-eol} (unbound) (@t{D}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18187
msgid "Kill from the cursor to the end of the line."
msgstr ""

#. type: t{#1}
#: zsh.texi:18188 zsh.texi:18189
#, no-wrap
msgid "kill-region"
msgstr ""

#. type: table
#: zsh.texi:18191
msgid "Kill from the cursor to the mark."
msgstr ""

#. type: tindex
#: zsh.texi:18192
#, no-wrap
msgid "kill-buffer"
msgstr ""

#. type: item
#: zsh.texi:18193
#, no-wrap
msgid "@t{kill-buffer} (@t{^X^K}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18195
msgid "Kill the entire buffer."
msgstr ""

#. type: tindex
#: zsh.texi:18196
#, no-wrap
msgid "kill-whole-line"
msgstr ""

#. type: item
#: zsh.texi:18197
#, no-wrap
msgid "@t{kill-whole-line} (@t{^U}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18199
msgid "Kill the current line."
msgstr ""

#. type: tindex
#: zsh.texi:18200
#, no-wrap
msgid "vi-match-bracket"
msgstr ""

#. type: item
#: zsh.texi:18201
#, no-wrap
msgid "@t{vi-match-bracket} (@t{^X^B}) (@t{%}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18206
msgid ""
"Move to the bracket character (one of @t{@{@}}, @t{()} or @t{[]}) that "
"matches the one under the cursor.  If the cursor is not on a bracket "
"character, move forward without going past the end of the line to find one, "
"and then go to the matching bracket."
msgstr ""

#. type: tindex
#: zsh.texi:18207
#, no-wrap
msgid "vi-open-line-above"
msgstr ""

#. type: item
#: zsh.texi:18208
#, no-wrap
msgid "@t{vi-open-line-above} (unbound) (@t{O}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18210
msgid "Open a line above the cursor and enter insert mode."
msgstr ""

#. type: tindex
#: zsh.texi:18211
#, no-wrap
msgid "vi-open-line-below"
msgstr ""

#. type: item
#: zsh.texi:18212
#, no-wrap
msgid "@t{vi-open-line-below} (unbound) (@t{o}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18214
msgid "Open a line below the cursor and enter insert mode."
msgstr ""

#. type: tindex
#: zsh.texi:18215
#, no-wrap
msgid "vi-oper-swap-case"
msgstr ""

#. type: item
#: zsh.texi:18216
#, no-wrap
msgid "@t{vi-oper-swap-case} (unbound) (@t{g~}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18222
msgid ""
"Read a movement command from the keyboard, and swap the case of all "
"characters from the cursor position to the endpoint of the movement.  If the "
"movement command is @t{vi-oper-swap-case}, swap the case of all characters "
"on the current line."
msgstr ""

#. type: tindex
#: zsh.texi:18223
#, no-wrap
msgid "overwrite-mode"
msgstr ""

#. type: item
#: zsh.texi:18224
#, no-wrap
msgid "@t{overwrite-mode} (@t{^X^O}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18226
msgid "Toggle between overwrite mode and insert mode."
msgstr ""

#. type: tindex
#: zsh.texi:18227
#, no-wrap
msgid "vi-put-before"
msgstr ""

#. type: item
#: zsh.texi:18228
#, no-wrap
msgid "@t{vi-put-before} (unbound) (@t{P}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18232
msgid ""
"Insert the contents of the kill buffer before the cursor.  If the kill "
"buffer contains a sequence of lines (as opposed to characters), paste it "
"above the current line."
msgstr ""

#. type: tindex
#: zsh.texi:18233
#, no-wrap
msgid "vi-put-after"
msgstr ""

#. type: item
#: zsh.texi:18234
#, no-wrap
msgid "@t{vi-put-after} (unbound) (@t{p}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18238
msgid ""
"Insert the contents of the kill buffer after the cursor.  If the kill buffer "
"contains a sequence of lines (as opposed to characters), paste it below the "
"current line."
msgstr ""

#. type: tindex
#: zsh.texi:18239
#, no-wrap
msgid "put-replace-selection"
msgstr ""

#. type: item
#: zsh.texi:18240
#, no-wrap
msgid "@t{put-replace-selection} (unbound) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18245
msgid ""
"Replace the contents of the current region or selection with the contents of "
"the kill buffer. If the kill buffer contains a sequence of lines (as opposed "
"to characters), the current line will be split by the pasted lines."
msgstr ""

#. type: item
#: zsh.texi:18247
#, no-wrap
msgid "@t{quoted-insert} (@t{^V}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18250
msgid ""
"Insert the next character typed into the buffer literally.  An interrupt "
"character will not be inserted."
msgstr ""

#. type: item
#: zsh.texi:18252
#, no-wrap
msgid "@t{vi-quoted-insert} (unbound) (unbound) (@t{^Q ^V})"
msgstr ""

#. type: table
#: zsh.texi:18256
msgid ""
"Display a `@t{^}' at the cursor position, and insert the next character "
"typed into the buffer literally.  An interrupt character will not be "
"inserted."
msgstr ""

#. type: tindex
#: zsh.texi:18257
#, no-wrap
msgid "quote-line"
msgstr ""

#. type: item
#: zsh.texi:18258
#, no-wrap
msgid "@t{quote-line} (@t{ESC-'}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18262
msgid ""
"Quote the current line; that is, put a `@t{'}' character at the beginning "
"and the end, and convert all `@t{'}' characters to `@t{'\\@value{dsq}}'."
msgstr ""

#. type: tindex
#: zsh.texi:18263
#, no-wrap
msgid "quote-region"
msgstr ""

#. type: item
#: zsh.texi:18264
#, no-wrap
msgid "@t{quote-region} (@t{ESC-\"}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18266
msgid "Quote the region from the cursor to the mark."
msgstr ""

#. type: tindex
#: zsh.texi:18267
#, no-wrap
msgid "vi-replace"
msgstr ""

#. type: item
#: zsh.texi:18268
#, no-wrap
msgid "@t{vi-replace} (unbound) (@t{R}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18270
msgid "Enter overwrite mode."
msgstr ""

#. type: tindex
#: zsh.texi:18271
#, no-wrap
msgid "vi-repeat-change"
msgstr ""

#. type: item
#: zsh.texi:18272
#, no-wrap
msgid "@t{vi-repeat-change} (unbound) (@t{.}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18278
msgid ""
"Repeat the last vi mode text modification.  If a count was used with the "
"modification, it is remembered.  If a count is given to this command, it "
"overrides the remembered count, and is remembered for future uses of this "
"command.  The cut buffer specification is similarly remembered."
msgstr ""

#. type: tindex
#: zsh.texi:18279
#, no-wrap
msgid "vi-replace-chars"
msgstr ""

#. type: item
#: zsh.texi:18280
#, no-wrap
msgid "@t{vi-replace-chars} (unbound) (@t{r}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18283
msgid ""
"Replace the character under the cursor with a character read from the "
"keyboard."
msgstr ""

#. type: tindex
#: zsh.texi:18284
#, no-wrap
msgid "self-insert"
msgstr ""

#. type: item
#: zsh.texi:18285
#, no-wrap
msgid ""
"@t{self-insert} (printable characters) (unbound) (printable characters and "
"some control characters)"
msgstr ""

#. type: table
#: zsh.texi:18287
msgid "Insert a character into the buffer at the cursor position."
msgstr ""

#. type: tindex
#: zsh.texi:18288
#, no-wrap
msgid "self-insert-unmeta"
msgstr ""

#. type: item
#: zsh.texi:18289
#, no-wrap
msgid "@t{self-insert-unmeta} (@t{ESC-^I ESC-^J ESC-^M}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18292
msgid ""
"Insert a character into the buffer after stripping the meta bit and "
"converting ^M to ^J."
msgstr ""

#. type: tindex
#: zsh.texi:18293
#, no-wrap
msgid "vi-substitute"
msgstr ""

#. type: item
#: zsh.texi:18294
#, no-wrap
msgid "@t{vi-substitute} (unbound) (@t{s}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18296
msgid "Substitute the next character(s)."
msgstr ""

#. type: tindex
#: zsh.texi:18297
#, no-wrap
msgid "vi-swap-case"
msgstr ""

#. type: item
#: zsh.texi:18298
#, no-wrap
msgid "@t{vi-swap-case} (unbound) (@t{~}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18300
msgid "Swap the case of the character under the cursor and move past it."
msgstr ""

#. type: tindex
#: zsh.texi:18301
#, no-wrap
msgid "transpose-chars"
msgstr ""

#. type: item
#: zsh.texi:18302
#, no-wrap
msgid "@t{transpose-chars} (@t{^T}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18307
msgid ""
"Exchange the two characters to the left of the cursor if at end of line, "
"else exchange the character under the cursor with the character to the left."
msgstr ""

#. type: tindex
#: zsh.texi:18308
#, no-wrap
msgid "transpose-words"
msgstr ""

#. type: item
#: zsh.texi:18309
#, no-wrap
msgid "@t{transpose-words} (@t{ESC-T ESC-t}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18311
msgid "Exchange the current word with the one before it."
msgstr ""

#. type: table
#: zsh.texi:18317
msgid ""
"With a positive numeric argument @emph{N}, the word around the cursor, or "
"following it if the cursor is between words, is transposed with the "
"preceding @emph{N} words.  The cursor is put at the end of the resulting "
"group of words."
msgstr ""

#. type: table
#: zsh.texi:18322
msgid ""
"With a negative numeric argument @emph{-N}, the effect is the same as using "
"a positive argument @emph{N} except that the original cursor position is "
"retained, regardless of how the words are rearranged."
msgstr ""

#. type: tindex
#: zsh.texi:18323
#, no-wrap
msgid "vi-unindent"
msgstr ""

#. type: item
#: zsh.texi:18324
#, no-wrap
msgid "@t{vi-unindent} (unbound) (@t{<}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18326
msgid "Unindent a number of lines."
msgstr ""

#. type: tindex
#: zsh.texi:18327
#, no-wrap
msgid "vi-up-case"
msgstr ""

#. type: item
#: zsh.texi:18328
#, no-wrap
msgid "@t{vi-up-case} (unbound) (@t{gU}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18333
msgid ""
"Read a movement command from the keyboard, and convert all characters from "
"the cursor position to the endpoint of the movement to lowercase.  If the "
"movement command is @t{vi-up-case}, swap the case of all characters on the "
"current line."
msgstr ""

#. type: tindex
#: zsh.texi:18334
#, no-wrap
msgid "up-case-word"
msgstr ""

#. type: item
#: zsh.texi:18335
#, no-wrap
msgid "@t{up-case-word} (@t{ESC-U ESC-u}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18337
msgid "Convert the current word to all caps and move past it."
msgstr ""

#. type: tindex
#: zsh.texi:18338
#, no-wrap
msgid "yank"
msgstr ""

#. type: item
#: zsh.texi:18339
#, no-wrap
msgid "@t{yank} (@t{^Y}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18341
msgid "Insert the contents of the kill buffer at the cursor position."
msgstr ""

#. type: tindex
#: zsh.texi:18342
#, no-wrap
msgid "yank-pop"
msgstr ""

#. type: item
#: zsh.texi:18343
#, no-wrap
msgid "@t{yank-pop} (@t{ESC-y}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18347
msgid ""
"Remove the text just yanked, rotate the kill-ring (the history of previously "
"killed text) and yank the new top.  Only works following @t{yank}, "
"@t{vi-put-before}, @t{vi-put-after} or @t{yank-pop}."
msgstr ""

#. type: tindex
#: zsh.texi:18348
#, no-wrap
msgid "vi-yank"
msgstr ""

#. type: item
#: zsh.texi:18349
#, no-wrap
msgid "@t{vi-yank} (unbound) (@t{y}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18354
msgid ""
"Read a movement command from the keyboard, and copy the region from the "
"cursor position to the endpoint of the movement into the kill buffer.  If "
"the command is @t{vi-yank}, copy the current line."
msgstr ""

#. type: tindex
#: zsh.texi:18355
#, no-wrap
msgid "vi-yank-whole-line"
msgstr ""

#. type: item
#: zsh.texi:18356
#, no-wrap
msgid "@t{vi-yank-whole-line} (unbound) (@t{Y}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18358
msgid "Copy the current line into the kill buffer."
msgstr ""

#. type: t{#1}
#: zsh.texi:18359 zsh.texi:18360
#, no-wrap
msgid "vi-yank-eol"
msgstr ""

#. type: table
#: zsh.texi:18364
msgid ""
"Copy the region from the cursor position to the end of the line into the "
"kill buffer.  Arguably, this is what Y should do in vi, but it isn't what it "
"actually does."
msgstr ""

#. type: tindex
#: zsh.texi:18371
#, no-wrap
msgid "digit-argument"
msgstr ""

#. type: item
#: zsh.texi:18372
#, no-wrap
msgid "@t{digit-argument} (@t{ESC-0}..@t{ESC-9}) (@t{1}-@t{9}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18376
msgid ""
"Start a new numeric argument, or add to the current one.  See also "
"@t{vi-digit-or-beginning-of-line}.  This only works if bound to a key "
"sequence ending in a decimal digit."
msgstr ""

#. type: table
#: zsh.texi:18380
msgid ""
"Inside a widget function, a call to this function treats the last key of the "
"key sequence which called the widget as the digit."
msgstr ""

#. type: tindex
#: zsh.texi:18381
#, no-wrap
msgid "neg-argument"
msgstr ""

#. type: item
#: zsh.texi:18382
#, no-wrap
msgid "@t{neg-argument} (@t{ESC-}@t{-}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18384
msgid "Changes the sign of the following argument."
msgstr ""

#. type: t{#1}
#: zsh.texi:18385 zsh.texi:18386
#, no-wrap
msgid "universal-argument"
msgstr ""

#. type: table
#: zsh.texi:18394
msgid ""
"Multiply the argument of the next command by 4.  Alternatively, if this "
"command is followed by an integer (positive or negative), use that as the "
"argument for the next command.  Thus digits cannot be repeated using this "
"command.  For example, if this command occurs twice, followed immediately by "
"@t{forward-char}, move forward sixteen spaces; if instead it is followed by "
"@t{-2}, then @t{forward-char}, move backward two spaces."
msgstr ""

#. type: table
#: zsh.texi:18399
msgid ""
"Inside a widget function, if passed an argument, i.e. `@t{zle "
"universal-argument} @var{num}', the numeric argument will be set to "
"@var{num}; this is equivalent to `@t{NUMERIC=}@var{num}'."
msgstr ""

#. type: t{#1}
#: zsh.texi:18400 zsh.texi:18401
#, no-wrap
msgid "argument-base"
msgstr ""

#. type: table
#: zsh.texi:18409
msgid ""
"Use the existing numeric argument as a numeric base, which must be in the "
"range 2 to 36 inclusive.  Subsequent use of @t{digit-argument} and "
"@t{universal-argument} will input a new numeric argument in the given base.  "
"The usual hexadecimal convention is used: the letter @t{a} or @t{A} "
"corresponds to 10, and so on.  Arguments in bases requiring digits from 10 "
"upwards are more conveniently input with @t{universal-argument}, since "
"@t{ESC-a} etc. are not usually bound to @t{digit-argument}."
msgstr ""

#. type: table
#: zsh.texi:18414
msgid ""
"The function can be used with a command argument inside a user-defined "
"widget.  The following code sets the base to 16 and lets the user input a "
"hexadecimal argument until a key out of the digit range is typed:"
msgstr ""

#. type: example
#: zsh.texi:18419
#, no-wrap
msgid ""
"zle argument-base 16\n"
"zle universal-argument\n"
msgstr ""

#. type: node
#: zsh.texi:18422 zsh.texi:18499 zsh.texi:18501 zsh.texi:18923
#, no-wrap
msgid "Miscellaneous"
msgstr ""

#. type: t{#1}
#: zsh.texi:18427 zsh.texi:18428
#, no-wrap
msgid "accept-and-menu-complete"
msgstr ""

#. type: table
#: zsh.texi:18431
msgid ""
"In a menu completion, insert the current completion into the buffer, and "
"advance to the next possible completion."
msgstr ""

#. type: t{#1}
#: zsh.texi:18432 zsh.texi:18433
#, no-wrap
msgid "complete-word"
msgstr ""

#. type: table
#: zsh.texi:18435
msgid "Attempt completion on the current word."
msgstr ""

#. type: tindex
#: zsh.texi:18436
#, no-wrap
msgid "delete-char-or-list"
msgstr ""

#. type: item
#: zsh.texi:18437
#, no-wrap
msgid "@t{delete-char-or-list} (@t{^D}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18441
msgid ""
"Delete the character under the cursor.  If the cursor is at the end of the "
"line, list possible completions for the current word."
msgstr ""

#. type: t{#1}
#: zsh.texi:18442 zsh.texi:18443
#, no-wrap
msgid "expand-cmd-path"
msgstr ""

#. type: table
#: zsh.texi:18445
msgid "Expand the current command to its full pathname."
msgstr ""

#. type: tindex
#: zsh.texi:18446
#, no-wrap
msgid "expand-or-complete"
msgstr ""

#. type: item
#: zsh.texi:18447
#, no-wrap
msgid "@t{expand-or-complete} (@t{TAB}) (unbound) (@t{TAB})"
msgstr ""

#. type: table
#: zsh.texi:18451
msgid ""
"Attempt shell expansion on the current word.  If that fails, attempt "
"completion."
msgstr ""

#. type: t{#1}
#: zsh.texi:18452 zsh.texi:18453
#, no-wrap
msgid "expand-or-complete-prefix"
msgstr ""

#. type: table
#: zsh.texi:18455
msgid "Attempt shell expansion on the current word up to cursor."
msgstr ""

#. type: tindex
#: zsh.texi:18456
#, no-wrap
msgid "expand-history"
msgstr ""

#. type: item
#: zsh.texi:18457
#, no-wrap
msgid "@t{expand-history} (@t{ESC-space ESC-!}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18459
msgid "Perform history expansion on the edit buffer."
msgstr ""

#. type: tindex
#: zsh.texi:18460
#, no-wrap
msgid "expand-word"
msgstr ""

#. type: item
#: zsh.texi:18461
#, no-wrap
msgid "@t{expand-word} (@t{^X*}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18463
msgid "Attempt shell expansion on the current word."
msgstr ""

#. type: tindex
#: zsh.texi:18464
#, no-wrap
msgid "list-choices"
msgstr ""

#. type: item
#: zsh.texi:18465
#, no-wrap
msgid "@t{list-choices} (@t{ESC-^D}) (@t{^D =}) (@t{^D})"
msgstr ""

#. type: table
#: zsh.texi:18467
msgid "List possible completions for the current word."
msgstr ""

#. type: tindex
#: zsh.texi:18468
#, no-wrap
msgid "list-expand"
msgstr ""

#. type: item
#: zsh.texi:18469
#, no-wrap
msgid "@t{list-expand} (@t{^Xg ^XG}) (@t{^G}) (@t{^G})"
msgstr ""

#. type: table
#: zsh.texi:18471
msgid "List the expansion of the current word."
msgstr ""

#. type: table
#: zsh.texi:18476
msgid ""
"Perform history expansion and insert a space into the buffer.  This is "
"intended to be bound to space."
msgstr ""

#. type: t{#1}
#: zsh.texi:18477 zsh.texi:18479
#, no-wrap
msgid "menu-complete"
msgstr ""

#. type: pindex
#: zsh.texi:18478
#, no-wrap
msgid "MENU_COMPLETE, use of"
msgstr ""

#. type: table
#: zsh.texi:18482
msgid ""
"Like @t{complete-word}, except that menu completion is used.  See the "
"@t{MENU_COMPLETE} option."
msgstr ""

#. type: t{#1}
#: zsh.texi:18483 zsh.texi:18484
#, no-wrap
msgid "menu-expand-or-complete"
msgstr ""

#. type: table
#: zsh.texi:18486
msgid "Like @t{expand-or-complete}, except that menu completion is used."
msgstr ""

#. type: t{#1}
#: zsh.texi:18487 zsh.texi:18488 zsh.texi:28354
#, no-wrap
msgid "reverse-menu-complete"
msgstr ""

#. type: table
#: zsh.texi:18492
msgid ""
"Perform menu completion, like @t{menu-complete}, except that if a menu "
"completion is already in progress, move to the @emph{previous} completion "
"rather than the next."
msgstr ""

#. type: t{#1}
#: zsh.texi:18493 zsh.texi:18494
#, no-wrap
msgid "end-of-list"
msgstr ""

#. type: table
#: zsh.texi:18497
msgid ""
"When a previous completion displayed a list below the prompt, this widget "
"can be used to move the prompt below the list."
msgstr ""

#. type: item
#: zsh.texi:18505
#, no-wrap
msgid "@t{accept-and-hold} (@t{ESC-A ESC-a}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18508
msgid "Push the contents of the buffer on the buffer stack and execute it."
msgstr ""

#. type: table
#: zsh.texi:18514
msgid ""
"Execute the contents of the buffer.  Then search the history list for a line "
"matching the current one and push the event following onto the buffer stack."
msgstr ""

#. type: item
#: zsh.texi:18516
#, no-wrap
msgid "@t{accept-line} (@t{^J ^M}) (@t{^J ^M}) (@t{^J ^M})"
msgstr ""

#. type: table
#: zsh.texi:18519
msgid ""
"Finish editing the buffer.  Normally this causes the buffer to be executed "
"as a shell command."
msgstr ""

#. type: item
#: zsh.texi:18521
#, no-wrap
msgid "@t{accept-line-and-down-history} (@t{^O}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18524
msgid ""
"Execute the current line, and push the next history event on the buffer "
"stack."
msgstr ""

#. type: t{#1}
#: zsh.texi:18525 zsh.texi:18526
#, no-wrap
msgid "auto-suffix-remove"
msgstr ""

#. type: table
#: zsh.texi:18530
msgid ""
"If the previous action added a suffix (space, slash, etc.) to the word on "
"the command line, remove it.  Otherwise do nothing.  Removing the suffix "
"ends any active menu completion or menu selection."
msgstr ""

#. type: table
#: zsh.texi:18534
msgid ""
"This widget is intended to be called from user-defined widgets to enforce a "
"desired suffix-removal behavior."
msgstr ""

#. type: t{#1}
#: zsh.texi:18535 zsh.texi:18536
#, no-wrap
msgid "auto-suffix-retain"
msgstr ""

#. type: table
#: zsh.texi:18540
msgid ""
"If the previous action added a suffix (space, slash, etc.) to the word on "
"the command line, force it to be preserved.  Otherwise do nothing.  "
"Retaining the suffix ends any active menu completion or menu selection."
msgstr ""

#. type: table
#: zsh.texi:18544
msgid ""
"This widget is intended to be called from user-defined widgets to enforce a "
"desired suffix-preservation behavior."
msgstr ""

#. type: t{#1}
#: zsh.texi:18545 zsh.texi:18546
#, no-wrap
msgid "beep"
msgstr ""

#. type: table
#: zsh.texi:18548
msgid "Beep, unless the @t{BEEP} option is unset."
msgstr ""

#. type: tindex
#: zsh.texi:18549
#, no-wrap
msgid "bracketed-paste"
msgstr ""

#. type: item
#: zsh.texi:18550
#, no-wrap
msgid "@t{bracketed-paste} (@t{^[[200~}) (@t{^[[200~}) (@t{^[[200~})"
msgstr ""

#. type: table
#: zsh.texi:18554
msgid ""
"This widget is invoked when text is pasted to the terminal emulator. It is "
"not intended to be bound to actual keys but instead to the special sequence "
"generated by the terminal emulator when text is pasted."
msgstr ""

#. type: table
#: zsh.texi:18560
msgid ""
"When invoked interactively, the pasted text is inserted to the buffer and "
"placed in the cutbuffer.  If a numeric argument is given, shell quoting will "
"be applied to the pasted text before it is inserted."
msgstr ""

#. type: table
#: zsh.texi:18564
msgid ""
"When a named buffer is specified with @t{vi-set-buffer} (@t{\"x}), the "
"pasted text is stored in that named buffer but not inserted."
msgstr ""

#. type: table
#: zsh.texi:18569
msgid ""
"When called from a widget function as `@t{bracketed-paste} @var{name}`, the "
"pasted text is assigned to the variable @var{name} and no other processing "
"is done."
msgstr ""

#. type: table
#: zsh.texi:18572
msgid "See also the @t{zle_bracketed_paste} parameter."
msgstr ""

#. type: item
#: zsh.texi:18574
#, no-wrap
msgid "@t{vi-cmd-mode} (@t{^X^V}) (unbound) (@t{^[})"
msgstr ""

#. type: table
#: zsh.texi:18577
msgid ""
"Enter command mode; that is, select the `@t{vicmd}' keymap.  Yes, this is "
"bound by default in emacs mode."
msgstr ""

#. type: t{#1}
#: zsh.texi:18578 zsh.texi:18579
#, no-wrap
msgid "vi-caps-lock-panic"
msgstr ""

#. type: table
#: zsh.texi:18583
msgid ""
"Hang until any lowercase key is pressed.  This is for vi users without the "
"mental capacity to keep track of their caps lock key (like the author)."
msgstr ""

#. type: item
#: zsh.texi:18585
#, no-wrap
msgid "@t{clear-screen} (@t{^L ESC-^L}) (@t{^L}) (@t{^L})"
msgstr ""

#. type: table
#: zsh.texi:18587
msgid "Clear the screen and redraw the prompt."
msgstr ""

#. type: t{#1}
#: zsh.texi:18588 zsh.texi:18589
#, no-wrap
msgid "deactivate-region"
msgstr ""

#. type: table
#: zsh.texi:18592
msgid ""
"Make the current region inactive. This disables vim-style visual selection "
"mode if it is active."
msgstr ""

#. type: t{#1}
#: zsh.texi:18593 zsh.texi:18594
#, no-wrap
msgid "describe-key-briefly"
msgstr ""

#. type: table
#: zsh.texi:18596
msgid "Reads a key sequence, then prints the function bound to that sequence."
msgstr ""

#. type: tindex
#: zsh.texi:18597
#, no-wrap
msgid "exchange-point-and-mark"
msgstr ""

#. type: item
#: zsh.texi:18598
#, no-wrap
msgid "@t{exchange-point-and-mark} (@t{^X^X}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18604
msgid ""
"Exchange the cursor position (point) with the position of the mark.  Unless "
"a negative numeric argument is given, the region between point and mark is "
"activated so that it can be highlighted.  If a zero numeric argument is "
"given, the region is activated but point and mark are not swapped."
msgstr ""

#. type: tindex
#: zsh.texi:18605
#, no-wrap
msgid "execute-named-cmd"
msgstr ""

#. type: item
#: zsh.texi:18606
#, no-wrap
msgid "@t{execute-named-cmd} (@t{ESC-x}) (@t{:}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18611
msgid ""
"Read the name of an editor command and execute it.  Aliasing this widget "
"with `@t{zle -A}' or replacing it with `@t{zle -N}' has no effect when "
"interpreting key bindings, but `@t{zle execute-named-cmd}' will invoke such "
"an alias or replacement."
msgstr ""

#. type: table
#: zsh.texi:18638
msgid ""
"A restricted set of editing functions is available in the mini-buffer.  Keys "
"are looked up in the special @t{command} keymap, and if not found there in "
"the main keymap.  An interrupt signal, as defined by the stty setting, will "
"abort the function.  Note that the following always perform the same task "
"within the @t{executed-named-cmd} environment and cannot be replaced by user "
"defined widgets, nor can the set of functions be extended.  The allowed "
"functions are: @t{backward-delete-char}, @t{vi-backward-delete-char}, "
"@t{clear-screen}, @t{redisplay}, @t{quoted-insert}, @t{vi-quoted-insert}, "
"@t{backward-kill-word}, @t{vi-backward-kill-word}, @t{kill-whole-line}, "
"@t{vi-kill-line}, @t{backward-kill-line}, @t{list-choices}, "
"@t{delete-char-or-list}, @t{complete-word}, @t{accept-line}, "
"@t{expand-or-complete} and @t{expand-or-complete-prefix}."
msgstr ""

#. type: table
#: zsh.texi:18648
msgid ""
"@t{kill-region} kills the last word, and vi-cmd-mode is treated the same as "
"accept-line.  The space and tab characters, if not bound to one of these "
"functions, will complete the name and then list the possibilities if the "
"@t{AUTO_LIST} option is set.  Any other character that is not bound to "
"@t{self-insert} or @t{self-insert-unmeta} will beep and be ignored.  The "
"bindings of the current insert mode will be used."
msgstr ""

#. type: table
#: zsh.texi:18651
msgid "Currently this command may not be redefined or called by name."
msgstr ""

#. type: tindex
#: zsh.texi:18652
#, no-wrap
msgid "execute-last-named-cmd"
msgstr ""

#. type: item
#: zsh.texi:18653
#, no-wrap
msgid "@t{execute-last-named-cmd} (@t{ESC-z}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18655
msgid "Redo the last function executed with @t{execute-named-cmd}."
msgstr ""

#. type: table
#: zsh.texi:18659
msgid ""
"Like @t{execute-named-cmd}, this command may not be redefined, but it may be "
"called by name."
msgstr ""

#. type: tindex
#: zsh.texi:18660
#, no-wrap
msgid "get-line"
msgstr ""

#. type: item
#: zsh.texi:18661
#, no-wrap
msgid "@t{get-line} (@t{ESC-G ESC-g}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18664
msgid "Pop the top line off the buffer stack and insert it at the cursor position."
msgstr ""

#. type: tindex
#: zsh.texi:18665
#, no-wrap
msgid "pound-insert"
msgstr ""

#. type: item
#: zsh.texi:18666
#, no-wrap
msgid "@t{pound-insert} (unbound) (@t{#}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18673
msgid ""
"If there is no # character at the beginning of the buffer, add one to the "
"beginning of each line.  If there is one, remove a # from each line that has "
"one.  In either case, accept the current line.  The @t{INTERACTIVE_COMMENTS} "
"option must be set for this to have any usefulness."
msgstr ""

#. type: t{#1}
#: zsh.texi:18674 zsh.texi:18675
#, no-wrap
msgid "vi-pound-insert"
msgstr ""

#. type: table
#: zsh.texi:18680
msgid ""
"If there is no # character at the beginning of the current line, add one.  "
"If there is one, remove it.  The @t{INTERACTIVE_COMMENTS} option must be set "
"for this to have any usefulness."
msgstr ""

#. type: t{#1}
#: zsh.texi:18681 zsh.texi:18682
#, no-wrap
msgid "push-input"
msgstr ""

#. type: table
#: zsh.texi:18690
msgid ""
"Push the entire current multiline construct onto the buffer stack and return "
"to the top-level (@t{PS1}) prompt.  If the current parser construct is only "
"a single line, this is exactly like @t{push-line}.  Next time the editor "
"starts up or is popped with @t{get-line}, the construct will be popped off "
"the top of the buffer stack and loaded into the editing buffer."
msgstr ""

#. type: tindex
#: zsh.texi:18691
#, no-wrap
msgid "push-line"
msgstr ""

#. type: item
#: zsh.texi:18692
#, no-wrap
msgid "@t{push-line} (@t{^Q ESC-Q ESC-q}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18698
msgid ""
"Push the current buffer onto the buffer stack and clear the buffer.  Next "
"time the editor starts up, the buffer will be popped off the top of the "
"buffer stack and loaded into the editing buffer."
msgstr ""

#. type: t{#1}
#: zsh.texi:18699 zsh.texi:18700
#, no-wrap
msgid "push-line-or-edit"
msgstr ""

#. type: table
#: zsh.texi:18705
msgid ""
"At the top-level (@t{PS1}) prompt, equivalent to @t{push-line}.  At a "
"secondary (@t{PS2}) prompt, move the entire current multiline construct into "
"the editor buffer.  The latter is equivalent to @t{push-input} followed by "
"@t{get-line}."
msgstr ""

#. type: t{#1}
#: zsh.texi:18706 zsh.texi:18707
#, no-wrap
msgid "read-command"
msgstr ""

#. type: table
#: zsh.texi:18715
msgid ""
"Only useful from a user-defined widget.  A keystroke is read just as in "
"normal operation, but instead of the command being executed the name of the "
"command that would be executed is stored in the shell parameter @t{REPLY}.  "
"This can be used as the argument of a future @t{zle} command.  If the key "
"sequence is not bound, status 1 is returned; typically, however, @t{REPLY} "
"is set to @t{undefined-key} to indicate a useless key sequence."
msgstr ""

#. type: t{#1}
#: zsh.texi:18716 zsh.texi:18717
#, no-wrap
msgid "recursive-edit"
msgstr ""

#. type: table
#: zsh.texi:18726
msgid ""
"Only useful from a user-defined widget.  At this point in the function, the "
"editor regains control until one of the standard widgets which would "
"normally cause zle to exit (typically an @t{accept-line} caused by hitting "
"the return key) is executed.  Instead, control returns to the user-defined "
"widget.  The status returned is non-zero if the return was caused by an "
"error, but the function still continues executing and hence may tidy up.  "
"This makes it safe for the user-defined widget to alter the command line or "
"key bindings temporarily."
msgstr ""

#. type: table
#: zsh.texi:18729
msgid "The following widget, @t{caps-lock}, serves as an example."
msgstr ""

#. type: example
#: zsh.texi:18735
#, no-wrap
msgid ""
"self-insert-ucase() @{\n"
"  LBUFFER+=$@{(U)KEYS[-1]@}\n"
"@}\n"
"\n"
msgstr ""

#. type: example
#: zsh.texi:18737
#, no-wrap
msgid ""
"integer stat\n"
"\n"
msgstr ""

#. type: example
#: zsh.texi:18741
#, no-wrap
msgid ""
"zle -N self-insert self-insert-ucase\n"
"zle -A caps-lock save-caps-lock\n"
"zle -A accept-line caps-lock\n"
"\n"
msgstr ""

#. type: example
#: zsh.texi:18744
#, no-wrap
msgid ""
"zle recursive-edit\n"
"stat=$?\n"
"\n"
msgstr ""

#. type: example
#: zsh.texi:18748
#, no-wrap
msgid ""
"zle -A .self-insert self-insert\n"
"zle -A save-caps-lock caps-lock\n"
"zle -D save-caps-lock\n"
"\n"
msgstr ""

#. type: example
#: zsh.texi:18750
#, no-wrap
msgid ""
"(( stat )) && zle send-break\n"
"\n"
msgstr ""

#. type: example
#: zsh.texi:18752
#, no-wrap
msgid "return $stat\n"
msgstr ""

#. type: table
#: zsh.texi:18762
msgid ""
"This causes typed letters to be inserted capitalised until either "
"@t{accept-line} (i.e. typically the return key) is typed or the "
"@t{caps-lock} widget is invoked again; the later is handled by saving the "
"old definition of @t{caps-lock} as @t{save-caps-lock} and then rebinding it "
"to invoke @t{accept-line}.  Note that an error from the recursive edit is "
"detected as a non-zero return status and propagated by using the "
"@t{send-break} widget."
msgstr ""

#. type: item
#: zsh.texi:18764
#, no-wrap
msgid "@t{redisplay} (unbound) (@t{^R}) (@t{^R})"
msgstr ""

#. type: table
#: zsh.texi:18766
msgid "Redisplays the edit buffer."
msgstr ""

#. type: tindex
#: zsh.texi:18767
#, no-wrap
msgid "reset-prompt"
msgstr ""

#. type: item
#: zsh.texi:18768
#, no-wrap
msgid "@t{reset-prompt} (unbound) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18775
msgid ""
"Force the prompts on both the left and right of the screen to be "
"re-expanded, then redisplay the edit buffer.  This reflects changes both to "
"the prompt variables themselves and changes in the expansion of the values "
"(for example, changes in time or directory, or changes to the value of "
"variables referred to by the prompt)."
msgstr ""

#. type: table
#: zsh.texi:18781
msgid ""
"Otherwise, the prompt is only expanded each time zle starts, and when the "
"display has been interrupted by output from another part of the shell (such "
"as a job notification) which causes the command line to be reprinted."
msgstr ""

#. type: table
#: zsh.texi:18784
msgid "@t{reset-prompt} doesn't alter the special parameter @t{LASTWIDGET}."
msgstr ""

#. type: t{#1}
#: zsh.texi:18787 zsh.texi:28158 zsh.texi:28285
#, no-wrap
msgid "send-break"
msgstr ""

#. type: item
#: zsh.texi:18788
#, no-wrap
msgid "@t{send-break} (@t{^G ESC-^G}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18794
msgid ""
"Abort the current editor function, e.g. @t{execute-named-command}, or the "
"editor itself, e.g. if you are in @t{vared}. Otherwise abort the parsing of "
"the current line; in this case the aborted line is available in the shell "
"variable @t{ZLE_LINE_ABORTED}.  If the editor is aborted from within "
"@t{vared}, the variable @t{ZLE_VARED_ABORTED} is set."
msgstr ""

#. type: findex
#: zsh.texi:18795 zsh.texi:40824
#, no-wrap
msgid "run-help"
msgstr ""

#. type: item
#: zsh.texi:18796
#, no-wrap
msgid "@t{run-help} (@t{ESC-H ESC-h}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18800
msgid ""
"Push the buffer onto the buffer stack, and execute the command `@t{run-help} "
"@var{cmd}', where @var{cmd} is the current command.  @t{run-help} is "
"normally aliased to @t{man}."
msgstr ""

#. type: tindex
#: zsh.texi:18801
#, no-wrap
msgid "vi-set-buffer"
msgstr ""

#. type: item
#: zsh.texi:18802
#, no-wrap
msgid "@t{vi-set-buffer} (unbound) (@t{\"}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18808
msgid ""
"Specify a buffer to be used in the following command.  There are 37 buffers "
"that can be specified: the 26 `named' buffers @t{\"a} to @t{\"z}, the `yank' "
"buffer @t{\"0}, the nine `queued' buffers @t{\"1} to @t{\"9} and the `black "
"hole' buffer @t{\"_}.  The named buffers can also be specified as @t{\"A} to "
"@t{\"Z}."
msgstr ""

#. type: table
#: zsh.texi:18816
msgid ""
"When a buffer is specified for a cut, change or yank command, the text "
"concerned replaces the previous contents of the specified buffer. If a named "
"buffer is specified using a capital, the newly cut text is appended to the "
"buffer instead of overwriting it. When using the @t{\"_} buffer, nothing "
"happens. This can be useful for deleting text without affecting any buffers."
msgstr ""

#. type: table
#: zsh.texi:18824
msgid ""
"If no buffer is specified for a cut or change command, @t{\"1} is used, and "
"the contents of @t{\"1} to @t{\"8} are each shifted along one buffer; the "
"contents of @t{\"9} is lost. If no buffer is specified for a yank command, "
"@t{\"0} is used. Finally, a paste command without a specified buffer will "
"paste the text from the most recent command regardless of any buffer that "
"might have been used with that command."
msgstr ""

#. type: table
#: zsh.texi:18828
msgid ""
"When called from a widget function by the @t{zle} command, the buffer can "
"optionally be specified with an argument. For example,"
msgstr ""

#. type: example
#: zsh.texi:18832
#, no-wrap
msgid "zle vi-set-buffer A\n"
msgstr ""

#. type: tindex
#: zsh.texi:18834
#, no-wrap
msgid "vi-set-mark"
msgstr ""

#. type: item
#: zsh.texi:18835
#, no-wrap
msgid "@t{vi-set-mark} (unbound) (@t{m}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18837
msgid "Set the specified mark at the cursor position."
msgstr ""

#. type: tindex
#: zsh.texi:18838
#, no-wrap
msgid "set-mark-command"
msgstr ""

#. type: item
#: zsh.texi:18839
#, no-wrap
msgid "@t{set-mark-command} (@t{^@@}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18844
msgid ""
"Set the mark at the cursor position.  If called with a negative numeric "
"argument, do not set the mark but deactivate the region so that it is no "
"longer highlighted (it is still usable for other purposes).  Otherwise the "
"region is marked as active."
msgstr ""

#. type: tindex
#: zsh.texi:18845
#, no-wrap
msgid "spell-word"
msgstr ""

#. type: item
#: zsh.texi:18846
#, no-wrap
msgid "@t{spell-word} (@t{ESC-$ ESC-S ESC-s}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18848
msgid "Attempt spelling correction on the current word."
msgstr ""

#. type: t{#1}
#: zsh.texi:18849 zsh.texi:18850
#, no-wrap
msgid "split-undo"
msgstr ""

#. type: table
#: zsh.texi:18855
msgid ""
"Breaks the undo sequence at the current change.  This is useful in vi mode "
"as changes made in insert mode are coalesced on entering command mode.  "
"Similarly, @t{undo} will normally revert as one all the changes made by a "
"user-defined widget."
msgstr ""

#. type: t{#1}
#: zsh.texi:18856 zsh.texi:18857
#, no-wrap
msgid "undefined-key"
msgstr ""

#. type: table
#: zsh.texi:18860
msgid ""
"This command is executed when a key sequence that is not bound to any "
"command is typed.  By default it beeps."
msgstr ""

#. type: t{#1}
#: zsh.texi:18861 zsh.texi:28305
#, no-wrap
msgid "undo"
msgstr ""

#. type: item
#: zsh.texi:18862
#, no-wrap
msgid "@t{undo} (@t{^_ ^Xu ^X^U}) (@t{u}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18868
msgid ""
"Incrementally undo the last text modification.  When called from a "
"user-defined widget, takes an optional argument indicating a previous state "
"of the undo history as returned by the @t{UNDO_CHANGE_NO} variable; "
"modifications are undone until that state is reached, subject to any limit "
"imposed by the @t{UNDO_LIMIT_NO} variable."
msgstr ""

#. type: table
#: zsh.texi:18873
msgid ""
"Note that when invoked from vi command mode, the full prior change made in "
"insert mode is reverted, the changes having been merged when command mode "
"was selected."
msgstr ""

#. type: tindex
#: zsh.texi:18874
#, no-wrap
msgid "redo"
msgstr ""

#. type: item
#: zsh.texi:18875
#, no-wrap
msgid "@t{redo} (unbound) (@t{^R}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18877
msgid "Incrementally redo undone text modifications."
msgstr ""

#. type: tindex
#: zsh.texi:18878
#, no-wrap
msgid "vi-undo-change"
msgstr ""

#. type: item
#: zsh.texi:18879
#, no-wrap
msgid "@t{vi-undo-change} (unbound) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18882
msgid "Undo the last text modification.  If repeated, redo the modification."
msgstr ""

#. type: tindex
#: zsh.texi:18883
#, no-wrap
msgid "visual-mode"
msgstr ""

#. type: item
#: zsh.texi:18884
#, no-wrap
msgid "@t{visual-mode} (unbound) (@t{v}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18889
msgid ""
"Toggle vim-style visual selection mode. If line-wise visual mode is "
"currently enabled then it is changed to being character-wise. If used "
"following an operator, it forces the subsequent movement command to be "
"treated as a character-wise movement."
msgstr ""

#. type: tindex
#: zsh.texi:18890
#, no-wrap
msgid "visual-line-mode"
msgstr ""

#. type: item
#: zsh.texi:18891
#, no-wrap
msgid "@t{visual-line-mode} (unbound) (@t{V}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18896
msgid ""
"Toggle vim-style line-wise visual selection mode. If character-wise visual "
"mode is currently enabled then it is changed to being line-wise. If used "
"following an operator, it forces the subsequent movement command to be "
"treated as a line-wise movement."
msgstr ""

#. type: tindex
#: zsh.texi:18897
#, no-wrap
msgid "what-cursor-position"
msgstr ""

#. type: item
#: zsh.texi:18898
#, no-wrap
msgid "@t{what-cursor-position} (@t{^X=}) (@t{ga}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18902
msgid ""
"Print the character under the cursor, its code as an octal, decimal and "
"hexadecimal number, the current cursor position within the buffer and the "
"column of the cursor in the current line."
msgstr ""

#. type: t{#1}
#: zsh.texi:18903 zsh.texi:18904
#, no-wrap
msgid "where-is"
msgstr ""

#. type: table
#: zsh.texi:18910
msgid ""
"Read the name of an editor command and print the listing of key sequences "
"that invoke the specified command.  A restricted set of editing functions is "
"available in the mini-buffer.  Keys are looked up in the special @t{command} "
"keymap, and if not found there in the main keymap."
msgstr ""

#. type: t{#1}
#: zsh.texi:18911 zsh.texi:39468 zsh.texi:39469
#, no-wrap
msgid "which-command"
msgstr ""

#. type: item
#: zsh.texi:18912
#, no-wrap
msgid "@t{which-command} (@t{ESC-?}) (unbound) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18916
msgid ""
"Push the buffer onto the buffer stack, and execute the command "
"`@t{which-command} @var{cmd}'. where @var{cmd} is the current command.  "
"@t{which-command} is normally aliased to @t{whence}."
msgstr ""

#. type: tindex
#: zsh.texi:18917
#, no-wrap
msgid "vi-digit-or-beginning-of-line"
msgstr ""

#. type: item
#: zsh.texi:18918
#, no-wrap
msgid "@t{vi-digit-or-beginning-of-line} (unbound) (@t{0}) (unbound)"
msgstr ""

#. type: table
#: zsh.texi:18921
msgid ""
"If the last command executed was a digit as part of an argument, continue "
"the argument.  Otherwise, execute vi-beginning-of-line."
msgstr ""

#. type: cindex
#: zsh.texi:18927
#, no-wrap
msgid "text objects"
msgstr ""

#. type: Plain text
#: zsh.texi:18934
msgid ""
"Text objects are commands that can be used to select a block of text "
"according to some criteria. They are a feature of the vim text editor and so "
"are primarily intended for use with vi operators or from visual selection "
"mode. However, they can also be used from vi-insert or emacs mode. Key "
"bindings listed below apply to the @t{viopp} and @t{visual} keymaps."
msgstr ""

#. type: tindex
#: zsh.texi:18937
#, no-wrap
msgid "select-a-blank-word"
msgstr ""

#. type: item
#: zsh.texi:18938
#, no-wrap
msgid "@t{select-a-blank-word} (@t{aW})"
msgstr ""

#. type: table
#: zsh.texi:18942
msgid ""
"Select a word including adjacent blanks, where a word is defined as a series "
"of non-blank characters. With a numeric argument, multiple words will be "
"selected."
msgstr ""

#. type: tindex
#: zsh.texi:18943
#, no-wrap
msgid "select-a-shell-word"
msgstr ""

#. type: item
#: zsh.texi:18944
#, no-wrap
msgid "@t{select-a-shell-word} (@t{aa})"
msgstr ""

#. type: table
#: zsh.texi:18947
msgid "Select the current command argument applying the normal rules for quoting."
msgstr ""

#. type: tindex
#: zsh.texi:18948
#, no-wrap
msgid "select-a-word"
msgstr ""

#. type: item
#: zsh.texi:18949
#, no-wrap
msgid "@t{select-a-word} (@t{aw})"
msgstr ""

#. type: table
#: zsh.texi:18952
msgid ""
"Select a word including adjacent blanks, using the normal vi-style word "
"definition. With a numeric argument, multiple words will be selected."
msgstr ""

#. type: tindex
#: zsh.texi:18953
#, no-wrap
msgid "select-in-blank-word"
msgstr ""

#. type: item
#: zsh.texi:18954
#, no-wrap
msgid "@t{select-in-blank-word} (@t{iW})"
msgstr ""

#. type: table
#: zsh.texi:18957
msgid ""
"Select a word, where a word is defined as a series of non-blank "
"characters. With a numeric argument, multiple words will be selected."
msgstr ""

#. type: tindex
#: zsh.texi:18958
#, no-wrap
msgid "select-in-shell-word"
msgstr ""

#. type: item
#: zsh.texi:18959
#, no-wrap
msgid "@t{select-in-shell-word} (@t{ia})"
msgstr ""

#. type: table
#: zsh.texi:18963
msgid ""
"Select the current command argument applying the normal rules for "
"quoting. If the argument begins and ends with matching quote characters, "
"these are not included in the selection."
msgstr ""

#. type: tindex
#: zsh.texi:18964
#, no-wrap
msgid "select-in-word"
msgstr ""

#. type: item
#: zsh.texi:18965
#, no-wrap
msgid "@t{select-in-word} (@t{iw})"
msgstr ""

#. type: table
#: zsh.texi:18968
msgid ""
"Select a word, using the normal vi-style word definition. With a numeric "
"argument, multiple words will be selected."
msgstr ""

#. type: vindex
#: zsh.texi:18978
#, no-wrap
msgid "zle_highlight, setting"
msgstr ""

#. type: Plain text
#: zsh.texi:18982
msgid ""
"The line editor has the ability to highlight characters or regions of the "
"line that have a particular significance.  This is controlled by the array "
"parameter @t{zle_highlight}, if it has been set by the user."
msgstr ""

#. type: Plain text
#: zsh.texi:18986
msgid ""
"If the parameter contains the single entry @t{none} all highlighting is "
"turned off.  Note the parameter is still expected to be an array."
msgstr ""

#. type: Plain text
#: zsh.texi:18991
msgid ""
"Otherwise each entry of the array should consist of a word indicating a "
"context for highlighting, then a colon, then a comma-separated list of the "
"types of highlighting to apply in that context."
msgstr ""

#. type: Plain text
#: zsh.texi:18994
msgid "The contexts available for highlighting are the following:"
msgstr ""

#. type: cindex
#: zsh.texi:18997
#, no-wrap
msgid "region, highlighting"
msgstr ""

#. type: cindex
#: zsh.texi:18998
#, no-wrap
msgid "highlighting, region"
msgstr ""

#. type: t{#1}
#: zsh.texi:18999 zsh.texi:21492 zsh.texi:36728 zsh.texi:38177
#, no-wrap
msgid "default"
msgstr ""

#. type: table
#: zsh.texi:19002
msgid ""
"Any text within the command line not affected by any other highlighting.  "
"Text outside the editable area of the command line is not affected."
msgstr ""

#. type: table
#: zsh.texi:19006
msgid ""
"When one of the incremental history search widgets is active, the area of "
"the command line matched by the search string or pattern."
msgstr ""

#. type: t{#1}
#: zsh.texi:19007
#, no-wrap
msgid "region"
msgstr ""

#. type: table
#: zsh.texi:19016
msgid ""
"The currently selected text. In emacs terminology, this is referred to as "
"the region and is bounded by the cursor (point) and the mark. The region is "
"only highlighted if it is active, which is the case after the mark is "
"modified with @t{set-mark-command} or @t{exchange-point-and-mark}.  Note "
"that whether or not the region is active has no effect on its use within "
"emacs style widgets, it simply determines whether it is highlighted. In vi "
"mode, the region corresponds to selected text in visual mode."
msgstr ""

#. type: cindex
#: zsh.texi:19017
#, no-wrap
msgid "special characters, highlighting"
msgstr ""

#. type: cindex
#: zsh.texi:19018
#, no-wrap
msgid "highlighting, special characters"
msgstr ""

#. type: table
#: zsh.texi:19023
msgid ""
"Individual characters that have no direct printable representation but are "
"shown in a special manner by the line editor.  These characters are "
"described below."
msgstr ""

#. type: cindex
#: zsh.texi:19024
#, no-wrap
msgid "completion removable suffix, highlighting"
msgstr ""

#. type: cindex
#: zsh.texi:19025
#, no-wrap
msgid "suffix, highlighting removable, in completion"
msgstr ""

#. type: cindex
#: zsh.texi:19026
#, no-wrap
msgid "removable suffix, highlighting in completion"
msgstr ""

#. type: t{#1}
#: zsh.texi:19027 zsh.texi:23519
#, no-wrap
msgid "suffix"
msgstr ""

#. type: table
#: zsh.texi:19034
msgid ""
"This context is used in completion for characters that are marked as "
"suffixes that will be removed if the completion ends at that point, the most "
"obvious example being a slash (@t{/}) after a directory name.  Note that "
"suffix removal is configurable; the circumstances under which the suffix "
"will be removed may differ for different completions."
msgstr ""

#. type: t{#1}
#: zsh.texi:19035
#, no-wrap
msgid "paste"
msgstr ""

#. type: table
#: zsh.texi:19037
msgid "Following a command to paste text, the characters that were inserted."
msgstr ""

#. type: Plain text
#: zsh.texi:19046
msgid ""
"When @t{region_highlight} is set, the contexts that describe a region --- "
"@t{isearch}, @t{region}, @t{suffix}, and @t{paste} --- are applied first, "
"then @t{region_highlight} is applied, then the remaining @t{zle_highlight} "
"contexts are applied.  If a particular character is affected by multiple "
"specifications, the last specification wins."
msgstr ""

#. type: Plain text
#: zsh.texi:19053
msgid ""
"@t{zle_highlight} may contain additional fields for controlling how terminal "
"sequences to change colours are output.  Each of the following is followed "
"by a colon and a string in the same form as for key bindings.  This will not "
"be necessary for the vast majority of terminals as the defaults shown in "
"parentheses are widely used."
msgstr ""

#. type: cindex
#: zsh.texi:19056
#, no-wrap
msgid "escape sequences, terminal, for highlighting"
msgstr ""

#. type: cindex
#: zsh.texi:19057
#, no-wrap
msgid "terminal escape sequences for highlighting"
msgstr ""

#. type: item
#: zsh.texi:19058
#, no-wrap
msgid "@t{fg_start_code} (@t{\\e[3})"
msgstr ""

#. type: table
#: zsh.texi:19063
msgid ""
"The start of the escape sequence for the foreground colour.  This is "
"followed by one to three ASCII digits representing the colour.  Only used "
"for palette colors, i.e. not 24-bit colors specified via a color triplet."
msgstr ""

#. type: item
#: zsh.texi:19064
#, no-wrap
msgid "@t{fg_default_code} (@t{9})"
msgstr ""

#. type: table
#: zsh.texi:19067
msgid ""
"The number to use instead of the colour to reset the default foreground "
"colour."
msgstr ""

#. type: item
#: zsh.texi:19068
#, no-wrap
msgid "@t{fg_end_code} (@t{m})"
msgstr ""

#. type: table
#: zsh.texi:19070
msgid "The end of the escape sequence for the foreground colour."
msgstr ""

#. type: item
#: zsh.texi:19071
#, no-wrap
msgid "@t{bg_start_code} (@t{\\e[4})"
msgstr ""

#. type: table
#: zsh.texi:19074
msgid ""
"The start of the escape sequence for the background colour.  See "
"@t{fg_start_code} above."
msgstr ""

#. type: item
#: zsh.texi:19075
#, no-wrap
msgid "@t{bg_default_code} (@t{9})"
msgstr ""

#. type: table
#: zsh.texi:19078
msgid ""
"The number to use instead of the colour to reset the default background "
"colour."
msgstr ""

#. type: item
#: zsh.texi:19079
#, no-wrap
msgid "@t{bg_end_code} (@t{m})"
msgstr ""

#. type: table
#: zsh.texi:19081
msgid "The end of the escape sequence for the background colour."
msgstr ""

#. type: Plain text
#: zsh.texi:19087
msgid ""
"The available types of highlighting are the following.  Note that not all "
"types of highlighting are available on all terminals:"
msgstr ""

#. type: t{#1}
#: zsh.texi:19090
#, no-wrap
msgid "none"
msgstr ""

#. type: table
#: zsh.texi:19094
msgid ""
"No highlighting is applied to the given context.  It is not useful for this "
"to appear with other types of highlighting; it is used to override a "
"default."
msgstr ""

#. type: item
#: zsh.texi:19095
#, no-wrap
msgid "@t{fg=}@var{colour}"
msgstr ""

#. type: table
#: zsh.texi:19099
msgid ""
"The foreground colour should be set to @var{colour}, a decimal integer, the "
"name of one of the eight most widely-supported colours or as a `@t{#}' "
"followed by an RGB triplet in hexadecimal format."
msgstr ""

#. type: table
#: zsh.texi:19109
msgid ""
"Not all terminals support this and, of those that do, not all provide "
"facilities to test the support, hence the user should decide based on the "
"terminal type.  Most terminals support the colours @t{black}, @t{red}, "
"@t{green}, @t{yellow}, @t{blue}, @t{magenta}, @t{cyan} and @t{white}, which "
"can be set by name.  In addition. @t{default} may be used to set the "
"terminal's default foreground colour.  Abbreviations are allowed; @t{b} or "
"@t{bl} selects black.  Some terminals may generate additional colours if the "
"@t{bold} attribute is also present."
msgstr ""

#. type: table
#: zsh.texi:19116
msgid ""
"On recent terminals and on systems with an up-to-date terminal database the "
"number of colours supported may be tested by the command `@t{echotc Co}'; if "
"this succeeds, it indicates a limit on the number of colours which will be "
"enforced by the line editor.  The number of colours is in any case limited "
"to 256 (i.e. the range 0 to 255)."
msgstr ""

#. type: table
#: zsh.texi:19124
msgid ""
"Some modern terminal emulators have support for 24-bit true colour (16 "
"million colours). In this case, the hex triplet format can be used. This "
"consists of a `@t{#}' followed by either a three or six digit hexadecimal "
"number describing the red, green and blue components of the colour. Hex "
"triplets can also be used with 88 and 256 colour terminals via the "
"@t{zsh/nearcolor} module (see @ref{The zsh/nearcolor Module})."
msgstr ""

#. type: table
#: zsh.texi:19127
msgid "Colour is also known as color."
msgstr ""

#. type: item
#: zsh.texi:19128
#, no-wrap
msgid "@t{bg=}@var{colour}"
msgstr ""

#. type: table
#: zsh.texi:19132
msgid ""
"The background colour should be set to @var{colour}.  This works similarly "
"to the foreground colour, except the background is not usually affected by "
"the bold attribute."
msgstr ""

#. type: t{#1}
#: zsh.texi:19133
#, no-wrap
msgid "bold"
msgstr ""

#. type: table
#: zsh.texi:19136
msgid ""
"The characters in the given context are shown in a bold font.  Not all "
"terminals distinguish bold fonts."
msgstr ""

#. type: t{#1}
#: zsh.texi:19137
#, no-wrap
msgid "standout"
msgstr ""

#. type: table
#: zsh.texi:19144
msgid ""
"The characters in the given context are shown in the terminal's standout "
"mode.  The actual effect is specific to the terminal; on many terminals it "
"is inverse video.  On some such terminals, where the cursor does not blink "
"it appears with standout mode negated, making it less than clear where the "
"cursor actually is.  On such terminals one of the other effects may be "
"preferable for highlighting the region and matched search string."
msgstr ""

#. type: t{#1}
#: zsh.texi:19145
#, no-wrap
msgid "underline"
msgstr ""

#. type: table
#: zsh.texi:19149
msgid ""
"The characters in the given context are shown underlined.  Some terminals "
"show the foreground in a different colour instead; in this case whitespace "
"will not be highlighted."
msgstr ""

#. type: Plain text
#: zsh.texi:19156
msgid ""
"The characters described above as `special' are as follows.  The formatting "
"described here is used irrespective of whether the characters are "
"highlighted:"
msgstr ""

#. type: item
#: zsh.texi:19159
#, no-wrap
msgid "ASCII control characters"
msgstr ""

#. type: table
#: zsh.texi:19162
msgid ""
"Control characters in the ASCII range are shown as `@t{^}' followed by the "
"base character."
msgstr ""

#. type: item
#: zsh.texi:19163
#, no-wrap
msgid "Unprintable multibyte characters"
msgstr ""

#. type: table
#: zsh.texi:19171
msgid ""
"This item applies to control characters not in the ASCII range, plus other "
"characters as follows.  If the @t{MULTIBYTE} option is in effect, multibyte "
"characters not in the ASCII character set that are reported as having zero "
"width are treated as combining characters when the option "
"@t{COMBINING_CHARS} is on.  If the option is off, or if a character appears "
"where a combining character is not valid, the character is treated as "
"unprintable."
msgstr ""

#. type: table
#: zsh.texi:19177
msgid ""
"Unprintable multibyte characters are shown as a hexadecimal number between "
"angle brackets.  The number is the code point of the character in the wide "
"character set; this may or may not be Unicode, depending on the operating "
"system."
msgstr ""

#. type: item
#: zsh.texi:19178
#, no-wrap
msgid "Invalid multibyte characters"
msgstr ""

#. type: table
#: zsh.texi:19187
msgid ""
"If the @t{MULTIBYTE} option is in effect, any sequence of one or more bytes "
"that does not form a valid character in the current character set is treated "
"as a series of bytes each shown as a special character.  This case can be "
"distinguished from other unprintable characters as the bytes are represented "
"as two hexadecimal digits between angle brackets, as distinct from the four "
"or eight digits that are used for unprintable characters that are "
"nonetheless valid in the current character set."
msgstr ""

#. type: table
#: zsh.texi:19192
msgid ""
"Not all systems support this: for it to work, the system's representation of "
"wide characters must be code values from the Universal Character Set, as "
"defined by IS0 10646 (also known as Unicode)."
msgstr ""

#. type: item
#: zsh.texi:19193
#, no-wrap
msgid "Wrapped double-width characters"
msgstr ""

#. type: table
#: zsh.texi:19197
msgid ""
"When a double-width character appears in the final column of a line, it is "
"instead shown on the next line. The empty space left in the original "
"position is highlighted as a special character."
msgstr ""

#. type: Plain text
#: zsh.texi:19203
msgid ""
"If @t{zle_highlight} is not set or no value applies to a particular context, "
"the defaults applied are equivalent to"
msgstr ""

#. type: example
#: zsh.texi:19208
#, no-wrap
msgid ""
"zle_highlight=(region:standout special:standout\n"
"suffix:bold isearch:underline paste:standout)\n"
msgstr ""

#. type: Plain text
#: zsh.texi:19212
msgid "i.e. both the region and special characters are shown in standout mode."
msgstr ""

#. type: Plain text
#: zsh.texi:19217
msgid ""
"Within widgets, arbitrary regions may be highlighted by setting the special "
"array parameter @t{region_highlight}; see @ref{Zle Widgets}."
msgstr ""

#. type: cindex
#: zsh.texi:19225
#, no-wrap
msgid "completion, widgets"
msgstr ""

#. type: cindex
#: zsh.texi:19226 zsh.texi:20551 zsh.texi:26825
#, no-wrap
msgid "completion, programmable"
msgstr ""

#. type: cindex
#: zsh.texi:19227 zsh.texi:20552 zsh.texi:26826
#, no-wrap
msgid "completion, controlling"
msgstr ""

#. type: Plain text
#: zsh.texi:19241
msgid ""
"The shell's programmable completion mechanism can be manipulated in two "
"ways; here the low-level features supporting the newer, function-based "
"mechanism are defined.  A complete set of shell functions based on these "
"features is described in the next chapter, @ref{Completion System}, and "
"users with no interest in adding to that system (or, potentially, writing "
"their own --- see dictionary entry for `hubris') should skip the current "
"section.  The older system based on the @t{compctl} builtin command is "
"described in @ref{Completion Using compctl}."
msgstr ""

#. type: Plain text
#: zsh.texi:19246
msgid ""
"Completion widgets are defined by the @t{-C} option to the @t{zle} builtin "
"command provided by the @t{zsh/zle} module (see @ref{The zsh/zle "
"Module}). For example,"
msgstr ""

#. type: example
#: zsh.texi:19250
#, no-wrap
msgid "zle -C complete expand-or-complete completer\n"
msgstr ""

#. type: Plain text
#: zsh.texi:19260
msgid ""
"defines a widget named `@t{complete}'.  The second argument is the name of "
"any of the builtin widgets that handle completions: @t{complete-word}, "
"@t{expand-or-complete}, @t{expand-or-complete-prefix}, @t{menu-complete}, "
"@t{menu-expand-or-complete}, @t{reverse-menu-complete}, @t{list-choices}, or "
"@t{delete-char-or-list}.  Note that this will still work even if the widget "
"in question has been re-bound."
msgstr ""

#. type: Plain text
#: zsh.texi:19268
msgid ""
"When this newly defined widget is bound to a key using the @t{bindkey} "
"builtin command defined in the @t{zsh/zle} module (@ref{Zsh Line Editor}), "
"typing that key will call the shell function `@t{completer}'. This function "
"is responsible for generating completion matches using the builtins "
"described below.  As with other ZLE widgets, the function is called with its "
"standard input closed."
msgstr ""

#. type: Plain text
#: zsh.texi:19273
msgid ""
"Once the function returns, the completion code takes over control again and "
"treats the matches in the same manner as the specified builtin widget, in "
"this case @t{expand-or-complete}."
msgstr ""

#. type: node
#: zsh.texi:19284 zsh.texi:19286 zsh.texi:19692
#, no-wrap
msgid "Completion Special Parameters"
msgstr ""

#. type: node
#: zsh.texi:19284 zsh.texi:19692 zsh.texi:19694 zsh.texi:20146
#, no-wrap
msgid "Completion Builtin Commands"
msgstr ""

#. type: Plain text
#: zsh.texi:19293
msgid ""
"The parameters @t{ZLE_REMOVE_SUFFIX_CHARS} and @t{ZLE_SPACE_SUFFIX_CHARS} "
"are used by the completion mechanism, but are not special. See "
"@ref{Parameters Used By The Shell}."
msgstr ""

#. type: Plain text
#: zsh.texi:19305
msgid ""
"Inside completion widgets, and any functions called from them, some "
"parameters have special meaning; outside these functions they are not "
"special to the shell in any way.  These parameters are used to pass "
"information between the completion code and the completion widget. Some of "
"the builtin commands and the condition codes use or change the current "
"values of these parameters.  Any existing values will be hidden during "
"execution of completion widgets; except for @t{compstate}, the parameters "
"are reset on each function exit (including nested function calls from within "
"the completion widget) to the values they had when the function was entered."
msgstr ""

#. type: t{#1}
#: zsh.texi:19308 zsh.texi:19309
#, no-wrap
msgid "CURRENT"
msgstr ""

#. type: table
#: zsh.texi:19313
msgid ""
"This is the number of the current word, i.e. the word the cursor is "
"currently on in the @t{words} array.  Note that this value is only correct "
"if the @t{ksharrays} option is not set."
msgstr ""

#. type: t{#1}
#: zsh.texi:19314 zsh.texi:19315
#, no-wrap
msgid "IPREFIX"
msgstr ""

#. type: table
#: zsh.texi:19321
msgid ""
"Initially this will be set to the empty string.  This parameter functions "
"like @t{PREFIX}; it contains a string which precedes the one in @t{PREFIX} "
"and is not considered part of the list of matches.  Typically, a string is "
"transferred from the beginning of @t{PREFIX} to the end of @t{IPREFIX}, for "
"example:"
msgstr ""

#. type: example
#: zsh.texi:19326
#, no-wrap
msgid ""
"IPREFIX=$@{PREFIX%%\\=*@}=\n"
"PREFIX=$@{PREFIX#*=@}\n"
msgstr ""

#. type: table
#: zsh.texi:19332
msgid ""
"causes the part of the prefix up to and including the first equal sign not "
"to be treated as part of a matched string.  This can be done automatically "
"by the @t{compset} builtin, see below."
msgstr ""

#. type: t{#1}
#: zsh.texi:19333 zsh.texi:19334
#, no-wrap
msgid "ISUFFIX"
msgstr ""

#. type: table
#: zsh.texi:19338
msgid ""
"As @t{IPREFIX}, but for a suffix that should not be considered part of the "
"matches; note that the @t{ISUFFIX} string follows the @t{SUFFIX} string."
msgstr ""

#. type: t{#1}
#: zsh.texi:19339 zsh.texi:19340
#, no-wrap
msgid "PREFIX"
msgstr ""

#. type: table
#: zsh.texi:19344
msgid ""
"Initially this will be set to the part of the current word from the "
"beginning of the word up to the position of the cursor; it may be altered to "
"give a common prefix for all matches."
msgstr ""

#. type: t{#1}
#: zsh.texi:19345 zsh.texi:19346
#, no-wrap
msgid "QIPREFIX"
msgstr ""

#. type: table
#: zsh.texi:19352
msgid ""
"This parameter is read-only and contains the quoted string up to the word "
"being completed. E.g. when completing `@t{\"foo}', this parameter contains "
"the double quote. If the @t{-q} option of @t{compset} is used (see below), "
"and the original string was `@t{\"foo bar}' with the cursor on the "
"`@t{bar}', this parameter contains `@t{\"foo }'."
msgstr ""

#. type: t{#1}
#: zsh.texi:19353 zsh.texi:19354
#, no-wrap
msgid "QISUFFIX"
msgstr ""

#. type: table
#: zsh.texi:19356
msgid "Like @t{QIPREFIX}, but containing the suffix."
msgstr ""

#. type: t{#1}
#: zsh.texi:19357 zsh.texi:19358
#, no-wrap
msgid "SUFFIX"
msgstr ""

#. type: table
#: zsh.texi:19364
msgid ""
"Initially this will be set to the part of the current word from the cursor "
"position to the end; it may be altered to give a common suffix for all "
"matches.  It is most useful when the option @t{COMPLETE_IN_WORD} is set, as "
"otherwise the whole word on the command line is treated as a prefix."
msgstr ""

#. type: t{#1}
#: zsh.texi:19365 zsh.texi:19367
#, no-wrap
msgid "compstate"
msgstr ""

#. type: cindex
#: zsh.texi:19366
#, no-wrap
msgid "completion widgets, examining and setting state in"
msgstr ""

#. type: table
#: zsh.texi:19371
msgid ""
"This is an associative array with various keys and values that the "
"completion code uses to exchange information with the completion widget.  "
"The keys are:"
msgstr ""

#. type: vindex
#: zsh.texi:19374
#, no-wrap
msgid "all_quotes, compstate"
msgstr ""

#. type: t{#1}
#: zsh.texi:19375
#, no-wrap
msgid "all_quotes"
msgstr ""

#. type: table
#: zsh.texi:19387
msgid ""
"The @t{-q} option of the @t{compset} builtin command (see below)  allows a "
"quoted string to be broken into separate words; if the cursor is on one of "
"those words, that word will be completed, possibly invoking `@t{compset -q}' "
"recursively.  With this key it is possible to test the types of quoted "
"strings which are currently broken into parts in this fashion.  Its value "
"contains one character for each quoting level.  The characters are a single "
"quote or a double quote for strings quoted with these characters, a dollars "
"sign for strings quoted with @t{$'}@var{...}@t{'} and a backslash for "
"strings not starting with a quote character.  The first character in the "
"value always corresponds to the innermost quoting level."
msgstr ""

#. type: vindex
#: zsh.texi:19388
#, no-wrap
msgid "context, compstate"
msgstr ""

#. type: t{#1}
#: zsh.texi:19389 zsh.texi:37476
#, no-wrap
msgid "context"
msgstr ""

#. type: table
#: zsh.texi:19392
msgid ""
"This will be set by the completion code to the overall context in which "
"completion is attempted. Possible values are:"
msgstr ""

#. type: t{#1}
#: zsh.texi:19395
#, no-wrap
msgid "array_value"
msgstr ""

#. type: table
#: zsh.texi:19398
msgid ""
"when completing inside the value of an array parameter assignment; in this "
"case the @t{words} array contains the words inside the parentheses."
msgstr ""

#. type: t{#1}
#: zsh.texi:19399
#, no-wrap
msgid "brace_parameter"
msgstr ""

#. type: table
#: zsh.texi:19405
msgid ""
"when completing the name of a parameter in a parameter expansion beginning "
"with @t{$@{}.  This context will also be set when completing parameter flags "
"following @t{$@{(}; the full command line argument is presented and the "
"handler must test the value to be completed to ascertain that this is the "
"case."
msgstr ""

#. type: t{#1}
#: zsh.texi:19406
#, no-wrap
msgid "assign_parameter"
msgstr ""

#. type: table
#: zsh.texi:19408
msgid "when completing the name of a parameter in a parameter assignment."
msgstr ""

#. type: table
#: zsh.texi:19412
msgid ""
"when completing for a normal command (either in command position or for an "
"argument of the command)."
msgstr ""

#. type: t{#1}
#: zsh.texi:19413 zsh.texi:22052
#, no-wrap
msgid "condition"
msgstr ""

#. type: table
#: zsh.texi:19417
msgid ""
"when completing inside a `@t{[[}...@t{]]}' conditional expression; in this "
"case the @t{words} array contains only the words inside the conditional "
"expression."
msgstr ""

#. type: t{#1}
#: zsh.texi:19418
#, no-wrap
msgid "math"
msgstr ""

#. type: table
#: zsh.texi:19421
msgid ""
"when completing in a mathematical environment such as a `@t{((}...@t{))}' "
"construct."
msgstr ""

#. type: t{#1}
#: zsh.texi:19422 zsh.texi:19587
#, no-wrap
msgid "parameter"
msgstr ""

#. type: table
#: zsh.texi:19425
msgid ""
"when completing the name of a parameter in a parameter expansion beginning "
"with @t{$} but not @t{$@{}."
msgstr ""

#. type: t{#1}
#: zsh.texi:19426 zsh.texi:19629
#, no-wrap
msgid "redirect"
msgstr ""

#. type: table
#: zsh.texi:19428
msgid "when completing after a redirection operator."
msgstr ""

#. type: t{#1}
#: zsh.texi:19429
#, no-wrap
msgid "subscript"
msgstr ""

#. type: table
#: zsh.texi:19431
msgid "when completing inside a parameter subscript."
msgstr ""

#. type: t{#1}
#: zsh.texi:19432
#, no-wrap
msgid "value"
msgstr ""

#. type: table
#: zsh.texi:19434
msgid "when completing the value of a parameter assignment."
msgstr ""

#. type: vindex
#: zsh.texi:19437
#, no-wrap
msgid "exact, compstate"
msgstr ""

#. type: t{#1}
#: zsh.texi:19438
#, no-wrap
msgid "exact"
msgstr ""

#. type: table
#: zsh.texi:19442
msgid ""
"Controls the behaviour when the @t{REC_EXACT} option is set.  It will be set "
"to @t{accept} if an exact match would be accepted, and will be unset "
"otherwise."
msgstr ""

#. type: table
#: zsh.texi:19446
msgid ""
"If it was set when at least one match equal to the string on the line was "
"generated, the match is accepted."
msgstr ""

#. type: vindex
#: zsh.texi:19447
#, no-wrap
msgid "exact_string, compstate"
msgstr ""

#. type: t{#1}
#: zsh.texi:19448
#, no-wrap
msgid "exact_string"
msgstr ""

#. type: table
#: zsh.texi:19450
msgid "The string of an exact match if one was found, otherwise unset."
msgstr ""

#. type: vindex
#: zsh.texi:19451
#, no-wrap
msgid "ignored, compstate"
msgstr ""

#. type: t{#1}
#: zsh.texi:19452
#, no-wrap
msgid "ignored"
msgstr ""

#. type: table
#: zsh.texi:19456
msgid ""
"The number of completions that were ignored because they matched one of the "
"patterns given with the @t{-F} option to the @t{compadd} builtin command."
msgstr ""

#. type: vindex
#: zsh.texi:19457
#, no-wrap
msgid "insert, compstate"
msgstr ""

#. type: t{#1}
#: zsh.texi:19458 zsh.texi:22604
#, no-wrap
msgid "insert"
msgstr ""

#. type: table
#: zsh.texi:19471
msgid ""
"This controls the manner in which a match is inserted into the command "
"line.  On entry to the widget function, if it is unset the command line is "
"not to be changed; if set to @t{unambiguous}, any prefix common to all "
"matches is to be inserted; if set to @t{automenu-unambiguous}, the common "
"prefix is to be inserted and the next invocation of the completion code may "
"start menu completion (due to the @t{AUTO_MENU} option being set); if set to "
"@t{menu} or @t{automenu} menu completion will be started for the matches "
"currently generated (in the latter case this will happen because the "
"@t{AUTO_MENU} is set). The value may also contain the string `@t{tab}' when "
"the completion code would normally not really do completion, but only insert "
"the TAB character."
msgstr ""

#. type: table
#: zsh.texi:19482
msgid ""
"On exit it may be set to any of the values above (where setting it to the "
"empty string is the same as unsetting it), or to a number, in which case the "
"match whose number is given will be inserted into the command line.  "
"Negative numbers count backward from the last match (with `@t{-1}' selecting "
"the last match) and out-of-range values are wrapped around, so that a value "
"of zero selects the last match and a value one more than the maximum selects "
"the first. Unless the value of this key ends in a space, the match is "
"inserted as in a menu completion, i.e. without automatically appending a "
"space."
msgstr ""

#. type: table
#: zsh.texi:19487
msgid ""
"Both @t{menu} and @t{automenu} may also specify the number of the match to "
"insert, given after a colon.  For example, `@t{menu:2}' says to start menu "
"completion, beginning with the second match."
msgstr ""

#. type: table
#: zsh.texi:19491
msgid ""
"Note that a value containing the substring `@t{tab}' makes the matches "
"generated be ignored and only the TAB be inserted."
msgstr ""

#. type: table
#: zsh.texi:19495
msgid ""
"Finally, it may also be set to @t{all}, which makes all matches generated be "
"inserted into the line."
msgstr ""

#. type: vindex
#: zsh.texi:19496
#, no-wrap
msgid "insert_positions, compstate"
msgstr ""

#. type: t{#1}
#: zsh.texi:19497
#, no-wrap
msgid "insert_positions"
msgstr ""

#. type: table
#: zsh.texi:19503
msgid ""
"When the completion system inserts an unambiguous string into the line, "
"there may be multiple places where characters are missing or where the "
"character inserted differs from at least one match.  The value of this key "
"contains a colon separated list of all these positions, as indexes into the "
"command line."
msgstr ""

#. type: vindex
#: zsh.texi:19504
#, no-wrap
msgid "last_prompt, compstate"
msgstr ""

#. type: t{#1}
#: zsh.texi:19505
#, no-wrap
msgid "last_prompt"
msgstr ""

#. type: table
#: zsh.texi:19510
msgid ""
"If this is set to a non-empty string for every match added, the completion "
"code will move the cursor back to the previous prompt after the list of "
"completions has been displayed.  Initially this is set or unset according to "
"the @t{ALWAYS_LAST_PROMPT} option."
msgstr ""

#. type: vindex
#: zsh.texi:19511
#, no-wrap
msgid "list, compstate"
msgstr ""

#. type: table
#: zsh.texi:19519
msgid ""
"This controls whether or how the list of matches will be displayed.  If it "
"is unset or empty they will never be listed; if its value begins with "
"@t{list}, they will always be listed; if it begins with @t{autolist} or "
"@t{ambiguous}, they will be listed when the @t{AUTO_LIST} or "
"@t{LIST_AMBIGUOUS} options respectively would normally cause them to be."
msgstr ""

#. type: table
#: zsh.texi:19524
msgid ""
"If the substring @t{force} appears in the value, this makes the list be "
"shown even if there is only one match. Normally, the list would be shown "
"only if there are at least two matches."
msgstr ""

#. type: table
#: zsh.texi:19530
msgid ""
"The value contains the substring @t{packed} if the @t{LIST_PACKED} option is "
"set. If this substring is given for all matches added to a group, this group "
"will show the @t{LIST_PACKED} behavior. The same is done for the "
"@t{LIST_ROWS_FIRST} option with the substring @t{rows}."
msgstr ""

#. type: table
#: zsh.texi:19539
msgid ""
"Finally, if the value contains the string @t{explanations}, only the "
"explanation strings, if any, will be listed and if it contains @t{messages}, "
"only the messages (added with the @t{-x} option of @t{compadd}) will be "
"listed.  If it contains both @t{explanations} and @t{messages} both kinds of "
"explanation strings will be listed.  It will be set appropriately on entry "
"to a completion widget and may be changed there."
msgstr ""

#. type: vindex
#: zsh.texi:19540
#, no-wrap
msgid "list_lines, compstate"
msgstr ""

#. type: t{#1}
#: zsh.texi:19541
#, no-wrap
msgid "list_lines"
msgstr ""

#. type: table
#: zsh.texi:19547
msgid ""
"This gives the number of lines that are needed to display the full list of "
"completions.  Note that to calculate the total number of lines to display "
"you need to add the number of lines needed for the command line to this "
"value, this is available as the value of the @t{BUFFERLINES} special "
"parameter."
msgstr ""

#. type: vindex
#: zsh.texi:19548
#, no-wrap
msgid "list_max, compstate"
msgstr ""

#. type: t{#1}
#: zsh.texi:19549
#, no-wrap
msgid "list_max"
msgstr ""

#. type: table
#: zsh.texi:19553
msgid ""
"Initially this is set to the value of the @t{LISTMAX} parameter.  It may be "
"set to any other value; when the widget exits this value will be used in the "
"same way as the value of @t{LISTMAX}."
msgstr ""

#. type: vindex
#: zsh.texi:19554
#, no-wrap
msgid "nmatches, compstate"
msgstr ""

#. type: t{#1}
#: zsh.texi:19555
#, no-wrap
msgid "nmatches"
msgstr ""

#. type: table
#: zsh.texi:19557
msgid "The number of matches added by the completion code so far."
msgstr ""

#. type: vindex
#: zsh.texi:19558
#, no-wrap
msgid "old_insert, compstate"
msgstr ""

#. type: t{#1}
#: zsh.texi:19559
#, no-wrap
msgid "old_insert"
msgstr ""

#. type: table
#: zsh.texi:19563
msgid ""
"On entry to the widget this will be set to the number of the match of an old "
"list of completions that is currently inserted into the command line. If no "
"match has been inserted, this is unset."
msgstr ""

#. type: table
#: zsh.texi:19570
msgid ""
"As with @t{old_list}, the value of this key will only be used if it is the "
"string @t{keep}. If it was set to this value by the widget and there was an "
"old match inserted into the command line, this match will be kept and if the "
"value of the @t{insert} key specifies that another match should be inserted, "
"this will be inserted after the old one."
msgstr ""

#. type: vindex
#: zsh.texi:19571
#, no-wrap
msgid "old_list, compstate"
msgstr ""

#. type: t{#1}
#: zsh.texi:19572
#, no-wrap
msgid "old_list"
msgstr ""

#. type: table
#: zsh.texi:19579
msgid ""
"This is set to @t{yes} if there is still a valid list of completions from a "
"previous completion at the time the widget is invoked.  This will usually be "
"the case if and only if the previous editing operation was a completion "
"widget or one of the builtin completion functions.  If there is a valid list "
"and it is also currently shown on the screen, the value of this key is "
"@t{shown}."
msgstr ""

#. type: table
#: zsh.texi:19585
msgid ""
"After the widget has exited the value of this key is only used if it was set "
"to @t{keep}.  In this case the completion code will continue to use this old "
"list.  If the widget generated new matches, they will not be used."
msgstr ""

#. type: vindex
#: zsh.texi:19586
#, no-wrap
msgid "parameter, compstate"
msgstr ""

#. type: table
#: zsh.texi:19590
msgid ""
"The name of the parameter when completing in a subscript or in the value of "
"a parameter assignment."
msgstr ""

#. type: vindex
#: zsh.texi:19591
#, no-wrap
msgid "pattern_insert, compstate"
msgstr ""

#. type: t{#1}
#: zsh.texi:19592
#, no-wrap
msgid "pattern_insert"
msgstr ""

#. type: table
#: zsh.texi:19599
msgid ""
"Normally this is set to @t{menu}, which specifies that menu completion will "
"be used whenever a set of matches was generated using @t{pattern_match} (see "
"below).  If it is set to any other non-empty string by the user and menu "
"completion is not selected by other option settings, the code will instead "
"insert any common prefix for the generated matches as with normal "
"completion."
msgstr ""

#. type: vindex
#: zsh.texi:19600
#, no-wrap
msgid "pattern_match, compstate"
msgstr ""

#. type: t{#1}
#: zsh.texi:19601
#, no-wrap
msgid "pattern_match"
msgstr ""

#. type: table
#: zsh.texi:19610
msgid ""
"Locally controls the behaviour given by the @t{GLOB_COMPLETE} option.  "
"Initially it is set to `@t{*}' if and only if the option is set.  The "
"completion widget may set it to this value, to an empty string (which has "
"the same effect as unsetting it), or to any other non-empty string.  If it "
"is non-empty, unquoted metacharacters on the command line will be treated as "
"patterns; if it is `@t{*}', then additionally a wildcard `@t{*}' is assumed "
"at the cursor position; if it is empty or unset, metacharacters will be "
"treated literally."
msgstr ""

#. type: table
#: zsh.texi:19614
msgid ""
"Note that the match specifications given to the @t{compadd} builtin command "
"are not used if this is set to a non-empty string."
msgstr ""

#. type: vindex
#: zsh.texi:19615
#, no-wrap
msgid "quote, compstate"
msgstr ""

#. type: t{#1}
#: zsh.texi:19616
#, no-wrap
msgid "quote"
msgstr ""

#. type: table
#: zsh.texi:19620
msgid ""
"When completing inside quotes, this contains the quotation character "
"(i.e. either a single quote, a double quote, or a backtick).  Otherwise it "
"is unset."
msgstr ""

#. type: vindex
#: zsh.texi:19621
#, no-wrap
msgid "quoting, compstate"
msgstr ""

#. type: table
#: zsh.texi:19627
msgid ""
"When completing inside single quotes, this is set to the string @t{single}; "
"inside double quotes, the string @t{double}; inside backticks, the string "
"@t{backtick}.  Otherwise it is unset."
msgstr ""

#. type: vindex
#: zsh.texi:19628
#, no-wrap
msgid "redirect, compstate"
msgstr ""

#. type: table
#: zsh.texi:19632
msgid ""
"The redirection operator when completing in a redirection position, i.e. one "
"of @t{<}, @t{>}, etc."
msgstr ""

#. type: vindex
#: zsh.texi:19633
#, no-wrap
msgid "restore, compstate"
msgstr ""

#. type: t{#1}
#: zsh.texi:19634
#, no-wrap
msgid "restore"
msgstr ""

#. type: table
#: zsh.texi:19640
msgid ""
"This is set to @t{auto} before a function is entered, which forces the "
"special parameters mentioned above (@t{words}, @t{CURRENT}, @t{PREFIX}, "
"@t{IPREFIX}, @t{SUFFIX}, and @t{ISUFFIX}) to be restored to their previous "
"values when the function exits.  If a function unsets it or sets it to any "
"other string, they will not be restored."
msgstr ""

#. type: vindex
#: zsh.texi:19641
#, no-wrap
msgid "to_end, compstate"
msgstr ""

#. type: t{#1}
#: zsh.texi:19642
#, no-wrap
msgid "to_end"
msgstr ""

#. type: table
#: zsh.texi:19649
msgid ""
"Specifies the occasions on which the cursor is moved to the end of a string "
"when a match is inserted.  On entry to a widget function, it may be "
"@t{single} if this will happen when a single unambiguous match was inserted "
"or @t{match} if it will happen any time a match is inserted (for example, by "
"menu completion; this is likely to be the effect of the @t{ALWAYS_TO_END} "
"option)."
msgstr ""

#. type: table
#: zsh.texi:19655
msgid ""
"On exit, it may be set to @t{single} as above.  It may also be set to "
"@t{always}, or to the empty string or unset; in those cases the cursor will "
"be moved to the end of the string always or never respectively.  Any other "
"string is treated as @t{match}."
msgstr ""

#. type: vindex
#: zsh.texi:19656
#, no-wrap
msgid "unambiguous, compstate"
msgstr ""

#. type: t{#1}
#: zsh.texi:19657
#, no-wrap
msgid "unambiguous"
msgstr ""

#. type: table
#: zsh.texi:19660
msgid ""
"This key is read-only and will always be set to the common (unambiguous)  "
"prefix the completion code has generated for all matches added so far."
msgstr ""

#. type: vindex
#: zsh.texi:19661
#, no-wrap
msgid "unambiguous_cursor, compstate"
msgstr ""

#. type: t{#1}
#: zsh.texi:19662
#, no-wrap
msgid "unambiguous_cursor"
msgstr ""

#. type: table
#: zsh.texi:19667
msgid ""
"This gives the position the cursor would be placed at if the common prefix "
"in the @t{unambiguous} key were inserted, relative to the value of that "
"key. The cursor would be placed before the character whose index is given by "
"this key."
msgstr ""

#. type: vindex
#: zsh.texi:19668
#, no-wrap
msgid "unambiguous_positions, compstate"
msgstr ""

#. type: t{#1}
#: zsh.texi:19669
#, no-wrap
msgid "unambiguous_positions"
msgstr ""

#. type: table
#: zsh.texi:19674
msgid ""
"This contains all positions where characters in the unambiguous string are "
"missing or where the character inserted differs from at least one of the "
"matches.  The positions are given as indexes into the string given by the "
"value of the @t{unambiguous} key."
msgstr ""

#. type: vindex
#: zsh.texi:19675
#, no-wrap
msgid "vared, compstate"
msgstr ""

#. type: table
#: zsh.texi:19681
msgid ""
"If completion is called while editing a line using the @t{vared} builtin, "
"the value of this key is set to the name of the parameter given as an "
"argument to @t{vared}.  This key is only set while a @t{vared} command is "
"active."
msgstr ""

#. type: t{#1}
#: zsh.texi:19684 zsh.texi:19685
#, no-wrap
msgid "words"
msgstr ""

#. type: table
#: zsh.texi:19688
msgid ""
"This array contains the words present on the command line currently being "
"edited."
msgstr ""

#. type: node
#: zsh.texi:19692 zsh.texi:20146 zsh.texi:20148 zsh.texi:20177
#, no-wrap
msgid "Completion Condition Codes"
msgstr ""

#. type: findex
#: zsh.texi:19697
#, no-wrap
msgid "compadd"
msgstr ""

#. type: cindex
#: zsh.texi:19698
#, no-wrap
msgid "completion widgets, adding specified matches"
msgstr ""

#. type: item
#: zsh.texi:19700
#, no-wrap
msgid "@t{compadd }[ @t{-akqQfenUl12C} ] [ @t{-F} @var{array} ]"
msgstr ""

#. type: itemx
#: zsh.texi:19701
#, no-wrap
msgid "@t{@ @ @ @ @ @ @ @ }[@t{-P} @var{prefix} ] [ @t{-S} @var{suffix} ]"
msgstr ""

#. type: itemx
#: zsh.texi:19702
#, no-wrap
msgid ""
"@t{@ @ @ @ @ @ @ @ }[@t{-p} @var{hidden-prefix} ] [ @t{-s} "
"@var{hidden-suffix} ]"
msgstr ""

#. type: itemx
#: zsh.texi:19703
#, no-wrap
msgid ""
"@t{@ @ @ @ @ @ @ @ }[@t{-i} @var{ignored-prefix} ] [ @t{-I} "
"@var{ignored-suffix} ]"
msgstr ""

#. type: itemx
#: zsh.texi:19704
#, no-wrap
msgid "@t{@ @ @ @ @ @ @ @ }[@t{-W} @var{file-prefix} ] [ @t{-d} @var{array} ]"
msgstr ""

#. type: itemx
#: zsh.texi:19705
#, no-wrap
msgid ""
"@t{@ @ @ @ @ @ @ @ }[@t{-J} @var{group-name} ] [ @t{-X} @var{explanation} ] "
"[ @t{-x} @var{message} ]"
msgstr ""

#. type: itemx
#: zsh.texi:19706
#, no-wrap
msgid "@t{@ @ @ @ @ @ @ @ }[@t{-V} @var{group-name} ] [ @t{-o} [ @var{order} ] ]"
msgstr ""

#. type: itemx
#: zsh.texi:19707
#, no-wrap
msgid ""
"@t{@ @ @ @ @ @ @ @ }[@t{-r} @var{remove-chars} ] [ @t{-R} @var{remove-func} "
"]"
msgstr ""

#. type: itemx
#: zsh.texi:19708
#, no-wrap
msgid ""
"@t{@ @ @ @ @ @ @ @ }[@t{-D} @var{array} ] [ @t{-O} @var{array} ] [ @t{-A} "
"@var{array} ]"
msgstr ""

#. type: itemx
#: zsh.texi:19709
#, no-wrap
msgid "@t{@ @ @ @ @ @ @ @ }[@t{-E} @var{number} ]"
msgstr ""

#. type: itemx
#: zsh.texi:19710
#, no-wrap
msgid ""
"@t{@ @ @ @ @ @ @ @ }[@t{-M} @var{match-spec} ] [ @t{-}@t{-} ] [ "
"@var{completions} ... ]"
msgstr ""

#. type: table
#: zsh.texi:19717
msgid ""
"This builtin command can be used to add matches directly and control all the "
"information the completion code stores with each possible completion. The "
"return status is zero if at least one match was added and non-zero if no "
"matches were added."
msgstr ""

#. type: table
#: zsh.texi:19720
msgid "The completion code breaks each match into seven fields in the order:"
msgstr ""

#. type: var{#1}
#: zsh.texi:19724
msgid "<ipre><apre><hpre><body><hsuf><asuf><isuf>"
msgstr ""

#. type: table
#: zsh.texi:19742
msgid ""
"The first field is an ignored prefix taken from the command line, the "
"contents of the @t{IPREFIX} parameter plus the string given with the @t{-i} "
"option. With the @t{-U} option, only the string from the @t{-i} option is "
"used. The field @var{<apre>} is an optional prefix string given with the "
"@t{-P} option.  The @var{<hpre>} field is a string that is considered part "
"of the match but that should not be shown when listing completions, given "
"with the @t{-p} option; for example, functions that do filename generation "
"might specify a common path prefix this way.  @var{<body>} is the part of "
"the match that should appear in the list of matches shown to the user.  The "
"suffixes @var{<hsuf>}, @var{<asuf>} and @var{<isuf>} correspond to the "
"prefixes @var{<hpre>}, @var{<apre>} and @var{<ipre>} and are given by the "
"options @t{-s}, @t{-S} and @t{-I}, respectively."
msgstr ""

#. type: table
#: zsh.texi:19745
msgid "The supported flags are:"
msgstr ""

#. type: item
#: zsh.texi:19748 zsh.texi:27212
#, no-wrap
msgid "@t{-P} @var{prefix}"
msgstr ""

#. type: table
#: zsh.texi:19752
msgid ""
"This gives a string to be inserted before each match.  The string given is "
"not considered as part of the match and any shell metacharacters in it will "
"not be quoted when the string is inserted."
msgstr ""

#. type: item
#: zsh.texi:19753 zsh.texi:27225
#, no-wrap
msgid "@t{-S} @var{suffix}"
msgstr ""

#. type: table
#: zsh.texi:19755
msgid "Like @t{-P}, but gives a string to be inserted after each match."
msgstr ""

#. type: item
#: zsh.texi:19756
#, no-wrap
msgid "@t{-p} @var{hidden-prefix}"
msgstr ""

#. type: table
#: zsh.texi:19761
msgid ""
"This gives a string that should be inserted before each match but that "
"should not appear in the list of matches. Unless the @t{-U} option is given, "
"this string must be matched as part of the string on the command line."
msgstr ""

#. type: item
#: zsh.texi:19762
#, no-wrap
msgid "@t{-s} @var{hidden-suffix}"
msgstr ""

#. type: table
#: zsh.texi:19764
msgid "Like `@t{-p}', but gives a string to insert after each match."
msgstr ""

#. type: item
#: zsh.texi:19765
#, no-wrap
msgid "@t{-i} @var{ignored-prefix}"
msgstr ""

#. type: table
#: zsh.texi:19770
msgid ""
"This gives a string to insert just before any string given with the `@t{-P}' "
"option.  Without `@t{-P}' the string is inserted before the string given "
"with `@t{-p}' or directly before each match."
msgstr ""

#. type: item
#: zsh.texi:19771
#, no-wrap
msgid "@t{-I} @var{ignored-suffix}"
msgstr ""

#. type: table
#: zsh.texi:19773
msgid "Like @t{-i}, but gives an ignored suffix."
msgstr ""

#. type: table
#: zsh.texi:19779
msgid ""
"With this flag the @var{completions} are taken as names of arrays and the "
"actual completions are their values.  If only some elements of the arrays "
"are needed, the @var{completions} may also contain subscripts, as in "
"`@t{foo[2,-1]}'."
msgstr ""

#. type: table
#: zsh.texi:19784
msgid ""
"With this flag the @var{completions} are taken as names of associative "
"arrays and the actual completions are their keys.  As for @t{-a}, the "
"@var{words} may also contain subscripts, as in `@t{foo[(R)*bar*]}'."
msgstr ""

#. type: item
#: zsh.texi:19785
#, no-wrap
msgid "@t{-d} @var{array}"
msgstr ""

#. type: table
#: zsh.texi:19791
msgid ""
"This adds per-completion display strings. The @var{array} should contain one "
"element per @var{completion} given. The completion code will then display "
"the first element instead of the first @var{completion}, and so on. The "
"@var{array} may be given as the name of an array parameter or directly as a "
"space-separated list of words in parentheses."
msgstr ""

#. type: table
#: zsh.texi:19797
msgid ""
"If there are fewer display strings than @var{completions}, the leftover "
"@var{completions} will be displayed unchanged and if there are more display "
"strings than @var{completions}, the leftover display strings will be "
"silently ignored."
msgstr ""

#. type: table
#: zsh.texi:19802
msgid ""
"This option only has an effect if used together with the @t{-d} option. If "
"it is given, the display strings are listed one per line, not arrayed in "
"columns."
msgstr ""

#. type: item
#: zsh.texi:19803
#, no-wrap
msgid "@t{-o} [ @var{order} ]"
msgstr ""

#. type: table
#: zsh.texi:19809
msgid ""
"This controls the order in which matches are sorted. @var{order} is a "
"comma-separated list comprising the following possible values.  These values "
"can be abbreviated to their initial two or three characters.  Note that the "
"order forms part of the group name space so matches with different orderings "
"will not be in the same group."
msgstr ""

#. type: table
#: zsh.texi:19817
msgid ""
"If given, the order of the output is determined by the match strings; "
"otherwise it is determined by the display strings (i.e. the strings given by "
"the @t{-d} option). This is the default if `@t{-o}' is specified but the "
"@var{order} argument is omitted."
msgstr ""

#. type: t{#1}
#: zsh.texi:19818
#, no-wrap
msgid "nosort"
msgstr ""

#. type: table
#: zsh.texi:19823
msgid ""
"This specifies that the @var{completions} are pre-sorted and their order "
"should be preserved.  This value only makes sense alone and cannot be "
"combined with any others."
msgstr ""

#. type: t{#1}
#: zsh.texi:19824
#, no-wrap
msgid "numeric"
msgstr ""

#. type: table
#: zsh.texi:19827
msgid ""
"If the matches include numbers, sort them numerically rather than "
"lexicographically."
msgstr ""

#. type: t{#1}
#: zsh.texi:19828
#, no-wrap
msgid "reverse"
msgstr ""

#. type: table
#: zsh.texi:19830
msgid "Arrange the matches backwards by reversing the sort ordering."
msgstr ""

#. type: item
#: zsh.texi:19833
#, no-wrap
msgid "@t{-J} @var{group-name}"
msgstr ""

#. type: table
#: zsh.texi:19835
msgid "Gives the name of the group that the matches should be stored in."
msgstr ""

#. type: item
#: zsh.texi:19836
#, no-wrap
msgid "@t{-V} @var{group-name}"
msgstr ""

#. type: table
#: zsh.texi:19839
msgid ""
"Like @t{-J} but naming an unsorted group. This option is identical to the "
"combination of @t{-J} and @t{-o nosort}."
msgstr ""

#. type: table
#: zsh.texi:19845
msgid ""
"If given together with the @t{-V} option, makes only consecutive duplicates "
"in the group be removed. If combined with the @t{-J} option, this has no "
"visible effect. Note that groups with and without this flag are in different "
"name spaces."
msgstr ""

#. type: table
#: zsh.texi:19850 zsh.texi:27411
msgid ""
"If given together with the @t{-J} or @t{-V} option, makes all duplicates be "
"kept. Again, groups with and without this flag are in different name spaces."
msgstr ""

#. type: item
#: zsh.texi:19851 zsh.texi:27322
#, no-wrap
msgid "@t{-X} @var{explanation}"
msgstr ""

#. type: table
#: zsh.texi:19854
msgid ""
"The @var{explanation} string will be printed with the list of matches, above "
"the group currently selected."
msgstr ""

#. type: table
#: zsh.texi:19865
msgid ""
"Within the @var{explanation}, the following sequences may be used to specify "
"output attributes (see @ref{Prompt Expansion}): `@t{%B}', `@t{%S}', "
"`@t{%U}', `@t{%F}', `@t{%K}' and their lower case counterparts, as well as "
"`@t{%@{}...@t{%@}}'.  `@t{%F}', `@t{%K}' and `@t{%@{}...@t{%@}}' take "
"arguments in the same form as prompt expansion.  (Note that the sequence "
"`@t{%G}' is not available; an argument to `@t{%@{}' should be used instead.)  "
"The sequence `@t{%%}' produces a literal `@t{%}'."
msgstr ""

#. type: table
#: zsh.texi:19876
msgid ""
"These sequences are most often employed by users when customising the "
"@t{format} style (see @ref{Completion System}), but they must also be taken "
"into account when writing completion functions, as passing descriptions with "
"unescaped `@t{%}' characters to utility functions such as @t{_arguments} and "
"@t{_message} may produce unexpected results. If arbitrary text is to be "
"passed in a description, it can be escaped using "
"e.g. @t{$@{my_str//\\%/%%@}}."
msgstr ""

#. type: item
#: zsh.texi:19877
#, no-wrap
msgid "@t{-x} @var{message}"
msgstr ""

#. type: table
#: zsh.texi:19880
msgid ""
"Like @t{-X}, but the @var{message} will be printed even if there are no "
"matches in the group."
msgstr ""

#. type: table
#: zsh.texi:19886
msgid ""
"The suffix given with @t{-S} will be automatically removed if the next "
"character typed is a blank or does not insert anything, or if the suffix "
"consists of only one character and the next character typed is the same "
"character."
msgstr ""

#. type: item
#: zsh.texi:19887
#, no-wrap
msgid "@t{-r} @var{remove-chars}"
msgstr ""

#. type: table
#: zsh.texi:19900
msgid ""
"This is a more versatile form of the @t{-q} option.  The suffix given with "
"@t{-S} or the slash automatically added after completing directories will be "
"automatically removed if the next character typed inserts one of the "
"characters given in the @var{remove-chars}.  This string is parsed as a "
"characters class and understands the backslash sequences used by the "
"@t{print} command.  For example, `@t{-r \"a-z\\t\"}' removes the suffix if "
"the next character typed inserts a lower case character or a TAB, and `@t{-r "
"\"^0-9\"}' removes the suffix if the next character typed inserts anything "
"but a digit. One extra backslash sequence is understood in this string: "
"`@t{\\-}' stands for all characters that insert nothing. Thus `@t{-S \"=\" "
"-q}' is the same as `@t{-S \"=\" -r \"= \\t\\n\\-\"}'."
msgstr ""

#. type: table
#: zsh.texi:19905
msgid ""
"This option may also be used without the @t{-S} option; then any "
"automatically added space will be removed when one of the characters in the "
"list is typed."
msgstr ""

#. type: item
#: zsh.texi:19906
#, no-wrap
msgid "@t{-R} @var{remove-func}"
msgstr ""

#. type: table
#: zsh.texi:19913
msgid ""
"This is another form of the @t{-r} option. When a match has been accepted "
"and a suffix has been inserted, the function @var{remove-func} will be "
"called after the next character typed.  It is passed the length of the "
"suffix as an argument and can use the special parameters available in "
"ordinary (non-completion) zle widgets (see @ref{Zsh Line Editor}) to analyse "
"and modify the command line."
msgstr ""

#. type: table
#: zsh.texi:19921
msgid ""
"If this flag is given, all of the matches built from the @var{completions} "
"are marked as being the names of files.  They are not required to be actual "
"filenames, but if they are, and the option @t{LIST_TYPES} is set, the "
"characters describing the types of the files in the completion lists will be "
"shown. This also forces a slash to be added when the name of a directory is "
"completed."
msgstr ""

#. type: table
#: zsh.texi:19927
msgid ""
"This flag can be used to tell the completion code that the matches added are "
"parameter names for a parameter expansion. This will make the "
"@t{AUTO_PARAM_SLASH} and @t{AUTO_PARAM_KEYS} options be used for the "
"matches."
msgstr ""

#. type: item
#: zsh.texi:19928 zsh.texi:27231
#, no-wrap
msgid "@t{-W} @var{file-prefix}"
msgstr ""

#. type: table
#: zsh.texi:19933
msgid ""
"This string is a pathname that will be prepended to each match together with "
"any prefix specified by the @t{-p} option to form a complete filename for "
"testing.  Hence it is only useful if combined with the @t{-f} flag, as the "
"tests will not otherwise be performed."
msgstr ""

#. type: item
#: zsh.texi:19934
#, no-wrap
msgid "@t{-F} @var{array}"
msgstr ""

#. type: table
#: zsh.texi:19937
msgid ""
"Specifies an array containing patterns.  @var{completions} that match one of "
"these patterns are ignored, that is, not considered to be matches."
msgstr ""

#. type: table
#: zsh.texi:19943
msgid ""
"The @var{array} may be the name of an array parameter or a list of literal "
"patterns enclosed in parentheses and quoted, as in `@t{-F \"(*?.o "
"*?.h)\"}'. If the name of an array is given, the elements of the array are "
"taken as the patterns."
msgstr ""

#. type: table
#: zsh.texi:19948
msgid ""
"This flag instructs the completion code not to quote any metacharacters in "
"the matches when inserting them into the command line."
msgstr ""

#. type: item
#: zsh.texi:19949 zsh.texi:27412
#, no-wrap
msgid "@t{-M} @var{match-spec}"
msgstr ""

#. type: table
#: zsh.texi:19955
msgid ""
"This gives local match specifications as described below in @ref{Completion "
"Matching Control}. This option may be given more than once.  In this case "
"all @var{match-spec}s given are concatenated with spaces between them to "
"form the specification string to use.  Note that they will only be used if "
"the @t{-U} option is not given."
msgstr ""

#. type: table
#: zsh.texi:19959
msgid ""
"Specifies that matching @var{completions} are to be added to the set of "
"matches, but are not to be listed to the user."
msgstr ""

#. type: table
#: zsh.texi:19965
msgid ""
"If this flag is given, all @var{completions} are added to the set of matches "
"and no matching will be done by the completion code. Normally this is used "
"in functions that do the matching themselves."
msgstr ""

#. type: item
#: zsh.texi:19966
#, no-wrap
msgid "@t{-O} @var{array}"
msgstr ""

#. type: table
#: zsh.texi:19971
msgid ""
"If this option is given, the @var{completions} are @emph{not} added to the "
"set of matches.  Instead, matching is done as usual and all of the "
"@var{completions} that match will be stored in the array parameter whose "
"name is given as @var{array}."
msgstr ""

#. type: item
#: zsh.texi:19972 zsh.texi:30443
#, no-wrap
msgid "@t{-A} @var{array}"
msgstr ""

#. type: table
#: zsh.texi:19981
msgid ""
"As the @t{-O} option, except that instead of those of the @var{completions} "
"which match being stored in @var{array}, the strings generated internally by "
"the completion code are stored.  For example, with a match specification of "
"`@t{-M \"L:|no=\"}', a current word of `@t{nof}' and @var{completions} of "
"`@t{foo}', this option stores the string `@t{nofoo}' in the array, whereas "
"the @t{-O} option stores the `@t{foo}' originally given."
msgstr ""

#. type: item
#: zsh.texi:19982
#, no-wrap
msgid "@t{-D} @var{array}"
msgstr ""

#. type: table
#: zsh.texi:19989
msgid ""
"As with @t{-O}, the @var{completions} are not added to the set of matches.  "
"Instead, whenever the @var{n}th @var{completion} does not match, the "
"@var{n}th element of the @var{array} is removed.  Elements for which the "
"corresponding @var{completion} matches are retained.  This option can be "
"used more than once to remove elements from multiple arrays."
msgstr ""

#. type: table
#: zsh.texi:19998
msgid ""
"This option adds a special match which expands to all other matches when "
"inserted into the line, even those that are added after this option is "
"used.  Together with the @t{-d} option it is possible to specify a string "
"that should be displayed in the list for this special match.  If no string "
"is given, it will be shown as a string containing the strings that would be "
"inserted for the other matches, truncated to the width of the screen."
msgstr ""

#. type: item
#: zsh.texi:19999
#, no-wrap
msgid "@t{-E} @var{number}"
msgstr ""

#. type: table
#: zsh.texi:20011
msgid ""
"This option adds @var{number} empty matches after matching @var{completions} "
"have been added.  An empty match takes up space in completion listings but "
"will never be inserted in the line and can't be selected with menu "
"completion or menu selection.  This makes empty matches only useful to "
"format completion lists and to make explanatory string be shown in "
"completion lists (since empty matches can be given display strings with the "
"@t{-d} option).  And because all but one empty string would otherwise be "
"removed, this option implies the @t{-V} and @t{-2} options (even if an "
"explicit @t{-J} option is given).  This can be important to note as it "
"affects the name space into which matches are added."
msgstr ""

#. type: item
#: zsh.texi:20013 zsh.texi:38899
#, no-wrap
msgid "@t{-}@t{-}"
msgstr ""

#. type: table
#: zsh.texi:20017
msgid ""
"This flag ends the list of flags and options. All arguments after it will be "
"taken as the @var{completions} even if they begin with hyphens."
msgstr ""

#. type: table
#: zsh.texi:20023
msgid ""
"Except for the @t{-M} flag, if any of these flags is given more than once, "
"the first one (and its argument) will be used."
msgstr ""

#. type: findex
#: zsh.texi:20024
#, no-wrap
msgid "compset"
msgstr ""

#. type: cindex
#: zsh.texi:20025
#, no-wrap
msgid "completion widgets, modifying special parameters"
msgstr ""

#. type: item
#: zsh.texi:20026
#, no-wrap
msgid "@t{compset -p} @var{number}"
msgstr ""

#. type: itemx
#: zsh.texi:20027
#, no-wrap
msgid "@t{compset -P} [ @var{number} ] @var{pattern}"
msgstr ""

#. type: itemx
#: zsh.texi:20028
#, no-wrap
msgid "@t{compset -s} @var{number}"
msgstr ""

#. type: itemx
#: zsh.texi:20029
#, no-wrap
msgid "@t{compset -S} [ @var{number} ] @var{pattern}"
msgstr ""

#. type: itemx
#: zsh.texi:20030
#, no-wrap
msgid "@t{compset -n} @var{begin} [ @var{end} ]"
msgstr ""

#. type: itemx
#: zsh.texi:20031
#, no-wrap
msgid "@t{compset -N} @var{beg-pat} [ @var{end-pat} ]"
msgstr ""

#. type: t{#1}
#: zsh.texi:20032
#, no-wrap
msgid "compset -q"
msgstr ""

#. type: table
#: zsh.texi:20035
msgid ""
"This command simplifies modification of the special parameters, while its "
"return status allows tests on them to be carried out."
msgstr ""

#. type: table
#: zsh.texi:20038
msgid "The options are:"
msgstr ""

#. type: item
#: zsh.texi:20041
#, no-wrap
msgid "@t{-p} @var{number}"
msgstr ""

#. type: table
#: zsh.texi:20045
msgid ""
"If the value of the @t{PREFIX} parameter is at least @var{number} characters "
"long, the first @var{number} characters are removed from it and appended to "
"the contents of the @t{IPREFIX} parameter."
msgstr ""

#. type: item
#: zsh.texi:20046
#, no-wrap
msgid "@t{-P} [ @var{number} ] @var{pattern}"
msgstr ""

#. type: table
#: zsh.texi:20050
msgid ""
"If the value of the @t{PREFIX} parameter begins with anything that matches "
"the @var{pattern}, the matched portion is removed from @t{PREFIX} and "
"appended to @t{IPREFIX}."
msgstr ""

#. type: table
#: zsh.texi:20059
msgid ""
"Without the optional @var{number}, the longest match is taken, but if "
"@var{number} is given, anything up to the @var{number}th match is moved.  If "
"the @var{number} is negative, the @var{number}th longest match is moved. For "
"example, if @t{PREFIX} contains the string `@t{a=b=c}', then @t{compset -P "
"'*\\='} will move the string `@t{a=b=}' into the @t{IPREFIX} parameter, but "
"@t{compset -P 1 '*\\='} will move only the string `@t{a=}'."
msgstr ""

#. type: item
#: zsh.texi:20060
#, no-wrap
msgid "@t{-s} @var{number}"
msgstr ""

#. type: table
#: zsh.texi:20063
msgid ""
"As @t{-p}, but transfer the last @var{number} characters from the value of "
"@t{SUFFIX} to the front of the value of @t{ISUFFIX}."
msgstr ""

#. type: item
#: zsh.texi:20064
#, no-wrap
msgid "@t{-S} [ @var{number} ] @var{pattern}"
msgstr ""

#. type: table
#: zsh.texi:20067
msgid ""
"As @t{-P}, but match the last portion of @t{SUFFIX} and transfer the matched "
"portion to the front of the value of @t{ISUFFIX}."
msgstr ""

#. type: item
#: zsh.texi:20068
#, no-wrap
msgid "@t{-n} @var{begin} [ @var{end} ]"
msgstr ""

#. type: table
#: zsh.texi:20073
msgid ""
"If the current word position as specified by the parameter @t{CURRENT} is "
"greater than or equal to @var{begin}, anything up to the @var{begin}th word "
"is removed from the @t{words} array and the value of the parameter "
"@t{CURRENT} is decremented by @var{begin}."
msgstr ""

#. type: table
#: zsh.texi:20079
msgid ""
"If the optional @var{end} is given, the modification is done only if the "
"current word position is also less than or equal to @var{end}. In this case, "
"the words from position @var{end} onwards are also removed from the "
"@t{words} array."
msgstr ""

#. type: table
#: zsh.texi:20083
msgid ""
"Both @var{begin} and @var{end} may be negative to count backwards from the "
"last element of the @t{words} array."
msgstr ""

#. type: item
#: zsh.texi:20084
#, no-wrap
msgid "@t{-N} @var{beg-pat} [ @var{end-pat} ]"
msgstr ""

#. type: table
#: zsh.texi:20090
msgid ""
"If one of the elements of the @t{words} array before the one at the index "
"given by the value of the parameter @t{CURRENT} matches the pattern "
"@var{beg-pat}, all elements up to and including the matching one are removed "
"from the @t{words} array and the value of @t{CURRENT} is changed to point to "
"the same word in the changed array."
msgstr ""

#. type: table
#: zsh.texi:20100
msgid ""
"If the optional pattern @var{end-pat} is also given, and there is an element "
"in the @t{words} array matching this pattern, the parameters are modified "
"only if the index of this word is higher than the one given by the "
"@t{CURRENT} parameter (so that the matching word has to be after the "
"cursor). In this case, the words starting with the one matching @t{end-pat} "
"are also removed from the @t{words} array. If @t{words} contains no word "
"matching @var{end-pat}, the testing and modification is performed as if it "
"were not given."
msgstr ""

#. type: table
#: zsh.texi:20108
msgid ""
"The word currently being completed is split on spaces into separate words, "
"respecting the usual shell quoting conventions.  The resulting words are "
"stored in the @t{words} array, and @t{CURRENT}, @t{PREFIX}, @t{SUFFIX}, "
"@t{QIPREFIX}, and @t{QISUFFIX} are modified to reflect the word part that is "
"completed."
msgstr ""

#. type: table
#: zsh.texi:20115
msgid ""
"In all the above cases the return status is zero if the test succeeded and "
"the parameters were modified and non-zero otherwise. This allows one to use "
"this builtin in tests such as:"
msgstr ""

#. type: example
#: zsh.texi:20119
#, no-wrap
msgid "if compset -P '*\\='; then ...\n"
msgstr ""

#. type: table
#: zsh.texi:20124
msgid ""
"This forces anything up to and including the last equal sign to be ignored "
"by the completion code."
msgstr ""

#. type: item
#: zsh.texi:20125
#, no-wrap
msgid "@t{compcall} [ @t{-TD} ]"
msgstr ""

#. type: table
#: zsh.texi:20134
msgid ""
"This allows the use of completions defined with the @t{compctl} builtin from "
"within completion widgets.  The list of matches will be generated as if one "
"of the non-widget completion functions (@t{complete-word}, etc.)  had been "
"called, except that only @t{compctl}s given for specific commands are "
"used. To force the code to try completions defined with the @t{-T} option of "
"@t{compctl} and/or the default completion (whether defined by @t{compctl -D} "
"or the builtin default) in the appropriate places, the @t{-T} and/or @t{-D} "
"flags can be passed to @t{compcall}."
msgstr ""

#. type: table
#: zsh.texi:20139
msgid ""
"The return status can be used to test if a matching @t{compctl} definition "
"was found. It is non-zero if a @t{compctl} was found and zero otherwise."
msgstr ""

#. type: table
#: zsh.texi:20142
msgid "Note that this builtin is defined by the @t{zsh/compctl} module."
msgstr ""

#. type: node
#: zsh.texi:20146 zsh.texi:20177 zsh.texi:20179 zsh.texi:20508
#, no-wrap
msgid "Completion Matching Control"
msgstr ""

#. type: cindex
#: zsh.texi:20150
#, no-wrap
msgid "completion widgets, condition codes"
msgstr ""

#. type: Plain text
#: zsh.texi:20158
msgid ""
"The following additional condition codes for use within the @t{[[} @var{...} "
"@t{]]} construct are available in completion widgets.  These work on the "
"special parameters.  All of these tests can also be performed by the "
"@t{compset} builtin, but in the case of the condition codes the contents of "
"the special parameters are not modified."
msgstr ""

#. type: item
#: zsh.texi:20161
#, no-wrap
msgid "@t{-prefix} [ @var{number} ] @var{pattern}"
msgstr ""

#. type: table
#: zsh.texi:20163
msgid "true if the test for the @t{-P} option of @t{compset} would succeed."
msgstr ""

#. type: item
#: zsh.texi:20164
#, no-wrap
msgid "@t{-suffix} [ @var{number} ] @var{pattern}"
msgstr ""

#. type: table
#: zsh.texi:20166
msgid "true if the test for the @t{-S} option of @t{compset} would succeed."
msgstr ""

#. type: item
#: zsh.texi:20167
#, no-wrap
msgid "@t{-after} @var{beg-pat}"
msgstr ""

#. type: table
#: zsh.texi:20170
msgid ""
"true if the test of the @t{-N} option with only the @var{beg-pat} given "
"would succeed."
msgstr ""

#. type: item
#: zsh.texi:20171
#, no-wrap
msgid "@t{-between} @var{beg-pat end-pat}"
msgstr ""

#. type: table
#: zsh.texi:20173
msgid "true if the test for the @t{-N} option with both patterns would succeed."
msgstr ""

#. type: Plain text
#: zsh.texi:20187
msgid ""
"When the user invokes completion, the current @emph{word} on the command "
"line (that is, the word the cursor is currently on) is used to generate a "
"@emph{match pattern}.  Only those @emph{completions} that match the pattern "
"are offered to the user as @emph{matches}."
msgstr ""

#. type: Plain text
#: zsh.texi:20190
msgid "The default match pattern is generated from the current word by either"
msgstr ""

#. type: itemize
#: zsh.texi:20197
msgid ""
"appending a `@t{*}' (matching any number of characters in a completion)  "
"@emph{or,}"
msgstr ""

#. type: itemize
#: zsh.texi:20200
msgid ""
"if the shell option @t{COMPLETE_IN_WORD} is set, inserting a `@t{*}' at the "
"cursor position."
msgstr ""

#. type: Plain text
#: zsh.texi:20210
msgid ""
"This narrow pattern can be broadened selectively by passing a @emph{match "
"specification} to the @t{compadd} builtin command through its @t{-M} option "
"(see @ref{Completion Builtin Commands}).  A match specification consists of "
"one or more @var{matchers} separated by whitespace.  Matchers in a match "
"specification are applied one at a time, from left to right.  Once all "
"matchers have been applied, completions are compared to the final match "
"pattern and non-matching ones are discarded."
msgstr ""

#. type: itemize
#: zsh.texi:20220
msgid ""
"Note that the @t{-M} option is ignored if the current word contains a glob "
"pattern and the shell option @t{GLOB_COMPLETE} is set or if the "
"@t{pattern_match} key of the special associative array @t{compstate} is set "
"to a non-empty value (see @ref{Completion Special Parameters})."
msgstr ""

#. type: itemize
#: zsh.texi:20225
msgid ""
"Users of the @ref{Completion System} should generally not use the @t{-M} "
"option directly, but rather use the @t{matcher-list} and @t{matcher} styles "
"(see the subsection @emph{Standard Styles} in @ref{Completion System "
"Configuration})."
msgstr ""

#. type: Plain text
#: zsh.texi:20229
msgid "Each matcher consists of"
msgstr ""

#. type: itemize
#: zsh.texi:20235
msgid "a case-sensitive letter"
msgstr ""

#. type: itemize
#: zsh.texi:20237
msgid "a `@t{:}',"
msgstr ""

#. type: itemize
#: zsh.texi:20239
msgid "one or more patterns separated by pipes (`@t{|}'),"
msgstr ""

#. type: itemize
#: zsh.texi:20241
msgid "an equals sign (`@t{=}'), and"
msgstr ""

#. type: itemize
#: zsh.texi:20243
msgid "another pattern."
msgstr ""

#. type: Plain text
#: zsh.texi:20249
msgid ""
"The patterns before the `@t{=}' are used to match substrings of the current "
"word.  For each matched substring, the corresponding part of the match "
"pattern is broadened with the pattern after the `@t{=}', by means of a "
"logical @t{OR}."
msgstr ""

#. type: Plain text
#: zsh.texi:20252
msgid "Each pattern in a matcher cosists of either"
msgstr ""

#. type: itemize
#: zsh.texi:20258
msgid "the empty string or"
msgstr ""

#. type: itemize
#: zsh.texi:20260
msgid "a sequence of"
msgstr ""

#. type: itemize
#: zsh.texi:20266
msgid "literal characters (which may be quoted with a `@t{\\}'),"
msgstr ""

#. type: itemize
#: zsh.texi:20268
msgid "question marks (`@t{?}'),"
msgstr ""

#. type: itemize
#: zsh.texi:20271
msgid ""
"bracket expressions (`@t{[...]}'; see the subsection @emph{Glob Operators} "
"in @ref{Filename Generation}), and/or"
msgstr ""

#. type: itemize
#: zsh.texi:20273
msgid "brace expressions (see below)."
msgstr ""

#. type: Plain text
#: zsh.texi:20279
msgid "Other shell patterns are not allowed."
msgstr ""

#. type: Plain text
#: zsh.texi:20282
msgid "A brace expression, like a bracket expression, consists of a list of"
msgstr ""

#. type: itemize
#: zsh.texi:20288
msgid "literal characters,"
msgstr ""

#. type: itemize
#: zsh.texi:20290
msgid "ranges (`@t{0-9}'), and/or"
msgstr ""

#. type: itemize
#: zsh.texi:20292
msgid "character classes (`@t{[:}@var{name}@t{:]}')."
msgstr ""

#. type: Plain text
#: zsh.texi:20296
msgid "However, they differ from each other as follows:"
msgstr ""

#. type: itemize
#: zsh.texi:20302
msgid "A brace expression is delimited by a pair of braces (`@t{@{...@}}')."
msgstr ""

#. type: itemize
#: zsh.texi:20306
msgid ""
"Brace expressions do not support negations.  That is, an initial `@t{!}' or "
"`@t{^}' has no special meaning and will be interpreted as a literal "
"character."
msgstr ""

#. type: itemize
#: zsh.texi:20318
msgid ""
"When a character in the current word matches the @var{n}th pattern in a "
"brace expression, the corresponding part of the match pattern is broadened "
"only with the @var{n}th pattern of the brace expression on the other side of "
"the `@t{=}', if there is one; if there is no brace expression on the other "
"side, then this pattern is the empty string.  However, if either brace "
"expression has more elements than the other, then the excess entries are "
"simply ignored.  When comparing indexes, each literal character or character "
"class counts as one element, but each range is instead expanded to the full "
"list of literal characters it represents.  Additionally, if on @emph{both} "
"sides of the `@t{=}', the @var{n}th pattern is `@t{[:upper:]}' or "
"`@t{[:lower:]}', then these are expanded as ranges, too."
msgstr ""

#. type: Plain text
#: zsh.texi:20325
msgid ""
"Note that, although the matching system does not yet handle multibyte "
"characters, this is likely to be a future extension.  Hence, using "
"`@t{[:upper:]}' and `@t{[:lower:]}' is recommended over `@t{A-Z}' and "
"`@t{a-z}'."
msgstr ""

#. type: Plain text
#: zsh.texi:20336
msgid ""
"Below are the different forms of matchers supported.  Each @emph{uppercase} "
"form behaves exactly like its lowercase counterpart, but adds an additional "
"step @emph{after} the match pattern has filtered out non-matching "
"completions: Each of a match's substrings that was matched by a subpattern "
"from an uppercase matcher is replaced with the corresponding substring of "
"the current word.  However, patterns from @emph{lowercase} matchers have "
"higher weight: If a substring of the current word was matched by patterns "
"from both a lowercase and an uppercase matcher, then the lowercase matcher's "
"pattern wins and the corresponding part of the match is not modified."
msgstr ""

#. type: Plain text
#: zsh.texi:20340
msgid ""
"Unless indicated otherwise, each example listed assumes @t{COMPLETE_IN_WORD} "
"to be unset (as it is by default)."
msgstr ""

#. type: item
#: zsh.texi:20343
#, no-wrap
msgid "@t{m:}@var{word-pat}@t{=}@var{match-pat}"
msgstr ""

#. type: itemx
#: zsh.texi:20344
#, no-wrap
msgid "@t{M:}@var{word-pat}@t{=}@var{match-pat}"
msgstr ""

#. type: table
#: zsh.texi:20349
msgid ""
"For each substring of the current word that matches @var{word-pat}, broaden "
"the corresponding part of the match pattern to additionally match "
"@var{match-pat}."
msgstr ""

#. type: table
#: zsh.texi:20352 zsh.texi:20380 zsh.texi:20409 zsh.texi:20451 zsh.texi:20479
#: zsh.texi:26283 zsh.texi:40178
#, no-wrap
msgid "Examples:"
msgstr ""

#. type: table
#: zsh.texi:20359
msgid ""
"@t{m:@{[:lower:]@}=@{[:upper:]@}} lets any lower case character in the "
"current word be completed to itself or its uppercase counterpart.  So, the "
"completions `@t{foo}', `@t{FOO}' and `@t{Foo}' will are be considered "
"matches for the word `@t{fo}'."
msgstr ""

#. type: table
#: zsh.texi:20365
msgid ""
"@t{M:_=} inserts every underscore from the current word into each match, in "
"the same relative position, determined by matching the substrings around "
"it.  So, given a completion `@t{foo}', the word `@t{f_o}' will be completed "
"to the match `@t{f_oo}', even though the latter was not present as a "
"completion."
msgstr ""

#. type: item
#: zsh.texi:20368
#, no-wrap
msgid "@t{b:}@var{word-pat}@t{=}@var{match-pat}"
msgstr ""

#. type: itemx
#: zsh.texi:20369
#, no-wrap
msgid "@t{B:}@var{word-pat}@t{=}@var{match-pat}"
msgstr ""

#. type: itemx
#: zsh.texi:20370
#, no-wrap
msgid "@t{e:}@var{word-pat}@t{=}@var{match-pat}"
msgstr ""

#. type: itemx
#: zsh.texi:20371
#, no-wrap
msgid "@t{E:}@var{word-pat}@t{=}@var{match-pat}"
msgstr ""

#. type: table
#: zsh.texi:20377
msgid ""
"For each consecutive substring at the @t{b:}eginning or @t{e:}nd of the "
"current word that matches @var{word-pat}, broaden the corresponding part of "
"the match pattern to additionally match @var{match-pat}."
msgstr ""

#. type: table
#: zsh.texi:20385
msgid ""
"`@t{b:-=+}' lets any number of minuses at the start of the current word be "
"completed to a minus or a plus."
msgstr ""

#. type: table
#: zsh.texi:20389
msgid ""
"`@t{B:0=}' adds all zeroes at the beginning of the current word to the "
"beginning of each match."
msgstr ""

#. type: item
#: zsh.texi:20392
#, no-wrap
msgid "@t{l:}@t{|}@var{word-pat}@t{=}@var{match-pat}"
msgstr ""

#. type: itemx
#: zsh.texi:20393
#, no-wrap
msgid "@t{L:}@t{|}@var{word-pat}@t{=}@var{match-pat}"
msgstr ""

#. type: itemx
#: zsh.texi:20394
#, no-wrap
msgid "@t{R:}@var{word-pat}@t{|}@t{=}@var{match-pat}"
msgstr ""

#. type: itemx
#: zsh.texi:20395
#, no-wrap
msgid "@t{r:}@var{word-pat}@t{|}@t{=}@var{match-pat}"
msgstr ""

#. type: table
#: zsh.texi:20401
msgid ""
"If there is a substring at the @t{l:}eft or @t{r:}ight edge of the current "
"word that matches @var{word-pat}, then broaden the corresponding part of the "
"match pattern to additionally match @var{match-pat}."
msgstr ""

#. type: table
#: zsh.texi:20406
msgid ""
"For each @t{l:}, @t{L:}, @t{r:} and @t{R:} matcher (including the ones "
"below), the pattern @var{match-pat} may also be a `@t{*}'.  This matches any "
"number of characters in a completion."
msgstr ""

#. type: table
#: zsh.texi:20415
msgid ""
"`@t{r:|=*}' appends a `@t{*}' to the match pattern, even when "
"@t{COMPLETE_IN_WORD} is set and the cursor is not at the end of the current "
"word."
msgstr ""

#. type: table
#: zsh.texi:20419
msgid ""
"If the current word starts with a minus, then `@t{L:|-=}' will prepend it to "
"each match."
msgstr ""

#. type: item
#: zsh.texi:20422
#, no-wrap
msgid "@t{l:}@var{anchor}@t{|}@var{word-pat}@t{=}@var{match-pat}"
msgstr ""

#. type: itemx
#: zsh.texi:20423
#, no-wrap
msgid "@t{L:}@var{anchor}@t{|}@var{word-pat}@t{=}@var{match-pat}"
msgstr ""

#. type: itemx
#: zsh.texi:20424
#, no-wrap
msgid "@t{r:}@var{word-pat}@t{|}@var{anchor}@t{=}@var{match-pat}"
msgstr ""

#. type: itemx
#: zsh.texi:20425
#, no-wrap
msgid "@t{R:}@var{word-pat}@t{|}@var{anchor}@t{=}@var{match-pat}"
msgstr ""

#. type: table
#: zsh.texi:20431
msgid ""
"For each substring of the current word that matches @var{word-pat} and has "
"on its @t{l:}eft or @t{r:}ight another substring matching @var{anchor}, "
"broaden the corresponding part of the match pattern to additionally match "
"@var{match-pat}."
msgstr ""

#. type: table
#: zsh.texi:20439
msgid ""
"Note that these matchers (and the ones below) modify only what is matched by "
"@var{word-pat}; they do not change the matching behavior of what is matched "
"by @var{anchor} (or @var{coanchor}; see the matchers below).  Thus, unless "
"its corresponding part of the match pattern has been modified, the anchor in "
"the current word has to match literally in each completion, just like any "
"other substring of the current word."
msgstr ""

#. type: table
#: zsh.texi:20448
msgid ""
"If a matcher includes at least one anchor (which includes the matchers with "
"two anchors, below), then @var{match-pat} may also be `@t{*}' or `@t{**}'.  "
"`@t{*}' can match any part of a completion that does not contain any "
"substrings matching @var{anchor}, whereas a `@t{**}' can match any part of a "
"completion, period.  (Note that this is different from the behavior of "
"`@t{*}' in the anchorless forms of `@t{l:}' and `@t{r:}' and and also "
"different from `@t{*}' and `@t{**}' in glob expressions.)"
msgstr ""

#. type: table
#: zsh.texi:20456
msgid ""
"`@t{r:|.=*}' makes the completion `@t{comp.sources.unix}' a match for the "
"word `@t{..u}' --- but @emph{not} for the word `@t{.u}'."
msgstr ""

#. type: table
#: zsh.texi:20460
msgid ""
"Given a completion `@t{-}@t{-foo}', the matcher `@t{L:--|no-=}' will "
"complete the word `@t{-}@t{-no-}' to the match `@t{-}@t{-no-foo}'."
msgstr ""

#. type: item
#: zsh.texi:20463
#, no-wrap
msgid "@t{l:}@var{anchor}@t{||}@var{coanchor}@t{=}@var{match-pat}"
msgstr ""

#. type: itemx
#: zsh.texi:20464
#, no-wrap
msgid "@t{L:}@var{anchor}@t{||}@var{coanchor}@t{=}@var{match-pat}"
msgstr ""

#. type: itemx
#: zsh.texi:20465
#, no-wrap
msgid "@t{r:}@var{coanchor}@t{||}@var{anchor}@t{=}@var{match-pat}"
msgstr ""

#. type: itemx
#: zsh.texi:20466
#, no-wrap
msgid "@t{R:}@var{coanchor}@t{||}@var{anchor}@t{=}@var{match-pat}"
msgstr ""

#. type: table
#: zsh.texi:20472
msgid ""
"For any two consecutive substrings of the current word that match "
"@var{anchor} and @var{coanchor}, in the order given, insert the pattern "
"@var{match-pat} between their corresponding parts in the match pattern."
msgstr ""

#. type: table
#: zsh.texi:20476
msgid ""
"Note that, unlike @var{anchor}, the pattern @var{coanchor} does not change "
"what `@t{*}' can match."
msgstr ""

#. type: table
#: zsh.texi:20487
msgid ""
"`@t{r:?||[[:upper:]]=*}' will complete the current word `@t{fB}' to "
"`@t{fooBar}', but it will not complete it to `@t{fooHooBar}' (because "
"`@t{*}' here cannot match anything that includes a match for "
"`@t{[[:upper:]]}), nor will it complete `@t{B}' to `@t{fooBar}' (because "
"there is no character in the current word to match @var{coanchor})."
msgstr ""

#. type: table
#: zsh.texi:20491
msgid ""
"Given the current word `@t{pass.n}' and a completion `@t{pass.byname}', the "
"matcher `@t{L:.||[[:alpha:]]=by}' will produce the match `@t{pass.name}'."
msgstr ""

#. type: t{#1}
#: zsh.texi:20494
#, no-wrap
msgid "x:"
msgstr ""

#. type: table
#: zsh.texi:20498
msgid "Ignore this matcher and all matchers to its right."
msgstr ""

#. type: table
#: zsh.texi:20504
msgid ""
"This matcher is used to mark the end of a match specification.  In a single "
"standalone list of matchers, this has no use, but where match specifications "
"are concatenated, as is often the case when using the @ref{Completion "
"System}, it can allow one match specification to override another."
msgstr ""

#. type: cindex
#: zsh.texi:20512
#, no-wrap
msgid "completion widgets, example"
msgstr ""

#. type: Plain text
#: zsh.texi:20516
msgid "The first step is to define the widget:"
msgstr ""

#. type: example
#: zsh.texi:20520
#, no-wrap
msgid "zle -C complete complete-word complete-files\n"
msgstr ""

#. type: Plain text
#: zsh.texi:20525
msgid "Then the widget can be bound to a key using the @t{bindkey} builtin command:"
msgstr ""

#. type: example
#: zsh.texi:20529
#, no-wrap
msgid "bindkey '^X\\t' complete\n"
msgstr ""

#. type: Plain text
#: zsh.texi:20535
msgid ""
"After that the shell function @t{complete-files} will be invoked after "
"typing control-X and TAB. The function should then generate the matches, "
"e.g.:"
msgstr ""

#. type: example
#: zsh.texi:20539
#, no-wrap
msgid "complete-files () @{ compadd - * @}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:20546
msgid ""
"This function will complete files in the current directory matching the "
"current word."
msgstr ""

#. type: cindex
#: zsh.texi:20550
#, no-wrap
msgid "completion system"
msgstr ""

#. type: Plain text
#: zsh.texi:20562
msgid ""
"This describes the shell code for the `new' completion system, referred to "
"as @t{compsys}.  It is written in shell functions based on the features "
"described in the previous chapter, @ref{Completion Widgets}."
msgstr ""

#. type: Plain text
#: zsh.texi:20570
msgid ""
"The features are contextual, sensitive to the point at which completion is "
"started.  Many completions are already provided.  For this reason, a user "
"can perform a great many tasks without knowing any details beyond how to "
"initialize the system, which is described in @ref{Initialization}."
msgstr ""

#. type: Plain text
#: zsh.texi:20573
msgid "The context that decides what completion is to be performed may be"
msgstr ""

#. type: itemize
#: zsh.texi:20579
msgid ""
"an argument or option position: these describe the position on the command "
"line at which completion is requested.  For example `first argument to "
"rmdir, the word being completed names a directory';"
msgstr ""

#. type: itemize
#: zsh.texi:20583
msgid ""
"a special context, denoting an element in the shell's syntax.  For example "
"`a word in command position' or `an array subscript'."
msgstr ""

#. type: Plain text
#: zsh.texi:20588
msgid "A full context specification contains other elements, as we shall describe."
msgstr ""

#. type: Plain text
#: zsh.texi:20593
msgid ""
"Besides commands names and contexts, the system employs two more concepts, "
"@emph{styles} and @emph{tags}.  These provide ways for the user to configure "
"the system's behaviour."
msgstr ""

#. type: Plain text
#: zsh.texi:20601
msgid ""
"Tags play a dual role.  They serve as a classification system for the "
"matches, typically indicating a class of object that the user may need to "
"distinguish.  For example, when completing arguments of the @t{ls} command "
"the user may prefer to try @t{files} before @t{directories}, so both of "
"these are tags.  They also appear as the rightmost element in a context "
"specification."
msgstr ""

#. type: Plain text
#: zsh.texi:20608
msgid ""
"Styles modify various operations of the completion system, such as output "
"formatting, but also what kinds of completers are used (and in what order), "
"or which tags are examined.  Styles may accept arguments and are manipulated "
"using the @t{zstyle} command described in @ref{The zsh/zutil Module}."
msgstr ""

#. type: Plain text
#: zsh.texi:20617
msgid ""
"In summary, tags describe @emph{what} the completion objects are, and style "
"@t{how} they are to be completed.  At various points of execution, the "
"completion system checks what styles and/or tags are defined for the current "
"context, and uses that to modify its behavior.  The full description of "
"context handling, which determines how tags and other elements of the "
"context influence the behaviour of styles, is described in @ref{Completion "
"System Configuration}."
msgstr ""

#. type: Plain text
#: zsh.texi:20626
msgid ""
"When a completion is requested, a dispatcher function is called; see the "
"description of @t{_main_complete} in the list of control functions "
"below. This dispatcher decides which function should be called to produce "
"the completions, and calls it. The result is passed to one or more "
"@emph{completers}, functions that implement individual completion "
"strategies: simple completion, error correction, completion with error "
"correction, menu selection, etc."
msgstr ""

#. type: Plain text
#: zsh.texi:20630
msgid ""
"More generally, the shell functions contained in the completion system are "
"of two types:"
msgstr ""

#. type: itemize
#: zsh.texi:20635
msgid ""
"those beginning `@t{comp}' are to be called directly; there are only a few "
"of these;"
msgstr ""

#. type: itemize
#: zsh.texi:20641
msgid ""
"those beginning `@t{_}' are called by the completion code.  The shell "
"functions of this set, which implement completion behaviour and may be bound "
"to keystrokes, are referred to as `widgets'.  These proliferate as new "
"completions are required."
msgstr ""

#. type: menuentry
#: zsh.texi:20653
msgid "Completion Directories::"
msgstr ""

#. type: node
#: zsh.texi:20653 zsh.texi:24562 zsh.texi:26735 zsh.texi:26737 zsh.texi:26776
#, no-wrap
msgid "Completion System Variables"
msgstr ""

#. type: node
#: zsh.texi:20656 zsh.texi:20658 zsh.texi:21171
#, no-wrap
msgid "Initialization"
msgstr ""

#. type: node
#: zsh.texi:20656 zsh.texi:21171 zsh.texi:21173 zsh.texi:23839
#, no-wrap
msgid "Completion System Configuration"
msgstr ""

#. type: findex
#: zsh.texi:20660
#, no-wrap
msgid "compinstall"
msgstr ""

#. type: cindex
#: zsh.texi:20661
#, no-wrap
msgid "completion system, installing"
msgstr ""

#. type: Plain text
#: zsh.texi:20668
msgid ""
"If the system was installed completely, it should be enough to call the "
"shell function @t{compinit} from your initialization file; see the next "
"section.  However, the function @t{compinstall} can be run by a user to "
"configure various aspects of the completion system."
msgstr ""

#. type: Plain text
#: zsh.texi:20680
msgid ""
"Usually, @t{compinstall} will insert code into @t{.zshrc}, although if that "
"is not writable it will save it in another file and tell you that file's "
"location.  Note that it is up to you to make sure that the lines added to "
"@t{.zshrc} are actually run; you may, for example, need to move them to an "
"earlier place in the file if @t{.zshrc} usually returns early.  So long as "
"you keep them all together (including the comment lines at the start and "
"finish), you can rerun @t{compinstall} and it will correctly locate and "
"modify these lines.  Note, however, that any code you add to this section by "
"hand is likely to be lost if you rerun @t{compinstall}, although lines using "
"the command `@t{zstyle}' should be gracefully handled."
msgstr ""

#. type: Plain text
#: zsh.texi:20686
msgid ""
"The new code will take effect next time you start the shell, or run "
"@t{.zshrc} by hand; there is also an option to make them take effect "
"immediately.  However, if @t{compinstall} has removed definitions, you will "
"need to restart the shell to see the changes."
msgstr ""

#. type: Plain text
#: zsh.texi:20696
msgid ""
"To run @t{compinstall} you will need to make sure it is in a directory "
"mentioned in your @t{fpath} parameter, which should already be the case if "
"zsh was properly configured as long as your startup files do not remove the "
"appropriate directories from @t{fpath}.  Then it must be autoloaded "
"(`@t{autoload -U compinstall}' is recommended).  You can abort the "
"installation any time you are being prompted for information, and your "
"@t{.zshrc} will not be altered at all; changes only take place right at the "
"end, where you are specifically asked for confirmation."
msgstr ""

#. type: subsection
#: zsh.texi:20699
#, no-wrap
msgid "Use of compinit"
msgstr ""

#. type: findex
#: zsh.texi:20701
#, no-wrap
msgid "compinit"
msgstr ""

#. type: cindex
#: zsh.texi:20702
#, no-wrap
msgid "completion system, initializing"
msgstr ""

#. type: Plain text
#: zsh.texi:20708
msgid ""
"This section describes the use of @t{compinit} to initialize completion for "
"the current session when called directly; if you have run @t{compinstall} it "
"will be called automatically from your @t{.zshrc}."
msgstr ""

#. type: Plain text
#: zsh.texi:20723
msgid ""
"To initialize the system, the function @t{compinit} should be in a directory "
"mentioned in the @t{fpath} parameter, and should be autoloaded (`@t{autoload "
"-U compinit}' is recommended), and then run simply as `@t{compinit}'.  This "
"will define a few utility functions, arrange for all the necessary shell "
"functions to be autoloaded, and will then re-define all widgets that do "
"completion to use the new system.  If you use the @t{menu-select} widget, "
"which is part of the @t{zsh/complist} module, you should make sure that that "
"module is loaded before the call to @t{compinit} so that that widget is also "
"re-defined.  If completion styles (see below) are set up to perform "
"expansion as well as completion by default, and the TAB key is bound to "
"@t{expand-or-complete}, @t{compinit} will rebind it to @t{complete-word}; "
"this is necessary to use the correct form of expansion."
msgstr ""

#. type: Plain text
#: zsh.texi:20728
msgid ""
"Should you need to use the original completion commands, you can still bind "
"keys to the old widgets by putting a `@t{.}' in front of the widget name, "
"e.g. `@t{.expand-or-complete}'."
msgstr ""

#. type: Plain text
#: zsh.texi:20738
msgid ""
"To speed up the running of @t{compinit}, it can be made to produce a dumped "
"configuration that will be read in on future invocations; this is the "
"default, but can be turned off by calling @t{compinit} with the option "
"@t{-D}.  The dumped file is @t{.zcompdump} in the same directory as the "
"startup files (i.e. @t{$ZDOTDIR} or @t{$HOME}); alternatively, an explicit "
"file name can be given by `@t{compinit -d} @var{dumpfile}'.  The next "
"invocation of @t{compinit} will read the dumped file instead of performing a "
"full initialization."
msgstr ""

#. type: Plain text
#: zsh.texi:20748
msgid ""
"If the number of completion files changes, @t{compinit} will recognise this "
"and produce a new dump file.  However, if the name of a function or the "
"arguments in the first line of a @t{#compdef} function (as described below)  "
"change, it is easiest to delete the dump file by hand so that @t{compinit} "
"will re-create it the next time it is run.  The check performed to see if "
"there are new functions can be omitted by giving the option @t{-C}.  In this "
"case the dump file will only be created if there isn't one already."
msgstr ""

#. type: Plain text
#: zsh.texi:20754
msgid ""
"The dumping is actually done by another function, @t{compdump}, but you will "
"only need to run this yourself if you change the configuration (e.g. using "
"@t{compdef}) and then want to dump the new one.  The name of the old dumped "
"file will be remembered for this purpose."
msgstr ""

#. type: Plain text
#: zsh.texi:20759
msgid ""
"If the parameter @t{_compdir} is set, @t{compinit} uses it as a directory "
"where completion functions can be found; this is only necessary if they are "
"not already in the function search path."
msgstr ""

#. type: Plain text
#: zsh.texi:20770
msgid ""
"For security reasons @t{compinit} also checks if the completion system would "
"use files not owned by root or by the current user, or files in directories "
"that are world- or group-writable or that are not owned by root or by the "
"current user.  If such files or directories are found, @t{compinit} will ask "
"if the completion system should really be used.  To avoid these tests and "
"make all files found be used without asking, use the option @t{-u}, and to "
"make @t{compinit} silently ignore all insecure files and directories use the "
"option @t{-i}.  This security check is skipped entirely when the @t{-C} "
"option is given, provided the dumpfile exists."
msgstr ""

#. type: findex
#: zsh.texi:20772
#, no-wrap
msgid "compaudit"
msgstr ""

#. type: Plain text
#: zsh.texi:20782
msgid ""
"The security check can be retried at any time by running the function "
"@t{compaudit}.  This is the same check used by @t{compinit}, but when it is "
"executed directly any changes to @t{fpath} are made local to the function so "
"they do not persist.  The directories to be checked may be passed as "
"arguments; if none are given, @t{compaudit} uses @t{fpath} and @t{_compdir} "
"to find completion system directories, adding missing ones to @t{fpath} as "
"necessary.  To force a check of exactly the directories currently named in "
"@t{fpath}, set @t{_compdir} to an empty string before calling @t{compaudit} "
"or @t{compinit}."
msgstr ""

#. type: findex
#: zsh.texi:20784
#, no-wrap
msgid "bashcompinit"
msgstr ""

#. type: Plain text
#: zsh.texi:20790
msgid ""
"The function @t{bashcompinit} provides compatibility with bash's "
"programmable completion system.  When run it will define the functions, "
"@t{compgen} and @t{complete} which correspond to the bash builtins with the "
"same names.  It will then be possible to use completion specifications and "
"functions written for bash."
msgstr ""

#. type: subsection
#: zsh.texi:20793
#, no-wrap
msgid "Autoloaded files"
msgstr ""

#. type: cindex
#: zsh.texi:20795
#, no-wrap
msgid "completion system, autoloaded functions"
msgstr ""

#. type: Plain text
#: zsh.texi:20803
msgid ""
"The convention for autoloaded functions used in completion is that they "
"start with an underscore; as already mentioned, the @t{fpath/FPATH} "
"parameter must contain the directory in which they are stored.  If @t{zsh} "
"was properly installed on your system, then @t{fpath/FPATH} automatically "
"contains the required directories for the standard functions."
msgstr ""

#. type: Plain text
#: zsh.texi:20814
msgid ""
"For incomplete installations, if @t{compinit} does not find enough files "
"beginning with an underscore (fewer than twenty) in the search path, it will "
"try to find more by adding the directory @t{_compdir} to the search path.  "
"If that directory has a subdirectory named @t{Base}, all subdirectories will "
"be added to the path.  Furthermore, if the subdirectory @t{Base} has a "
"subdirectory named @t{Core}, @t{compinit} will add all subdirectories of the "
"subdirectories to the path: this allows the functions to be in the same "
"format as in the @t{zsh} source distribution."
msgstr ""

#. type: cindex
#: zsh.texi:20816
#, no-wrap
msgid "compdef, use of by compinit"
msgstr ""

#. type: Plain text
#: zsh.texi:20822
msgid ""
"When @t{compinit} is run, it searches all such files accessible via "
"@t{fpath/FPATH} and reads the first line of each of them.  This line should "
"contain one of the tags described below.  Files whose first line does not "
"start with one of these tags are not considered to be part of the completion "
"system and will not be treated specially."
msgstr ""

#. type: Plain text
#: zsh.texi:20825
msgid "The tags are:"
msgstr ""

#. type: item
#: zsh.texi:20828
#, no-wrap
msgid ""
"@t{#compdef} @var{name} ... [ @t{-}@{@t{p}|@t{P}@} @var{pattern} ... [ "
"@t{-N} @var{name} ... ] ]"
msgstr ""

#. type: table
#: zsh.texi:20834
msgid ""
"The file will be made autoloadable and the function defined in it will be "
"called when completing @var{name}s, each of which is either the name of a "
"command whose arguments are to be completed or one of a number of special "
"contexts in the form @t{-}@var{context}@t{-} described below."
msgstr ""

#. type: table
#: zsh.texi:20844
msgid ""
"Each @var{name} may also be of the form `@var{cmd}@t{=}@var{service}'.  When "
"completing the command @var{cmd}, the function typically behaves as if the "
"command (or special context) @var{service} was being completed instead.  "
"This provides a way of altering the behaviour of functions that can perform "
"many different completions.  It is implemented by setting the parameter "
"@t{$service} when calling the function; the function may choose to interpret "
"this how it wishes, and simpler functions will probably ignore it."
msgstr ""

#. type: table
#: zsh.texi:20852
msgid ""
"If the @t{#compdef} line contains one of the options @t{-p} or @t{-P}, the "
"words following are taken to be patterns.  The function will be called when "
"completion is attempted for a command or context that matches one of the "
"patterns.  The options @t{-p} and @t{-P} are used to specify patterns to be "
"tried before or after other completions respectively.  Hence @t{-P} may be "
"used to specify default actions."
msgstr ""

#. type: table
#: zsh.texi:20857
msgid ""
"The option @t{-N} is used after a list following @t{-p} or @t{-P}; it "
"specifies that remaining words no longer define patterns.  It is possible to "
"toggle between the three options as many times as necessary."
msgstr ""

#. type: item
#: zsh.texi:20858
#, no-wrap
msgid "@t{#compdef -k} @var{style key-sequence} ..."
msgstr ""

#. type: table
#: zsh.texi:20867
msgid ""
"This option creates a widget behaving like the builtin widget @var{style} "
"and binds it to the given @var{key-sequence}s, if any.  The @var{style} must "
"be one of the builtin widgets that perform completion, namely "
"@t{complete-word}, @t{delete-char-or-list}, @t{expand-or-complete}, "
"@t{expand-or-complete-prefix}, @t{list-choices}, @t{menu-complete}, "
"@t{menu-expand-or-complete}, or @t{reverse-menu-complete}.  If the "
"@t{zsh/complist} module is loaded (see @ref{The zsh/complist Module}) the "
"widget @t{menu-select} is also available."
msgstr ""

#. type: table
#: zsh.texi:20874
msgid ""
"When one of the @var{key-sequence}s is typed, the function in the file will "
"be invoked to generate the matches.  Note that a key will not be re-bound if "
"it already was (that is, was bound to something other than "
"@t{undefined-key}).  The widget created has the same name as the file and "
"can be bound to any other keys using @t{bindkey} as usual."
msgstr ""

#. type: item
#: zsh.texi:20875
#, no-wrap
msgid ""
"@t{#compdef -K} @var{widget-name} @var{style} @var{key-sequence} [ "
"@var{name} @var{style} @var{seq} ... ]"
msgstr ""

#. type: table
#: zsh.texi:20884
msgid ""
"This is similar to @t{-k} except that only one @var{key-sequence} argument "
"may be given for each @var{widget-name} @var{style} pair.  However, the "
"entire set of three arguments may be repeated with a different set of "
"arguments.  Note in particular that the @var{widget-name} must be distinct "
"in each set.  If it does not begin with `@t{_}' this will be added.  The "
"@var{widget-name} should not clash with the name of any existing widget: "
"names based on the name of the function are most useful.  For example,"
msgstr ""

#. type: example
#: zsh.texi:20889
#, no-wrap
msgid ""
"#compdef -K _foo_complete complete-word \"^X^C\" \\ \n"
"  _foo_list list-choices \"^X^D\"\n"
msgstr ""

#. type: table
#: zsh.texi:20894
msgid ""
"(all on one line) defines a widget @t{_foo_complete} for completion, bound "
"to `@t{^X^C}', and a widget @t{_foo_list} for listing, bound to `@t{^X^D}'."
msgstr ""

#. type: item
#: zsh.texi:20895
#, no-wrap
msgid "@t{#autoload} [ @var{options} ]"
msgstr ""

#. type: table
#: zsh.texi:20902
msgid ""
"Functions with the @t{#autoload} tag are marked for autoloading but are not "
"otherwise treated specially.  Typically they are to be called from within "
"one of the completion functions.  Any @var{options} supplied will be passed "
"to the @t{autoload} builtin; a typical use is @t{+X} to force the function "
"to be loaded immediately.  Note that the @t{-U} and @t{-z} flags are always "
"added implicitly."
msgstr ""

#. type: Plain text
#: zsh.texi:20909
msgid ""
"The @t{#} is part of the tag name and no white space is allowed after it.  "
"The @t{#compdef} tags use the @t{compdef} function described below; the main "
"difference is that the name of the function is supplied implicitly."
msgstr ""

#. type: Plain text
#: zsh.texi:20912
msgid "The special contexts for which completion functions can be defined are:"
msgstr ""

#. type: kindex
#: zsh.texi:20915
#, no-wrap
msgid "-array-value-, completion context"
msgstr ""

#. type: t{#1}
#: zsh.texi:20916
#, no-wrap
msgid "-array-value-"
msgstr ""

#. type: table
#: zsh.texi:20919
msgid ""
"The right hand side of an array-assignment "
"(`@var{name}@t{=(}@var{...}@t{)}')"
msgstr ""

#. type: kindex
#: zsh.texi:20920
#, no-wrap
msgid "-assign-parameter-, completion context"
msgstr ""

#. type: t{#1}
#: zsh.texi:20921
#, no-wrap
msgid "-assign-parameter-"
msgstr ""

#. type: table
#: zsh.texi:20924
msgid ""
"The name of a parameter in an assignment, i.e. on the left hand side of an "
"`@t{=}'"
msgstr ""

#. type: kindex
#: zsh.texi:20925
#, no-wrap
msgid "-brace-parameter-, completion context"
msgstr ""

#. type: t{#1}
#: zsh.texi:20926
#, no-wrap
msgid "-brace-parameter-"
msgstr ""

#. type: table
#: zsh.texi:20928
msgid "The name of a parameter expansion within braces (`@t{$@{}@var{...}@t{@}}')"
msgstr ""

#. type: kindex
#: zsh.texi:20929
#, no-wrap
msgid "-command-, completion context"
msgstr ""

#. type: t{#1}
#: zsh.texi:20930
#, no-wrap
msgid "-command-"
msgstr ""

#. type: table
#: zsh.texi:20932
msgid "A word in command position"
msgstr ""

#. type: kindex
#: zsh.texi:20933
#, no-wrap
msgid "-condition-, completion context"
msgstr ""

#. type: t{#1}
#: zsh.texi:20934
#, no-wrap
msgid "-condition-"
msgstr ""

#. type: table
#: zsh.texi:20936
msgid "A word inside a condition (`@t{[[}@var{...}@t{]]}')"
msgstr ""

#. type: kindex
#: zsh.texi:20937
#, no-wrap
msgid "-default-, completion context"
msgstr ""

#. type: t{#1}
#: zsh.texi:20938
#, no-wrap
msgid "-default-"
msgstr ""

#. type: table
#: zsh.texi:20940
msgid "Any word for which no other completion is defined"
msgstr ""

#. type: kindex
#: zsh.texi:20941
#, no-wrap
msgid "-equal-, completion context"
msgstr ""

#. type: t{#1}
#: zsh.texi:20942
#, no-wrap
msgid "-equal-"
msgstr ""

#. type: table
#: zsh.texi:20944
msgid "A word beginning with an equals sign"
msgstr ""

#. type: kindex
#: zsh.texi:20945
#, no-wrap
msgid "-first-, completion context"
msgstr ""

#. type: t{#1}
#: zsh.texi:20946
#, no-wrap
msgid "-first-"
msgstr ""

#. type: table
#: zsh.texi:20954
msgid ""
"This is tried before any other completion function.  The function called may "
"set the @t{_compskip} parameter to one of various values: @t{all}: no "
"further completion is attempted; a string containing the substring "
"@t{patterns}: no pattern completion functions will be called; a string "
"containing @t{default}: the function for the `@t{-default-}' context will "
"not be called, but functions defined for commands will be."
msgstr ""

#. type: kindex
#: zsh.texi:20955
#, no-wrap
msgid "-math-, completion context"
msgstr ""

#. type: t{#1}
#: zsh.texi:20956
#, no-wrap
msgid "-math-"
msgstr ""

#. type: table
#: zsh.texi:20959
msgid "Inside mathematical contexts, such as `@t{((}@var{...}@t{))}'"
msgstr ""

#. type: kindex
#: zsh.texi:20960
#, no-wrap
msgid "-parameter-, completion context"
msgstr ""

#. type: t{#1}
#: zsh.texi:20961
#, no-wrap
msgid "-parameter-"
msgstr ""

#. type: table
#: zsh.texi:20963
msgid "The name of a parameter expansion (`@t{$}@var{...}')"
msgstr ""

#. type: kindex
#: zsh.texi:20964
#, no-wrap
msgid "-redirect-, completion context"
msgstr ""

#. type: t{#1}
#: zsh.texi:20965
#, no-wrap
msgid "-redirect-"
msgstr ""

#. type: table
#: zsh.texi:20967
msgid "The word after a redirection operator."
msgstr ""

#. type: kindex
#: zsh.texi:20968
#, no-wrap
msgid "-subscript-, completion context"
msgstr ""

#. type: t{#1}
#: zsh.texi:20969
#, no-wrap
msgid "-subscript-"
msgstr ""

#. type: table
#: zsh.texi:20971
msgid "The contents of a parameter subscript."
msgstr ""

#. type: kindex
#: zsh.texi:20972
#, no-wrap
msgid "-tilde-, completion context"
msgstr ""

#. type: t{#1}
#: zsh.texi:20973
#, no-wrap
msgid "-tilde-"
msgstr ""

#. type: table
#: zsh.texi:20976
msgid "After an initial tilde (`@t{~}'), but before the first slash in the word."
msgstr ""

#. type: kindex
#: zsh.texi:20977
#, no-wrap
msgid "-value-, completion context"
msgstr ""

#. type: t{#1}
#: zsh.texi:20978
#, no-wrap
msgid "-value-"
msgstr ""

#. type: table
#: zsh.texi:20980
msgid "On the right hand side of an assignment."
msgstr ""

#. type: Plain text
#: zsh.texi:20988
msgid ""
"Default implementations are supplied for each of these contexts.  In most "
"cases the context @t{-}@var{context}@t{-} is implemented by a corresponding "
"function @t{_}@var{context}, for example the context `@t{-tilde-}' and the "
"function `@t{_tilde}')."
msgstr ""

#. type: Plain text
#: zsh.texi:20994
msgid ""
"The contexts @t{-redirect-} and @t{-value-} allow extra context-specific "
"information.  (Internally, this is handled by the functions for each context "
"calling the function @t{_dispatch}.)  The extra information is added "
"separated by commas."
msgstr ""

#. type: Plain text
#: zsh.texi:21001
msgid ""
"For the @t{-redirect-} context, the extra information is in the form "
"`@t{-redirect-,}@var{op}@t{,}@var{command}', where @var{op} is the "
"redirection operator and @var{command} is the name of the command on the "
"line.  If there is no command on the line yet, the @var{command} field will "
"be empty."
msgstr ""

#. type: Plain text
#: zsh.texi:21011
msgid ""
"For the @t{-value-} context, the form is "
"`@t{-value-,}@var{name}@t{,}@var{command}', where @var{name} is the name of "
"the parameter on the left hand side of the assignment.  In the case of "
"elements of an associative array, for example `@t{assoc=(key <TAB>}', "
"@var{name} is expanded to `@var{name}@t{-}@var{key}'.  In certain special "
"contexts, such as completing after `@t{make CFLAGS=}', the @var{command} "
"part gives the name of the command, here @t{make}; otherwise it is empty."
msgstr ""

#. type: Plain text
#: zsh.texi:21020
msgid ""
"It is not necessary to define fully specific completions as the functions "
"provided will try to generate completions by progressively replacing the "
"elements with `@t{-default-}'.  For example, when completing after "
"`@t{foo=<TAB>}', @t{_value} will try the names `@t{-value-,foo,}' (note the "
"empty @var{command} part), `@t{-value-,foo,-default-}' "
"and`@t{-value-,-default-,-default-}', in that order, until it finds a "
"function to handle the context."
msgstr ""

#. type: Plain text
#: zsh.texi:21023
msgid "As an example:"
msgstr ""

#. type: example
#: zsh.texi:21027
#, no-wrap
msgid "compdef '_files -g \"*.log\"' '-redirect-,2>,-default-'\n"
msgstr ""

#. type: Plain text
#: zsh.texi:21032
msgid ""
"completes files matching `@t{*.log}' after `@t{2> <TAB>}' for any command "
"with no more specific handler defined."
msgstr ""

#. type: Plain text
#: zsh.texi:21035
msgid "Also:"
msgstr ""

#. type: example
#: zsh.texi:21039
#, no-wrap
msgid "compdef _foo -value-,-default-,-default-\n"
msgstr ""

#. type: Plain text
#: zsh.texi:21045
msgid ""
"specifies that @t{_foo} provides completions for the values of parameters "
"for which no special function has been defined.  This is usually handled by "
"the function @t{_value} itself."
msgstr ""

#. type: Plain text
#: zsh.texi:21049
msgid ""
"The same lookup rules are used when looking up styles (as described below); "
"for example"
msgstr ""

#. type: example
#: zsh.texi:21053
#, no-wrap
msgid "zstyle ':completion:*:*:-redirect-,2>,*:*' file-patterns '*.log'\n"
msgstr ""

#. type: Plain text
#: zsh.texi:21058
msgid ""
"is another way to make completion after `@t{2> <TAB>}' complete files "
"matching `@t{*.log}'."
msgstr ""

#. type: Plain text
#: zsh.texi:21067
msgid ""
"The following function is defined by @t{compinit} and may be called "
"directly."
msgstr ""

#. type: findex
#: zsh.texi:21069
#, no-wrap
msgid "compdef"
msgstr ""

#. type: cindex
#: zsh.texi:21070
#, no-wrap
msgid "completion system, adding definitions"
msgstr ""

#. type: item
#: zsh.texi:21073
#, no-wrap
msgid ""
"@t{compdef} [ @t{-ane} ] @var{function name} ... [ @t{-}@{@t{p}|@t{P}@} "
"@var{pattern} ... [ @t{-N} @var{name} ...]]"
msgstr ""

#. type: itemx
#: zsh.texi:21074
#, no-wrap
msgid "@t{compdef -d} @var{name} ..."
msgstr ""

#. type: itemx
#: zsh.texi:21075
#, no-wrap
msgid ""
"@t{compdef -k} [ @t{-an} ] @var{function style key-sequence} [ "
"@var{key-sequence} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:21076
#, no-wrap
msgid ""
"@t{compdef -K} [ @t{-an} ] @var{function name style key-seq} [ @var{name "
"style seq} ... ]"
msgstr ""

#. type: table
#: zsh.texi:21079
msgid ""
"The first form defines the @var{function} to call for completion in the "
"given contexts as described for the @t{#compdef} tag above."
msgstr ""

#. type: table
#: zsh.texi:21086
msgid ""
"Alternatively, all the arguments may have the form "
"`@var{cmd}@t{=}@var{service}'.  Here @var{service} should already have been "
"defined by `@var{cmd1}@t{=}@var{service}' lines in @t{#compdef} files, as "
"described above.  The argument for @var{cmd} will be completed in the same "
"way as @var{service}."
msgstr ""

#. type: table
#: zsh.texi:21096
msgid ""
"The @var{function} argument may alternatively be a string containing almost "
"any shell code.  If the string contains an equal sign, the above will take "
"precedence.  The option @t{-e} may be used to specify the first argument is "
"to be evaluated as shell code even if it contains an equal sign.  The string "
"will be executed using the @t{eval} builtin command to generate "
"completions.  This provides a way of avoiding having to define a new "
"completion function.  For example, to complete files ending in `@t{.h}' as "
"arguments to the command @t{foo}:"
msgstr ""

#. type: example
#: zsh.texi:21100
#, no-wrap
msgid "compdef '_files -g \"*.h\"' foo\n"
msgstr ""

#. type: table
#: zsh.texi:21105
msgid ""
"The option @t{-n} prevents any completions already defined for the command "
"or context from being overwritten."
msgstr ""

#. type: table
#: zsh.texi:21109
msgid ""
"The option @t{-d} deletes any completion defined for the command or contexts "
"listed."
msgstr ""

#. type: table
#: zsh.texi:21115
msgid ""
"The @var{name}s may also contain @t{-p}, @t{-P} and @t{-N} options as "
"described for the @t{#compdef} tag.  The effect on the argument list is "
"identical, switching between definitions of patterns tried initially, "
"patterns tried finally, and normal commands and contexts."
msgstr ""

#. type: table
#: zsh.texi:21126
msgid ""
"The parameter @t{$_compskip} may be set by any function defined for a "
"pattern context.  If it is set to a value containing the substring "
"`@t{patterns}' none of the pattern-functions will be called; if it is set to "
"a value containing the substring `@t{all}', no other function will be "
"called.  Setting @t{$_compskip} in this manner is of particular utility when "
"using the @t{-p} option, as otherwise the dispatcher will move on to "
"additional functions (likely the default one) after calling the "
"pattern-context one, which can mangle the display of completion "
"possibilities if not handled properly."
msgstr ""

#. type: table
#: zsh.texi:21139
msgid ""
"The form with @t{-k} defines a widget with the same name as the "
"@var{function} that will be called for each of the @var{key-sequence}s; this "
"is like the @t{#compdef -k} tag.  The function should generate the "
"completions needed and will otherwise behave like the builtin widget whose "
"name is given as the @var{style} argument.  The widgets usable for this are: "
"@t{complete-word}, @t{delete-char-or-list}, @t{expand-or-complete}, "
"@t{expand-or-complete-prefix}, @t{list-choices}, @t{menu-complete}, "
"@t{menu-expand-or-complete}, and @t{reverse-menu-complete}, as well as "
"@t{menu-select} if the @t{zsh/complist} module is loaded.  The option @t{-n} "
"prevents the key being bound if it is already to bound to something other "
"than @t{undefined-key}."
msgstr ""

#. type: table
#: zsh.texi:21146
msgid ""
"The form with @t{-K} is similar and defines multiple widgets based on the "
"same @var{function}, each of which requires the set of three arguments "
"@var{name}, @var{style} and @var{key-seq}uence, where the latter two are as "
"for @t{-k} and the first must be a unique widget name beginning with an "
"underscore."
msgstr ""

#. type: table
#: zsh.texi:21150
msgid ""
"Wherever applicable, the @t{-a} option makes the @var{function} "
"autoloadable, equivalent to @t{autoload -U }@var{function}."
msgstr ""

#. type: Plain text
#: zsh.texi:21156
msgid ""
"The function @t{compdef} can be used to associate existing completion "
"functions with new commands.  For example,"
msgstr ""

#. type: example
#: zsh.texi:21160
#, no-wrap
msgid "compdef _pids foo\n"
msgstr ""

#. type: Plain text
#: zsh.texi:21164
msgid "uses the function @t{_pids} to complete process IDs for the command @t{foo}."
msgstr ""

#. type: Plain text
#: zsh.texi:21169
msgid ""
"Note also the @t{_gnu_generic} function described below, which can be used "
"to complete options for commands that understand the `@t{-}@t{-help}' "
"option."
msgstr ""

#. type: node
#: zsh.texi:21171 zsh.texi:23839 zsh.texi:23841 zsh.texi:24336
#, no-wrap
msgid "Control Functions"
msgstr ""

#. type: cindex
#: zsh.texi:21175
#, no-wrap
msgid "completion system, configuration"
msgstr ""

#. type: Plain text
#: zsh.texi:21181
msgid ""
"This section gives a short overview of how the completion system works, and "
"then more detail on how users can configure how and when matches are "
"generated."
msgstr ""

#. type: Plain text
#: zsh.texi:21196
msgid ""
"When completion is attempted somewhere on the command line the completion "
"system begins building the context.  The context represents everything that "
"the shell knows about the meaning of the command line and the significance "
"of the cursor position.  This takes account of a number of things including "
"the command word (such as `@t{grep}' or `@t{zsh}') and options to which the "
"current word may be an argument (such as the `@t{-o}' option to @t{zsh} "
"which takes a shell option as an argument)."
msgstr ""

#. type: Plain text
#: zsh.texi:21203
msgid ""
"The context starts out very generic (\"we are beginning a completion\")  and "
"becomes more specific as more is learned (\"the current word is in a "
"position that is usually a command name\" or \"the current word might be a "
"variable name\" and so on).  Therefore the context will vary during the same "
"call to the completion system."
msgstr ""

#. type: Plain text
#: zsh.texi:21213
msgid ""
"This context information is condensed into a string consisting of multiple "
"fields separated by colons, referred to simply as `the context' in the "
"remainder of the documentation.  Note that a user of the completion system "
"rarely needs to compose a context string, unless for example a new function "
"is being written to perform completion for a new command.  What a user may "
"need to do is compose a @emph{style} pattern, which is matched against a "
"context when needed to look up context-sensitive options that configure the "
"completion system."
msgstr ""

#. type: Plain text
#: zsh.texi:21220
msgid ""
"The next few paragraphs explain how a context is composed within the "
"completion function suite.  Following that is discussion of how "
"@emph{styles} are defined.  Styles determine such things as how the matches "
"are generated, similarly to shell options but with much more control.  They "
"are defined with the @t{zstyle} builtin command (@ref{The zsh/zutil "
"Module})."
msgstr ""

#. type: Plain text
#: zsh.texi:21227
msgid ""
"The context string always consists of a fixed set of fields, separated by "
"colons and with a leading colon before the first.  Fields which are not yet "
"known are left empty, but the surrounding colons appear anyway.  The fields "
"are always in the order "
"@t{:completion:}@var{function}@t{:}@var{completer}@t{:}@var{command}@t{:}@var{argument}@t{:}@var{tag}.  "
"These have the following meaning:"
msgstr ""

#. type: itemize
#: zsh.texi:21235
msgid ""
"The literal string @t{completion}, saying that this style is used by the "
"completion system.  This distinguishes the context from those used by, for "
"example, zle widgets and ZFTP functions."
msgstr ""

#. type: itemize
#: zsh.texi:21242
msgid ""
"The @var{function}, if completion is called from a named widget rather than "
"through the normal completion system.  Typically this is blank, but it is "
"set by special widgets such as @t{predict-on} and the various functions in "
"the @t{Widget} directory of the distribution to the name of that function, "
"often in an abbreviated form."
msgstr ""

#. type: itemize
#: zsh.texi:21252
msgid ""
"The @var{completer} currently active, the name of the function without the "
"leading underscore and with other underscores converted to hyphens.  A "
"`completer' is in overall control of how completion is to be performed; "
"`@t{complete}' is the simplest, but other completers exist to perform "
"related tasks such as correction, or to modify the behaviour of a later "
"completer.  See @ref{Control Functions} for more information."
msgstr ""

#. type: itemize
#: zsh.texi:21261
msgid ""
"The @var{command} or a special @t{-}@var{context}@t{-}, just at it appears "
"following the @t{#compdef} tag or the @t{compdef} function.  Completion "
"functions for commands that have sub-commands usually modify this field to "
"contain the name of the command followed by a minus sign and the "
"sub-command.  For example, the completion function for the @t{cvs} command "
"sets this field to @t{cvs-add} when completing arguments to the @t{add} "
"subcommand."
msgstr ""

#. type: itemize
#: zsh.texi:21270
msgid ""
"The @var{argument}; this indicates which command line or option argument we "
"are completing.  For command arguments this generally takes the form "
"@t{argument-}@var{n}, where @var{n} is the number of the argument, and for "
"arguments to options the form @t{option-}@var{opt}@t{-}@var{n} where @var{n} "
"is the number of the argument to option @var{opt}.  However, this is only "
"the case if the command line is parsed with standard UNIX-style options and "
"arguments, so many completions do not set this."
msgstr ""

#. type: itemize
#: zsh.texi:21276
msgid ""
"The @var{tag}.  As described previously, tags are used to discriminate "
"between the types of matches a completion function can generate in a certain "
"context.  Any completion function may use any tag name it likes, but a list "
"of the more common ones is given below."
msgstr ""

#. type: Plain text
#: zsh.texi:21286
msgid ""
"The context is gradually put together as the functions are executed, "
"starting with the main entry point, which adds @t{:completion:} and the "
"@var{function} element if necessary.  The completer then adds the "
"@var{completer} element.  The contextual completion adds the @var{command} "
"and @var{argument} options.  Finally, the @var{tag} is added when the types "
"of completion are known.  For example, the context name"
msgstr ""

#. type: example
#: zsh.texi:21290
#, no-wrap
msgid "@t{:completion::complete:dvips:option-o-1:files}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:21295
msgid ""
"says that normal completion was attempted as the first argument to the "
"option @t{-o} of the command @t{dvips}:"
msgstr ""

#. type: example
#: zsh.texi:21299
#, no-wrap
msgid "@t{dvips -o ...}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:21303
msgid "and the completion function will generate filenames."
msgstr ""

#. type: Plain text
#: zsh.texi:21309
msgid ""
"Usually completion will be tried for all possible tags in an order given by "
"the completion function.  However, this can be altered by using the "
"@t{tag-order} style.  Completion is then restricted to the list of given "
"tags in the given order."
msgstr ""

#. type: Plain text
#: zsh.texi:21316
msgid ""
"The @t{_complete_help} bindable command shows all the contexts and tags "
"available for completion at a particular point.  This provides an easy way "
"of finding information for @t{tag-order} and other styles.  It is described "
"in @ref{Bindable Commands}."
msgstr ""

#. type: Plain text
#: zsh.texi:21325
msgid ""
"When looking up styles the completion system uses full context names, "
"including the tag.  Looking up the value of a style therefore consists of "
"two things: the context, which is matched to the most specific (best "
"fitting) pattern, and the name of the style itself, which must be matched "
"exactly.  The following examples demonstrate that patterns may be loosely "
"defined for styles that apply broadly, or as tightly defined as desired for "
"styles that apply in narrower circumstances."
msgstr ""

#. type: Plain text
#: zsh.texi:21331
msgid ""
"For example, many completion functions can generate matches in a simple and "
"a verbose form and use the @t{verbose} style to decide which form should be "
"used.  To make all such functions use the verbose form, put"
msgstr ""

#. type: example
#: zsh.texi:21335
#, no-wrap
msgid "zstyle ':completion:*' verbose yes\n"
msgstr ""

#. type: Plain text
#: zsh.texi:21343
msgid ""
"in a startup file (probably @t{.zshrc}).  This gives the @t{verbose} style "
"the value @t{yes} in every context inside the completion system, unless that "
"context has a more specific definition.  It is best to avoid giving the "
"pattern as `@t{*}' in case the style has some meaning outside the completion "
"system."
msgstr ""

#. type: Plain text
#: zsh.texi:21347
msgid ""
"Many such general purpose styles can be configured simply by using the "
"@t{compinstall} function."
msgstr ""

#. type: Plain text
#: zsh.texi:21353
msgid ""
"A more specific example of the use of the @t{verbose} style is by the "
"completion for the @t{kill} builtin.  If the style is set, the builtin lists "
"full job texts and process command lines; otherwise it shows the bare job "
"numbers and PIDs.  To turn the style off for this use only:"
msgstr ""

#. type: example
#: zsh.texi:21357
#, no-wrap
msgid "zstyle ':completion:*:*:kill:*:*' verbose no\n"
msgstr ""

#. type: Plain text
#: zsh.texi:21362
msgid ""
"For even more control, the style can use one of the tags `@t{jobs}' or "
"`@t{processes}'.  To turn off verbose display only for jobs:"
msgstr ""

#. type: example
#: zsh.texi:21366
#, no-wrap
msgid "zstyle ':completion:*:*:kill:*:jobs' verbose no\n"
msgstr ""

#. type: Plain text
#: zsh.texi:21373
msgid ""
"The @t{-e} option to @t{zstyle} even allows completion function code to "
"appear as the argument to a style; this requires some understanding of the "
"internals of completion functions (see @ref{Completion Widgets})).  For "
"example,"
msgstr ""

#. type: example
#: zsh.texi:21377
#, no-wrap
msgid "@t{zstyle -e ':completion:*' hosts 'reply=($myhosts)'}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:21387
msgid ""
"This forces the value of the @t{hosts} style to be read from the variable "
"@t{myhosts} each time a host name is needed; this is useful if the value of "
"@t{myhosts} can change dynamically.  For another useful example, see the "
"example in the description of the @t{file-list} style below.  This form can "
"be slow and should be avoided for commonly examined styles such as @t{menu} "
"and @t{list-rows-first}."
msgstr ""

#. type: Plain text
#: zsh.texi:21397
msgid ""
"Note that the order in which styles are @emph{defined} does not matter; the "
"style mechanism uses the most specific possible match for a particular style "
"to determine the set of values.  Strings are preferred over patterns (for "
"example, `@t{:completion::complete:::foo}' is more specific than "
"`@t{:completion::complete:::*'}), and longer patterns are preferred over the "
"pattern `@t{*}'. See @ref{The zsh/zutil Module} for details."
msgstr ""

#. type: Plain text
#: zsh.texi:21407
msgid ""
"Context patterns that use something other than a wildcard (@t{*}) to match "
"the middle parts of the context --- the @var{completer}, @var{command}, and "
"@var{argument} in "
"@t{:completion:}@var{function}@t{:}@var{completer}@t{:}@var{command}@t{:}@var{argument}@t{:}@var{tag} "
"--- should include all six colons (@t{:}) explicitly. Without this, a "
"pattern such as @t{:completion:*:foo:*} could match @t{foo} against a "
"component other than the intended one (for example, against @var{completer} "
"when a match against @var{command} was intended)."
msgstr ""

#. type: Plain text
#: zsh.texi:21412
msgid ""
"Style names like those of tags are arbitrary and depend on the completion "
"function.  However, the following two sections list some of the most common "
"tags and styles."
msgstr ""

#. type: subsection
#: zsh.texi:21415
#, no-wrap
msgid "Standard Tags"
msgstr ""

#. type: cindex
#: zsh.texi:21417
#, no-wrap
msgid "completion system, tags"
msgstr ""

#. type: Plain text
#: zsh.texi:21422
msgid ""
"Some of the following are only used when looking up particular styles and do "
"not refer to a type of match."
msgstr ""

#. type: kindex
#: zsh.texi:21425
#, no-wrap
msgid "accounts, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21426
#, no-wrap
msgid "accounts"
msgstr ""

#. type: table
#: zsh.texi:21428 zsh.texi:21637 zsh.texi:21666
msgid "used to look up the @t{users-hosts} style"
msgstr ""

#. type: kindex
#: zsh.texi:21429
#, no-wrap
msgid "all-expansions, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21430
#, no-wrap
msgid "all-expansions"
msgstr ""

#. type: table
#: zsh.texi:21433
msgid ""
"used by the @t{_expand} completer when adding the single string containing "
"all possible expansions"
msgstr ""

#. type: kindex
#: zsh.texi:21434
#, no-wrap
msgid "all-files, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21435
#, no-wrap
msgid "all-files"
msgstr ""

#. type: table
#: zsh.texi:21438
msgid ""
"for the names of all files (as distinct from a particular subset, see the "
"@t{globbed-files} tag)."
msgstr ""

#. type: kindex
#: zsh.texi:21439
#, no-wrap
msgid "arguments, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21440
#, no-wrap
msgid "arguments"
msgstr ""

#. type: table
#: zsh.texi:21442
msgid "for arguments to a command"
msgstr ""

#. type: kindex
#: zsh.texi:21443
#, no-wrap
msgid "arrays, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21444
#, no-wrap
msgid "arrays"
msgstr ""

#. type: table
#: zsh.texi:21446
msgid "for names of array parameters"
msgstr ""

#. type: kindex
#: zsh.texi:21447
#, no-wrap
msgid "association-keys, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21448
#, no-wrap
msgid "association-keys"
msgstr ""

#. type: table
#: zsh.texi:21451
msgid ""
"for keys of associative arrays; used when completing inside a subscript to a "
"parameter of this type"
msgstr ""

#. type: kindex
#: zsh.texi:21452
#, no-wrap
msgid "bookmarks, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21453
#, no-wrap
msgid "bookmarks"
msgstr ""

#. type: table
#: zsh.texi:21455
msgid "when completing bookmarks (e.g. for URLs and the @t{zftp} function suite)"
msgstr ""

#. type: kindex
#: zsh.texi:21456
#, no-wrap
msgid "builtins, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21457 zsh.texi:29671 zsh.texi:29672
#, no-wrap
msgid "builtins"
msgstr ""

#. type: table
#: zsh.texi:21459
msgid "for names of builtin commands"
msgstr ""

#. type: kindex
#: zsh.texi:21460
#, no-wrap
msgid "characters, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21461
#, no-wrap
msgid "characters"
msgstr ""

#. type: table
#: zsh.texi:21464
msgid ""
"for single characters in arguments of commands such as @t{stty}.  Also used "
"when completing character classes after an opening bracket"
msgstr ""

#. type: kindex
#: zsh.texi:21465
#, no-wrap
msgid "colormapids, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21466
#, no-wrap
msgid "colormapids"
msgstr ""

#. type: table
#: zsh.texi:21468
msgid "for X colormap ids"
msgstr ""

#. type: kindex
#: zsh.texi:21469
#, no-wrap
msgid "colors, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21470 zsh.texi:40690 zsh.texi:40691
#, no-wrap
msgid "colors"
msgstr ""

#. type: table
#: zsh.texi:21472
msgid "for color names"
msgstr ""

#. type: kindex
#: zsh.texi:21473
#, no-wrap
msgid "commands, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21474 zsh.texi:21987 zsh.texi:29623 zsh.texi:29624
#, no-wrap
msgid "commands"
msgstr ""

#. type: table
#: zsh.texi:21477
msgid ""
"for names of external commands.  Also used by complex commands such as "
"@t{cvs} when completing names subcommands."
msgstr ""

#. type: kindex
#: zsh.texi:21478
#, no-wrap
msgid "contexts, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21479
#, no-wrap
msgid "contexts"
msgstr ""

#. type: table
#: zsh.texi:21481
msgid "for contexts in arguments to the @t{zstyle} builtin command"
msgstr ""

#. type: kindex
#: zsh.texi:21482
#, no-wrap
msgid "corrections, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21483
#, no-wrap
msgid "corrections"
msgstr ""

#. type: table
#: zsh.texi:21486
msgid ""
"used by the @t{_approximate} and @t{_correct} completers for possible "
"corrections"
msgstr ""

#. type: kindex
#: zsh.texi:21487
#, no-wrap
msgid "cursors, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21488
#, no-wrap
msgid "cursors"
msgstr ""

#. type: table
#: zsh.texi:21490
msgid "for cursor names used by X programs"
msgstr ""

#. type: kindex
#: zsh.texi:21491
#, no-wrap
msgid "default, completion tag"
msgstr ""

#. type: table
#: zsh.texi:21496
msgid ""
"used in some contexts to provide a way of supplying a default when more "
"specific tags are also valid.  Note that this tag is used when only the "
"@var{function} field of the context name is set"
msgstr ""

#. type: kindex
#: zsh.texi:21497
#, no-wrap
msgid "descriptions, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21498
#, no-wrap
msgid "descriptions"
msgstr ""

#. type: table
#: zsh.texi:21501
msgid ""
"used when looking up the value of the @t{format} style to generate "
"descriptions for types of matches"
msgstr ""

#. type: kindex
#: zsh.texi:21502
#, no-wrap
msgid "devices, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21503
#, no-wrap
msgid "devices"
msgstr ""

#. type: table
#: zsh.texi:21505
msgid "for names of device special files"
msgstr ""

#. type: kindex
#: zsh.texi:21506
#, no-wrap
msgid "directories, completion tag"
msgstr ""

#. type: table
#: zsh.texi:21511
msgid ""
"for names of directories --- @t{local-directories} is used instead when "
"completing arguments of @t{cd} and related builtin commands when the "
"@t{cdpath} array is set"
msgstr ""

#. type: kindex
#: zsh.texi:21512
#, no-wrap
msgid "directory-stack, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21513
#, no-wrap
msgid "directory-stack"
msgstr ""

#. type: table
#: zsh.texi:21515
msgid "for entries in the directory stack"
msgstr ""

#. type: kindex
#: zsh.texi:21516
#, no-wrap
msgid "displays, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21517
#, no-wrap
msgid "displays"
msgstr ""

#. type: table
#: zsh.texi:21519
msgid "for X display names"
msgstr ""

#. type: kindex
#: zsh.texi:21520
#, no-wrap
msgid "domains, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21521 zsh.texi:22073
#, no-wrap
msgid "domains"
msgstr ""

#. type: table
#: zsh.texi:21523
msgid "for network domains"
msgstr ""

#. type: kindex
#: zsh.texi:21524
#, no-wrap
msgid "email-*, completion tag"
msgstr ""

#. type: item
#: zsh.texi:21525
#, no-wrap
msgid "@t{email-}@var{plugin}"
msgstr ""

#. type: table
#: zsh.texi:21527
msgid ""
"for email addresses from the `@t{_email-}@var{plugin}' backend of "
"@t{_email_addresses}"
msgstr ""

#. type: kindex
#: zsh.texi:21528
#, no-wrap
msgid "expansions, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21529
#, no-wrap
msgid "expansions"
msgstr ""

#. type: table
#: zsh.texi:21533
msgid ""
"used by the @t{_expand} completer for individual words (as opposed to the "
"complete set of expansions) resulting from the expansion of a word on the "
"command line"
msgstr ""

#. type: kindex
#: zsh.texi:21534
#, no-wrap
msgid "extensions, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21535
#, no-wrap
msgid "extensions"
msgstr ""

#. type: table
#: zsh.texi:21537
msgid "for X server extensions"
msgstr ""

#. type: kindex
#: zsh.texi:21538
#, no-wrap
msgid "file-descriptors, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21539
#, no-wrap
msgid "file-descriptors"
msgstr ""

#. type: table
#: zsh.texi:21541
msgid "for numbers of open file descriptors"
msgstr ""

#. type: kindex
#: zsh.texi:21542
#, no-wrap
msgid "files, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21543 zsh.texi:40121
#, no-wrap
msgid "files"
msgstr ""

#. type: table
#: zsh.texi:21545
msgid "the generic file-matching tag used by functions completing filenames"
msgstr ""

#. type: kindex
#: zsh.texi:21546
#, no-wrap
msgid "fonts, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21547
#, no-wrap
msgid "fonts"
msgstr ""

#. type: table
#: zsh.texi:21549
msgid "for X font names"
msgstr ""

#. type: kindex
#: zsh.texi:21550
#, no-wrap
msgid "fstypes, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21551
#, no-wrap
msgid "fstypes"
msgstr ""

#. type: table
#: zsh.texi:21553
msgid "for file system types (e.g. for the @t{mount} command)"
msgstr ""

#. type: kindex
#: zsh.texi:21554
#, no-wrap
msgid "functions, completion tag"
msgstr ""

#. type: table
#: zsh.texi:21558
msgid ""
"names of functions --- normally shell functions, although certain commands "
"may understand other kinds of function"
msgstr ""

#. type: kindex
#: zsh.texi:21559
#, no-wrap
msgid "globbed-files, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21560
#, no-wrap
msgid "globbed-files"
msgstr ""

#. type: table
#: zsh.texi:21562
msgid "for filenames when the name has been generated by pattern matching"
msgstr ""

#. type: kindex
#: zsh.texi:21563
#, no-wrap
msgid "groups, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21564 zsh.texi:22494
#, no-wrap
msgid "groups"
msgstr ""

#. type: table
#: zsh.texi:21566
msgid "for names of user groups"
msgstr ""

#. type: kindex
#: zsh.texi:21567
#, no-wrap
msgid "history-words, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21568
#, no-wrap
msgid "history-words"
msgstr ""

#. type: table
#: zsh.texi:21570
msgid "for words from the history"
msgstr ""

#. type: kindex
#: zsh.texi:21571
#, no-wrap
msgid "hosts, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21572 zsh.texi:22513
#, no-wrap
msgid "hosts"
msgstr ""

#. type: table
#: zsh.texi:21574
msgid "for hostnames"
msgstr ""

#. type: kindex
#: zsh.texi:21575
#, no-wrap
msgid "indexes, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21576
#, no-wrap
msgid "indexes"
msgstr ""

#. type: table
#: zsh.texi:21578
msgid "for array indexes"
msgstr ""

#. type: kindex
#: zsh.texi:21579
#, no-wrap
msgid "interfaces, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21580
#, no-wrap
msgid "interfaces"
msgstr ""

#. type: table
#: zsh.texi:21582
msgid "for network interfaces"
msgstr ""

#. type: kindex
#: zsh.texi:21583
#, no-wrap
msgid "jobs, completion tag"
msgstr ""

#. type: table
#: zsh.texi:21586
msgid "for jobs (as listed by the `@t{jobs}' builtin)"
msgstr ""

#. type: kindex
#: zsh.texi:21587
#, no-wrap
msgid "keymaps, completion tag"
msgstr ""

#. type: table
#: zsh.texi:21590
msgid "for names of zsh keymaps"
msgstr ""

#. type: kindex
#: zsh.texi:21591
#, no-wrap
msgid "keysyms, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21592
#, no-wrap
msgid "keysyms"
msgstr ""

#. type: table
#: zsh.texi:21594
msgid "for names of X keysyms"
msgstr ""

#. type: kindex
#: zsh.texi:21595
#, no-wrap
msgid "libraries, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21596
#, no-wrap
msgid "libraries"
msgstr ""

#. type: table
#: zsh.texi:21598
msgid "for names of system libraries"
msgstr ""

#. type: kindex
#: zsh.texi:21599
#, no-wrap
msgid "limits, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21600 zsh.texi:35800
#, no-wrap
msgid "limits"
msgstr ""

#. type: table
#: zsh.texi:21602
msgid "for system limits"
msgstr ""

#. type: kindex
#: zsh.texi:21603
#, no-wrap
msgid "local-directories, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21604
#, no-wrap
msgid "local-directories"
msgstr ""

#. type: table
#: zsh.texi:21609
msgid ""
"for names of directories that are subdirectories of the current working "
"directory when completing arguments of @t{cd} and related builtin commands "
"(compare @t{path-directories}) --- when the @t{cdpath} array is unset, "
"@t{directories} is used instead"
msgstr ""

#. type: kindex
#: zsh.texi:21610
#, no-wrap
msgid "mailboxes, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21611
#, no-wrap
msgid "mailboxes"
msgstr ""

#. type: table
#: zsh.texi:21613
msgid "for e-mail folders"
msgstr ""

#. type: kindex
#: zsh.texi:21614
#, no-wrap
msgid "manuals, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21615
#, no-wrap
msgid "manuals"
msgstr ""

#. type: table
#: zsh.texi:21617
msgid "for names of manual pages"
msgstr ""

#. type: kindex
#: zsh.texi:21618
#, no-wrap
msgid "maps, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21619
#, no-wrap
msgid "maps"
msgstr ""

#. type: table
#: zsh.texi:21621
msgid "for map names (e.g. NIS maps)"
msgstr ""

#. type: kindex
#: zsh.texi:21622
#, no-wrap
msgid "messages, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21623
#, no-wrap
msgid "messages"
msgstr ""

#. type: table
#: zsh.texi:21625
msgid "used to look up the @t{format} style for messages"
msgstr ""

#. type: kindex
#: zsh.texi:21626
#, no-wrap
msgid "modifiers, completion tag"
msgstr ""

#. type: table
#: zsh.texi:21629
msgid "for names of X modifiers"
msgstr ""

#. type: kindex
#: zsh.texi:21630
#, no-wrap
msgid "modules, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21631 zsh.texi:27607 zsh.texi:29733 zsh.texi:29734
#, no-wrap
msgid "modules"
msgstr ""

#. type: table
#: zsh.texi:21633
msgid "for modules (e.g. @t{zsh} modules)"
msgstr ""

#. type: kindex
#: zsh.texi:21634
#, no-wrap
msgid "my-accounts, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21635
#, no-wrap
msgid "my-accounts"
msgstr ""

#. type: kindex
#: zsh.texi:21638
#, no-wrap
msgid "named-directories, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21639
#, no-wrap
msgid "named-directories"
msgstr ""

#. type: table
#: zsh.texi:21641
msgid "for named directories (you wouldn't have guessed that, would you?)"
msgstr ""

#. type: kindex
#: zsh.texi:21642
#, no-wrap
msgid "names, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21643
#, no-wrap
msgid "names"
msgstr ""

#. type: table
#: zsh.texi:21645
msgid "for all kinds of names"
msgstr ""

#. type: kindex
#: zsh.texi:21646
#, no-wrap
msgid "newsgroups, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21647
#, no-wrap
msgid "newsgroups"
msgstr ""

#. type: table
#: zsh.texi:21649
msgid "for USENET groups"
msgstr ""

#. type: kindex
#: zsh.texi:21650
#, no-wrap
msgid "nicknames, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21651
#, no-wrap
msgid "nicknames"
msgstr ""

#. type: table
#: zsh.texi:21653
msgid "for nicknames of NIS maps"
msgstr ""

#. type: kindex
#: zsh.texi:21654
#, no-wrap
msgid "options, completion tag"
msgstr ""

#. type: table
#: zsh.texi:21657
msgid "for command options"
msgstr ""

#. type: kindex
#: zsh.texi:21658
#, no-wrap
msgid "original, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21659 zsh.texi:23181
#, no-wrap
msgid "original"
msgstr ""

#. type: table
#: zsh.texi:21662
msgid ""
"used by the @t{_approximate}, @t{_correct} and @t{_expand} completers when "
"offering the original string as a match"
msgstr ""

#. type: kindex
#: zsh.texi:21663
#, no-wrap
msgid "other-accounts, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21664
#, no-wrap
msgid "other-accounts"
msgstr ""

#. type: kindex
#: zsh.texi:21667
#, no-wrap
msgid "packages, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21668
#, no-wrap
msgid "packages"
msgstr ""

#. type: table
#: zsh.texi:21670
msgid "for packages (e.g. @t{rpm} or installed @t{Debian} packages)"
msgstr ""

#. type: kindex
#: zsh.texi:21671
#, no-wrap
msgid "parameters, completion tag"
msgstr ""

#. type: table
#: zsh.texi:21674
msgid "for names of parameters"
msgstr ""

#. type: kindex
#: zsh.texi:21675
#, no-wrap
msgid "path-directories, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21676
#, no-wrap
msgid "path-directories"
msgstr ""

#. type: table
#: zsh.texi:21680
msgid ""
"for names of directories found by searching the @t{cdpath} array when "
"completing arguments of @t{cd} and related builtin commands (compare "
"@t{local-directories})"
msgstr ""

#. type: kindex
#: zsh.texi:21681
#, no-wrap
msgid "paths, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21682
#, no-wrap
msgid "paths"
msgstr ""

#. type: table
#: zsh.texi:21685
msgid ""
"used to look up the values of the @t{expand}, @t{ambiguous} and "
"@t{special-dirs} styles"
msgstr ""

#. type: kindex
#: zsh.texi:21686
#, no-wrap
msgid "pods, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21687
#, no-wrap
msgid "pods"
msgstr ""

#. type: table
#: zsh.texi:21689
msgid "for perl pods (documentation files)"
msgstr ""

#. type: kindex
#: zsh.texi:21690
#, no-wrap
msgid "ports, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21691 zsh.texi:23238
#, no-wrap
msgid "ports"
msgstr ""

#. type: table
#: zsh.texi:21693
msgid "for communication ports"
msgstr ""

#. type: kindex
#: zsh.texi:21694
#, no-wrap
msgid "prefixes, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21695
#, no-wrap
msgid "prefixes"
msgstr ""

#. type: table
#: zsh.texi:21697
msgid "for prefixes (like those of a URL)"
msgstr ""

#. type: kindex
#: zsh.texi:21698
#, no-wrap
msgid "printers, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21699
#, no-wrap
msgid "printers"
msgstr ""

#. type: table
#: zsh.texi:21701
msgid "for print queue names"
msgstr ""

#. type: kindex
#: zsh.texi:21702
#, no-wrap
msgid "processes, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21703
#, no-wrap
msgid "processes"
msgstr ""

#. type: table
#: zsh.texi:21705
msgid "for process identifiers"
msgstr ""

#. type: kindex
#: zsh.texi:21706
#, no-wrap
msgid "processes-names, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21707
#, no-wrap
msgid "processes-names"
msgstr ""

#. type: table
#: zsh.texi:21710
msgid ""
"used to look up the @t{command} style when generating the names of processes "
"for @t{killall}"
msgstr ""

#. type: kindex
#: zsh.texi:21711
#, no-wrap
msgid "sequences, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21712
#, no-wrap
msgid "sequences"
msgstr ""

#. type: table
#: zsh.texi:21714
msgid "for sequences (e.g. @t{mh} sequences)"
msgstr ""

#. type: kindex
#: zsh.texi:21715
#, no-wrap
msgid "sessions, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21716
#, no-wrap
msgid "sessions"
msgstr ""

#. type: table
#: zsh.texi:21718
msgid "for sessions in the @t{zftp} function suite"
msgstr ""

#. type: kindex
#: zsh.texi:21719
#, no-wrap
msgid "signals, completion tag"
msgstr ""

#. type: table
#: zsh.texi:21722
msgid "for signal names"
msgstr ""

#. type: kindex
#: zsh.texi:21723
#, no-wrap
msgid "strings, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21724
#, no-wrap
msgid "strings"
msgstr ""

#. type: table
#: zsh.texi:21727
msgid "for strings (e.g. the replacement strings for the @t{cd} builtin command)"
msgstr ""

#. type: kindex
#: zsh.texi:21728
#, no-wrap
msgid "styles, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21729 zsh.texi:35804
#, no-wrap
msgid "styles"
msgstr ""

#. type: table
#: zsh.texi:21731
msgid "for styles used by the zstyle builtin command"
msgstr ""

#. type: kindex
#: zsh.texi:21732
#, no-wrap
msgid "suffixes, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21733
#, no-wrap
msgid "suffixes"
msgstr ""

#. type: table
#: zsh.texi:21735
msgid "for filename extensions"
msgstr ""

#. type: kindex
#: zsh.texi:21736
#, no-wrap
msgid "tags, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21737
#, no-wrap
msgid "tags"
msgstr ""

#. type: table
#: zsh.texi:21739
msgid "for tags (e.g. @t{rpm} tags)"
msgstr ""

#. type: kindex
#: zsh.texi:21740
#, no-wrap
msgid "targets, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21741
#, no-wrap
msgid "targets"
msgstr ""

#. type: table
#: zsh.texi:21743
msgid "for makefile targets"
msgstr ""

#. type: kindex
#: zsh.texi:21744
#, no-wrap
msgid "time-zones, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21745
#, no-wrap
msgid "time-zones"
msgstr ""

#. type: table
#: zsh.texi:21747
msgid "for time zones (e.g. when setting the @t{TZ} parameter)"
msgstr ""

#. type: kindex
#: zsh.texi:21748
#, no-wrap
msgid "types, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21749
#, no-wrap
msgid "types"
msgstr ""

#. type: table
#: zsh.texi:21751
msgid "for types of whatever (e.g. address types for the @t{xhost} command)"
msgstr ""

#. type: kindex
#: zsh.texi:21752
#, no-wrap
msgid "urls, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21753 zsh.texi:23707
#, no-wrap
msgid "urls"
msgstr ""

#. type: table
#: zsh.texi:21755
msgid "used to look up the @t{urls} and @t{local} styles when completing URLs"
msgstr ""

#. type: kindex
#: zsh.texi:21756
#, no-wrap
msgid "users, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21757 zsh.texi:23791
#, no-wrap
msgid "users"
msgstr ""

#. type: table
#: zsh.texi:21759
msgid "for usernames"
msgstr ""

#. type: kindex
#: zsh.texi:21760
#, no-wrap
msgid "values, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21761
#, no-wrap
msgid "values"
msgstr ""

#. type: table
#: zsh.texi:21763
msgid "for one of a set of values in certain lists"
msgstr ""

#. type: kindex
#: zsh.texi:21764
#, no-wrap
msgid "variant, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21765
#, no-wrap
msgid "variant"
msgstr ""

#. type: table
#: zsh.texi:21768
msgid ""
"used by @t{_pick_variant} to look up the command to run when determining "
"what program is installed for a particular command name."
msgstr ""

#. type: kindex
#: zsh.texi:21769
#, no-wrap
msgid "visuals, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21770
#, no-wrap
msgid "visuals"
msgstr ""

#. type: table
#: zsh.texi:21772
msgid "for X visuals"
msgstr ""

#. type: kindex
#: zsh.texi:21773
#, no-wrap
msgid "warnings, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21774
#, no-wrap
msgid "warnings"
msgstr ""

#. type: table
#: zsh.texi:21776
msgid "used to look up the @t{format} style for warnings"
msgstr ""

#. type: kindex
#: zsh.texi:21777
#, no-wrap
msgid "widgets, completion tag"
msgstr ""

#. type: table
#: zsh.texi:21780
msgid "for zsh widget names"
msgstr ""

#. type: kindex
#: zsh.texi:21781
#, no-wrap
msgid "windows, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21782
#, no-wrap
msgid "windows"
msgstr ""

#. type: table
#: zsh.texi:21784
msgid "for IDs of X windows"
msgstr ""

#. type: kindex
#: zsh.texi:21785
#, no-wrap
msgid "zsh-options, completion tag"
msgstr ""

#. type: t{#1}
#: zsh.texi:21786
#, no-wrap
msgid "zsh-options"
msgstr ""

#. type: table
#: zsh.texi:21788
msgid "for shell options"
msgstr ""

#. type: subsection
#: zsh.texi:21793
#, no-wrap
msgid "Standard Styles"
msgstr ""

#. type: cindex
#: zsh.texi:21795
#, no-wrap
msgid "completion system, styles"
msgstr ""

#. type: Plain text
#: zsh.texi:21805
msgid ""
"Note that the values of several of these styles represent boolean values.  "
"Any of the strings `@t{true}', `@t{on}', `@t{yes}', and `@t{1}' can be used "
"for the value `true' and any of the strings `@t{false}', `@t{off}', "
"`@t{no}', and `@t{0}' for the value `false'.  The behavior for any other "
"value is undefined except where explicitly mentioned.  The default value may "
"be either `true' or `false' if the style is not set."
msgstr ""

#. type: Plain text
#: zsh.texi:21814
msgid ""
"Some of these styles are tested first for every possible tag corresponding "
"to a type of match, and if no style was found, for the @t{default} tag.  The "
"most notable styles of this type are @t{menu}, @t{list-colors} and styles "
"controlling completion listing such as @t{list-packed} and @t{last-prompt}.  "
"When tested for the @t{default} tag, only the @var{function} field of the "
"context will be set so that a style using the @t{default} tag will normally "
"be defined along the lines of:"
msgstr ""

#. type: example
#: zsh.texi:21818
#, no-wrap
msgid "zstyle ':completion:*:default' menu ...\n"
msgstr ""

#. type: kindex
#: zsh.texi:21822
#, no-wrap
msgid "accept-exact, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:21823
#, no-wrap
msgid "accept-exact"
msgstr ""

#. type: table
#: zsh.texi:21829
msgid ""
"This is tested for the @t{default} tag in addition to the tags valid for the "
"current context.  If it is set to `true' and any of the trial matches is the "
"same as the string on the command line, this match will immediately be "
"accepted (even if it would otherwise be considered ambiguous)."
msgstr ""

#. type: table
#: zsh.texi:21837
msgid ""
"When completing pathnames (where the tag used is `@t{paths}')  this style "
"accepts any number of patterns as the value in addition to the boolean "
"values.  Pathnames matching one of these patterns will be accepted "
"immediately even if the command line contains some more partially typed "
"pathname components and these match no file under the directory accepted."
msgstr ""

#. type: table
#: zsh.texi:21847
msgid ""
"This style is also used by the @t{_expand} completer to decide if words "
"beginning with a tilde or parameter expansion should be expanded.  For "
"example, if there are parameters @t{foo} and @t{foobar}, the string "
"`@t{$foo}' will only be expanded if @t{accept-exact} is set to `true'; "
"otherwise the completion system will be allowed to complete @t{$foo} to "
"@t{$foobar}. If the style is set to `@t{continue}', @t{_expand} will add the "
"expansion as a match and the completion system will also be allowed to "
"continue."
msgstr ""

#. type: kindex
#: zsh.texi:21848
#, no-wrap
msgid "accept-exact-dirs, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:21849
#, no-wrap
msgid "accept-exact-dirs"
msgstr ""

#. type: table
#: zsh.texi:21856
msgid ""
"This is used by filename completion.  Unlike @t{accept-exact} it is a "
"boolean.  By default, filename completion examines all components of a path "
"to see if there are completions of that component, even if the component "
"matches an existing directory.  For example, when completion after "
"@t{/usr/bin/}, the function examines possible completions to @t{/usr}."
msgstr ""

#. type: table
#: zsh.texi:21862
msgid ""
"When this style is `true', any prefix of a path that matches an existing "
"directory is accepted without any attempt to complete it further.  Hence, in "
"the given example, the path @t{/usr/bin/} is accepted immediately and "
"completion tried in that directory."
msgstr ""

#. type: table
#: zsh.texi:21869
msgid ""
"This style is also useful when completing after directories that magically "
"appear when referenced, such as ZFS @t{.zfs} directories or NetApp "
"@t{.snapshot} directories.  When the style is set the shell does not check "
"for the existence of the directory within the parent directory."
msgstr ""

#. type: table
#: zsh.texi:21873
msgid ""
"If you wish to inhibit this behaviour entirely, set the @t{path-completion} "
"style (see below) to `false'."
msgstr ""

#. type: kindex
#: zsh.texi:21874
#, no-wrap
msgid "add-space, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:21875
#, no-wrap
msgid "add-space"
msgstr ""

#. type: table
#: zsh.texi:21884
msgid ""
"This style is used by the @t{_expand} completer.  If it is `true' (the "
"default), a space will be inserted after all words resulting from the "
"expansion, or a slash in the case of directory names.  If the value is "
"`@t{file}', the completer will only add a space to names of existing files.  "
"Either a boolean `true' or the value `@t{file}' may be combined with "
"`@t{subst}', in which case the completer will not add a space to words "
"generated from the expansion of a substitution of the form "
"`@t{$(}@var{...}@t{)}' or `@t{$@{}@var{...}@t{@}}'."
msgstr ""

#. type: table
#: zsh.texi:21888
msgid ""
"The @t{_prefix} completer uses this style as a simple boolean value to "
"decide if a space should be inserted before the suffix."
msgstr ""

#. type: kindex
#: zsh.texi:21889
#, no-wrap
msgid "ambiguous, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:21890
#, no-wrap
msgid "ambiguous"
msgstr ""

#. type: table
#: zsh.texi:21895
msgid ""
"This applies when completing non-final components of filename paths, in "
"other words those with a trailing slash.  If it is set, the cursor is left "
"after the first ambiguous component, even if menu completion is in use.  The "
"style is always tested with the @t{paths} tag."
msgstr ""

#. type: kindex
#: zsh.texi:21896
#, no-wrap
msgid "assign-list, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:21897
#, no-wrap
msgid "assign-list"
msgstr ""

#. type: table
#: zsh.texi:21903
msgid ""
"When completing after an equals sign that is being treated as an assignment, "
"the completion system normally completes only one filename.  In some cases "
"the value may be a list of filenames separated by colons, as with @t{PATH} "
"and similar parameters.  This style can be set to a list of patterns "
"matching the names of such parameters."
msgstr ""

#. type: table
#: zsh.texi:21907
msgid ""
"The default is to complete lists when the word on the line already contains "
"a colon."
msgstr ""

#. type: kindex
#: zsh.texi:21908
#, no-wrap
msgid "auto-description, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:21909
#, no-wrap
msgid "auto-description"
msgstr ""

#. type: table
#: zsh.texi:21916
msgid ""
"If set, this style's value will be used as the description for options that "
"are not described by the completion functions, but that have exactly one "
"argument.  The sequence `@t{%d}' in the value will be replaced by the "
"description for this argument.  Depending on personal preferences, it may be "
"useful to set this style to something like `@t{specify: %d}'.  Note that "
"this may not work for some commands."
msgstr ""

#. type: kindex
#: zsh.texi:21917
#, no-wrap
msgid "avoid-completer, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:21918
#, no-wrap
msgid "avoid-completer"
msgstr ""

#. type: table
#: zsh.texi:21924
msgid ""
"This is used by the @t{_all_matches} completer to decide if the string "
"consisting of all matches should be added to the list currently being "
"generated.  Its value is a list of names of completers.  If any of these is "
"the name of the completer that generated the matches in this completion, the "
"string will not be added."
msgstr ""

#. type: table
#: zsh.texi:21929
msgid ""
"The default value for this style is `@t{_expand _old_list _correct "
"_approximate}', i.e. it contains the completers for which a string with all "
"matches will almost never be wanted."
msgstr ""

#. type: kindex
#: zsh.texi:21930
#, no-wrap
msgid "cache-path, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:21931
#, no-wrap
msgid "cache-path"
msgstr ""

#. type: table
#: zsh.texi:21936
msgid ""
"This style defines the path where any cache files containing dumped "
"completion data are stored.  It defaults to `@t{$ZDOTDIR/.zcompcache}', or "
"`@t{$HOME/.zcompcache}' if @t{$ZDOTDIR} is not defined.  The completion "
"cache will not be used unless the @t{use-cache} style is set."
msgstr ""

#. type: kindex
#: zsh.texi:21937
#, no-wrap
msgid "cache-policy, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:21938
#, no-wrap
msgid "cache-policy"
msgstr ""

#. type: table
#: zsh.texi:21942
msgid ""
"This style defines the function that will be used to determine whether a "
"cache needs rebuilding.  See the section on the @t{_cache_invalid} function "
"below."
msgstr ""

#. type: kindex
#: zsh.texi:21943
#, no-wrap
msgid "call-command, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:21944
#, no-wrap
msgid "call-command"
msgstr ""

#. type: table
#: zsh.texi:21951
msgid ""
"This style is used in the function for commands such as @t{make} and @t{ant} "
"where calling the command directly to generate matches suffers problems such "
"as being slow or, as in the case of @t{make} can potentially cause actions "
"in the makefile to be executed. If it is set to `true' the command is called "
"to generate matches. The default value of this style is `false'."
msgstr ""

#. type: kindex
#: zsh.texi:21952
#, no-wrap
msgid "command, completion style"
msgstr ""

#. type: table
#: zsh.texi:21963
msgid ""
"In many places, completion functions need to call external commands to "
"generate the list of completions.  This style can be used to override the "
"command that is called in some such cases.  The elements of the value are "
"joined with spaces to form a command line to execute.  The value can also "
"start with a hyphen, in which case the usual command will be added to the "
"end; this is most useful for putting `@t{builtin}' or `@t{command}' in front "
"to make sure the appropriate version of a command is called, for example to "
"avoid calling a shell function with the same name as an external command."
msgstr ""

#. type: table
#: zsh.texi:21974
msgid ""
"As an example, the completion function for process IDs uses this style with "
"the @t{processes} tag to generate the IDs to complete and the list of "
"processes to display (if the @t{verbose} style is `true').  The list "
"produced by the command should look like the output of the @t{ps} command.  "
"The first line is not displayed, but is searched for the string `@t{PID}' "
"(or `@t{pid}') to find the position of the process IDs in the following "
"lines.  If the line does not contain `@t{PID}', the first numbers in each of "
"the other lines are taken as the process IDs to complete."
msgstr ""

#. type: table
#: zsh.texi:21980
msgid ""
"Note that the completion function generally has to call the specified "
"command for each attempt to generate the completion list.  Hence care should "
"be taken to specify only commands that take a short time to run, and in "
"particular to avoid any that may never terminate."
msgstr ""

#. type: kindex
#: zsh.texi:21981
#, no-wrap
msgid "command-path, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:21982
#, no-wrap
msgid "command-path"
msgstr ""

#. type: table
#: zsh.texi:21985
msgid ""
"This is a list of directories to search for commands to complete.  The "
"default for this style is the value of the special parameter @t{path}."
msgstr ""

#. type: kindex
#: zsh.texi:21986
#, no-wrap
msgid "commands, completion style"
msgstr ""

#. type: table
#: zsh.texi:21994
msgid ""
"This is used by the function completing sub-commands for the system "
"initialisation scripts (residing in @t{/etc/init.d} or somewhere not too far "
"away from that).  Its values give the default commands to complete for those "
"commands for which the completion function isn't able to find them out "
"automatically.  The default for this style are the two strings `@t{start}' "
"and `@t{stop}'."
msgstr ""

#. type: kindex
#: zsh.texi:21995
#, no-wrap
msgid "complete, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:21996 zsh.texi:39661
#, no-wrap
msgid "complete"
msgstr ""

#. type: table
#: zsh.texi:22001
msgid ""
"This is used by the @t{_expand_alias} function when invoked as a bindable "
"command.  If set to `true' and the word on the command line is not the name "
"of an alias, matching alias names will be completed."
msgstr ""

#. type: kindex
#: zsh.texi:22002
#, no-wrap
msgid "complete-options, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22003
#, no-wrap
msgid "complete-options"
msgstr ""

#. type: table
#: zsh.texi:22011
msgid ""
"This is used by the completer for @t{cd}, @t{chdir} and @t{pushd}.  For "
"these commands a @t{-} is used to introduce a directory stack entry and "
"completion of these is far more common than completing options.  Hence "
"unless the value of this style is `true' options will not be completed, even "
"after an initial @t{-}.  If it is `true', options will be completed after an "
"initial @t{-} unless there is a preceding @t{-}@t{-} on the command line."
msgstr ""

#. type: kindex
#: zsh.texi:22012 zsh.texi:39625
#, no-wrap
msgid "completer, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22013 zsh.texi:39626
#, no-wrap
msgid "completer"
msgstr ""

#. type: table
#: zsh.texi:22018
msgid ""
"The strings given as the value of this style provide the names of the "
"completer functions to use. The available completer functions are described "
"in @ref{Control Functions}."
msgstr ""

#. type: table
#: zsh.texi:22030
msgid ""
"Each string may be either the name of a completer function or a string of "
"the form `@var{function}@t{:}@var{name}'.  In the first case the "
"@var{completer} field of the context will contain the name of the completer "
"without the leading underscore and with all other underscores replaced by "
"hyphens.  In the second case the @var{function} is the name of the completer "
"to call, but the context will contain the user-defined @var{name} in the "
"@var{completer} field of the context.  If the @var{name} starts with a "
"hyphen, the string for the context will be build from the name of the "
"completer function as in the first case with the @var{name} appended to it.  "
"For example:"
msgstr ""

#. type: example
#: zsh.texi:22034
#, no-wrap
msgid "zstyle ':completion:*' completer _complete _complete:-foo\n"
msgstr ""

#. type: table
#: zsh.texi:22045
msgid ""
"Here, completion will call the @t{_complete} completer twice, once using "
"`@t{complete}' and once using `@t{complete-foo}' in the @var{completer} "
"field of the context.  Normally, using the same completer more than once "
"only makes sense when used with the `@var{functions}@t{:}@var{name}' form, "
"because otherwise the context name will be the same in all calls to the "
"completer; possible exceptions to this rule are the @t{_ignored} and "
"@t{_prefix} completers."
msgstr ""

#. type: table
#: zsh.texi:22050
msgid ""
"The default value for this style is `@t{_complete _ignored}': only "
"completion will be done, first using the @t{ignored-patterns} style and the "
"@t{$fignore} array and then without ignoring matches."
msgstr ""

#. type: kindex
#: zsh.texi:22051
#, no-wrap
msgid "condition, completion style"
msgstr ""

#. type: table
#: zsh.texi:22056
msgid ""
"This style is used by the @t{_list} completer function to decide if "
"insertion of matches should be delayed unconditionally. The default is "
"`true'."
msgstr ""

#. type: kindex
#: zsh.texi:22057
#, no-wrap
msgid "delimiters, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22058
#, no-wrap
msgid "delimiters"
msgstr ""

#. type: table
#: zsh.texi:22065
msgid ""
"This style is used when adding a delimiter for use with history modifiers or "
"glob qualifiers that have delimited arguments.  It is an array of preferred "
"delimiters to add.  Non-special characters are preferred as the completion "
"system may otherwise become confused.  The default list is @t{:}, @t{+}, "
"@t{/}, @t{-}, @t{%}.  The list may be empty to force a delimiter to be "
"typed."
msgstr ""

#. type: kindex
#: zsh.texi:22066
#, no-wrap
msgid "disabled, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22067
#, no-wrap
msgid "disabled"
msgstr ""

#. type: table
#: zsh.texi:22071
msgid ""
"If this is set to `true', the @t{_expand_alias} completer and bindable "
"command will try to expand disabled aliases, too.  The default is `false'."
msgstr ""

#. type: kindex
#: zsh.texi:22072
#, no-wrap
msgid "domains, completion style"
msgstr ""

#. type: table
#: zsh.texi:22077
msgid ""
"A list of names of network domains for completion.  If this is not set, "
"domain names will be taken from the file @t{/etc/resolv.conf}."
msgstr ""

#. type: kindex
#: zsh.texi:22078
#, no-wrap
msgid "environ, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22079
#, no-wrap
msgid "environ"
msgstr ""

#. type: table
#: zsh.texi:22083
msgid ""
"The environ style is used when completing for `@t{sudo}'.  It is set to an "
"array of `@var{VAR}@t{=}@var{value}' assignments to be exported into the "
"local environment before the completion for the target command is invoked."
msgstr ""

#. type: example
#: zsh.texi:22086
#, no-wrap
msgid ""
"zstyle ':completion:*:sudo::' environ \\ \n"
"  PATH=\"/sbin:/usr/sbin:$PATH\" HOME=\"/root\"\n"
msgstr ""

#. type: kindex
#: zsh.texi:22088
#, no-wrap
msgid "expand, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22089
#, no-wrap
msgid "expand"
msgstr ""

#. type: table
#: zsh.texi:22092
msgid ""
"This style is used when completing strings consisting of multiple parts, "
"such as path names."
msgstr ""

#. type: table
#: zsh.texi:22097
msgid ""
"If one of its values is the string `@t{prefix}', the partially typed word "
"from the line will be expanded as far as possible even if trailing parts "
"cannot be completed."
msgstr ""

#. type: table
#: zsh.texi:22103
msgid ""
"If one of its values is the string `@t{suffix}', matching names for "
"components after the first ambiguous one will also be added.  This means "
"that the resulting string is the longest unambiguous string possible.  "
"However, menu completion can be used to cycle through all matches."
msgstr ""

#. type: kindex
#: zsh.texi:22104
#, no-wrap
msgid "extra-verbose, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22105
#, no-wrap
msgid "extra-verbose"
msgstr ""

#. type: table
#: zsh.texi:22109
msgid ""
"If set, the completion listing is more verbose at the cost of a probable "
"decrease in completion speed.  Completion performance will suffer if this "
"style is set to `true'."
msgstr ""

#. type: kindex
#: zsh.texi:22110
#, no-wrap
msgid "fake, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22111
#, no-wrap
msgid "fake"
msgstr ""

#. type: table
#: zsh.texi:22118
msgid ""
"This style may be set for any completion context.  It specifies additional "
"strings that will always be completed in that context.  The form of each "
"string is `@var{value}@t{:}@var{description}'; the colon and description may "
"be omitted, but any literal colons in @var{value} must be quoted with a "
"backslash.  Any @var{description} provided is shown alongside the value in "
"completion listings."
msgstr ""

#. type: table
#: zsh.texi:22123
msgid ""
"It is important to use a sufficiently restrictive context when specifying "
"fake strings.  Note that the styles @t{fake-files} and @t{fake-parameters} "
"provide additional features when completing files or parameters."
msgstr ""

#. type: kindex
#: zsh.texi:22124
#, no-wrap
msgid "fake-always, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22125
#, no-wrap
msgid "fake-always"
msgstr ""

#. type: table
#: zsh.texi:22130
msgid ""
"This works identically to the @t{fake} style except that the "
"@t{ignored-patterns} style is not applied to it.  This makes it possible to "
"override a set of matches completely by setting the ignored patterns to "
"`@t{*}'."
msgstr ""

#. type: table
#: zsh.texi:22141
msgid ""
"The following shows a way of supplementing any tag with arbitrary data, but "
"having it behave for display purposes like a separate tag.  In this example "
"we use the features of the @t{tag-order} style to divide the "
"@t{named-directories} tag into two when performing completion with the "
"standard completer @t{complete} for arguments of @t{cd}.  The tag "
"@t{named-directories-normal} behaves as normal, but the tag "
"@t{named-directories-mine} contains a fixed set of directories.  This has "
"the effect of adding the match group `@t{extra directories}' with the given "
"completions."
msgstr ""

#. type: example
#: zsh.texi:22151
#, no-wrap
msgid ""
"zstyle ':completion::complete:cd:*' tag-order \\ \n"
"  'named-directories:-mine:extra\\ directories\n"
"  named-directories:-normal:named\\ directories *'\n"
"zstyle ':completion::complete:cd:*:named-directories-mine' \\ \n"
"  fake-always mydir1 mydir2\n"
"zstyle ':completion::complete:cd:*:named-directories-mine' \\ \n"
"  ignored-patterns '*'\n"
msgstr ""

#. type: kindex
#: zsh.texi:22153
#, no-wrap
msgid "fake-files, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22154
#, no-wrap
msgid "fake-files"
msgstr ""

#. type: table
#: zsh.texi:22163
msgid ""
"This style is used when completing files and looked up without a tag.  Its "
"values are of the form `@var{dir}@t{:}@var{names...}'.  This will add the "
"@var{names} (strings separated by spaces) as possible matches when "
"completing in the directory @var{dir}, even if no such files really exist.  "
"The dir may be a pattern; pattern characters or colons in @var{dir} should "
"be quoted with a backslash to be treated literally."
msgstr ""

#. type: table
#: zsh.texi:22170
msgid ""
"This can be useful on systems that support special file systems whose "
"top-level pathnames can not be listed or generated with glob patterns (but "
"see @t{accept-exact-dirs} for a more general way of dealing with this "
"problem).  It can also be used for directories for which one does not have "
"read permission."
msgstr ""

#. type: table
#: zsh.texi:22174
msgid ""
"The pattern form can be used to add a certain `magic' entry to all "
"directories on a particular file system."
msgstr ""

#. type: kindex
#: zsh.texi:22175
#, no-wrap
msgid "fake-parameters, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22176
#, no-wrap
msgid "fake-parameters"
msgstr ""

#. type: table
#: zsh.texi:22185
msgid ""
"This is used by the completion function for parameter names.  Its values are "
"names of parameters that might not yet be set but should be completed "
"nonetheless.  Each name may also be followed by a colon and a string "
"specifying the type of the parameter (like `@t{scalar}', `@t{array}' or "
"`@t{integer}').  If the type is given, the name will only be completed if "
"parameters of that type are required in the particular context.  Names for "
"which no type is specified will always be completed."
msgstr ""

#. type: kindex
#: zsh.texi:22186
#, no-wrap
msgid "file-list, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22187
#, no-wrap
msgid "file-list"
msgstr ""

#. type: table
#: zsh.texi:22194
msgid ""
"This style controls whether files completed using the standard builtin "
"mechanism are to be listed with a long list similar to @t{ls -l}.  Note that "
"this feature uses the shell module @t{zsh/stat} for file information; this "
"loads the builtin @t{stat} which will replace any external @t{stat} "
"executable.  To avoid this the following code can be included in an "
"initialization file:"
msgstr ""

#. type: example
#: zsh.texi:22199
#, no-wrap
msgid ""
"zmodload -i zsh/stat\n"
"disable stat\n"
msgstr ""

#. type: table
#: zsh.texi:22207
msgid ""
"The style may either be set to a `true' value (or `@t{all}'), or one of the "
"values `@t{insert}' or `@t{list}', indicating that files are to be listed in "
"long format in all circumstances, or when attempting to insert a file name, "
"or when listing file names without attempting to insert one."
msgstr ""

#. type: table
#: zsh.texi:22213
msgid ""
"More generally, the value may be an array of any of the above values, "
"optionally followed by @t{=}@var{num}.  If @var{num} is present it gives the "
"maximum number of matches for which long listing style will be used.  For "
"example,"
msgstr ""

#. type: example
#: zsh.texi:22217
#, no-wrap
msgid "zstyle ':completion:*' file-list list=20 insert=10\n"
msgstr ""

#. type: table
#: zsh.texi:22224
msgid ""
"specifies that long format will be used when listing up to 20 files or "
"inserting a file with up to 10 matches (assuming a listing is to be shown at "
"all, for example on an ambiguous completion), else short format will be "
"used."
msgstr ""

#. type: example
#: zsh.texi:22229
#, no-wrap
msgid ""
"zstyle -e ':completion:*' file-list \\ \n"
"       '(( $@{+NUMERIC@} )) && reply=(true)'\n"
msgstr ""

#. type: table
#: zsh.texi:22234
msgid ""
"specifies that long format will be used any time a numeric argument is "
"supplied, else short format."
msgstr ""

#. type: kindex
#: zsh.texi:22235
#, no-wrap
msgid "file-patterns, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22236
#, no-wrap
msgid "file-patterns"
msgstr ""

#. type: table
#: zsh.texi:22243
msgid ""
"This is used by the standard function for completing filenames, @t{_files}.  "
"If the style is unset up to three tags are offered, "
"`@t{globbed-files}',`@t{directories}' and `@t{all-files}', depending on the "
"types of files expected by the caller of @t{_files}.  The first two "
"(`@t{globbed-files}' and `@t{directories}') are normally offered together to "
"make it easier to complete files in sub-directories."
msgstr ""

#. type: table
#: zsh.texi:22249
msgid ""
"The @t{file-patterns} style provides alternatives to the default tags, which "
"are not used.  Its value consists of elements of the form "
"`@var{pattern}@t{:}@var{tag}'; each string may contain any number of such "
"specifications separated by spaces."
msgstr ""

#. type: table
#: zsh.texi:22258
msgid ""
"The @var{pattern} is a pattern that is to be used to generate filenames.  "
"Any occurrence of the sequence `@t{%p}' is replaced by any pattern(s)  "
"passed by the function calling @t{_files}.  Colons in the pattern must be "
"preceded by a backslash to make them distinguishable from the colon before "
"the @var{tag}.  If more than one pattern is needed, the patterns can be "
"given inside braces, separated by commas."
msgstr ""

#. type: table
#: zsh.texi:22264
msgid ""
"The @var{tag}s of all strings in the value will be offered by @t{_files} and "
"used when looking up other styles.  Any @var{tag}s in the same word will be "
"offered at the same time and before later words.  If no `@t{:}@var{tag}' is "
"given the `@t{files}' tag will be used."
msgstr ""

#. type: table
#: zsh.texi:22273
msgid ""
"The @var{tag} may also be followed by an optional second colon and a "
"description, which will be used for the `@t{%d}' in the value of the "
"@t{format} style (if that is set) instead of the default description "
"supplied by the completion function.  The inclusion of a description also "
"gives precedence to associated options such as for completion grouping so it "
"can be used where files should be separated."
msgstr ""

#. type: table
#: zsh.texi:22278
msgid ""
"For example, to make the @t{rm} command first complete only names of object "
"files and then the names of all files if there is no matching object file:"
msgstr ""

#. type: example
#: zsh.texi:22283
#, no-wrap
msgid ""
"zstyle ':completion:*:*:rm:*:*' file-patterns \\ \n"
"    '*.o:object-files' '%p:all-files'\n"
msgstr ""

#. type: table
#: zsh.texi:22290
msgid ""
"To alter the default behaviour of file completion --- offer files matching a "
"pattern and directories on the first attempt, then all files --- to offer "
"only matching files on the first attempt, then directories, and finally all "
"files:"
msgstr ""

#. type: example
#: zsh.texi:22295
#, no-wrap
msgid ""
"zstyle ':completion:*' file-patterns \\ \n"
"    '%p:globbed-files' '*(-/):directories' '*:all-files'\n"
msgstr ""

#. type: table
#: zsh.texi:22302
msgid ""
"This works even where there is no special pattern: @t{_files} matches all "
"files using the pattern `@t{*}' at the first step and stops when it sees "
"this pattern.  Note also it will never try a pattern more than once for a "
"single completion attempt."
msgstr ""

#. type: table
#: zsh.texi:22309
msgid ""
"To separate directories into a separate group from the files but still "
"complete them at the first attempt, a description needs to be given.  Note "
"that directories need to be explicitly excluded from the globbed-files "
"because `@t{*}' will match directories. For grouping, it is also necessary "
"to set the @t{group-name} style."
msgstr ""

#. type: example
#: zsh.texi:22314
#, no-wrap
msgid ""
"zstyle ':completion:*' file-patterns \\ \n"
"    '%p(^-/):globbed-files *(-/):directories:location'\n"
msgstr ""

#. type: table
#: zsh.texi:22320
msgid ""
"During the execution of completion functions, the @t{EXTENDED_GLOB} option "
"is in effect, so the characters `@t{#}', `@t{~}' and `@t{^}' have special "
"meanings in the patterns."
msgstr ""

#. type: kindex
#: zsh.texi:22321
#, no-wrap
msgid "file-sort, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22322
#, no-wrap
msgid "file-sort"
msgstr ""

#. type: table
#: zsh.texi:22337
msgid ""
"The standard filename completion function uses this style without a tag to "
"determine in which order the names should be listed; menu completion will "
"cycle through them in the same order.  The possible values are: `@t{size}' "
"to sort by the size of the file; `@t{links}' to sort by the number of links "
"to the file; `@t{modification}' (or `@t{time}' or `@t{date}') to sort by the "
"last modification time; `@t{access}' to sort by the last access time; and "
"`@t{inode}' (or `@t{change}') to sort by the last inode change time.  If the "
"style is set to any other value, or is unset, files will be sorted "
"alphabetically by name.  If the value contains the string `@t{reverse}', "
"sorting is done in the opposite order.  If the value contains the string "
"`@t{follow}', timestamps are associated with the targets of symbolic links; "
"the default is to use the timestamps of the links themselves."
msgstr ""

#. type: kindex
#: zsh.texi:22338
#, no-wrap
msgid "file-split-chars, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22339
#, no-wrap
msgid "file-split-chars"
msgstr ""

#. type: table
#: zsh.texi:22347
msgid ""
"A set of characters that will cause @emph{all} file completions for the "
"given context to be split at the point where any of the characters occurs.  "
"A typical use is to set the style to @t{:}; then everything up to and "
"including the last @t{:} in the string so far is ignored when completing "
"files.  As this is quite heavy-handed, it is usually preferable to update "
"completion functions for contexts where this behaviour is useful."
msgstr ""

#. type: kindex
#: zsh.texi:22348
#, no-wrap
msgid "filter, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22349
#, no-wrap
msgid "filter"
msgstr ""

#. type: table
#: zsh.texi:22357
msgid ""
"The @t{ldap} plugin of email address completion (see @t{_email_addresses}) "
"uses this style to specify the attributes to match against when filtering "
"entries.  So for example, if the style is set to `@t{sn}', matching is done "
"against surnames.  Standard LDAP filtering is used so normal completion "
"matching is bypassed.  If this style is not set, the LDAP plugin is "
"skipped.  You may also need to set the @t{command} style to specify how to "
"connect to your LDAP server."
msgstr ""

#. type: kindex
#: zsh.texi:22358
#, no-wrap
msgid "force-list, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22359
#, no-wrap
msgid "force-list"
msgstr ""

#. type: table
#: zsh.texi:22369
msgid ""
"This forces a list of completions to be shown at any point where listing is "
"done, even in cases where the list would usually be suppressed.  For "
"example, normally the list is only shown if there are at least two different "
"matches.  By setting this style to `@t{always}', the list will always be "
"shown, even if there is only a single match that will immediately be "
"accepted.  The style may also be set to a number.  In this case the list "
"will be shown if there are at least that many matches, even if they would "
"all insert the same string."
msgstr ""

#. type: table
#: zsh.texi:22374
msgid ""
"This style is tested for the default tag as well as for each tag valid for "
"the current completion.  Hence the listing can be forced only for certain "
"types of match."
msgstr ""

#. type: kindex
#: zsh.texi:22375
#, no-wrap
msgid "format, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22376
#, no-wrap
msgid "format"
msgstr ""

#. type: table
#: zsh.texi:22384
msgid ""
"If this is set for the @t{descriptions} tag, its value is used as a string "
"to display above matches in completion lists.  The sequence `@t{%d}' in this "
"string will be replaced with a short description of what these matches are.  "
"This string may also contain the output attribute sequences understood by "
"@t{compadd -X} (see @ref{Completion Widgets})."
msgstr ""

#. type: table
#: zsh.texi:22389
msgid ""
"The style is tested with each tag valid for the current completion before it "
"is tested for the @t{descriptions} tag.  Hence different format strings can "
"be defined for different types of match."
msgstr ""

#. type: table
#: zsh.texi:22394
msgid ""
"Note also that some completer functions define additional "
"`@t{%}'-sequences.  These are described for the completer functions that "
"make use of them."
msgstr ""

#. type: table
#: zsh.texi:22399
msgid ""
"Some completion functions display messages that may be customised by setting "
"this style for the @t{messages} tag.  Here, the `@t{%d}' is replaced with a "
"message given by the completion function."
msgstr ""

#. type: table
#: zsh.texi:22406
msgid ""
"Finally, the format string is looked up with the @t{warnings} tag, for use "
"when no matches could be generated at all.  In this case the `@t{%d}' is "
"replaced with the descriptions for the matches that were expected separated "
"by spaces.  The sequence `@t{%D}' is replaced with the same descriptions "
"separated by newlines."
msgstr ""

#. type: table
#: zsh.texi:22412
msgid ""
"It is possible to use printf-style field width specifiers with `@t{%d}' and "
"similar escape sequences.  This is handled by the @t{zformat} builtin "
"command from the @t{zsh/zutil} module, see @ref{The zsh/zutil Module}."
msgstr ""

#. type: kindex
#: zsh.texi:22413
#, no-wrap
msgid "gain-privileges, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22414
#, no-wrap
msgid "gain-privileges"
msgstr ""

#. type: table
#: zsh.texi:22421
msgid ""
"If set to @t{true}, this style enables the use of commands like @t{sudo} or "
"@t{doas} to gain extra privileges when retrieving information for "
"completion. This is only done when a command such as @t{sudo} appears on the "
"command-line. To force the use of, e.g. @t{sudo} or to override any prefix "
"that might be added due to @t{gain-privileges}, the @t{command} style can be "
"used with a value that begins with a hyphen."
msgstr ""

#. type: kindex
#: zsh.texi:22422
#, no-wrap
msgid "glob, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22423
#, no-wrap
msgid "glob"
msgstr ""

#. type: table
#: zsh.texi:22428
msgid ""
"This is used by the @t{_expand} completer.  If it is set to `true' (the "
"default), globbing will be attempted on the words resulting from a previous "
"substitution (see the @t{substitute} style) or else the original string from "
"the line."
msgstr ""

#. type: kindex
#: zsh.texi:22429
#, no-wrap
msgid "global, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22430
#, no-wrap
msgid "global"
msgstr ""

#. type: table
#: zsh.texi:22433
msgid ""
"If this is set to `true' (the default), the @t{_expand_alias} completer and "
"bindable command will try to expand global aliases."
msgstr ""

#. type: kindex
#: zsh.texi:22434
#, no-wrap
msgid "group-name, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22435
#, no-wrap
msgid "group-name"
msgstr ""

#. type: table
#: zsh.texi:22443
msgid ""
"The completion system can group different types of matches, which appear in "
"separate lists.  This style can be used to give the names of groups for "
"particular tags.  For example, in command position the completion system "
"generates names of builtin and external commands, names of aliases, shell "
"functions and parameters and reserved words as possible completions.  To "
"have the external commands and shell functions listed separately:"
msgstr ""

#. type: example
#: zsh.texi:22450
#, no-wrap
msgid ""
"zstyle ':completion:*:*:-command-:*:commands' \\ \n"
"       group-name commands\n"
"zstyle ':completion:*:*:-command-:*:functions' \\ \n"
"       group-name functions\n"
msgstr ""

#. type: table
#: zsh.texi:22455
msgid ""
"As a consequence, any match with the same tag will be displayed in the same "
"group."
msgstr ""

#. type: table
#: zsh.texi:22460
msgid ""
"If the name given is the empty string the name of the tag for the matches "
"will be used as the name of the group.  So, to have all different types of "
"matches displayed separately, one can just set:"
msgstr ""

#. type: example
#: zsh.texi:22464
#, no-wrap
msgid "zstyle ':completion:*' group-name @value{dsq}\n"
msgstr ""

#. type: table
#: zsh.texi:22469
msgid ""
"All matches for which no group name is defined will be put in a group named "
"@t{-default-}."
msgstr ""

#. type: table
#: zsh.texi:22473
msgid ""
"To display the group name in the output, see the @t{format} style (q.v.)  "
"under the @t{descriptions} tag."
msgstr ""

#. type: kindex
#: zsh.texi:22474
#, no-wrap
msgid "group-order, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22475
#, no-wrap
msgid "group-order"
msgstr ""

#. type: table
#: zsh.texi:22481
msgid ""
"This style is additional to the @t{group-name} style to specify the order "
"for display of the groups defined by that style (compare @t{tag-order}, "
"which determines which completions appear at all).  The groups named are "
"shown in the given order; any other groups are shown in the order defined by "
"the completion function."
msgstr ""

#. type: table
#: zsh.texi:22486
msgid ""
"For example, to have names of builtin commands, shell functions and external "
"commands appear in that order when completing in command position:"
msgstr ""

#. type: example
#: zsh.texi:22491
#, no-wrap
msgid ""
"zstyle ':completion:*:*:-command-:*:*' group-order \\ \n"
"       builtins functions commands\n"
msgstr ""

#. type: kindex
#: zsh.texi:22493
#, no-wrap
msgid "groups, completion style"
msgstr ""

#. type: table
#: zsh.texi:22497
msgid ""
"A list of names of UNIX groups.  If this is not set, group names are taken "
"from the YP database or the file `@t{/etc/group}'."
msgstr ""

#. type: kindex
#: zsh.texi:22498
#, no-wrap
msgid "hidden, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22499
#, no-wrap
msgid "hidden"
msgstr ""

#. type: table
#: zsh.texi:22505
msgid ""
"If this is set to `true', matches for the given context will not be listed, "
"although any description for the matches set with the @t{format} style will "
"be shown.  If it is set to `@t{all}', not even the description will be "
"displayed."
msgstr ""

#. type: table
#: zsh.texi:22511
msgid ""
"Note that the matches will still be completed; they are just not shown in "
"the list.  To avoid having matches considered as possible completions at "
"all, the @t{tag-order} style can be modified as described below."
msgstr ""

#. type: kindex
#: zsh.texi:22512
#, no-wrap
msgid "hosts, completion style"
msgstr ""

#. type: table
#: zsh.texi:22516
msgid ""
"A list of names of hosts that should be completed.  If this is not set, "
"hostnames are taken from the file `@t{/etc/hosts}'."
msgstr ""

#. type: kindex
#: zsh.texi:22517
#, no-wrap
msgid "hosts-ports, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22518
#, no-wrap
msgid "hosts-ports"
msgstr ""

#. type: table
#: zsh.texi:22523
msgid ""
"This style is used by commands that need or accept hostnames and network "
"ports.  The strings in the value should be of the form "
"`@var{host}@t{:}@var{port}'.  Valid ports are determined by the presence of "
"hostnames; multiple ports for the same host may appear."
msgstr ""

#. type: kindex
#: zsh.texi:22524
#, no-wrap
msgid "ignore-line, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22525
#, no-wrap
msgid "ignore-line"
msgstr ""

#. type: table
#: zsh.texi:22534
msgid ""
"This is tested for each tag valid for the current completion.  If it is set "
"to `true', none of the words that are already on the line will be considered "
"as possible completions.  If it is set to `@t{current}', the word the cursor "
"is on will not be considered as a possible completion.  The value "
"`@t{current-shown}' is similar but only applies if the list of completions "
"is currently shown on the screen.  Finally, if the style is set to "
"`@t{other}', all words on the line except for the current one will be "
"excluded from the possible completions."
msgstr ""

#. type: table
#: zsh.texi:22539
msgid ""
"The values `@t{current}' and `@t{current-shown}' are a bit like the opposite "
"of the @t{accept-exact} style: only strings with missing characters will be "
"completed."
msgstr ""

#. type: table
#: zsh.texi:22546
msgid ""
"Note that you almost certainly don't want to set this to `true' or "
"`@t{other}' for a general context such as `@t{:completion:*}'.  This is "
"because it would disallow completion of, for example, options multiple times "
"even if the command in question accepts the option more than once."
msgstr ""

#. type: kindex
#: zsh.texi:22547
#, no-wrap
msgid "ignore-parents, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22548
#, no-wrap
msgid "ignore-parents"
msgstr ""

#. type: table
#: zsh.texi:22554
msgid ""
"The style is tested without a tag by the function completing pathnames in "
"order to determine whether to ignore the names of directories already "
"mentioned in the current word, or the name of the current working "
"directory.  The value must include one or both of the following strings:"
msgstr ""

#. type: t{#1}
#: zsh.texi:22557 zsh.texi:36195
#, no-wrap
msgid "parent"
msgstr ""

#. type: table
#: zsh.texi:22561
msgid ""
"The name of any directory whose path is already contained in the word on the "
"line is ignored.  For example, when completing after @t{foo/../}, the "
"directory @t{foo} will not be considered a valid completion."
msgstr ""

#. type: table
#: zsh.texi:22566
msgid ""
"The name of the current working directory will not be completed; hence, for "
"example, completion after @t{../} will not use the name of the current "
"directory."
msgstr ""

#. type: table
#: zsh.texi:22571
msgid "In addition, the value may include one or both of:"
msgstr ""

#. type: t{#1}
#: zsh.texi:22574
#, no-wrap
msgid ".."
msgstr ""

#. type: table
#: zsh.texi:22577
msgid ""
"Ignore the specified directories only when the word on the line contains the "
"substring `@t{../}'."
msgstr ""

#. type: t{#1}
#: zsh.texi:22578
#, no-wrap
msgid "directory"
msgstr ""

#. type: table
#: zsh.texi:22581
msgid ""
"Ignore the specified directories only when names of directories are "
"completed, not when completing names of files."
msgstr ""

#. type: table
#: zsh.texi:22588
msgid ""
"Excluded values act in a similar fashion to values of the "
"@t{ignored-patterns} style, so they can be restored to consideration by the "
"@t{_ignored} completer."
msgstr ""

#. type: kindex
#: zsh.texi:22589
#, no-wrap
msgid "ignored-patterns, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22590
#, no-wrap
msgid "ignored-patterns"
msgstr ""

#. type: table
#: zsh.texi:22596
msgid ""
"A list of patterns; any trial completion matching one of the patterns will "
"be excluded from consideration.  The @t{_ignored} completer can appear in "
"the list of completers to restore the ignored matches.  This is a more "
"configurable version of the shell parameter @t{$fignore}."
msgstr ""

#. type: table
#: zsh.texi:22602
msgid ""
"Note that the @t{EXTENDED_GLOB} option is set during the execution of "
"completion functions, so the characters `@t{#}', `@t{~}' and `@t{^}' have "
"special meanings in the patterns."
msgstr ""

#. type: kindex
#: zsh.texi:22603
#, no-wrap
msgid "insert, completion style"
msgstr ""

#. type: table
#: zsh.texi:22608
msgid ""
"This style is used by the @t{_all_matches} completer to decide whether to "
"insert the list of all matches unconditionally instead of adding the list as "
"another match."
msgstr ""

#. type: kindex
#: zsh.texi:22609
#, no-wrap
msgid "insert-ids, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22610
#, no-wrap
msgid "insert-ids"
msgstr ""

#. type: table
#: zsh.texi:22618
msgid ""
"When completing process IDs, for example as arguments to the @t{kill} and "
"@t{wait} builtins the name of a command may be converted to the appropriate "
"process ID.  A problem arises when the process name typed is not unique.  By "
"default (or if this style is set explicitly to `@t{menu}') the name will be "
"converted immediately to a set of possible IDs, and menu completion will be "
"started to cycle through them."
msgstr ""

#. type: table
#: zsh.texi:22626
msgid ""
"If the value of the style is `@t{single}', the shell will wait until the "
"user has typed enough to make the command unique before converting the name "
"to an ID; attempts at completion will be unsuccessful until that point.  If "
"the value is any other string, menu completion will be started when the "
"string typed by the user is longer than the common prefix to the "
"corresponding IDs."
msgstr ""

#. type: kindex
#: zsh.texi:22627
#, no-wrap
msgid "insert-sections, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22628
#, no-wrap
msgid "insert-sections"
msgstr ""

#. type: table
#: zsh.texi:22633
msgid ""
"This style is used with tags of the form `@t{manuals.}@var{X}' when "
"completing names of manual pages. If set and the @var{X} in the tag name "
"matches the section number of the page being completed, the section number "
"is inserted along with the page name. For example, given"
msgstr ""

#. type: example
#: zsh.texi:22637
#, no-wrap
msgid "zstyle ':completion:*:manuals.*' insert-sections true\n"
msgstr ""

#. type: table
#: zsh.texi:22641
msgid "@t{man ssh_<TAB>} may be completed to @t{man 5 ssh_config}."
msgstr ""

#. type: table
#: zsh.texi:22646
msgid ""
"The value may also be set to one of `@t{prepend}', or `@t{suffix}'.  "
"`@t{prepend}' behaves the same as `true' as in the above example, while "
"`@t{suffix}' would complete @t{man ssh_<TAB>} as @t{man ssh_config.5}."
msgstr ""

#. type: table
#: zsh.texi:22652
msgid ""
"This is especially useful in conjunction with @t{separate-sections}, as it "
"ensures that the page requested of @t{man} corresponds to the one displayed "
"in the completion listing when there are multiple pages with the same name "
"(e.g., @t{printf(1)} and @t{printf(3)})."
msgstr ""

#. type: table
#: zsh.texi:22655 zsh.texi:23405 zsh.texi:23508
msgid "The default for this style is `false'."
msgstr ""

#. type: kindex
#: zsh.texi:22656 zsh.texi:41241
#, no-wrap
msgid "insert-tab, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22657 zsh.texi:41242
#, no-wrap
msgid "insert-tab"
msgstr ""

#. type: table
#: zsh.texi:22662
msgid ""
"If this is set to `true', the completion system will insert a TAB character "
"(assuming that was used to start completion) instead of performing "
"completion when there is no non-blank character to the left of the cursor.  "
"If it is set to `false', completion will be done even there."
msgstr ""

#. type: table
#: zsh.texi:22673
msgid ""
"The value may also contain the substrings `@t{pending}' or "
"`@t{pending=}@var{val}'.  In this case, the typed character will be inserted "
"instead of starting completion when there is unprocessed input pending.  If "
"a @var{val} is given, completion will not be done if there are at least that "
"many characters of unprocessed input.  This is often useful when pasting "
"characters into a terminal.  Note however, that it relies on the "
"@t{$PENDING} special parameter from the @t{zsh/zle} module being set "
"properly which is not guaranteed on all platforms."
msgstr ""

#. type: table
#: zsh.texi:22677
msgid ""
"The default value of this style is `true' except for completion within "
"@t{vared} builtin command where it is `false'."
msgstr ""

#. type: kindex
#: zsh.texi:22678
#, no-wrap
msgid "insert-unambiguous, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22679
#, no-wrap
msgid "insert-unambiguous"
msgstr ""

#. type: table
#: zsh.texi:22686
msgid ""
"This is used by the @t{_match} and @t{_approximate} completers.  These "
"completers are often used with menu completion since the word typed may bear "
"little resemblance to the final completion.  However, if this style is "
"`true', the completer will start menu completion only if it could find no "
"unambiguous initial string at least as long as the original string typed by "
"the user."
msgstr ""

#. type: table
#: zsh.texi:22692
msgid ""
"In the case of the @t{_approximate} completer, the completer field in the "
"context will already have been set to one of @t{correct-}@var{num} or "
"@t{approximate-}@var{num}, where @var{num} is the number of errors that were "
"accepted."
msgstr ""

#. type: table
#: zsh.texi:22697
msgid ""
"In the case of the @t{_match} completer, the style may also be set to the "
"string `@t{pattern}'.  Then the pattern on the line is left unchanged if it "
"does not match unambiguously."
msgstr ""

#. type: kindex
#: zsh.texi:22698
#, no-wrap
msgid "keep-prefix, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22699
#, no-wrap
msgid "keep-prefix"
msgstr ""

#. type: table
#: zsh.texi:22708
msgid ""
"This style is used by the @t{_expand} completer.  If it is `true', the "
"completer will try to keep a prefix containing a tilde or parameter "
"expansion.  Hence, for example, the string `@t{~/f*}' would be expanded to "
"`@t{~/foo}' instead of `@t{/home/user/foo}'.  If the style is set to "
"`@t{changed}' (the default), the prefix will only be left unchanged if there "
"were other changes between the expanded words and the original word from the "
"command line.  Any other value forces the prefix to be expanded "
"unconditionally."
msgstr ""

#. type: table
#: zsh.texi:22713
msgid ""
"The behaviour of @t{_expand} when this style is `true' is to cause "
"@t{_expand} to give up when a single expansion with the restored prefix is "
"the same as the original; hence any remaining completers may be called."
msgstr ""

#. type: t{#1}
#: zsh.texi:22714 zsh.texi:22715
#, no-wrap
msgid "known-hosts-files"
msgstr ""

#. type: table
#: zsh.texi:22720
msgid ""
"This style should contain a list of files to search for host names and (if "
"the @t{use-ip} style is set) IP addresses in a format compatible with ssh "
"@t{known_hosts} files.  If it is not set, the files "
"@t{/etc/ssh/ssh_known_hosts} and @t{~/.ssh/known_hosts} are used."
msgstr ""

#. type: kindex
#: zsh.texi:22721
#, no-wrap
msgid "last-prompt, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22722
#, no-wrap
msgid "last-prompt"
msgstr ""

#. type: table
#: zsh.texi:22731
msgid ""
"This is a more flexible form of the @t{ALWAYS_LAST_PROMPT} option.  If it is "
"`true', the completion system will try to return the cursor to the previous "
"command line after displaying a completion list.  It is tested for all tags "
"valid for the current completion, then the @t{default} tag.  The cursor will "
"be moved back to the previous line if this style is `true' for all types of "
"match.  Note that unlike the @t{ALWAYS_LAST_PROMPT} option this is "
"independent of the numeric argument."
msgstr ""

#. type: kindex
#: zsh.texi:22732
#, no-wrap
msgid "list, completion style"
msgstr ""

#. type: table
#: zsh.texi:22739
msgid ""
"This style is used by the @t{_history_complete_word} bindable command.  If "
"it is set to `true' it has no effect.  If it is set to `false' matches will "
"not be listed.  This overrides the setting of the options controlling "
"listing behaviour, in particular @t{AUTO_LIST}.  The context always starts "
"with `@t{:completion:history-words}'."
msgstr ""

#. type: kindex
#: zsh.texi:22740
#, no-wrap
msgid "list-colors, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22741
#, no-wrap
msgid "list-colors"
msgstr ""

#. type: table
#: zsh.texi:22746
msgid ""
"If the @t{zsh/complist} module is loaded, this style can be used to set "
"color specifications.  This mechanism replaces the use of the @t{ZLS_COLORS} "
"and @t{ZLS_COLOURS} parameters described in @ref{The zsh/complist Module}, "
"but the syntax is the same."
msgstr ""

#. type: table
#: zsh.texi:22753
msgid ""
"If this style is set for the @t{default} tag, the strings in the value are "
"taken as specifications that are to be used everywhere.  If it is set for "
"other tags, the specifications are used only for matches of the type "
"described by the tag.  For this to work best, the @t{group-name} style must "
"be set to an empty string."
msgstr ""

#. type: table
#: zsh.texi:22759
msgid ""
"In addition to setting styles for specific tags, it is also possible to use "
"group names specified explicitly by the @t{group-name} tag together with the "
"`@t{(group)}' syntax allowed by the @t{ZLS_COLORS} and @t{ZLS_COLOURS} "
"parameters and simply using the @t{default} tag."
msgstr ""

#. type: table
#: zsh.texi:22763
msgid ""
"It is possible to use any color specifications already set up for the GNU "
"version of the @t{ls} command:"
msgstr ""

#. type: example
#: zsh.texi:22768
#, no-wrap
msgid ""
"zstyle ':completion:*:default' list-colors \\ \n"
"       $@{(s.:.)LS_COLORS@}\n"
msgstr ""

#. type: table
#: zsh.texi:22773
msgid ""
"The default colors are the same as for the GNU @t{ls} command and can be "
"obtained by setting the style to an empty string (i.e. @t{@value{dsq}})."
msgstr ""

#. type: kindex
#: zsh.texi:22774
#, no-wrap
msgid "list-dirs-first, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22775
#, no-wrap
msgid "list-dirs-first"
msgstr ""

#. type: table
#: zsh.texi:22780
msgid ""
"This is used by file completion and corresponds to a particular setting of "
"the @t{file-patterns} style.  If set, the default directories to be "
"completed are listed separately from and before completion for other files."
msgstr ""

#. type: kindex
#: zsh.texi:22781
#, no-wrap
msgid "list-grouped, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22782
#, no-wrap
msgid "list-grouped"
msgstr ""

#. type: table
#: zsh.texi:22789
msgid ""
"If this style is `true' (the default), the completion system will try to "
"make certain completion listings more compact by grouping matches.  For "
"example, options for commands that have the same description (shown when the "
"@t{verbose} style is set to `true') will appear as a single entry.  However, "
"menu selection can be used to cycle through all the matches."
msgstr ""

#. type: kindex
#: zsh.texi:22790
#, no-wrap
msgid "list-packed, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22791
#, no-wrap
msgid "list-packed"
msgstr ""

#. type: table
#: zsh.texi:22796
msgid ""
"This is tested for each tag valid in the current context as well as the "
"@t{default} tag.  If it is set to `true', the corresponding matches appear "
"in listings as if the @t{LIST_PACKED} option were set.  If it is set to "
"`false', they are listed normally."
msgstr ""

#. type: kindex
#: zsh.texi:22797
#, no-wrap
msgid "list-prompt, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22798
#, no-wrap
msgid "list-prompt"
msgstr ""

#. type: table
#: zsh.texi:22805
msgid ""
"If this style is set for the @t{default} tag, completion lists that don't "
"fit on the screen can be scrolled (see @ref{The zsh/complist Module}).  The "
"value, if not the empty string, will be displayed after every screenful and "
"the shell will prompt for a key press; if the style is set to the empty "
"string, a default prompt will be used."
msgstr ""

#. type: table
#: zsh.texi:22823
msgid ""
"The value may contain the escape sequences: `@t{%l}' or `@t{%L}', which will "
"be replaced by the number of the last line displayed and the total number of "
"lines; `@t{%m}' or `@t{%M}', the number of the last match shown and the "
"total number of matches; and `@t{%p}' and `@t{%P}', `@t{Top}' when at the "
"beginning of the list, `@t{Bottom}' when at the end and the position shown "
"as a percentage of the total length otherwise.  In each case the form with "
"the uppercase letter will be replaced by a string of fixed width, padded to "
"the right with spaces, while the lowercase form will be replaced by a "
"variable width string.  As in other prompt strings, the escape sequences "
"`@t{%S}', `@t{%s}', `@t{%B}', `@t{%b}', `@t{%U}', `@t{%u}' for entering and "
"leaving the display modes standout, bold and underline, and `@t{%F}', "
"`@t{%f}', `@t{%K}', `@t{%k}' for changing the foreground background colour, "
"are also available, as is the form `@t{%@{}...@t{%@}}' for enclosing escape "
"sequences which display with zero (or, with a numeric argument, some other) "
"width."
msgstr ""

#. type: table
#: zsh.texi:22827
msgid ""
"After deleting this prompt the variable @t{LISTPROMPT} should be unset for "
"the removal to take effect."
msgstr ""

#. type: kindex
#: zsh.texi:22828
#, no-wrap
msgid "list-rows-first, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22829
#, no-wrap
msgid "list-rows-first"
msgstr ""

#. type: table
#: zsh.texi:22833
msgid ""
"This style is tested in the same way as the @t{list-packed} style and "
"determines whether matches are to be listed in a rows-first fashion as if "
"the @t{LIST_ROWS_FIRST} option were set."
msgstr ""

#. type: kindex
#: zsh.texi:22834
#, no-wrap
msgid "list-separator, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22835
#, no-wrap
msgid "list-separator"
msgstr ""

#. type: table
#: zsh.texi:22839
msgid ""
"The value of this style is used in completion listing to separate the string "
"to complete from a description when possible (e.g. when completing "
"options).  It defaults to `@t{-}@t{-}' (two hyphens)."
msgstr ""

#. type: kindex
#: zsh.texi:22840
#, no-wrap
msgid "list-suffixes, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22841
#, no-wrap
msgid "list-suffixes"
msgstr ""

#. type: table
#: zsh.texi:22846
msgid ""
"This style is used by the function that completes filenames.  If it is "
"`true', and completion is attempted on a string containing multiple "
"partially typed pathname components, all ambiguous components will be "
"shown.  Otherwise, completion stops at the first ambiguous component."
msgstr ""

#. type: kindex
#: zsh.texi:22847
#, no-wrap
msgid "local, completion style"
msgstr ""

#. type: table
#: zsh.texi:22855
msgid ""
"This is for use with functions that complete URLs for which the "
"corresponding files are available directly from the file system.  Its value "
"should consist of three strings: a hostname, the path to the default web "
"pages for the server, and the directory name used by a user placing web "
"pages within their home area."
msgstr ""

#. type: example
#: zsh.texi:22863
#, no-wrap
msgid ""
"zstyle ':completion:*' local toast \\ \n"
"    /var/http/public/toast public_html\n"
msgstr ""

#. type: table
#: zsh.texi:22870
msgid ""
"Completion after `@t{http://toast/stuff/}' will look for files in the "
"directory @t{/var/http/public/toast/stuff}, while completion after "
"`@t{http://toast/~yousir/}' will look for files in the directory "
"@t{~yousir/public_html}."
msgstr ""

#. type: kindex
#: zsh.texi:22871
#, no-wrap
msgid "mail-directory, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22872
#, no-wrap
msgid "mail-directory"
msgstr ""

#. type: table
#: zsh.texi:22875
msgid ""
"If set, zsh will assume that mailbox files can be found in the directory "
"specified.  It defaults to `@t{~/Mail}'."
msgstr ""

#. type: kindex
#: zsh.texi:22876
#, no-wrap
msgid "match-original, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22877
#, no-wrap
msgid "match-original"
msgstr ""

#. type: table
#: zsh.texi:22885
msgid ""
"This is used by the @t{_match} completer.  If it is set to @t{only}, "
"@t{_match} will try to generate matches without inserting a `@t{*}' at the "
"cursor position.  If set to any other non-empty value, it will first try to "
"generate matches without inserting the `@t{*}' and if that yields no "
"matches, it will try again with the `@t{*}' inserted.  If it is unset or set "
"to the empty string, matching will only be performed with the `@t{*}' "
"inserted."
msgstr ""

#. type: kindex
#: zsh.texi:22886
#, no-wrap
msgid "matcher, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22887
#, no-wrap
msgid "matcher"
msgstr ""

#. type: table
#: zsh.texi:22893
msgid ""
"This style is tested separately for each tag valid in the current context.  "
"Its value is placed before any match specifications given by the "
"@t{matcher-list} style so can override them via the use of an @t{x:} "
"specification.  The value should be in the form described in @ref{Completion "
"Matching Control}.  For examples of this, see the description of the "
"@t{tag-order} style."
msgstr ""

#. type: table
#: zsh.texi:22897
msgid ""
"For notes comparing the use of this and the @t{matcher-list} style, see "
"under the description of the @t{tag-order} style."
msgstr ""

#. type: kindex
#: zsh.texi:22898
#, no-wrap
msgid "matcher-list, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22899
#, no-wrap
msgid "matcher-list"
msgstr ""

#. type: table
#: zsh.texi:22906
msgid ""
"This style can be set to a list of match specifications that are to be "
"applied everywhere. Match specifications are described in @ref{Completion "
"Matching Control}.  The completion system will try them one after another "
"for each completer selected.  For example, to try first simple completion "
"and, if that generates no matches, case-insensitive completion:"
msgstr ""

#. type: example
#: zsh.texi:22910
#, no-wrap
msgid "zstyle ':completion:*' matcher-list @value{dsq} 'm:@{a-zA-Z@}=@{A-Za-z@}'\n"
msgstr ""

#. type: table
#: zsh.texi:22917
msgid ""
"By default each specification replaces the previous one; however, if a "
"specification is prefixed with @t{+}, it is added to the existing list.  "
"Hence it is possible to create increasingly general specifications without "
"repetition:"
msgstr ""

#. type: example
#: zsh.texi:22922
#, no-wrap
msgid ""
"zstyle ':completion:*' matcher-list \\ \n"
"       @value{dsq} '+m:@{a-z@}=@{A-Z@}' '+m:@{A-Z@}=@{a-z@}'\n"
msgstr ""

#. type: table
#: zsh.texi:22931
msgid ""
"It is possible to create match specifications valid for particular "
"completers by using the third field of the context.  This applies only to "
"completers that override the global matcher-list, which as of this writing "
"includes only @t{_prefix} and @t{_ignored}.  For example, to use the "
"completers @t{_complete} and @t{_prefix} but allow case-insensitive "
"completion only with @t{_complete}:"
msgstr ""

#. type: example
#: zsh.texi:22937
#, no-wrap
msgid ""
"zstyle ':completion:*' completer _complete _prefix\n"
"zstyle ':completion:*:complete:*:*:*' matcher-list \\ \n"
"       @value{dsq} 'm:@{a-zA-Z@}=@{A-Za-z@}'\n"
msgstr ""

#. type: table
#: zsh.texi:22946
msgid ""
"User-defined names, as explained for the @t{completer} style, are "
"available.  This makes it possible to try the same completer more than once "
"with different match specifications each time.  For example, to try normal "
"completion without a match specification, then normal completion with "
"case-insensitive matching, then correction, and finally partial-word "
"completion:"
msgstr ""

#. type: example
#: zsh.texi:22955
#, no-wrap
msgid ""
"zstyle ':completion:*' completer \\ \n"
"    _complete _correct _complete:foo\n"
"zstyle ':completion:*:complete:*:*:*' matcher-list \\ \n"
"    @value{dsq} 'm:@{a-zA-Z@}=@{A-Za-z@}'\n"
"zstyle ':completion:*:foo:*:*:*' matcher-list \\ \n"
"    'm:@{a-zA-Z@}=@{A-Za-z@} r:|[-_./]=* r:|=*'\n"
msgstr ""

#. type: table
#: zsh.texi:22963
msgid ""
"If the style is unset in any context no match specification is applied.  "
"Note also that some completers such as @t{_correct} and @t{_approximate} do "
"not use the match specifications at all, though these completers will only "
"ever be called once even if the @t{matcher-list} contains more than one "
"element."
msgstr ""

#. type: table
#: zsh.texi:22971
msgid ""
"Where multiple specifications are useful, note that the @emph{entire} "
"completion is done for each element of @t{matcher-list}, which can quickly "
"reduce the shell's performance.  As a rough rule of thumb, one to three "
"strings will give acceptable performance.  On the other hand, putting "
"multiple space-separated values into the same string does not have an "
"appreciable impact on performance."
msgstr ""

#. type: table
#: zsh.texi:22977
msgid ""
"If there is no current matcher or it is empty, and the option "
"@t{NO_CASE_GLOB} is in effect, the matching for files is performed "
"case-insensitively in any case.  However, any matcher must explicitly "
"specify case-insensitive matching if that is required."
msgstr ""

#. type: table
#: zsh.texi:22981
msgid ""
"For notes comparing the use of this and the @t{matcher} style, see under the "
"description of the @t{tag-order} style."
msgstr ""

#. type: kindex
#: zsh.texi:22982
#, no-wrap
msgid "max-errors, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:22983
#, no-wrap
msgid "max-errors"
msgstr ""

#. type: table
#: zsh.texi:22989
msgid ""
"This is used by the @t{_approximate} and @t{_correct} completer functions to "
"determine the maximum number of errors to allow.  The completer will try to "
"generate completions by first allowing one error, then two errors, and so "
"on, until either a match or matches were found or the maximum number of "
"errors given by this style has been reached."
msgstr ""

#. type: table
#: zsh.texi:22994
msgid ""
"If the value for this style contains the string `@t{numeric}', the completer "
"function will take any numeric argument as the maximum number of errors "
"allowed. For example, with"
msgstr ""

#. type: example
#: zsh.texi:22998
#, no-wrap
msgid "zstyle ':completion:*:approximate:::' max-errors 2 numeric\n"
msgstr ""

#. type: table
#: zsh.texi:23005
msgid ""
"two errors are allowed if no numeric argument is given, but with a numeric "
"argument of six (as in `@t{ESC-6 TAB}'), up to six errors are accepted.  "
"Hence with a value of `@t{0 numeric}', no correcting completion will be "
"attempted unless a numeric argument is given."
msgstr ""

#. type: table
#: zsh.texi:23014
msgid ""
"If the value contains the string `@t{not-numeric}', the completer will "
"@emph{not} try to generate corrected completions when given a numeric "
"argument, so in this case the number given should be greater than zero.  For "
"example, `@t{2 not-numeric}' specifies that correcting completion with two "
"errors will usually be performed, but if a numeric argument is given, "
"correcting completion will not be performed."
msgstr ""

#. type: table
#: zsh.texi:23017
msgid "The default value for this style is `@t{2 numeric}'."
msgstr ""

#. type: kindex
#: zsh.texi:23018
#, no-wrap
msgid "max-matches-width, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23019
#, no-wrap
msgid "max-matches-width"
msgstr ""

#. type: table
#: zsh.texi:23025
msgid ""
"This style is used to determine the trade off between the width of the "
"display used for matches and the width used for their descriptions when the "
"@t{verbose} style is in effect.  The value gives the number of display "
"columns to reserve for the matches.  The default is half the width of the "
"screen."
msgstr ""

#. type: table
#: zsh.texi:23031
msgid ""
"This has the most impact when several matches have the same description and "
"so will be grouped together.  Increasing the style will allow more matches "
"to be grouped together; decreasing it will allow more of the description to "
"be visible."
msgstr ""

#. type: kindex
#: zsh.texi:23032
#, no-wrap
msgid "menu, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23033
#, no-wrap
msgid "menu"
msgstr ""

#. type: table
#: zsh.texi:23037
msgid ""
"If this is `true' in the context of any of the tags defined for the current "
"completion menu completion will be used.  The value for a specific tag will "
"take precedence over that for the `@t{default}' tag."
msgstr ""

#. type: table
#: zsh.texi:23042
msgid ""
"If none of the values found in this way is `true' but at least one is set to "
"`@t{auto}', the shell behaves as if the @t{AUTO_MENU} option is set."
msgstr ""

#. type: table
#: zsh.texi:23047
msgid ""
"If one of the values is explicitly set to `false', menu completion will be "
"explicitly turned off, overriding the @t{MENU_COMPLETE} option and other "
"settings."
msgstr ""

#. type: table
#: zsh.texi:23058
msgid ""
"In the form `@t{yes=}@var{num}', where `@t{yes}' may be any of the `true' "
"values (`@t{yes}', `@t{true}', `@t{on}' and `@t{1}'), menu completion will "
"be turned on if there are at least @var{num} matches.  In the form "
"`@t{yes=long}', menu completion will be turned on if the list does not fit "
"on the screen.  This does not activate menu completion if the widget "
"normally only lists completions, but menu completion can be activated in "
"that case with the value `@t{yes=long-list}' (Typically, the value "
"`@t{select=long-list}' described later is more useful as it provides control "
"over scrolling.)"
msgstr ""

#. type: table
#: zsh.texi:23062
msgid ""
"Similarly, with any of the `false' values (as in `@t{no=10}'), menu "
"completion will @emph{not} be used if there are @var{num} or more matches."
msgstr ""

#. type: table
#: zsh.texi:23067
msgid ""
"The value of this widget also controls menu selection, as implemented by the "
"@t{zsh/complist} module.  The following values may appear either alongside "
"or instead of the values above."
msgstr ""

#. type: table
#: zsh.texi:23071
msgid ""
"If the value contains the string `@t{select}', menu selection will be "
"started unconditionally."
msgstr ""

#. type: table
#: zsh.texi:23076
msgid ""
"In the form `@t{select=}@var{num}', menu selection will only be started if "
"there are at least @var{num} matches.  If the values for more than one tag "
"provide a number, the smallest number is taken."
msgstr ""

#. type: table
#: zsh.texi:23080
msgid ""
"Menu selection can be turned off explicitly by defining a value containing "
"the string`@t{no-select}'."
msgstr ""

#. type: table
#: zsh.texi:23086
msgid ""
"It is also possible to start menu selection only if the list of matches does "
"not fit on the screen by using the value `@t{select=long}'.  To start menu "
"selection even if the current widget only performs listing, use the value "
"`@t{select=long-list}'."
msgstr ""

#. type: table
#: zsh.texi:23092
msgid ""
"To turn on menu completion or menu selection when there are a certain number "
"of matches @emph{or} the list of matches does not fit on the screen, both of "
"`@t{yes=}' and `@t{select=}' may be given twice, once with a number and once "
"with `@t{long}' or `@t{long-list}'."
msgstr ""

#. type: table
#: zsh.texi:23101
msgid ""
"Finally, it is possible to activate two special modes of menu selection.  "
"The word `@t{interactive}' in the value causes interactive mode to be "
"entered immediately when menu selection is started; see @ref{The "
"zsh/complist Module} for a description of interactive mode.  Including the "
"string `@t{search}' does the same for incremental search mode.  To select "
"backward incremental search, include the string `@t{search-backward}'."
msgstr ""

#. type: kindex
#: zsh.texi:23102
#, no-wrap
msgid "muttrc, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23103
#, no-wrap
msgid "muttrc"
msgstr ""

#. type: table
#: zsh.texi:23106
msgid ""
"If set, gives the location of the mutt configuration file.  It defaults to "
"`@t{~/.muttrc}'."
msgstr ""

#. type: kindex
#: zsh.texi:23107
#, no-wrap
msgid "numbers, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23108
#, no-wrap
msgid "numbers"
msgstr ""

#. type: table
#: zsh.texi:23115
msgid ""
"This is used with the @t{jobs} tag.  If it is `true', the shell will "
"complete job numbers instead of the shortest unambiguous prefix of the job "
"command text.  If the value is a number, job numbers will only be used if "
"that many words from the job descriptions are required to resolve "
"ambiguities.  For example, if the value is `@t{1}', strings will only be "
"used if all jobs differ in the first word on their command lines."
msgstr ""

#. type: kindex
#: zsh.texi:23116
#, no-wrap
msgid "old-list, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23117
#, no-wrap
msgid "old-list"
msgstr ""

#. type: table
#: zsh.texi:23129
msgid ""
"This is used by the @t{_oldlist} completer.  If it is set to `@t{always}', "
"then standard widgets which perform listing will retain the current list of "
"matches, however they were generated; this can be turned off explicitly with "
"the value `@t{never}', giving the behaviour without the @t{_oldlist} "
"completer.  If the style is unset, or any other value, then the existing "
"list of completions is displayed if it is not already; otherwise, the "
"standard completion list is generated; this is the default behaviour of "
"@t{_oldlist}.  However, if there is an old list and this style contains the "
"name of the completer function that generated the list, then the old list "
"will be used even if it was generated by a widget which does not do listing."
msgstr ""

#. type: table
#: zsh.texi:23137
msgid ""
"For example, suppose you type @t{^Xc} to use the @t{_correct_word} widget, "
"which generates a list of corrections for the word under the cursor.  "
"Usually, typing @t{^D} would generate a standard list of completions for the "
"word on the command line, and show that.  With @t{_oldlist}, it will instead "
"show the list of corrections already generated."
msgstr ""

#. type: table
#: zsh.texi:23146
msgid ""
"As another example consider the @t{_match} completer: with the "
"@t{insert-unambiguous} style set to `true' it inserts only a common prefix "
"string, if there is any.  However, this may remove parts of the original "
"pattern, so that further completion could produce more matches than on the "
"first attempt.  By using the @t{_oldlist} completer and setting this style "
"to @t{_match}, the list of matches generated on the first attempt will be "
"used again."
msgstr ""

#. type: kindex
#: zsh.texi:23147
#, no-wrap
msgid "old-matches, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23148
#, no-wrap
msgid "old-matches"
msgstr ""

#. type: table
#: zsh.texi:23155
msgid ""
"This is used by the @t{_all_matches} completer to decide if an old list of "
"matches should be used if one exists.  This is selected by one of the `true' "
"values or by the string `@t{only}'.  If the value is `@t{only}', "
"@t{_all_matches} will only use an old list and won't have any effect on the "
"list of matches currently being generated."
msgstr ""

#. type: table
#: zsh.texi:23161
msgid ""
"If this style is set it is generally unwise to call the @t{_all_matches} "
"completer unconditionally.  One possible use is for either this style or the "
"@t{completer} style to be defined with the @t{-e} option to @t{zstyle} to "
"make the style conditional."
msgstr ""

#. type: kindex
#: zsh.texi:23162
#, no-wrap
msgid "old-menu, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23163
#, no-wrap
msgid "old-menu"
msgstr ""

#. type: table
#: zsh.texi:23172
msgid ""
"This is used by the @t{_oldlist} completer.  It controls how menu completion "
"behaves when a completion has already been inserted and the user types a "
"standard completion key such as @t{TAB}.  The default behaviour of "
"@t{_oldlist} is that menu completion always continues with the existing list "
"of completions.  If this style is set to `false', however, a new completion "
"is started if the old list was generated by a different completion command; "
"this is the behaviour without the @t{_oldlist} completer."
msgstr ""

#. type: table
#: zsh.texi:23179
msgid ""
"For example, suppose you type @t{^Xc} to generate a list of corrections, and "
"menu completion is started in one of the usual ways.  Usually, or with this "
"style set to `false', typing @t{TAB} at this point would start trying to "
"complete the line as it now appears.  With @t{_oldlist}, it instead "
"continues to cycle through the list of corrections."
msgstr ""

#. type: kindex
#: zsh.texi:23180
#, no-wrap
msgid "original, completion style"
msgstr ""

#. type: table
#: zsh.texi:23190
msgid ""
"This is used by the @t{_approximate} and @t{_correct} completers to decide "
"if the original string should be added as a possible completion.  Normally, "
"this is done only if there are at least two possible corrections, but if "
"this style is set to `true', it is always added.  Note that the style will "
"be examined with the completer field in the context name set to "
"@t{correct-}@var{num} or @t{approximate-}@var{num}, where @var{num} is the "
"number of errors that were accepted."
msgstr ""

#. type: kindex
#: zsh.texi:23191
#, no-wrap
msgid "packageset, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23192
#, no-wrap
msgid "packageset"
msgstr ""

#. type: table
#: zsh.texi:23196
msgid ""
"This style is used when completing arguments of the Debian `@t{dpkg}' "
"program.  It contains an override for the default package set for a given "
"context.  For example,"
msgstr ""

#. type: example
#: zsh.texi:23201
#, no-wrap
msgid ""
"zstyle ':completion:*:complete:dpkg:option--status-1:*' \\ \n"
"               packageset avail\n"
msgstr ""

#. type: table
#: zsh.texi:23206
msgid ""
"causes available packages, rather than only installed packages, to be "
"completed for `@t{dpkg -}@t{-status}'."
msgstr ""

#. type: kindex
#: zsh.texi:23207
#, no-wrap
msgid "path, completion style"
msgstr ""

#. type: table
#: zsh.texi:23214
msgid ""
"The function that completes color names uses this style with the @t{colors} "
"tag.  The value should be the pathname of a file containing color names in "
"the format of an X11 @t{rgb.txt} file.  If the style is not set but this "
"file is found in one of various standard locations it will be used as the "
"default."
msgstr ""

#. type: kindex
#: zsh.texi:23215
#, no-wrap
msgid "path-completion, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23216
#, no-wrap
msgid "path-completion"
msgstr ""

#. type: table
#: zsh.texi:23223
msgid ""
"This is used by filename completion.  By default, filename completion "
"examines all components of a path to see if there are completions of that "
"component.  For example, @t{/u/b/z} can be completed to @t{/usr/bin/zsh}.  "
"Explicitly setting this style to `false' inhibits this behaviour for path "
"components up to the @t{/} before the cursor; this overrides the setting of "
"@t{accept-exact-dirs}."
msgstr ""

#. type: table
#: zsh.texi:23230
msgid ""
"Even with the style set to `false', it is still possible to complete "
"multiple paths by setting the option @t{COMPLETE_IN_WORD} and moving the "
"cursor back to the first component in the path to be completed.  For "
"example, @t{/u/b/z} can be completed to @t{/usr/bin/zsh} if the cursor is "
"after the @t{/u}."
msgstr ""

#. type: kindex
#: zsh.texi:23231
#, no-wrap
msgid "pine-directory, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23232
#, no-wrap
msgid "pine-directory"
msgstr ""

#. type: table
#: zsh.texi:23236
msgid ""
"If set, specifies the directory containing PINE mailbox files.  There is no "
"default, since recursively searching this directory is inconvenient for "
"anyone who doesn't use PINE."
msgstr ""

#. type: kindex
#: zsh.texi:23237
#, no-wrap
msgid "ports, completion style"
msgstr ""

#. type: table
#: zsh.texi:23241
msgid ""
"A list of Internet service names (network ports) to complete.  If this is "
"not set, service names are taken from the file `@t{/etc/services}'."
msgstr ""

#. type: kindex
#: zsh.texi:23242
#, no-wrap
msgid "prefix-hidden, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23243
#, no-wrap
msgid "prefix-hidden"
msgstr ""

#. type: table
#: zsh.texi:23247
msgid ""
"This is used for certain completions which share a common prefix, for "
"example command options beginning with dashes.  If it is `true', the prefix "
"will not be shown in the list of matches."
msgstr ""

#. type: table
#: zsh.texi:23250
msgid "The default value for this style is `false'."
msgstr ""

#. type: kindex
#: zsh.texi:23251
#, no-wrap
msgid "prefix-needed, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23252
#, no-wrap
msgid "prefix-needed"
msgstr ""

#. type: table
#: zsh.texi:23256
msgid ""
"This style is also relevant for matches with a common prefix.  If it is set "
"to `true' this common prefix must be typed by the user to generate the "
"matches."
msgstr ""

#. type: table
#: zsh.texi:23260
msgid ""
"The style is applicable to the @t{options}, @t{signals}, @t{jobs}, "
"@t{functions}, and @t{parameters} completion tags."
msgstr ""

#. type: table
#: zsh.texi:23265
msgid ""
"For command options, this means that the initial `@t{-}', `@t{+}', or "
"`@t{-}@t{-}' must be typed explicitly before option names will be completed."
msgstr ""

#. type: table
#: zsh.texi:23269
msgid ""
"For signals, an initial `@t{-}' is required before signal names will be "
"completed."
msgstr ""

#. type: table
#: zsh.texi:23273
msgid "For jobs, an initial `@t{%}' is required before job names will be completed."
msgstr ""

#. type: table
#: zsh.texi:23278
msgid ""
"For function and parameter names, an initial `@t{_}' or `@t{.}' is required "
"before function or parameter names starting with those characters will be "
"completed."
msgstr ""

#. type: table
#: zsh.texi:23282
msgid ""
"The default value for this style is `false' for @t{function} and "
"@t{parameter} completions, and `true' otherwise."
msgstr ""

#. type: kindex
#: zsh.texi:23283
#, no-wrap
msgid "preserve-prefix, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23284
#, no-wrap
msgid "preserve-prefix"
msgstr ""

#. type: table
#: zsh.texi:23292
msgid ""
"This style is used when completing path names.  Its value should be a "
"pattern matching an initial prefix of the word to complete that should be "
"left unchanged under all circumstances.  For example, on some Unices an "
"initial `@t{//}' (double slash) has a special meaning; setting this style to "
"the string `@t{//}' will preserve it.  As another example, setting this "
"style to `@t{?:/}' under Cygwin would allow completion after `@t{a:/...}' "
"and so on."
msgstr ""

#. type: kindex
#: zsh.texi:23293
#, no-wrap
msgid "range, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23294
#, no-wrap
msgid "range"
msgstr ""

#. type: table
#: zsh.texi:23298
msgid ""
"This is used by the @t{_history} completer and the "
"@t{_history_complete_word} bindable command to decide which words should be "
"completed."
msgstr ""

#. type: table
#: zsh.texi:23302
msgid ""
"If it is a single number, only the last @var{N} words from the history will "
"be completed."
msgstr ""

#. type: table
#: zsh.texi:23309
msgid ""
"If it is a range of the form `@var{max}@t{:}@var{slice}', the last "
"@var{slice} words will be completed; then if that yields no matches, the "
"@var{slice} words before those will be tried and so on.  This process stops "
"either when at least one match has been found, or @var{max} words have been "
"tried."
msgstr ""

#. type: table
#: zsh.texi:23312
msgid "The default is to complete all words from the history at once."
msgstr ""

#. type: kindex
#: zsh.texi:23313
#, no-wrap
msgid "recursive-files, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23314
#, no-wrap
msgid "recursive-files"
msgstr ""

#. type: table
#: zsh.texi:23327
msgid ""
"If this style is set, its value is an array of patterns to be tested against "
"`@t{$PWD/}': note the trailing slash, which allows directories in the "
"pattern to be delimited unambiguously by including slashes on both sides.  "
"If an ordinary file completion fails and the word on the command line does "
"not yet have a directory part to its name, the style is retrieved using the "
"same tag as for the completion just attempted, then the elements tested "
"against @t{$PWD/} in turn.  If one matches, then the shell reattempts "
"completion by prepending the word on the command line with each directory in "
"the expansion of @t{**/*(/)} in turn.  Typically the elements of the style "
"will be set to restrict the number of directories beneath the current one to "
"a manageable number, for example `@t{*/.git/*}'."
msgstr ""

#. type: example
#: zsh.texi:23334
#, no-wrap
msgid "zstyle ':completion:*' recursive-files '*/zsh/*'\n"
msgstr ""

#. type: table
#: zsh.texi:23339
msgid ""
"If the current directory is @t{/home/pws/zsh/Src}, then @t{zle_tr<TAB>} can "
"be completed to @t{Zle/zle_tricky.c}."
msgstr ""

#. type: kindex
#: zsh.texi:23340
#, no-wrap
msgid "regular, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23341
#, no-wrap
msgid "regular"
msgstr ""

#. type: table
#: zsh.texi:23347
msgid ""
"This style is used by the @t{_expand_alias} completer and bindable command.  "
"If set to `true' (the default), regular aliases will be expanded but only in "
"command position.  If it is set to `false', regular aliases will never be "
"expanded.  If it is set to `@t{always}', regular aliases will be expanded "
"even if not in command position."
msgstr ""

#. type: kindex
#: zsh.texi:23348
#, no-wrap
msgid "rehash, completion style"
msgstr ""

#. type: table
#: zsh.texi:23355
msgid ""
"If this is set when completing external commands, the internal list (hash) "
"of commands will be updated for each search by issuing the @t{rehash} "
"command.  There is a speed penalty for this which is only likely to be "
"noticeable when directories in the path have slow file access."
msgstr ""

#. type: kindex
#: zsh.texi:23356
#, no-wrap
msgid "remote-access, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23357
#, no-wrap
msgid "remote-access"
msgstr ""

#. type: table
#: zsh.texi:23361
msgid ""
"If set to `false', certain commands will be prevented from making Internet "
"connections to retrieve remote information.  This includes the completion "
"for the @t{CVS} command."
msgstr ""

#. type: table
#: zsh.texi:23365
msgid ""
"It is not always possible to know if connections are in fact to a remote "
"site, so some may be prevented unnecessarily."
msgstr ""

#. type: kindex
#: zsh.texi:23366
#, no-wrap
msgid "remove-all-dups, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23367
#, no-wrap
msgid "remove-all-dups"
msgstr ""

#. type: table
#: zsh.texi:23371
msgid ""
"The @t{_history_complete_word} bindable command and the @t{_history} "
"completer use this to decide if all duplicate matches should be removed, "
"rather than just consecutive duplicates."
msgstr ""

#. type: kindex
#: zsh.texi:23372
#, no-wrap
msgid "select-prompt, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23373
#, no-wrap
msgid "select-prompt"
msgstr ""

#. type: table
#: zsh.texi:23380
msgid ""
"If this is set for the @t{default} tag, its value will be displayed during "
"menu selection (see the @t{menu} style above) when the completion list does "
"not fit on the screen as a whole.  The same escapes as for the "
"@t{list-prompt} style are understood, except that the numbers refer to the "
"match or line the mark is on.  A default prompt is used when the value is "
"the empty string."
msgstr ""

#. type: kindex
#: zsh.texi:23381
#, no-wrap
msgid "select-scroll, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23382
#, no-wrap
msgid "select-scroll"
msgstr ""

#. type: table
#: zsh.texi:23391
msgid ""
"This style is tested for the @t{default} tag and determines how a completion "
"list is scrolled during a menu selection (see the @t{menu} style above) when "
"the completion list does not fit on the screen as a whole.  If the value is "
"`@t{0}' (zero), the list is scrolled by half-screenfuls; if it is a positive "
"integer, the list is scrolled by the given number of lines; if it is a "
"negative number, the list is scrolled by a screenful minus the absolute "
"value of the given number of lines.  The default is to scroll by single "
"lines."
msgstr ""

#. type: kindex
#: zsh.texi:23392
#, no-wrap
msgid "separate-sections, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23393
#, no-wrap
msgid "separate-sections"
msgstr ""

#. type: table
#: zsh.texi:23402
msgid ""
"This style is used with the @t{manuals} tag when completing names of manual "
"pages.  If it is `true', entries for different sections are added separately "
"using tag names of the form `@t{manuals.}@var{X}', where @var{X} is the "
"section number.  When the @t{group-name} style is also in effect, pages from "
"different sections will appear separately.  This style is also used "
"similarly with the @t{words} style when completing words for the dict "
"command. It allows words from different dictionary databases to be added "
"separately. See also @t{insert-sections}."
msgstr ""

#. type: kindex
#: zsh.texi:23406
#, no-wrap
msgid "show-ambiguity, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23407
#, no-wrap
msgid "show-ambiguity"
msgstr ""

#. type: table
#: zsh.texi:23414
msgid ""
"If the @t{zsh/complist} module is loaded, this style can be used to "
"highlight the first ambiguous character in completion lists. The value is "
"either a color indication such as those supported by the @t{list-colors} "
"style or, with a value of `true', a default of underlining is selected. The "
"highlighting is only applied if the completion display strings correspond to "
"the actual matches."
msgstr ""

#. type: kindex
#: zsh.texi:23415
#, no-wrap
msgid "show-completer, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23416
#, no-wrap
msgid "show-completer"
msgstr ""

#. type: table
#: zsh.texi:23421
msgid ""
"Tested whenever a new completer is tried.  If it is `true', the completion "
"system outputs a progress message in the listing area showing what completer "
"is being tried.  The message will be overwritten by any output when "
"completions are found and is removed after completion is finished."
msgstr ""

#. type: kindex
#: zsh.texi:23422
#, no-wrap
msgid "single-ignored, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23423
#, no-wrap
msgid "single-ignored"
msgstr ""

#. type: table
#: zsh.texi:23429
msgid ""
"This is used by the @t{_ignored} completer when there is only one match.  If "
"its value is `@t{show}', the single match will be displayed but not "
"inserted.  If the value is `@t{menu}', then the single match and the "
"original string are both added as matches and menu completion is started, "
"making it easy to select either of them."
msgstr ""

#. type: kindex
#: zsh.texi:23430
#, no-wrap
msgid "sort, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23431
#, no-wrap
msgid "sort"
msgstr ""

#. type: table
#: zsh.texi:23433
msgid "This allows the standard ordering of matches to be overridden."
msgstr ""

#. type: table
#: zsh.texi:23439
msgid ""
"If its value is `@t{true}' or `@t{false}', sorting is enabled or disabled.  "
"Additionally the values associated with the `@t{-o}' option to @t{compadd} "
"can also be listed: @t{match}, @t{nosort}, @t{numeric}, @t{reverse}.  If it "
"is not set for the context, the standard behaviour of the calling widget is "
"used."
msgstr ""

#. type: table
#: zsh.texi:23443
msgid ""
"The style is tested first against the full context including the tag, and if "
"that fails to produce a value against the context without the tag."
msgstr ""

#. type: table
#: zsh.texi:23449
msgid ""
"In many cases where a calling widget explicitly selects a particular "
"ordering in lieu of the default, a value of `@t{true}' is not honoured.  An "
"example of where this is not the case is for command history where the "
"default of sorting matches chronologically may be overridden by setting the "
"style to `true'."
msgstr ""

#. type: table
#: zsh.texi:23456
msgid ""
"In the @t{_expand} completer, if it is set to `true', the expansions "
"generated will always be sorted.  If it is set to `@t{menu}', then the "
"expansions are only sorted when they are offered as single strings but not "
"in the string containing all possible expansions."
msgstr ""

#. type: kindex
#: zsh.texi:23457
#, no-wrap
msgid "special-dirs, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23458
#, no-wrap
msgid "special-dirs"
msgstr ""

#. type: table
#: zsh.texi:23463
msgid ""
"Normally, the completion code will not produce the directory names `@t{.}' "
"and `@t{..}' as possible completions.  If this style is set to `true', it "
"will add both `@t{.}' and `@t{..}' as possible completions; if it is set to "
"`@t{..}', only `@t{..}' will be added."
msgstr ""

#. type: table
#: zsh.texi:23468
msgid ""
"The following example sets @t{special-dirs} to `@t{..}' when the current "
"prefix is empty, is a single `@t{.}', or consists only of a path beginning "
"with `@t{../}'.  Otherwise the value is `false'."
msgstr ""

#. type: example
#: zsh.texi:23473
#, no-wrap
msgid ""
"zstyle -e ':completion:*' special-dirs \\ \n"
"   '[[ $PREFIX = (../)#(|.|..) ]] && reply=(..)'\n"
msgstr ""

#. type: kindex
#: zsh.texi:23475
#, no-wrap
msgid "squeeze-slashes, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23476
#, no-wrap
msgid "squeeze-slashes"
msgstr ""

#. type: table
#: zsh.texi:23481
msgid ""
"If set to `true', sequences of slashes in filename paths (for example in "
"`@t{foo//bar}') will be treated as a single slash.  This is the usual "
"behaviour of UNIX paths.  However, by default the file completion function "
"behaves as if there were a `@t{*}' between the slashes."
msgstr ""

#. type: kindex
#: zsh.texi:23482
#, no-wrap
msgid "stop, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23483
#, no-wrap
msgid "stop"
msgstr ""

#. type: table
#: zsh.texi:23490
msgid ""
"If set to `true', the @t{_history_complete_word} bindable command will stop "
"once when reaching the beginning or end of the history.  Invoking "
"@t{_history_complete_word} will then wrap around to the opposite end of the "
"history.  If this style is set to `false' (the default), "
"@t{_history_complete_word} will loop immediately as in a menu completion."
msgstr ""

#. type: kindex
#: zsh.texi:23491
#, no-wrap
msgid "strip-comments, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23492
#, no-wrap
msgid "strip-comments"
msgstr ""

#. type: table
#: zsh.texi:23497
msgid ""
"If set to `true', this style causes non-essential comment text to be removed "
"from completion matches.  Currently it is only used when completing e-mail "
"addresses where it removes any display name from the addresses, cutting them "
"down to plain @var{user@@host} form."
msgstr ""

#. type: kindex
#: zsh.texi:23498
#, no-wrap
msgid "subst-globs-only, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23499
#, no-wrap
msgid "subst-globs-only"
msgstr ""

#. type: table
#: zsh.texi:23505
msgid ""
"This is used by the @t{_expand} completer.  If it is set to `true', the "
"expansion will only be used if it resulted from globbing; hence, if "
"expansions resulted from the use of the @t{substitute} style described "
"below, but these were not further changed by globbing, the expansions will "
"be rejected."
msgstr ""

#. type: kindex
#: zsh.texi:23509
#, no-wrap
msgid "substitute, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23510
#, no-wrap
msgid "substitute"
msgstr ""

#. type: table
#: zsh.texi:23514
msgid ""
"This boolean style controls whether the @t{_expand} completer will first try "
"to expand all substitutions in the string (such as `@t{$(}@var{...}@t{)}' "
"and `@t{$@{}@var{...}@t{@}}')."
msgstr ""

#. type: table
#: zsh.texi:23517
msgid "The default is `true'."
msgstr ""

#. type: kindex
#: zsh.texi:23518
#, no-wrap
msgid "suffix, completion style"
msgstr ""

#. type: table
#: zsh.texi:23526
msgid ""
"This is used by the @t{_expand} completer if the word starts with a tilde or "
"contains a parameter expansion.  If it is set to `true', the word will only "
"be expanded if it doesn't have a suffix, i.e. if it is something like "
"`@t{~foo}' or `@t{$foo}' rather than `@t{~foo/}' or `@t{$foo/bar}', unless "
"that suffix itself contains characters eligible for expansion.  The default "
"for this style is `true'."
msgstr ""

#. type: kindex
#: zsh.texi:23527
#, no-wrap
msgid "tag-order, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23528
#, no-wrap
msgid "tag-order"
msgstr ""

#. type: table
#: zsh.texi:23531
msgid ""
"This provides a mechanism for sorting how the tags available in a particular "
"context will be used."
msgstr ""

#. type: table
#: zsh.texi:23537
msgid ""
"The values for the style are sets of space-separated lists of tags.  The "
"tags in each value will be tried at the same time; if no match is found, the "
"next value is used.  (See the @t{file-patterns} style for an exception to "
"this behavior.)"
msgstr ""

#. type: example
#: zsh.texi:23545
#, no-wrap
msgid ""
"zstyle ':completion:*:complete:-command-:*:*' tag-order \\ \n"
"    'commands functions'\n"
msgstr ""

#. type: table
#: zsh.texi:23551
msgid ""
"specifies that completion in command position first offers external commands "
"and shell functions.  Remaining tags will be tried if no completions are "
"found."
msgstr ""

#. type: table
#: zsh.texi:23555
msgid ""
"In addition to tag names, each string in the value may take one of the "
"following forms:"
msgstr ""

#. type: table
#: zsh.texi:23565
msgid ""
"If any value consists of only a hyphen, then @emph{only} the tags specified "
"in the other values are generated.  Normally all tags not explicitly "
"selected are tried last if the specified tags fail to generate any matches.  "
"This means that a single value consisting only of a single hyphen turns off "
"completion."
msgstr ""

#. type: item
#: zsh.texi:23566
#, no-wrap
msgid "@t{!} @var{tags}..."
msgstr ""

#. type: table
#: zsh.texi:23571
msgid ""
"A string starting with an exclamation mark specifies names of tags that are "
"@emph{not} to be used.  The effect is the same as if all other possible tags "
"for the context had been listed."
msgstr ""

#. type: item
#: zsh.texi:23572
#, no-wrap
msgid "@var{tag}@t{:}@var{label} ..."
msgstr ""

#. type: table
#: zsh.texi:23577
msgid ""
"Here, @var{tag} is one of the standard tags and @var{label} is an arbitrary "
"name.  Matches are generated as normal but the name @var{label} is used in "
"contexts instead of @var{tag}.  This is not useful in words starting with "
"@t{!}."
msgstr ""

#. type: table
#: zsh.texi:23584
msgid ""
"If the @var{label} starts with a hyphen, the @var{tag} is prepended to the "
"@var{label} to form the name used for lookup.  This can be used to make the "
"completion system try a certain tag more than once, supplying different "
"style settings for each attempt; see below for an example."
msgstr ""

#. type: item
#: zsh.texi:23585
#, no-wrap
msgid "@var{tag}@t{:}@var{label}@t{:}@var{description}"
msgstr ""

#. type: table
#: zsh.texi:23592
msgid ""
"As before, but @t{description} will replace the `@t{%d}' in the value of the "
"@t{format} style instead of the default description supplied by the "
"completion function.  Spaces in the description must be quoted with a "
"backslash.  A `@t{%d}' appearing in @var{description} is replaced with the "
"description given by the completion function."
msgstr ""

#. type: table
#: zsh.texi:23600
msgid ""
"In any of the forms above the tag may be a pattern or several patterns in "
"the form `@t{@{}@var{pat1}@t{,}@var{pat2...}@t{@}}'.  In this case all "
"matching tags will be used except for any given explicitly in the same "
"string."
msgstr ""

#. type: table
#: zsh.texi:23608
msgid ""
"One use of these features is to try one tag more than once, setting other "
"styles differently on each attempt, but still to use all the other tags "
"without having to repeat them all.  For example, to make completion of "
"function names in command position ignore all the completion functions "
"starting with an underscore the first time completion is tried:"
msgstr ""

#. type: example
#: zsh.texi:23615
#, no-wrap
msgid ""
"zstyle ':completion:*:*:-command-:*:*' tag-order \\ \n"
"    'functions:-non-comp *' functions\n"
"zstyle ':completion:*:functions-non-comp' \\ \n"
"    ignored-patterns '_*'\n"
msgstr ""

#. type: table
#: zsh.texi:23624
msgid ""
"On the first attempt, all tags will be offered but the @t{functions} tag "
"will be replaced by @t{functions-non-comp}.  The @t{ignored-patterns} style "
"is set for this tag to exclude functions starting with an underscore.  If "
"there are no matches, the second value of the @t{tag-order} style is used "
"which completes functions using the default tag, this time presumably "
"including all function names."
msgstr ""

#. type: table
#: zsh.texi:23627
msgid "The matches for one tag can be split into different groups.  For example:"
msgstr ""

#. type: example
#: zsh.texi:23640
#, no-wrap
msgid ""
"zstyle ':completion:*' tag-order \\ \n"
"    'options:-long:long\\ options\n"
"     options:-short:short\\ options\n"
"     options:-single-letter:single\\ letter\\ options'\n"
"zstyle ':completion:*:options-long' \\ \n"
"     ignored-patterns '[-+](|-|[^-]*)'\n"
"zstyle ':completion:*:options-short' \\ \n"
"     ignored-patterns '--*' '[-+]?'\n"
"zstyle ':completion:*:options-single-letter' \\ \n"
"     ignored-patterns '???*'\n"
msgstr ""

#. type: table
#: zsh.texi:23647
msgid ""
"With the @t{group-names} style set, options beginning with `@t{-}@t{-}', "
"options beginning with a single `@t{-}' or `@t{+}' but containing multiple "
"characters, and single-letter options will be displayed in separate groups "
"with different descriptions."
msgstr ""

#. type: table
#: zsh.texi:23657
msgid ""
"Another use of patterns is to try multiple match specifications one after "
"another.  The @t{matcher-list} style offers something similar, but it is "
"tested very early in the completion system and hence can't be set for single "
"commands nor for more specific contexts.  Here is how to try normal "
"completion without any match specification and, if that generates no "
"matches, try again with case-insensitive matching, restricting the effect to "
"arguments of the command @t{foo}:"
msgstr ""

#. type: example
#: zsh.texi:23662
#, no-wrap
msgid ""
"zstyle ':completion:*:*:foo:*:*' tag-order '*' '*:-case'\n"
"zstyle ':completion:*-case' matcher 'm:@{a-z@}=@{A-Z@}'\n"
msgstr ""

#. type: table
#: zsh.texi:23671
msgid ""
"First, all the tags offered when completing after @t{foo} are tried using "
"the normal tag name.  If that generates no matches, the second value of "
"@t{tag-order} is used, which tries all tags again except that this time each "
"has @t{-case} appended to its name for lookup of styles.  Hence this time "
"the value for the @t{matcher} style from the second call to @t{zstyle} in "
"the example is used to make completion case-insensitive."
msgstr ""

#. type: table
#: zsh.texi:23676
msgid ""
"It is possible to use the @t{-e} option of the @t{zstyle} builtin command to "
"specify conditions for the use of particular tags.  For example:"
msgstr ""

#. type: example
#: zsh.texi:23685
#, no-wrap
msgid ""
"zstyle -e '*:-command-:*' tag-order '\n"
"    if [[ -n $PREFIX$SUFFIX ]]; then\n"
"      reply=( )\n"
"    else\n"
"      reply=( - )\n"
"    fi'\n"
msgstr ""

#. type: table
#: zsh.texi:23697
msgid ""
"Completion in command position will be attempted only if the string typed so "
"far is not empty.  This is tested using the @t{PREFIX} special parameter; "
"see @ref{Completion Widgets} for a description of parameters which are "
"special inside completion widgets.  Setting @t{reply} to an empty array "
"provides the default behaviour of trying all tags at once; setting it to an "
"array containing only a hyphen disables the use of all tags and hence of all "
"completions."
msgstr ""

#. type: table
#: zsh.texi:23705
msgid ""
"If no @t{tag-order} style has been defined for a context, the strings "
"`@t{(|*-)argument-* (|*-)option-* values}' and `@t{options}' plus all tags "
"offered by the completion function will be used to provide a sensible "
"default behavior that causes arguments (whether normal command arguments or "
"arguments of options) to be completed before option names for most commands."
msgstr ""

#. type: kindex
#: zsh.texi:23706
#, no-wrap
msgid "urls, completion style"
msgstr ""

#. type: table
#: zsh.texi:23710
msgid "This is used together with the @t{urls} tag by functions completing URLs."
msgstr ""

#. type: table
#: zsh.texi:23715
msgid ""
"If the value consists of more than one string, or if the only string does "
"not name a file or directory, the strings are used as the URLs to complete."
msgstr ""

#. type: table
#: zsh.texi:23720
msgid ""
"If the value contains only one string which is the name of a normal file the "
"URLs are taken from that file (where the URLs may be separated by white "
"space or newlines)."
msgstr ""

#. type: table
#: zsh.texi:23728
msgid ""
"Finally, if the only string in the value names a directory, the directory "
"hierarchy rooted at this directory gives the completions.  The top level "
"directory should be the file access method, such as `@t{http}', `@t{ftp}', "
"`@t{bookmark}' and so on.  In many cases the next level of directories will "
"be a filename.  The directory hierarchy can descend as deep as necessary."
msgstr ""

#. type: example
#: zsh.texi:23736
#, no-wrap
msgid ""
"zstyle ':completion:*' urls ~/.urls\n"
"mkdir -p ~/.urls/ftp/ftp.zsh.org/pub\n"
"\n"
msgstr ""

#. type: table
#: zsh.texi:23745
msgid ""
"allows completion of all the components of the URL @t{ftp://ftp.zsh.org/pub} "
"after suitable commands such as `@t{netscape}' or `@t{lynx}'.  Note, "
"however, that access methods and files are completed separately, so if the "
"@t{hosts} style is set hosts can be completed without reference to the "
"@t{urls} style."
msgstr ""

#. type: table
#: zsh.texi:23749
msgid ""
"See the description in the function @t{_urls} itself for more information "
"(e.g. `@t{more $^fpath/_urls(N)}')."
msgstr ""

#. type: kindex
#: zsh.texi:23750
#, no-wrap
msgid "use-cache, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23751
#, no-wrap
msgid "use-cache"
msgstr ""

#. type: table
#: zsh.texi:23756
msgid ""
"If this is set, the completion caching layer is activated for any "
"completions which use it (via the @t{_store_cache}, @t{_retrieve_cache}, and "
"@t{_cache_invalid} functions).  The directory containing the cache files can "
"be changed with the @t{cache-path} style."
msgstr ""

#. type: kindex
#: zsh.texi:23757
#, no-wrap
msgid "use-compctl, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23758
#, no-wrap
msgid "use-compctl"
msgstr ""

#. type: table
#: zsh.texi:23766
msgid ""
"If this style is set to a string @emph{not} equal to @t{false}, @t{0}, "
"@t{no}, and @t{off}, the completion system may use any completion "
"specifications defined with the @t{compctl} builtin command.  If the style "
"is unset, this is done only if the @t{zsh/compctl} module is loaded.  The "
"string may also contain the substring `@t{first}' to use completions defined "
"with `@t{compctl -T}', and the substring `@t{default}' to use the completion "
"defined with `@t{compctl -D}'."
msgstr ""

#. type: table
#: zsh.texi:23771
msgid ""
"Note that this is only intended to smooth the transition from @t{compctl} to "
"the new completion system and may disappear in the future."
msgstr ""

#. type: table
#: zsh.texi:23779
msgid ""
"Note also that the definitions from @t{compctl} will only be used if there "
"is no specific completion function for the command in question.  For "
"example, if there is a function @t{_foo} to complete arguments to the "
"command @t{foo}, @t{compctl} will never be invoked for @t{foo}.  However, "
"the @t{compctl} version will be tried if @t{foo} only uses default "
"completion."
msgstr ""

#. type: kindex
#: zsh.texi:23780
#, no-wrap
msgid "use-ip, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23781
#, no-wrap
msgid "use-ip"
msgstr ""

#. type: table
#: zsh.texi:23789
msgid ""
"By default, the function @t{_hosts} that completes host names strips IP "
"addresses from entries read from host databases such as NIS and ssh files.  "
"If this style is `true', the corresponding IP addresses can be completed as "
"well.  This style is not use in any context where the @t{hosts} style is "
"set; note also it must be set before the cache of host names is generated "
"(typically the first completion attempt)."
msgstr ""

#. type: kindex
#: zsh.texi:23790
#, no-wrap
msgid "users, completion style"
msgstr ""

#. type: table
#: zsh.texi:23797
msgid ""
"This may be set to a list of usernames to be completed.  If it is not set "
"all usernames will be completed.  Note that if it is set only that list of "
"users will be completed; this is because on some systems querying all users "
"can take a prohibitive amount of time."
msgstr ""

#. type: kindex
#: zsh.texi:23798
#, no-wrap
msgid "users-hosts, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23799
#, no-wrap
msgid "users-hosts"
msgstr ""

#. type: table
#: zsh.texi:23806
msgid ""
"The values of this style should be of the form `@var{user}@t{@@}@var{host}' "
"or `@var{user}@t{:}@var{host}'. It is used for commands that need pairs of "
"user- and hostnames.  These commands will complete usernames from this style "
"(only), and will restrict subsequent hostname completion to hosts paired "
"with that user in one of the values of the style."
msgstr ""

#. type: table
#: zsh.texi:23814
msgid ""
"It is possible to group values for sets of commands which allow a remote "
"login, such as @t{rlogin} and @t{ssh}, by using the @t{my-accounts} tag.  "
"Similarly, values for sets of commands which usually refer to the accounts "
"of other people, such as @t{talk} and @t{finger}, can be grouped by using "
"the @t{other-accounts} tag.  More ambivalent commands may use the "
"@t{accounts} tag."
msgstr ""

#. type: kindex
#: zsh.texi:23815
#, no-wrap
msgid "users-hosts-ports, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23816
#, no-wrap
msgid "users-hosts-ports"
msgstr ""

#. type: table
#: zsh.texi:23819
msgid ""
"Like @t{users-hosts} but used for commands like @t{telnet} and containing "
"strings of the form `@var{user}@t{@@}@var{host}@t{:}@var{port}'."
msgstr ""

#. type: kindex
#: zsh.texi:23820
#, no-wrap
msgid "verbose, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23821 zsh.texi:39781
#, no-wrap
msgid "verbose"
msgstr ""

#. type: table
#: zsh.texi:23825
msgid ""
"If set, as it is by default, the completion listing is more verbose.  In "
"particular many commands show descriptions for options if this style is "
"`true'."
msgstr ""

#. type: kindex
#: zsh.texi:23826
#, no-wrap
msgid "word, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:23827
#, no-wrap
msgid "word"
msgstr ""

#. type: table
#: zsh.texi:23835
msgid ""
"This is used by the @t{_list} completer, which prevents the insertion of "
"completions until a second completion attempt when the line has not "
"changed.  The normal way of finding out if the line has changed is to "
"compare its entire contents between the two occasions.  If this style is "
"`true', the comparison is instead performed only on the current word.  Hence "
"if completion is performed on another word with the same contents, "
"completion will not be delayed."
msgstr ""

#. type: node
#: zsh.texi:23839 zsh.texi:24336 zsh.texi:24338 zsh.texi:24562
#, no-wrap
msgid "Bindable Commands"
msgstr ""

#. type: cindex
#: zsh.texi:23843
#, no-wrap
msgid "completion system, choosing completers"
msgstr ""

#. type: Plain text
#: zsh.texi:23855
msgid ""
"The initialization script @t{compinit} redefines all the widgets which "
"perform completion to call the supplied widget function @t{_main_complete}.  "
"This function acts as a wrapper calling the so-called `completer' functions "
"that generate matches.  If @t{_main_complete} is called with arguments, "
"these are taken as the names of completer functions to be called in the "
"order given.  If no arguments are given, the set of functions to try is "
"taken from the @t{completer} style.  For example, to use normal completion "
"and correction if that doesn't generate any matches:"
msgstr ""

#. type: example
#: zsh.texi:23859
#, no-wrap
msgid "zstyle ':completion:*' completer _complete _correct\n"
msgstr ""

#. type: Plain text
#: zsh.texi:23869
msgid ""
"after calling @t{compinit}. The default value for this style is "
"`@t{_complete _ignored}', i.e. normally only ordinary completion is tried, "
"first with the effect of the @t{ignored-patterns} style and then without "
"it.  The @t{_main_complete} function uses the return status of the completer "
"functions to decide if other completers should be called.  If the return "
"status is zero, no other completers are tried and the @t{_main_complete} "
"function returns."
msgstr ""

#. type: Plain text
#: zsh.texi:23876
msgid ""
"If the first argument to @t{_main_complete} is a single hyphen, the "
"arguments will not be taken as names of completers.  Instead, the second "
"argument gives a name to use in the @var{completer} field of the context and "
"the other arguments give a command name and arguments to call to generate "
"the matches."
msgstr ""

#. type: Plain text
#: zsh.texi:23882
msgid ""
"The following completer functions are contained in the distribution, "
"although users may write their own.  Note that in contexts the leading "
"underscore is stripped, for example basic completion is performed in the "
"context `@t{:completion::complete:}@var{...}'."
msgstr ""

#. type: cindex
#: zsh.texi:23884
#, no-wrap
msgid "completion system, completers"
msgstr ""

#. type: t{#1}
#: zsh.texi:23886 zsh.texi:23887
#, no-wrap
msgid "_all_matches"
msgstr ""

#. type: table
#: zsh.texi:23892
msgid ""
"This completer can be used to add a string consisting of all other matches.  "
"As it influences later completers it must appear as the first completer in "
"the list.  The list of all matches is affected by the @t{avoid-completer} "
"and @t{old-matches} styles described above."
msgstr ""

#. type: table
#: zsh.texi:23896
msgid ""
"It may be useful to use the @t{_generic} function described below to bind "
"@t{_all_matches} to its own keystroke, for example:"
msgstr ""

#. type: example
#: zsh.texi:23903
#, no-wrap
msgid ""
"zle -C all-matches complete-word _generic\n"
"bindkey '^Xa' all-matches\n"
"zstyle ':completion:all-matches:*' old-matches only\n"
"zstyle ':completion:all-matches::::' completer _all_matches\n"
msgstr ""

#. type: table
#: zsh.texi:23911
msgid ""
"Note that this does not generate completions by itself: first use any of the "
"standard ways of generating a list of completions, then use @t{^Xa} to show "
"all matches.  It is possible instead to add a standard completer to the list "
"and request that the list of all matches should be directly inserted:"
msgstr ""

#. type: example
#: zsh.texi:23917
#, no-wrap
msgid ""
"zstyle ':completion:all-matches::::' completer \\ \n"
"       _all_matches _complete\n"
"zstyle ':completion:all-matches:*' insert true\n"
msgstr ""

#. type: table
#: zsh.texi:23921
msgid "In this case the @t{old-matches} style should not be set."
msgstr ""

#. type: t{#1}
#: zsh.texi:23922 zsh.texi:23923
#, no-wrap
msgid "_approximate"
msgstr ""

#. type: table
#: zsh.texi:23931
msgid ""
"This is similar to the basic @t{_complete} completer but allows the "
"completions to undergo corrections.  The maximum number of errors can be "
"specified by the @t{max-errors} style; see the description of approximate "
"matching in @ref{Filename Generation} for how errors are counted.  Normally "
"this completer will only be tried after the normal @t{_complete} completer:"
msgstr ""

#. type: example
#: zsh.texi:23935
#, no-wrap
msgid "zstyle ':completion:*' completer _complete _approximate\n"
msgstr ""

#. type: table
#: zsh.texi:23942
msgid ""
"This will give correcting completion if and only if normal completion yields "
"no possible completions.  When corrected completions are found, the "
"completer will normally start menu completion allowing you to cycle through "
"these strings."
msgstr ""

#. type: table
#: zsh.texi:23950
msgid ""
"This completer uses the tags @t{corrections} and @t{original} when "
"generating the possible corrections and the original string.  The @t{format} "
"style for the former may contain the additional sequences `@t{%e}' and "
"`@t{%o}' which will be replaced by the number of errors accepted to generate "
"the corrections and the original string, respectively."
msgstr ""

#. type: table
#: zsh.texi:23958
msgid ""
"The completer progressively increases the number of errors allowed up to the "
"limit by the @t{max-errors} style, hence if a completion is found with one "
"error, no completions with two errors will be shown, and so on.  It modifies "
"the completer name in the context to indicate the number of errors being "
"tried: on the first try the completer field contains `@t{approximate-1}', on "
"the second try `@t{approximate-2}', and so on."
msgstr ""

#. type: table
#: zsh.texi:23963
msgid ""
"When @t{_approximate} is called from another function, the number of errors "
"to accept may be passed with the @t{-a} option.  The argument is in the same "
"format as the @t{max-errors} style, all in one string."
msgstr ""

#. type: table
#: zsh.texi:23971
msgid ""
"Note that this completer (and the @t{_correct} completer mentioned below) "
"can be quite expensive to call, especially when a large number of errors are "
"allowed.  One way to avoid this is to set up the @t{completer} style using "
"the @t{-e} option to zstyle so that some completers are only used when "
"completion is attempted a second time on the same string, e.g.:"
msgstr ""

#. type: example
#: zsh.texi:23981
#, no-wrap
msgid ""
"zstyle -e ':completion:*' completer '\n"
"  if [[ $_last_try != \"$HISTNO$BUFFER$CURSOR\" ]]; then\n"
"    _last_try=\"$HISTNO$BUFFER$CURSOR\"\n"
"    reply=(_complete _match _prefix)\n"
"  else\n"
"    reply=(_ignored _correct _approximate)\n"
"  fi'\n"
msgstr ""

#. type: table
#: zsh.texi:23989
msgid ""
"This uses the @t{HISTNO} parameter and the @t{BUFFER} and @t{CURSOR} special "
"parameters that are available inside zle and completion widgets to find out "
"if the command line hasn't changed since the last time completion was "
"tried.  Only then are the @t{_ignored}, @t{_correct} and @t{_approximate} "
"completers called."
msgstr ""

#. type: findex
#: zsh.texi:23990
#, no-wrap
msgid "_canonical_paths"
msgstr ""

#. type: item
#: zsh.texi:23991
#, no-wrap
msgid ""
"@t{_canonical_paths} [ @t{-A} @var{var} ] [ @t{-N} ] [ @t{-MJV12nfX} ] "
"@var{tag} @var{descr} [ @var{paths} ... ]"
msgstr ""

#. type: table
#: zsh.texi:23996
msgid ""
"This completion function completes all paths given to it, and also tries to "
"offer completions which point to the same file as one of the paths given "
"(relative path when an absolute path is given, and vice versa; when @t{..}'s "
"are present in the word to be completed; and some paths got from symlinks)."
msgstr ""

#. type: table
#: zsh.texi:24003
msgid ""
"@t{-A}, if specified, takes the paths from the array variable "
"specified. Paths can also be specified on the command line as shown above.  "
"@t{-N}, if specified, prevents canonicalizing the paths given before using "
"them for completion, in case they are already so. The options @t{-M}, "
"@t{-J}, @t{-V}, @t{-1}, @t{-2}, @t{-n}, @t{-F}, @t{-X} are passed to "
"@t{compadd}."
msgstr ""

#. type: table
#: zsh.texi:24006
msgid "See @t{_description} for a description of @var{tag} and @var{descr}."
msgstr ""

#. type: t{#1}
#: zsh.texi:24007 zsh.texi:24008
#, no-wrap
msgid "_cmdambivalent"
msgstr ""

#. type: table
#: zsh.texi:24015
msgid ""
"Completes the remaining positional arguments as an external command.  The "
"external command and its arguments are completed as separate arguments (in a "
"manner appropriate for completing @t{/usr/bin/env})  if there are two or "
"more remaining positional arguments on the command line, and as a quoted "
"command string (in the manner of @t{system(...)}) otherwise.  See also "
"@t{_cmdstring} and @t{_precommand}."
msgstr ""

#. type: table
#: zsh.texi:24018
msgid "This function takes no arguments."
msgstr ""

#. type: t{#1}
#: zsh.texi:24019 zsh.texi:24020
#, no-wrap
msgid "_cmdstring"
msgstr ""

#. type: table
#: zsh.texi:24023
msgid "Completes an external command as a single argument, as for @t{system(...)}."
msgstr ""

#. type: t{#1}
#: zsh.texi:24024 zsh.texi:24025
#, no-wrap
msgid "_complete"
msgstr ""

#. type: table
#: zsh.texi:24030
msgid ""
"This completer generates all possible completions in a context-sensitive "
"manner, i.e. using the settings defined with the @t{compdef} function "
"explained above and the current settings of all special parameters.  This "
"gives the normal completion behaviour."
msgstr ""

#. type: table
#: zsh.texi:24037
msgid ""
"To complete arguments of commands, @t{_complete} uses the utility function "
"@t{_normal}, which is in turn responsible for finding the particular "
"function; it is described below.  Various contexts of the form "
"@t{-}@var{context}@t{-} are handled specifically. These are all mentioned "
"above as possible arguments to the @t{#compdef} tag."
msgstr ""

#. type: table
#: zsh.texi:24053
msgid ""
"Before trying to find a function for a specific context, @t{_complete} "
"checks if the parameter `@t{compcontext}' is set. Setting `@t{compcontext}' "
"allows the usual completion dispatching to be overridden which is useful in "
"places such as a function that uses @t{vared} for input. If it is set to an "
"array, the elements are taken to be the possible matches which will be "
"completed using the tag `@t{values}' and the description `@t{value}'. If it "
"is set to an associative array, the keys are used as the possible "
"completions and the values (if non-empty) are used as descriptions for the "
"matches.  If `@t{compcontext}' is set to a string containing colons, it "
"should be of the form `@var{tag}@t{:}@var{descr}@t{:}@var{action}'.  In this "
"case the @var{tag} and @var{descr} give the tag and description to use and "
"the @var{action} indicates what should be completed in one of the forms "
"accepted by the @t{_arguments} utility function described below."
msgstr ""

#. type: table
#: zsh.texi:24061
msgid ""
"Finally, if `@t{compcontext}' is set to a string without colons, the value "
"is taken as the name of the context to use and the function defined for that "
"context will be called.  For this purpose, there is a special context named "
"@t{-command-line-} that completes whole command lines (commands and their "
"arguments).  This is not used by the completion system itself but is "
"nonetheless handled when explicitly called."
msgstr ""

#. type: t{#1}
#: zsh.texi:24062 zsh.texi:24063
#, no-wrap
msgid "_correct"
msgstr ""

#. type: table
#: zsh.texi:24069
msgid ""
"Generate corrections, but not completions, for the current word; this is "
"similar to @t{_approximate} but will not allow any number of extra "
"characters at the cursor as that completer does.  The effect is similar to "
"spell-checking.  It is based on @t{_approximate}, but the completer field in "
"the context name is @t{correct}."
msgstr ""

#. type: table
#: zsh.texi:24072
msgid "For example, with:"
msgstr ""

#. type: example
#: zsh.texi:24079
#, no-wrap
msgid ""
"zstyle ':completion:::::' completer \\ \n"
"       _complete _correct _approximate\n"
"zstyle ':completion:*:correct:::' max-errors 2 not-numeric\n"
"zstyle ':completion:*:approximate:::' max-errors 3 numeric\n"
msgstr ""

#. type: table
#: zsh.texi:24088
msgid ""
"correction will accept up to two errors.  If a numeric argument is given, "
"correction will not be performed, but correcting completion will be, and "
"will accept as many errors as given by the numeric argument.  Without a "
"numeric argument, first correction and then correcting completion will be "
"tried, with the first one accepting two errors and the second one accepting "
"three errors."
msgstr ""

#. type: table
#: zsh.texi:24093
msgid ""
"When @t{_correct} is called as a function, the number of errors to accept "
"may be given following the @t{-a} option.  The argument is in the same form "
"a values to the @t{accept} style, all in one string."
msgstr ""

#. type: table
#: zsh.texi:24100
msgid ""
"This completer function is intended to be used without the @t{_approximate} "
"completer or, as in the example, just before it.  Using it after the "
"@t{_approximate} completer is useless since @t{_approximate} will at least "
"generate the corrected strings generated by the @t{_correct} completer --- "
"and probably more."
msgstr ""

#. type: t{#1}
#: zsh.texi:24101 zsh.texi:24102
#, no-wrap
msgid "_expand"
msgstr ""

#. type: table
#: zsh.texi:24112
msgid ""
"This completer function does not really perform completion, but instead "
"checks if the word on the command line is eligible for expansion and, if it "
"is, gives detailed control over how this expansion is done.  For this to "
"happen, the completion system needs to be invoked with @t{complete-word}, "
"not @t{expand-or-complete} (the default binding for @t{TAB}), as otherwise "
"the string will be expanded by the shell's internal mechanism before the "
"completion system is started.  Note also this completer should be called "
"before the @t{_complete} completer function."
msgstr ""

#. type: table
#: zsh.texi:24120
msgid ""
"The tags used when generating expansions are @t{all-expansions} for the "
"string containing all possible expansions, @t{expansions} when adding the "
"possible expansions as single matches and @t{original} when adding the "
"original string from the line.  The order in which these strings are "
"generated, if at all, can be controlled by the @t{group-order} and "
"@t{tag-order} styles, as usual."
msgstr ""

#. type: table
#: zsh.texi:24125
msgid ""
"The format string for @t{all-expansions} and for @t{expansions} may contain "
"the sequence `@t{%o}' which will be replaced by the original string from the "
"line."
msgstr ""

#. type: table
#: zsh.texi:24129
msgid ""
"The kind of expansion to be tried is controlled by the @t{substitute}, "
"@t{glob} and @t{subst-globs-only} styles."
msgstr ""

#. type: table
#: zsh.texi:24134
msgid ""
"It is also possible to call @t{_expand} as a function, in which case the "
"different modes may be selected with options: @t{-s} for @t{substitute}, "
"@t{-g} for @t{glob} and @t{-o} for @t{subst-globs-only}."
msgstr ""

#. type: t{#1}
#: zsh.texi:24135 zsh.texi:24136
#, no-wrap
msgid "_expand_alias"
msgstr ""

#. type: table
#: zsh.texi:24140
msgid ""
"If the word the cursor is on is an alias, it is expanded and no other "
"completers are called.  The types of aliases which are to be expanded can be "
"controlled with the styles @t{regular}, @t{global} and @t{disabled}."
msgstr ""

#. type: table
#: zsh.texi:24144
msgid "This function is also a bindable command, see @ref{Bindable Commands}."
msgstr ""

#. type: t{#1}
#: zsh.texi:24145 zsh.texi:24146
#, no-wrap
msgid "_extensions"
msgstr ""

#. type: table
#: zsh.texi:24153
msgid ""
"If the cursor follows the string `@t{*.}', filename extensions are "
"completed. The extensions are taken from files in current directory or a "
"directory specified at the beginning of the current word. For exact matches, "
"completion continues to allow other completers such as @t{_expand} to expand "
"the pattern. The standard @t{add-space} and @t{prefix-hidden} styles are "
"observed."
msgstr ""

#. type: t{#1}
#: zsh.texi:24154 zsh.texi:24155
#, no-wrap
msgid "_external_pwds"
msgstr ""

#. type: table
#: zsh.texi:24158
msgid ""
"Completes current directories of other zsh processes belonging to the "
"current user."
msgstr ""

#. type: table
#: zsh.texi:24163
msgid ""
"This is intended to be used via @t{_generic}, bound to a custom key "
"combination. Note that pattern matching is enabled so matching is performed "
"similar to how it works with the @t{_match} completer."
msgstr ""

#. type: t{#1}
#: zsh.texi:24164 zsh.texi:24165
#, no-wrap
msgid "_history"
msgstr ""

#. type: table
#: zsh.texi:24172
msgid ""
"Complete words from the shell's command history.  This completer can be "
"controlled by the @t{remove-all-dups}, and @t{sort} styles as for the "
"@t{_history_complete_word} bindable command, see @ref{Bindable Commands} and "
"@ref{Completion System Configuration}."
msgstr ""

#. type: t{#1}
#: zsh.texi:24173 zsh.texi:24174
#, no-wrap
msgid "_ignored"
msgstr ""

#. type: table
#: zsh.texi:24182
msgid ""
"The @t{ignored-patterns} style can be set to a list of patterns which are "
"compared against possible completions; matching ones are removed.  With this "
"completer those matches can be reinstated, as if no @t{ignored-patterns} "
"style were set.  The completer actually generates its own list of matches; "
"which completers are invoked is determined in the same way as for the "
"@t{_prefix} completer.  The @t{single-ignored} style is also available as "
"described above."
msgstr ""

#. type: t{#1}
#: zsh.texi:24183 zsh.texi:24184
#, no-wrap
msgid "_list"
msgstr ""

#. type: table
#: zsh.texi:24190
msgid ""
"This completer allows the insertion of matches to be delayed until "
"completion is attempted a second time without the word on the line being "
"changed.  On the first attempt, only the list of matches will be shown.  It "
"is affected by the styles @t{condition} and @t{word}, see @ref{Completion "
"System Configuration}."
msgstr ""

#. type: t{#1}
#: zsh.texi:24191 zsh.texi:24192
#, no-wrap
msgid "_match"
msgstr ""

#. type: table
#: zsh.texi:24197
msgid ""
"This completer is intended to be used after the @t{_complete} completer.  It "
"behaves similarly but the string on the command line may be a pattern to "
"match against trial completions.  This gives the effect of the "
"@t{GLOB_COMPLETE} option."
msgstr ""

#. type: table
#: zsh.texi:24203
msgid ""
"Normally completion will be performed by taking the pattern from the line, "
"inserting a `@t{*}' at the cursor position and comparing the resulting "
"pattern with the possible completions generated.  This can be modified with "
"the @t{match-original} style described above."
msgstr ""

#. type: table
#: zsh.texi:24208
msgid ""
"The generated matches will be offered in a menu completion unless the "
"@t{insert-unambiguous} style is set to `true'; see the description above for "
"other options for this style."
msgstr ""

#. type: table
#: zsh.texi:24213
msgid ""
"Note that matcher specifications defined globally or used by the completion "
"functions (the styles @t{matcher-list} and @t{matcher}) will not be used."
msgstr ""

#. type: t{#1}
#: zsh.texi:24214 zsh.texi:24215
#, no-wrap
msgid "_menu"
msgstr ""

#. type: table
#: zsh.texi:24224
msgid ""
"This completer was written as simple example function to show how menu "
"completion can be enabled in shell code. However, it has the notable effect "
"of disabling menu selection which can be useful with @t{_generic} based "
"widgets. It should be used as the first completer in the list.  Note that "
"this is independent of the setting of the @t{MENU_COMPLETE} option and does "
"not work with the other menu completion widgets such as "
"@t{reverse-menu-complete}, or @t{accept-and-menu-complete}."
msgstr ""

#. type: t{#1}
#: zsh.texi:24225 zsh.texi:24226
#, no-wrap
msgid "_oldlist"
msgstr ""

#. type: table
#: zsh.texi:24237
msgid ""
"This completer controls how the standard completion widgets behave when "
"there is an existing list of completions which may have been generated by a "
"special completion (i.e. a separately-bound completion command).  It allows "
"the ordinary completion keys to continue to use the list of completions thus "
"generated, instead of producing a new list of ordinary contextual "
"completions.  It should appear in the list of completers before any of the "
"widgets which generate matches.  It uses two styles: @t{old-list} and "
"@t{old-menu}, see @ref{Completion System Configuration}."
msgstr ""

#. type: t{#1}
#: zsh.texi:24238 zsh.texi:24239
#, no-wrap
msgid "_precommand"
msgstr ""

#. type: table
#: zsh.texi:24242
msgid ""
"Complete an external command in word-separated arguments, as for @t{exec} "
"and @t{/usr/bin/env}."
msgstr ""

#. type: t{#1}
#: zsh.texi:24243 zsh.texi:24244
#, no-wrap
msgid "_prefix"
msgstr ""

#. type: table
#: zsh.texi:24249
msgid ""
"This completer can be used to try completion with the suffix (everything "
"after the cursor) ignored.  In other words, the suffix will not be "
"considered to be part of the word to complete.  The effect is similar to the "
"@t{expand-or-complete-prefix} command."
msgstr ""

#. type: table
#: zsh.texi:24257
msgid ""
"The @t{completer} style is used to decide which other completers are to be "
"called to generate matches.  If this style is unset, the list of completers "
"set for the current context is used --- except, of course, the @t{_prefix} "
"completer itself.  Furthermore, if this completer appears more than once in "
"the list of completers only those completers not already tried by the last "
"invocation of @t{_prefix} will be called."
msgstr ""

#. type: table
#: zsh.texi:24260
msgid "For example, consider this global @t{completer} style:"
msgstr ""

#. type: example
#: zsh.texi:24265
#, no-wrap
msgid ""
"zstyle ':completion:*' completer \\ \n"
"    _complete _prefix _correct _prefix:foo\n"
msgstr ""

#. type: table
#: zsh.texi:24274
msgid ""
"Here, the @t{_prefix} completer tries normal completion but ignoring the "
"suffix.  If that doesn't generate any matches, and neither does the call to "
"the @t{_correct} completer after it, @t{_prefix} will be called a second "
"time and, now only trying correction with the suffix ignored.  On the second "
"invocation the completer part of the context appears as `@t{foo}'."
msgstr ""

#. type: table
#: zsh.texi:24278
msgid ""
"To use @t{_prefix} as the last resort and try only normal completion when it "
"is invoked:"
msgstr ""

#. type: example
#: zsh.texi:24283
#, no-wrap
msgid ""
"zstyle ':completion:*' completer _complete ... _prefix\n"
"zstyle ':completion::prefix:*' completer _complete\n"
msgstr ""

#. type: table
#: zsh.texi:24289
msgid ""
"The @t{add-space} style is also respected.  If it is set to `true' then "
"@t{_prefix} will insert a space between the matches generated (if any)  and "
"the suffix."
msgstr ""

#. type: table
#: zsh.texi:24295
msgid ""
"Note that this completer is only useful if the @t{COMPLETE_IN_WORD} option "
"is set; otherwise, the cursor will be moved to the end of the current word "
"before the completion code is called and hence there will be no suffix."
msgstr ""

#. type: t{#1}
#: zsh.texi:24296 zsh.texi:24297
#, no-wrap
msgid "_user_expand"
msgstr ""

#. type: table
#: zsh.texi:24303
msgid ""
"This completer behaves similarly to the @t{_expand} completer but instead "
"performs expansions defined by users.  The styles @t{add-space} and @t{sort} "
"styles specific to the @t{_expand} completer are usable with "
"@t{_user_expand} in addition to other styles handled more generally by the "
"completion system.  The tag @t{all-expansions} is also available."
msgstr ""

#. type: table
#: zsh.texi:24310
msgid ""
"The expansion depends on the array style @t{user-expand} being defined for "
"the current context; remember that the context for completers is less "
"specific than that for contextual completion as the full context has not yet "
"been determined.  Elements of the array may have one of the following forms:"
msgstr ""

#. type: item
#: zsh.texi:24313
#, no-wrap
msgid "@t{$}@var{hash}"
msgstr ""

#. type: table
#: zsh.texi:24320
msgid ""
"@var{hash} is the name of an associative array.  Note this is not a full "
"parameter expression, merely a @t{$}, suitably quoted to prevent immediate "
"expansion, followed by the name of an associative array.  If the trial "
"expansion word matches a key in @var{hash}, the resulting expansion is the "
"corresponding value."
msgstr ""

#. type: var{#1}
#: zsh.texi:24321
#, no-wrap
msgid "_func"
msgstr ""

#. type: table
#: zsh.texi:24330
msgid ""
"@var{_func} is the name of a shell function whose name must begin with @t{_} "
"but is not otherwise special to the completion system.  The function is "
"called with the trial word as an argument.  If the word is to be expanded, "
"the function should set the array @t{reply} to a list of expansions.  "
"Optionally, it can set @t{REPLY} to a word that will be used as a "
"description for the set of expansions.  The return status of the function is "
"irrelevant."
msgstr ""

#. type: node
#: zsh.texi:24336 zsh.texi:24562 zsh.texi:26735
#, no-wrap
msgid "Completion Functions"
msgstr ""

#. type: cindex
#: zsh.texi:24340
#, no-wrap
msgid "completion system, bindable commands"
msgstr ""

#. type: Plain text
#: zsh.texi:24347
msgid ""
"In addition to the context-dependent completions provided, which are "
"expected to work in an intuitively obvious way, there are a few widgets "
"implementing special behaviour which can be bound separately to keys.  The "
"following is a list of these and their default bindings."
msgstr ""

#. type: t{#1}
#: zsh.texi:24350 zsh.texi:24351
#, no-wrap
msgid "_bash_completions"
msgstr ""

#. type: table
#: zsh.texi:24362
msgid ""
"This function is used by two widgets, @t{_bash_complete-word} and "
"@t{_bash_list-choices}.  It exists to provide compatibility with completion "
"bindings in bash.  The last character of the binding determines what is "
"completed: `@t{!}', command names; `@t{$}', environment variables; `@t{@@}', "
"host names; `@t{/}', file names; `@t{~}' user names.  In bash, the binding "
"preceded by `@t{\\e}' gives completion, and preceded by `@t{^X}' lists "
"options.  As some of these bindings clash with standard zsh bindings, only "
"`@t{\\e~}' and `@t{^X~}' are bound by default.  To add the rest, the "
"following should be added to @t{.zshrc} after @t{compinit} has been run:"
msgstr ""

#. type: example
#: zsh.texi:24369
#, no-wrap
msgid ""
"for key in '!' '$' '@@' '/' '~'; do\n"
"  bindkey \"\\e$key\" _bash_complete-word\n"
"  bindkey \"^X$key\" _bash_list-choices\n"
"done\n"
msgstr ""

#. type: table
#: zsh.texi:24374
msgid ""
"This includes the bindings for `@t{~}' in case they were already bound to "
"something else; the completion code does not override user bindings."
msgstr ""

#. type: findex
#: zsh.texi:24375
#, no-wrap
msgid "_correct_filename (^XC)"
msgstr ""

#. type: item
#: zsh.texi:24376
#, no-wrap
msgid "@t{_correct_filename} (@t{^XC})"
msgstr ""

#. type: table
#: zsh.texi:24381
msgid ""
"Correct the filename path at the cursor position.  Allows up to six errors "
"in the name.  Can also be called with an argument to correct a filename "
"path, independently of zle; the correction is printed on standard output."
msgstr ""

#. type: findex
#: zsh.texi:24382
#, no-wrap
msgid "_correct_word (^Xc)"
msgstr ""

#. type: item
#: zsh.texi:24383
#, no-wrap
msgid "@t{_correct_word} (@t{^Xc})"
msgstr ""

#. type: table
#: zsh.texi:24388
msgid ""
"Performs correction of the current argument using the usual contextual "
"completions as possible choices. This stores the string `@t{correct-word}' "
"in the @var{function} field of the context name and then calls the "
"@t{_correct} completer."
msgstr ""

#. type: findex
#: zsh.texi:24389
#, no-wrap
msgid "_expand_alias (^Xa)"
msgstr ""

#. type: item
#: zsh.texi:24390
#, no-wrap
msgid "@t{_expand_alias} (@t{^Xa})"
msgstr ""

#. type: table
#: zsh.texi:24395
msgid ""
"This function can be used as a completer and as a bindable command.  It "
"expands the word the cursor is on if it is an alias.  The types of alias "
"expanded can be controlled with the styles @t{regular}, @t{global} and "
"@t{disabled}."
msgstr ""

#. type: table
#: zsh.texi:24403
msgid ""
"When used as a bindable command there is one additional feature that can be "
"selected by setting the @t{complete} style to `true'.  In this case, if the "
"word is not the name of an alias, @t{_expand_alias} tries to complete the "
"word to a full alias name without expanding it.  It leaves the cursor "
"directly after the completed word so that invoking @t{_expand_alias} once "
"more will expand the now-complete alias name."
msgstr ""

#. type: findex
#: zsh.texi:24404
#, no-wrap
msgid "_expand_word (^Xe)"
msgstr ""

#. type: item
#: zsh.texi:24405
#, no-wrap
msgid "@t{_expand_word} (@t{^Xe})"
msgstr ""

#. type: table
#: zsh.texi:24410
msgid ""
"Performs expansion on the current word: equivalent to the standard "
"@t{expand-word} command, but using the @t{_expand} completer.  Before "
"calling it, the @var{function} field of the context is set to "
"`@t{expand-word}'."
msgstr ""

#. type: t{#1}
#: zsh.texi:24411 zsh.texi:24412
#, no-wrap
msgid "_generic"
msgstr ""

#. type: table
#: zsh.texi:24420
msgid ""
"This function is not defined as a widget and not bound by default.  However, "
"it can be used to define a widget and will then store the name of the widget "
"in the @var{function} field of the context and call the completion system.  "
"This allows custom completion widgets with their own set of style settings "
"to be defined easily.  For example, to define a widget that performs normal "
"completion and starts menu selection:"
msgstr ""

#. type: example
#: zsh.texi:24426
#, no-wrap
msgid ""
"zle -C foo complete-word _generic\n"
"bindkey '...' foo\n"
"zstyle ':completion:foo:*' menu yes select=1\n"
msgstr ""

#. type: table
#: zsh.texi:24434
msgid ""
"Note in particular that the @t{completer} style may be set for the context "
"in order to change the set of functions used to generate possible matches.  "
"If @t{_generic} is called with arguments, those are passed through to "
"@t{_main_complete} as the list of completers in place of those defined by "
"the @t{completer} style."
msgstr ""

#. type: findex
#: zsh.texi:24435
#, no-wrap
msgid "_history_complete_word (\\e/)"
msgstr ""

#. type: item
#: zsh.texi:24436
#, no-wrap
msgid "@t{_history_complete_word} (@t{\\e/})"
msgstr ""

#. type: table
#: zsh.texi:24439
msgid ""
"Complete words from the shell's command history. This uses the @t{list}, "
"@t{remove-all-dups}, @t{sort}, and @t{stop} styles."
msgstr ""

#. type: findex
#: zsh.texi:24440
#, no-wrap
msgid "_most_recent_file (^Xm)"
msgstr ""

#. type: item
#: zsh.texi:24441
#, no-wrap
msgid "@t{_most_recent_file} (@t{^Xm})"
msgstr ""

#. type: table
#: zsh.texi:24446
msgid ""
"Complete the name of the most recently modified file matching the pattern on "
"the command line (which may be blank).  If given a numeric argument @var{N}, "
"complete the @var{N}th most recently modified file.  Note the completion, if "
"any, is always unique."
msgstr ""

#. type: findex
#: zsh.texi:24447
#, no-wrap
msgid "_next_tags (^Xn)"
msgstr ""

#. type: item
#: zsh.texi:24448
#, no-wrap
msgid "@t{_next_tags} (@t{^Xn})"
msgstr ""

#. type: table
#: zsh.texi:24454
msgid ""
"This command alters the set of matches used to that for the next tag, or set "
"of tags, either as given by the @t{tag-order} style or as set by default; "
"these matches would otherwise not be available.  Successive invocations of "
"the command cycle through all possible sets of tags."
msgstr ""

#. type: findex
#: zsh.texi:24455
#, no-wrap
msgid "_read_comp (^X^R)"
msgstr ""

#. type: item
#: zsh.texi:24456
#, no-wrap
msgid "@t{_read_comp} (@t{^X^R})"
msgstr ""

#. type: table
#: zsh.texi:24464
msgid ""
"Prompt the user for a string, and use that to perform completion on the "
"current word.  There are two possibilities for the string.  First, it can be "
"a set of words beginning `@t{_}', for example `@t{_files -/}', in which case "
"the function with any arguments will be called to generate the completions.  "
"Unambiguous parts of the function name will be completed automatically "
"(normal completion is not available at this point) until a space is typed."
msgstr ""

#. type: table
#: zsh.texi:24469
msgid ""
"Second, any other string will be passed as a set of arguments to @t{compadd} "
"and should hence be an expression specifying what should be completed."
msgstr ""

#. type: table
#: zsh.texi:24476
msgid ""
"A very restricted set of editing commands is available when reading the "
"string: `@t{DEL}' and `@t{^H}' delete the last character; `@t{^U}' deletes "
"the line, and `@t{^C}' and `@t{^G}' abort the function, while `@t{RET}' "
"accepts the completion.  Note the string is used verbatim as a command line, "
"so arguments must be quoted in accordance with standard shell rules."
msgstr ""

#. type: table
#: zsh.texi:24481
msgid ""
"Once a string has been read, the next call to @t{_read_comp} will use the "
"existing string instead of reading a new one.  To force a new string to be "
"read, call @t{_read_comp} with a numeric argument."
msgstr ""

#. type: findex
#: zsh.texi:24482
#, no-wrap
msgid "_complete_debug (^X?)"
msgstr ""

#. type: item
#: zsh.texi:24483
#, no-wrap
msgid "@t{_complete_debug} (@t{^X?})"
msgstr ""

#. type: table
#: zsh.texi:24488
msgid ""
"This widget performs ordinary completion, but captures in a temporary file a "
"trace of the shell commands executed by the completion system.  Each "
"completion attempt gets its own file.  A command to view each of these files "
"is pushed onto the editor buffer stack."
msgstr ""

#. type: findex
#: zsh.texi:24489
#, no-wrap
msgid "_complete_help (^Xh)"
msgstr ""

#. type: item
#: zsh.texi:24490
#, no-wrap
msgid "@t{_complete_help} (@t{^Xh})"
msgstr ""

#. type: table
#: zsh.texi:24496
msgid ""
"This widget displays information about the context names, the tags, and the "
"completion functions used when completing at the current cursor position. If "
"given a numeric argument other than @t{1} (as in `@t{ESC-2 ^Xh}'), then the "
"styles used and the contexts for which they are used will be shown, too."
msgstr ""

#. type: table
#: zsh.texi:24501
msgid ""
"Note that the information about styles may be incomplete; it depends on the "
"information available from the completion functions called, which in turn is "
"determined by the user's own styles and other settings."
msgstr ""

#. type: t{#1}
#: zsh.texi:24502 zsh.texi:24503
#, no-wrap
msgid "_complete_help_generic"
msgstr ""

#. type: table
#: zsh.texi:24508
msgid ""
"Unlike other commands listed here, this must be created as a normal ZLE "
"widget rather than a completion widget (i.e. with @t{zle -N}).  It is used "
"for generating help with a widget bound to the @t{_generic} widget that is "
"described above."
msgstr ""

#. type: table
#: zsh.texi:24516
msgid ""
"If this widget is created using the name of the function, as it is by "
"default, then when executed it will read a key sequence.  This is expected "
"to be bound to a call to a completion function that uses the @t{_generic} "
"widget.  That widget will be executed, and information provided in the same "
"format that the @t{_complete_help} widget displays for contextual "
"completion."
msgstr ""

#. type: table
#: zsh.texi:24523
msgid ""
"If the widget's name contains @t{debug}, for example if it is created as "
"`@t{zle -N _complete_debug_generic _complete_help_generic}', it will read "
"and execute the keystring for a generic widget as before, but then generate "
"debugging information as done by @t{_complete_debug} for contextual "
"completion."
msgstr ""

#. type: table
#: zsh.texi:24528
msgid ""
"If the widget's name contains @t{noread}, it will not read a keystring but "
"instead arrange that the next use of a generic widget run in the same shell "
"will have the effect as described above."
msgstr ""

#. type: table
#: zsh.texi:24533
msgid ""
"The widget works by setting the shell parameter @t{ZSH_TRACE_GENERIC_WIDGET} "
"which is read by @t{_generic}.  Unsetting the parameter cancels any pending "
"effect of the @t{noread} form."
msgstr ""

#. type: table
#: zsh.texi:24536
msgid "For example, after executing the following:"
msgstr ""

#. type: example
#: zsh.texi:24541
#, no-wrap
msgid ""
"zle -N _complete_debug_generic _complete_help_generic\n"
"bindkey '^x:' _complete_debug_generic\n"
msgstr ""

#. type: table
#: zsh.texi:24546
msgid ""
"typing `@t{C-x :}' followed by the key sequence for a generic widget will "
"cause trace output for that widget to be saved to a file."
msgstr ""

#. type: findex
#: zsh.texi:24547
#, no-wrap
msgid "_complete_tag (^Xt)"
msgstr ""

#. type: item
#: zsh.texi:24548
#, no-wrap
msgid "@t{_complete_tag} (@t{^Xt})"
msgstr ""

#. type: table
#: zsh.texi:24558
msgid ""
"This widget completes symbol tags created by the @t{etags} or @t{ctags} "
"programmes (note there is no connection with the completion system's tags)  "
"stored in a file @t{TAGS}, in the format used by @t{etags}, or @t{tags}, in "
"the format created by @t{ctags}.  It will look back up the path hierarchy "
"for the first occurrence of either file; if both exist, the file @t{TAGS} is "
"preferred.  You can specify the full path to a @t{TAGS} or @t{tags} file by "
"setting the parameter @t{$TAGSFILE} or @t{$tagsfile} respectively.  The "
"corresponding completion tags used are @t{etags} and @t{vtags}, after emacs "
"and vi respectively."
msgstr ""

#. type: subsection
#: zsh.texi:24564 zsh.texi:39509
#, no-wrap
msgid "Utility Functions"
msgstr ""

#. type: cindex
#: zsh.texi:24566
#, no-wrap
msgid "completion system, utility functions"
msgstr ""

#. type: Plain text
#: zsh.texi:24577
msgid ""
"Descriptions follow for utility functions that may be useful when writing "
"completion functions.  If functions are installed in subdirectories, most of "
"these reside in the @t{Base} subdirectory.  Like the example functions for "
"commands in the distribution, the utility functions generating matches all "
"follow the convention of returning status zero if they generated completions "
"and non-zero if no matching completions could be added."
msgstr ""

#. type: t{#1}
#: zsh.texi:24580 zsh.texi:24581
#, no-wrap
msgid "_absolute_command_paths"
msgstr ""

#. type: table
#: zsh.texi:24585
msgid ""
"This function completes external commands as absolute paths (unlike "
"@t{_command_names -e} which completes their basenames).  It takes no "
"arguments."
msgstr ""

#. type: findex
#: zsh.texi:24586
#, no-wrap
msgid "_all_labels"
msgstr ""

#. type: item
#: zsh.texi:24587
#, no-wrap
msgid ""
"@t{_all_labels} [ @t{-x} ] [ @t{-12VJ} ] @var{tag} @var{name} @var{descr} [ "
"@var{command} @var{arg} ... ]"
msgstr ""

#. type: table
#: zsh.texi:24599
msgid ""
"This is a convenient interface to the @t{_next_label} function below, "
"implementing the loop shown in the @t{_next_label} example.  The "
"@var{command} and its arguments are called to generate the matches.  The "
"options stored in the parameter @var{name} will automatically be inserted "
"into the @var{arg}s passed to the @var{command}.  Normally, they are put "
"directly after the @var{command}, but if one of the @var{arg}s is a single "
"hyphen, they are inserted directly before that.  If the hyphen is the last "
"argument, it will be removed from the argument list before the @var{command} "
"is called.  This allows @t{_all_labels} to be used in almost all cases where "
"the matches can be generated by a single call to the @t{compadd} builtin "
"command or by a call to one of the utility functions."
msgstr ""

#. type: example
#: zsh.texi:24611
#, no-wrap
msgid ""
"local expl\n"
"...\n"
"if _requested foo; then\n"
"  ...\n"
"  _all_labels foo expl '...' compadd ... - $matches\n"
"fi\n"
msgstr ""

#. type: table
#: zsh.texi:24617
msgid ""
"Will complete the strings from the @t{matches} parameter, using @t{compadd} "
"with additional options which will take precedence over those generated by "
"@t{_all_labels}."
msgstr ""

#. type: findex
#: zsh.texi:24618
#, no-wrap
msgid "_alternative"
msgstr ""

#. type: item
#: zsh.texi:24619
#, no-wrap
msgid "@t{_alternative} [ @t{-O} @var{name} ] [ @t{-C} @var{name} ] @var{spec} ..."
msgstr ""

#. type: table
#: zsh.texi:24623
msgid ""
"This function is useful in simple cases where multiple tags are available.  "
"Essentially it implements a loop like the one described for the @t{_tags} "
"function below."
msgstr ""

#. type: table
#: zsh.texi:24632
msgid ""
"The tags to use and the action to perform if a tag is requested are "
"described using the @var{spec}s which are of the form: "
"`@var{tag}@t{:}@var{descr}@t{:}@var{action}'.  The @var{tag}s are offered "
"using @t{_tags} and if the tag is requested, the @var{action} is executed "
"with the given description @var{descr}.  The @var{action}s are those "
"accepted by the @t{_arguments} function (described below), with the "
"following exceptions:"
msgstr ""

#. type: itemize
#: zsh.texi:24636
msgid "The `@t{->}@var{state}' and `@t{=}@var{...}' forms are not supported."
msgstr ""

#. type: itemize
#: zsh.texi:24641
msgid ""
"The `@t{((a\\:bar b\\:baz}@t{))}' form does not need the colon to be "
"escaped, since the @var{spec}s have no colon-separated fields after the "
"@var{action}."
msgstr ""

#. type: table
#: zsh.texi:24646
msgid "For example, the @var{action} may be a simple function call:"
msgstr ""

#. type: example
#: zsh.texi:24652
#, no-wrap
msgid ""
"_alternative \\ \n"
"    'users:user:_users' \\ \n"
"    'hosts:host:_hosts'\n"
msgstr ""

#. type: table
#: zsh.texi:24657
msgid ""
"offers usernames and hostnames as possible matches, generated by the "
"@t{_users} and @t{_hosts} functions respectively."
msgstr ""

#. type: table
#: zsh.texi:24663
msgid ""
"Like @t{_arguments}, this function uses @t{_all_labels} to execute the "
"actions, which will loop over all sets of tags.  Special handling is only "
"required if there is an additional valid tag, for example inside a function "
"called from @t{_alternative}."
msgstr ""

#. type: table
#: zsh.texi:24668
msgid ""
"The option `@t{-O} @var{name}' is used in the same way as by the "
"@t{_arguments} function.  In other words, the elements of the @var{name} "
"array will be passed to @t{compadd} when executing an action."
msgstr ""

#. type: table
#: zsh.texi:24672
msgid ""
"Like @t{_tags} this function supports the @t{-C} option to give a different "
"name for the argument context field."
msgstr ""

#. type: findex
#: zsh.texi:24673
#, no-wrap
msgid "_arguments"
msgstr ""

#. type: item
#: zsh.texi:24675
#, no-wrap
msgid ""
"@t{_arguments }[ @t{-nswWCRS} ] [ @t{-A} @var{pat} ] [ @t{-O} @var{name} ] [ "
"@t{-M} @var{matchspec} ]"
msgstr ""

#. type: itemx
#: zsh.texi:24676
#, no-wrap
msgid "@t{@ @ @ @ @ @ @ @ @ @ @ }[ @t{:} ] @var{spec} ..."
msgstr ""

#. type: itemx
#: zsh.texi:24677
#, no-wrap
msgid ""
"@t{_arguments }[ @var{opt} ... ] @t{-}@t{-} [ @t{-l} ] [ @t{-i} @var{pats} ] "
"[ @t{-s} @var{pair} ]"
msgstr ""

#. type: itemx
#: zsh.texi:24678
#, no-wrap
msgid "@t{@ @ @ @ @ @ @ @ @ @ @ }[ @var{helpspec} ...]"
msgstr ""

#. type: table
#: zsh.texi:24682
msgid ""
"This function can be used to give a complete specification for completion "
"for a command whose arguments follow standard UNIX option and argument "
"conventions."
msgstr ""

#. type: emph{#1}
#: zsh.texi:24685
msgid "Options Overview"
msgstr ""

#. type: table
#: zsh.texi:24692
msgid ""
"Options to @t{_arguments} itself must be in separate words, i.e. @t{-s -w}, "
"not @t{-sw}.  The options are followed by @var{spec}s that describe options "
"and arguments of the analyzed command.  To avoid ambiguity, all options to "
"@t{_arguments} itself may be separated from the @var{spec} forms by a single "
"colon."
msgstr ""

#. type: table
#: zsh.texi:24700
msgid ""
"The `@t{-}@t{-}' form is used to intuit @var{spec} forms from the help "
"output of the command being analyzed, and is described in detail below.  The "
"@var{opts} for the `@t{-}@t{-}' form are otherwise the same options as the "
"first form.  Note that `@t{-s}' following `@t{-}@t{-}' has a distinct "
"meaning from `@t{-s}' preceding `@t{-}@t{-}', and both may appear."
msgstr ""

#. type: table
#: zsh.texi:24705
msgid ""
"The option switches @t{-s}, @t{-S}, @t{-A}, @t{-w}, and @t{-W} affect how "
"@t{_arguments} parses the analyzed command line's options.  These switches "
"are useful for commands with standard argument parsing."
msgstr ""

#. type: table
#: zsh.texi:24708
msgid "The options of @t{_arguments} have the following meanings:"
msgstr ""

#. type: table
#: zsh.texi:24718
msgid ""
"With this option, @t{_arguments} sets the parameter @t{NORMARG} to the "
"position of the first normal argument in the @t{$words} array, i.e. the "
"position after the end of the options.  If that argument has not been "
"reached, @t{NORMARG} is set to @t{-1}.  The caller should declare "
"`@t{integer NORMARG}' if the @t{-n} option is passed; otherwise the "
"parameter is not used."
msgstr ""

#. type: table
#: zsh.texi:24725
msgid ""
"Enable @emph{option stacking} for single-letter options, whereby multiple "
"single-letter options may be combined into a single word.  For example, the "
"two options `@t{-x}' and `@t{-y}' may be combined into a single word "
"`@t{-xy}'.  By default, every word corresponds to a single option name "
"(`@t{-xy}' is a single option named `@t{xy}')."
msgstr ""

#. type: table
#: zsh.texi:24729
msgid ""
"Options beginning with a single hyphen or plus sign are eligible for "
"stacking; words beginning with two hyphens are not."
msgstr ""

#. type: table
#: zsh.texi:24733
msgid ""
"Note that @t{-s} after @t{-}@t{-} has a different meaning, which is "
"documented in the segment entitled `Deriving @var{spec} forms from the help "
"output'."
msgstr ""

#. type: table
#: zsh.texi:24743
msgid ""
"In combination with @t{-s}, allow option stacking even if one or more of the "
"options take arguments.  For example, if @t{-x} takes an argument, with no "
"@t{-s}, `@t{-xy}' is considered as a single (unhandled) option; with @t{-s}, "
"@t{-xy} is an option with the argument `@t{y}'; with both @t{-s} and @t{-w}, "
"@t{-xy} is the option @t{-x} and the option @t{-y} with arguments to @t{-x} "
"(and to @t{-y}, if it takes arguments) still to come in subsequent words."
msgstr ""

#. type: table
#: zsh.texi:24750
msgid ""
"This option takes @t{-w} a stage further: it is possible to complete "
"single-letter options even after an argument that occurs in the same word.  "
"However, it depends on the action performed whether options will really be "
"completed at this point.  For more control, use a utility function like "
"@t{_guard} as part of the action."
msgstr ""

#. type: table
#: zsh.texi:24754
msgid ""
"Modify the @t{curcontext} parameter for an action of the form "
"`@t{->}@var{state}'.  This is discussed in detail below."
msgstr ""

#. type: table
#: zsh.texi:24758
msgid ""
"Return status 300 instead of zero when a @t{$state} is to be handled, in the "
"`@t{->}@var{string}' syntax."
msgstr ""

#. type: table
#: zsh.texi:24762
msgid ""
"Do not complete options after a `@t{-}@t{-}' appearing on the line, and "
"ignore the `@t{-}@t{-}'.  For example, with @t{-S}, in the line"
msgstr ""

#. type: example
#: zsh.texi:24766
#, no-wrap
msgid "foobar -x -- -y\n"
msgstr ""

#. type: table
#: zsh.texi:24771
msgid ""
"the `@t{-x}' is considered an option, the `@t{-y}' is considered an "
"argument, and the `@t{-}@t{-}' is considered to be neither."
msgstr ""

#. type: item
#: zsh.texi:24772
#, no-wrap
msgid "@t{-A} @var{pat}"
msgstr ""

#. type: table
#: zsh.texi:24779
msgid ""
"Do not complete options after the first non-option argument on the line.  "
"@var{pat} is a pattern matching all strings which are not to be taken as "
"arguments.  For example, to make @t{_arguments} stop completing options "
"after the first normal argument, but ignoring all strings starting with a "
"hyphen even if they are not described by one of the @var{optspec}s, the form "
"is `@t{-A \"-*\"}'."
msgstr ""

#. type: item
#: zsh.texi:24780
#, no-wrap
msgid "@t{-O} @var{name}"
msgstr ""

#. type: table
#: zsh.texi:24784
msgid ""
"Pass the elements of the array @var{name} as arguments to functions called "
"to execute @var{action}s.  This is discussed in detail below."
msgstr ""

#. type: item
#: zsh.texi:24785
#, no-wrap
msgid "@t{-M} @var{matchspec}"
msgstr ""

#. type: table
#: zsh.texi:24790
msgid ""
"Use the match specification @var{matchspec} for completing option names and "
"values.  The default @var{matchspec} allows partial word completion after "
"`@t{_}' and `@t{-}', such as completing `@t{-f-b}' to `@t{-foo-bar}'.  The "
"default @var{matchspec} is:"
msgstr ""

#. type: example
#: zsh.texi:24792
#, no-wrap
msgid "@t{r:|[_-]=* r:|=*}\n"
msgstr ""

#. type: table
#: zsh.texi:24799
msgid ""
"When populating values of the `@t{opt_args}' associative array, don't "
"backslash-escape colons and backslashes and use NUL rather than colon for "
"joining multiple values. This option is described in more detail below, "
"under the heading @emph{@var{spec}s: actions}."
msgstr ""

#. type: emph{#1}
#: zsh.texi:24804
msgid "@var{spec}s: overview"
msgstr ""

#. type: table
#: zsh.texi:24808
msgid ""
"Each of the following forms is a @var{spec} describing individual sets of "
"options or arguments on the command line being analyzed."
msgstr ""

#. type: item
#: zsh.texi:24811
#, no-wrap
msgid "@var{n}@t{:}@var{message}@t{:}@var{action}"
msgstr ""

#. type: itemx
#: zsh.texi:24812
#, no-wrap
msgid "@var{n}@t{::}@var{message}@t{:}@var{action}"
msgstr ""

#. type: table
#: zsh.texi:24819
msgid ""
"This describes the @var{n}'th normal argument.  The @var{message} will be "
"printed above the matches generated and the @var{action} indicates what can "
"be completed in this position (see below).  If there are two colons before "
"the @var{message} the argument is optional.  If the @var{message} contains "
"only white space, nothing will be printed above the matches unless the "
"action adds an explanation string itself."
msgstr ""

#. type: item
#: zsh.texi:24820 zsh.texi:24921
#, no-wrap
msgid "@t{:}@var{message}@t{:}@var{action}"
msgstr ""

#. type: itemx
#: zsh.texi:24821 zsh.texi:24922
#, no-wrap
msgid "@t{::}@var{message}@t{:}@var{action}"
msgstr ""

#. type: table
#: zsh.texi:24825
msgid ""
"Similar, but describes the @emph{next} argument, whatever number that "
"happens to be.  If all arguments are specified in this form in the correct "
"order the numbers are unnecessary."
msgstr ""

#. type: item
#: zsh.texi:24826
#, no-wrap
msgid "@t{*:}@var{message}@t{:}@var{action}"
msgstr ""

#. type: itemx
#: zsh.texi:24827
#, no-wrap
msgid "@t{*::}@var{message}@t{:}@var{action}"
msgstr ""

#. type: itemx
#: zsh.texi:24828
#, no-wrap
msgid "@t{*:::}@var{message}@t{:}@var{action}"
msgstr ""

#. type: table
#: zsh.texi:24833
msgid ""
"This describes how arguments (usually non-option arguments, those not "
"beginning with @t{-} or @t{+}) are to be completed when neither of the first "
"two forms was provided.  Any number of arguments can be completed in this "
"fashion."
msgstr ""

#. type: table
#: zsh.texi:24840
msgid ""
"With two colons before the @var{message}, the @t{words} special array and "
"the @t{CURRENT} special parameter are modified to refer only to the normal "
"arguments when the @var{action} is executed or evaluated.  With three colons "
"before the @var{message} they are modified to refer only to the normal "
"arguments covered by this description."
msgstr ""

#. type: var{#1}
#: zsh.texi:24841
#, no-wrap
msgid "optspec"
msgstr ""

#. type: itemx
#: zsh.texi:24842
#, no-wrap
msgid "@var{optspec}@t{:}@var{...}"
msgstr ""

#. type: table
#: zsh.texi:24846
msgid ""
"This describes an option.  The colon indicates handling for one or more "
"arguments to the option; if it is not present, the option is assumed to take "
"no arguments."
msgstr ""

#. type: table
#: zsh.texi:24850
msgid ""
"The following forms are available for the initial @var{optspec}, whether or "
"not the option has arguments."
msgstr ""

#. type: item
#: zsh.texi:24853
#, no-wrap
msgid "@t{*}@var{optspec}"
msgstr ""

#. type: table
#: zsh.texi:24858
msgid ""
"Here @var{optspec} is one of the remaining forms below.  This indicates the "
"following @var{optspec} may be repeated.  Otherwise if the corresponding "
"option is already present on the command line to the left of the cursor it "
"will not be offered again."
msgstr ""

#. type: item
#: zsh.texi:24859
#, no-wrap
msgid "@t{-}@var{optname}"
msgstr ""

#. type: itemx
#: zsh.texi:24860
#, no-wrap
msgid "@t{+}@var{optname}"
msgstr ""

#. type: table
#: zsh.texi:24865
msgid ""
"In the simplest form the @var{optspec} is just the option name beginning "
"with a minus or a plus sign, such as `@t{-foo}'.  The first argument for the "
"option (if any) must follow as a @emph{separate} word directly after the "
"option."
msgstr ""

#. type: table
#: zsh.texi:24869
msgid ""
"Either of `@t{-+}@var{optname}' and `@t{+-}@var{optname}' can be used to "
"specify that @t{-}@var{optname} and @t{+}@var{optname} are both valid."
msgstr ""

#. type: table
#: zsh.texi:24873
msgid ""
"In all the remaining forms, the leading `@t{-}' may be replaced by or paired "
"with `@t{+}' in this way."
msgstr ""

#. type: item
#: zsh.texi:24874
#, no-wrap
msgid "@t{-}@var{optname}@t{-}"
msgstr ""

#. type: table
#: zsh.texi:24878
msgid ""
"The first argument of the option must come directly after the option name "
"@emph{in the same word}.  For example, `@t{-foo-:}@var{...}' specifies that "
"the completed option and argument will look like `@t{-foo}@var{arg}'."
msgstr ""

#. type: item
#: zsh.texi:24879
#, no-wrap
msgid "@t{-}@var{optname}@t{+}"
msgstr ""

#. type: table
#: zsh.texi:24884
msgid ""
"The first argument may appear immediately after @var{optname} in the same "
"word, or may appear as a separate word after the option.  For example, "
"`@t{-foo+:}@var{...}' specifies that the completed option and argument will "
"look like either `@t{-foo}@var{arg}' or `@t{-foo} @var{arg}'."
msgstr ""

#. type: item
#: zsh.texi:24885
#, no-wrap
msgid "@t{-}@var{optname}@t{=}"
msgstr ""

#. type: table
#: zsh.texi:24889
msgid ""
"The argument may appear as the next word, or in same word as the option name "
"provided that it is separated from it by an equals sign, for example "
"`@t{-foo=}@var{arg}' or `@t{-foo} @var{arg}'."
msgstr ""

#. type: item
#: zsh.texi:24890
#, no-wrap
msgid "@t{-}@var{optname}@t{=-}"
msgstr ""

#. type: table
#: zsh.texi:24893
msgid ""
"The argument to the option must appear after an equals sign in the same "
"word, and may not be given in the next argument."
msgstr ""

#. type: item
#: zsh.texi:24894
#, no-wrap
msgid "@var{optspec}@t{[}@var{explanation}@t{]}"
msgstr ""

#. type: table
#: zsh.texi:24897
msgid ""
"An explanation string may be appended to any of the preceding forms of "
"@var{optspec} by enclosing it in brackets, as in `@t{-q[query operation]}'."
msgstr ""

#. type: table
#: zsh.texi:24901
msgid ""
"The @t{verbose} style is used to decide whether the explanation strings are "
"displayed with the option in a completion listing."
msgstr ""

#. type: table
#: zsh.texi:24908
msgid ""
"If no bracketed explanation string is given but the @t{auto-description} "
"style is set and only one argument is described for this @var{optspec}, the "
"value of the style is displayed, with any appearance of the sequence "
"`@t{%d}' in it replaced by the @var{message} of the first @var{optarg} that "
"follows the @var{optspec}; see below."
msgstr ""

#. type: table
#: zsh.texi:24914
msgid ""
"It is possible for options with a literal `@t{+}' or `@t{=}' to appear, but "
"that character must be quoted, for example `@t{-\\+}'."
msgstr ""

#. type: table
#: zsh.texi:24918
msgid ""
"Each @var{optarg} following an @var{optspec} must take one of the following "
"forms:"
msgstr ""

#. type: table
#: zsh.texi:24926
msgid ""
"An argument to the option; @var{message} and @var{action} are treated as for "
"ordinary arguments.  In the first form, the argument is mandatory, and in "
"the second form it is optional."
msgstr ""

#. type: table
#: zsh.texi:24932
msgid ""
"This group may be repeated for options which take multiple arguments.  In "
"other words, "
"@t{:}@var{message1}@t{:}@var{action1}@t{:}@var{message2}@t{:}@var{action2} "
"specifies that the option takes two arguments."
msgstr ""

#. type: item
#: zsh.texi:24933
#, no-wrap
msgid "@t{:*}@var{pattern}@t{:}@var{message}@t{:}@var{action}"
msgstr ""

#. type: itemx
#: zsh.texi:24934
#, no-wrap
msgid "@t{:*}@var{pattern}@t{::}@var{message}@t{:}@var{action}"
msgstr ""

#. type: itemx
#: zsh.texi:24935
#, no-wrap
msgid "@t{:*}@var{pattern}@t{:::}@var{message}@t{:}@var{action}"
msgstr ""

#. type: table
#: zsh.texi:24942
msgid ""
"This describes multiple arguments.  Only the last @var{optarg} for an option "
"taking multiple arguments may be given in this form.  If the @var{pattern} "
"is empty (i.e. @t{:*:}), all the remaining words on the line are to be "
"completed as described by the @var{action}; otherwise, all the words up to "
"and including a word matching the @var{pattern} are to be completed using "
"the @var{action}."
msgstr ""

#. type: table
#: zsh.texi:24950
msgid ""
"Multiple colons are treated as for the `@t{*:}@var{...}' forms for ordinary "
"arguments: when the @var{message} is preceded by two colons, the @t{words} "
"special array and the @t{CURRENT} special parameter are modified during the "
"execution or evaluation of the @var{action} to refer only to the words after "
"the option.  When preceded by three colons, they are modified to refer only "
"to the words covered by this description."
msgstr ""

#. type: table
#: zsh.texi:24958
msgid ""
"Any literal colon in an @var{optname}, @var{message}, or @var{action} must "
"be preceded by a backslash, `@t{\\:}'."
msgstr ""

#. type: table
#: zsh.texi:24969
msgid ""
"Each of the forms above may be preceded by a list in parentheses of option "
"names and argument numbers.  If the given option is on the command line, the "
"options and arguments indicated in parentheses will not be offered.  For "
"example, `@t{(-two -three 1)-one:}@var{...}' completes the option "
"`@t{-one}'; if this appears on the command line, the options @t{-two} and "
"@t{-three} and the first ordinary argument will not be completed after it.  "
"`@t{(-foo):}@var{...}' specifies an ordinary argument completion; @t{-foo} "
"will not be completed if that argument is already present."
msgstr ""

#. type: table
#: zsh.texi:24980
msgid ""
"Other items may appear in the list of excluded options to indicate various "
"other items that should not be applied when the current specification is "
"matched: a single star (@t{*}) for the rest arguments (i.e. a specification "
"of the form `@t{*:}@var{...}'); a colon (@t{:})  for all normal "
"(non-option-) arguments; and a hyphen (@t{-}) for all options.  For example, "
"if `@t{(*)}' appears before an option and the option appears on the command "
"line, the list of remaining arguments (those shown in the above table "
"beginning with `@t{*:}') will not be completed."
msgstr ""

#. type: table
#: zsh.texi:24989
msgid ""
"To aid in reuse of specifications, it is possible to precede any of the "
"forms above with `@t{!}'; then the form will no longer be completed, "
"although if the option or argument appears on the command line they will be "
"skipped as normal.  The main use for this is when the arguments are given by "
"an array, and @t{_arguments} is called repeatedly for more specific "
"contexts: on the first call `@t{_arguments $global_options}' is used, and on "
"subsequent calls `@t{_arguments !$^global_options}'."
msgstr ""

#. type: emph{#1}
#: zsh.texi:24992
msgid "@var{spec}s: actions"
msgstr ""

#. type: table
#: zsh.texi:25000
msgid ""
"In each of the forms above the @var{action} determines how completions "
"should be generated.  Except for the `@t{->}@var{string}' form below, the "
"@var{action} will be executed by calling the @t{_all_labels} function to "
"process all tag labels.  No special handling of tags is needed unless a "
"function call introduces a new one."
msgstr ""

#. type: table
#: zsh.texi:25006
msgid ""
"The functions called to execute @var{action}s will be called with the "
"elements of the array named by the `@t{-O} @var{name}' option as arguments.  "
"This can be used, for example, to pass the same set of options for the "
"@t{compadd} builtin to all @var{action}s."
msgstr ""

#. type: table
#: zsh.texi:25009
msgid "The forms for @var{action} are as follows."
msgstr ""

#. type: item
#: zsh.texi:25012
#, no-wrap
msgid "@t{@ }(single unquoted space)"
msgstr ""

#. type: table
#: zsh.texi:25019
msgid ""
"This is useful where an argument is required but it is not possible or "
"desirable to generate matches for it.  The @var{message} will be displayed "
"but no completions listed.  Note that even in this case the colon at the end "
"of the @var{message} is needed; it may only be omitted when neither a "
"@var{message} nor an @var{action} is given."
msgstr ""

#. type: item
#: zsh.texi:25020
#, no-wrap
msgid "@t{(}@var{item1} @var{item2} @var{...}@t{)}"
msgstr ""

#. type: table
#: zsh.texi:25022
msgid "One of a list of possible matches, for example:"
msgstr ""

#. type: example
#: zsh.texi:25026
#, no-wrap
msgid "@t{:foo:(foo bar baz}@t{)}\n"
msgstr ""

#. type: t{#1}
#: zsh.texi:25028
#, no-wrap
msgid "((@var{item1}\\:@var{desc1} @var{...}))"
msgstr ""

#. type: table
#: zsh.texi:25031
msgid ""
"Similar to the above, but with descriptions for each possible match.  Note "
"the backslash before the colon.  For example,"
msgstr ""

#. type: example
#: zsh.texi:25035
#, no-wrap
msgid "@t{:foo:((a\\:bar b\\:baz}@t{))}\n"
msgstr ""

#. type: table
#: zsh.texi:25040
msgid ""
"The matches will be listed together with their descriptions if the "
"@t{description} style is set with the @t{values} tag in the context."
msgstr ""

#. type: item
#: zsh.texi:25041
#, no-wrap
msgid "@t{->}@var{string}"
msgstr ""

#. type: vindex
#: zsh.texi:25042
#, no-wrap
msgid "context, use of"
msgstr ""

#. type: vindex
#: zsh.texi:25043
#, no-wrap
msgid "line, use of"
msgstr ""

#. type: vindex
#: zsh.texi:25044
#, no-wrap
msgid "opt_args, use of"
msgstr ""

#. type: table
#: zsh.texi:25050
msgid ""
"In this form, @t{_arguments} processes the arguments and options and then "
"returns control to the calling function with parameters set to indicate the "
"state of processing; the calling function then makes its own arrangements "
"for generating completions.  For example, functions that implement a state "
"machine can use this type of action."
msgstr ""

#. type: table
#: zsh.texi:25058
msgid ""
"Where @t{_arguments} encounters @var{action} in the `@t{->}@var{string}' "
"format, it will strip all leading and trailing whitespace from @var{string} "
"and set the array @t{state} to the set of all @var{string}s for which an "
"action is to be performed.  The elements of the array @t{state_descr} are "
"assigned the corresponding @var{message} field from each @var{optarg} "
"containing such an @var{action}."
msgstr ""

#. type: table
#: zsh.texi:25065
msgid ""
"By default and in common with all other well behaved completion functions, "
"_arguments returns status zero if it was able to add matches and non-zero "
"otherwise. However, if the @t{-R} option is given, @t{_arguments} will "
"instead return a status of 300 to indicate that @t{$state} is to be handled."
msgstr ""

#. type: table
#: zsh.texi:25073
msgid ""
"In addition to @t{$state} and @t{$state_descr}, @t{_arguments} also sets the "
"global parameters `@t{context}', `@t{line}' and `@t{opt_args}' as described "
"below, and does not reset any changes made to the special parameters such as "
"@t{PREFIX} and @t{words}.  This gives the calling function the choice of "
"resetting these parameters or propagating changes in them."
msgstr ""

#. type: table
#: zsh.texi:25078
msgid ""
"A function calling @t{_arguments} with at least one action containing a "
"`@t{->}@var{string}' must therefore declare appropriate local parameters:"
msgstr ""

#. type: example
#: zsh.texi:25083
#, no-wrap
msgid ""
"local context state state_descr line\n"
"typeset -A opt_args\n"
msgstr ""

#. type: table
#: zsh.texi:25087
msgid "to prevent @t{_arguments} from altering the global environment."
msgstr ""

#. type: item
#: zsh.texi:25088
#, no-wrap
msgid "@t{@{}@var{eval-string}@t{@}}"
msgstr ""

#. type: vindex
#: zsh.texi:25089
#, no-wrap
msgid "expl, use of"
msgstr ""

#. type: table
#: zsh.texi:25093
msgid ""
"A string in braces is evaluated as shell code to generate matches.  If the "
"@var{eval-string} itself does not begin with an opening parenthesis or brace "
"it is split into separate words before execution."
msgstr ""

#. type: item
#: zsh.texi:25094
#, no-wrap
msgid "@t{= }@var{action}"
msgstr ""

#. type: table
#: zsh.texi:25102
msgid ""
"If the @var{action} starts with `@t{= }' (an equals sign followed by a "
"space), @t{_arguments} will insert the contents of the @var{argument} field "
"of the current context as the new first element in the @t{words} special "
"array and increment the value of the @t{CURRENT} special parameter.  This "
"has the effect of inserting a dummy word onto the completion command line "
"while not changing the point at which completion is taking place."
msgstr ""

#. type: table
#: zsh.texi:25110
msgid ""
"This is most useful with one of the specifiers that restrict the words on "
"the command line on which the @var{action} is to operate (the two- and "
"three-colon forms above).  One particular use is when an @var{action} itself "
"causes @t{_arguments} on a restricted range; it is necessary to use this "
"trick to insert an appropriate command name into the range for the second "
"call to @t{_arguments} to be able to parse the line."
msgstr ""

#. type: var{#1}
#: zsh.texi:25111
#, no-wrap
msgid "@t{@ }word..."
msgstr ""

#. type: var{#1}
#: zsh.texi:25112
#, no-wrap
msgid "word..."
msgstr ""

#. type: table
#: zsh.texi:25115
msgid ""
"This covers all forms other than those above.  If the @var{action} starts "
"with a space, the remaining list of words will be invoked unchanged."
msgstr ""

#. type: table
#: zsh.texi:25126
msgid ""
"Otherwise it will be invoked with some extra strings placed after the first "
"word; these are to be passed down as options to the @t{compadd} builtin.  "
"They ensure that the state specified by @t{_arguments}, in particular the "
"descriptions of options and arguments, is correctly passed to the completion "
"command.  These additional arguments are taken from the array parameter "
"`@t{expl}'; this will be set up before executing the @var{action} and hence "
"may be referred to inside it, typically in an expansion of the form "
"`@t{$expl[@@]}' which preserves empty elements of the array."
msgstr ""

#. type: table
#: zsh.texi:25142
msgid ""
"During the performance of the action the array `@t{line}' will be set to the "
"normal arguments from the command line, i.e. the words from the command line "
"after the command name excluding all options and their arguments.  Options "
"are stored in the associative array `@t{opt_args}' with option names as keys "
"and their arguments as the values.  By default, all colons and backslashes "
"in the value are escaped with backslashes, and if an option has multiple "
"arguments (for example, when using an @var{optspec} of the form "
"`@t{*}@var{optspec}'), they are joined with (unescaped) colons.  However, if "
"the @t{-0} option was passed, no backslash escaping is performed, and "
"multiple values are joined with NUL bytes.  For example, after `@t{zsh -o "
"foo:foo -o bar:bar -o <TAB>}', the contents of `@t{opt_args}' would be"
msgstr ""

#. type: example
#: zsh.texi:25146
#, no-wrap
msgid "typeset -A opt_args=( [-o]='foo\\:foo:bar\\:bar:' )\n"
msgstr ""

#. type: table
#: zsh.texi:25150
msgid "by default, and"
msgstr ""

#. type: example
#: zsh.texi:25154
#, no-wrap
msgid "typeset -A opt_args=( [-o]=$'foo:foo\\x00bar:bar\\x00' )\n"
msgstr ""

#. type: table
#: zsh.texi:25158
msgid "if @t{_arguments} had been called with the @t{-0} option."
msgstr ""

#. type: table
#: zsh.texi:25171
msgid ""
"The parameter `@t{context}' is set when returning to the calling function to "
"perform an action of the form `@t{->}@var{string}'.  It is set to an array "
"of elements corresponding to the elements of @t{$state}.  Each element is a "
"suitable name for the argument field of the context: either a string of the "
"form `@t{option}@var{-opt}@t{-}@var{n}' for the @var{n}'th argument of the "
"option @var{-opt}, or a string of the form `@t{argument-}@var{n}' for the "
"@var{n}'th argument.  For `rest' arguments, that is those in the list at the "
"end not handled by position, @var{n} is the string `@t{rest}'.  For example, "
"when completing the argument of the @t{-o} option, the name is "
"`@t{option-o-1}', while for the second normal (non-option-) argument it is "
"`@t{argument-2}'."
msgstr ""

#. type: table
#: zsh.texi:25176
msgid ""
"Furthermore, during the evaluation of the @var{action} the context name in "
"the @t{curcontext} parameter is altered to append the same string that is "
"stored in the @t{context} parameter."
msgstr ""

#. type: table
#: zsh.texi:25184
msgid ""
"The option @t{-C} tells @t{_arguments} to modify the @t{curcontext} "
"parameter for an action of the form `@t{->}@var{state}'.  This is the "
"standard parameter used to keep track of the current context.  Here it (and "
"not the @t{context} array) should be made local to the calling function to "
"avoid passing back the modified value and should be initialised to the "
"current value at the start of the function:"
msgstr ""

#. type: example
#: zsh.texi:25188
#, no-wrap
msgid "local curcontext=\"$curcontext\"\n"
msgstr ""

#. type: table
#: zsh.texi:25193
msgid ""
"This is useful where it is not possible for multiple states to be valid "
"together."
msgstr ""

#. type: emph{#1}
#: zsh.texi:25196
msgid "Grouping Options"
msgstr ""

#. type: table
#: zsh.texi:25203
msgid ""
"Options can be grouped to simplify exclusion lists. A group is introduced "
"with `@t{+}' followed by a name for the group in the subsequent word. Whole "
"groups can then be referenced in an exclusion list or a group name can be "
"used to disambiguate between two forms of the same option. For example:"
msgstr ""

#. type: example
#: zsh.texi:25213
#, no-wrap
msgid ""
"_arguments \\ \n"
"    '(group2--x)-a' \\ \n"
"  + group1 \\ \n"
"    -m \\ \n"
"    '(group2)-n' \\ \n"
"  + group2 \\ \n"
"    -x -y\n"
msgstr ""

#. type: table
#: zsh.texi:25221
msgid ""
"If the name of a group is specified in the form `@t{(}@var{name}@t{)}' then "
"only one value from that group will ever be completed; more formally, all "
"specifications are mutually exclusive to all other specifications in that "
"group. This is useful for defining options that are aliases for each "
"other. For example:"
msgstr ""

#. type: example
#: zsh.texi:25230
#, no-wrap
msgid ""
"_arguments \\ \n"
"    -a -b \\ \n"
"  + '(operation)' \\ \n"
"    @{-c,--compress@}'[compress]' \\ \n"
"    @{-d,--decompress@}'[decompress]' \\ \n"
"    @{-l,--list@}'[list]'\n"
msgstr ""

#. type: table
#: zsh.texi:25237
msgid ""
"If an option in a group appears on the command line, it is stored in the "
"associative array `@t{opt_args}' with '@var{group}@t{-}@var{option}' as a "
"key.  In the example above, a key `@t{operation--c}' is used if the option "
"`@t{-c}' is present on the command line."
msgstr ""

#. type: emph{#1}
#: zsh.texi:25240
msgid "Specifying Multiple Sets of Arguments"
msgstr ""

#. type: table
#: zsh.texi:25245
msgid ""
"It is possible to specify multiple sets of options and arguments with the "
"sets separated by single hyphens. This differs from groups in that sets are "
"considered to be mutually exclusive of each other."
msgstr ""

#. type: table
#: zsh.texi:25249
msgid ""
"Specifications before the first set and from any group are common to all "
"sets. For example:"
msgstr ""

#. type: example
#: zsh.texi:25259
#, no-wrap
msgid ""
"_arguments \\ \n"
"    -a \\ \n"
"  - set1 \\ \n"
"    -c \\ \n"
"  - set2 \\ \n"
"    -d \\ \n"
"    ':arg:(x2 y2)'\n"
msgstr ""

#. type: table
#: zsh.texi:25267
msgid ""
"This defines two sets.  When the command line contains the option `@t{-c}', "
"the `@t{-d}' option and the argument will not be considered possible "
"completions.  When it contains `@t{-d}' or an argument, the option `@t{-c}' "
"will not be considered.  However, after `@t{-a}' both sets will still be "
"considered valid."
msgstr ""

#. type: table
#: zsh.texi:25271
msgid ""
"As for groups, the name of a set may appear in exclusion lists, either alone "
"or preceding a normal option or argument specification."
msgstr ""

#. type: table
#: zsh.texi:25278
msgid ""
"The completion code has to parse the command line separately for each "
"set. This can be slow so sets should only be used when necessary.  A useful "
"alternative is often an option specification with rest-arguments (as in "
"`@t{-foo:*:...}'); here the option @t{-foo} swallows up all remaining "
"arguments as described by the @var{optarg} definitions."
msgstr ""

#. type: emph{#1}
#: zsh.texi:25281
msgid "Deriving @var{spec} forms from the help output"
msgstr ""

#. type: table
#: zsh.texi:25289
msgid ""
"The option `@t{-}@t{-}' allows @t{_arguments} to work out the names of long "
"options that support the `@t{-}@t{-help}' option which is standard in many "
"GNU commands.  The command word is called with the argument `@t{-}@t{-help}' "
"and the output examined for option names.  Clearly, it can be dangerous to "
"pass this to commands which may not support this option as the behaviour of "
"the command is unspecified."
msgstr ""

#. type: table
#: zsh.texi:25302
msgid ""
"In addition to options, `@t{_arguments -}@t{-}' will try to deduce the types "
"of arguments available for options when the form "
"`@t{-}@t{-}@var{opt}@t{=}@var{val}' is valid.  It is also possible to "
"provide hints by examining the help text of the command and adding "
"@var{helpspec} of the form "
"`@var{pattern}@t{:}@var{message}@t{:}@var{action}'; note that other "
"@t{_arguments} @var{spec} forms are not used.  The @var{pattern} is matched "
"against the help text for an option, and if it matches the @var{message} and "
"@var{action} are used as for other argument specifiers.  The special case of "
"`@t{*:}' means both @var{message} and @var{action} are empty, which has the "
"effect of causing options having no description in the help output to be "
"ordered in listings ahead of options that have a description."
msgstr ""

#. type: example
#: zsh.texi:25312
#, no-wrap
msgid ""
"_arguments -- '*\\*:toggle:(yes no)' \\ \n"
"              '*=FILE*:file:_files' \\ \n"
"              '*=DIR*:directory:_files -/' \\ \n"
"              '*=PATH*:directory:_files -/'\n"
msgstr ""

#. type: table
#: zsh.texi:25322
msgid ""
"Here, `@t{yes}' and `@t{no}' will be completed as the argument of options "
"whose description ends in a star; file names will be completed for options "
"that contain the substring `@t{=FILE}' in the description; and directories "
"will be completed for options whose description contains `@t{=DIR}' or "
"`@t{=PATH}'.  The last three are in fact the default and so need not be "
"given explicitly, although it is possible to override the use of these "
"patterns.  A typical help text which uses this feature is:"
msgstr ""

#. type: example
#: zsh.texi:25326
#, no-wrap
msgid "  -C, --directory=DIR          change to directory DIR\n"
msgstr ""

#. type: table
#: zsh.texi:25331
msgid ""
"so that the above specifications will cause directories to be completed "
"after `@t{-}@t{-directory}', though not after `@t{-C}'."
msgstr ""

#. type: table
#: zsh.texi:25336
msgid ""
"Note also that @t{_arguments} tries to find out automatically if the "
"argument for an option is optional.  This can be specified explicitly by "
"doubling the colon before the @var{message}."
msgstr ""

#. type: table
#: zsh.texi:25342
msgid ""
"If the @var{pattern} ends in `@t{(-)}', this will be removed from the "
"pattern and the @var{action} will be used only directly after the `@t{=}', "
"not in the next word.  This is the behaviour of a normal specification "
"defined with the form `@t{=-}'."
msgstr ""

#. type: table
#: zsh.texi:25349
msgid ""
"By default, the command (with the option `@t{--help}') is run after "
"resetting all the locale categories (except for @t{LC_CTYPE}) to `@t{C}'.  "
"If the localized help output is known to work, the option `@t{-l}' can be "
"specified after the `@t{_arguments -}@t{-}' so that the command is run in "
"the current locale."
msgstr ""

#. type: table
#: zsh.texi:25355
msgid ""
"The `@t{_arguments -}@t{-}' can be followed by the option `@t{-i} "
"@var{patterns}' to give patterns for options which are not to be completed.  "
"The patterns can be given as the name of an array parameter or as a literal "
"list in parentheses.  For example,"
msgstr ""

#. type: example
#: zsh.texi:25360
#, no-wrap
msgid ""
"_arguments -- -i \\ \n"
"    \"(--(en|dis)able-FEATURE*)\"\n"
msgstr ""

#. type: table
#: zsh.texi:25366
msgid ""
"will cause completion to ignore the options `@t{-}@t{-enable-FEATURE}' and "
"`@t{-}@t{-disable-FEATURE}' (this example is useful with GNU @t{configure})."
msgstr ""

#. type: table
#: zsh.texi:25373
msgid ""
"The `@t{_arguments -}@t{-}' form can also be followed by the option `@t{-s} "
"@var{pair}' to describe option aliases.  The @var{pair} consists of a list "
"of alternating patterns and corresponding replacements, enclosed in parens "
"and quoted so that it forms a single argument word in the @t{_arguments} "
"call."
msgstr ""

#. type: table
#: zsh.texi:25378
msgid ""
"For example, some @t{configure}-script help output describes options only as "
"`@t{-}@t{-enable-foo}', but the script also accepts the negated form "
"`@t{-}@t{-disable-foo}'.  To allow completion of the second form:"
msgstr ""

#. type: example
#: zsh.texi:25382
#, no-wrap
msgid "_arguments -- -s \"((#s)--enable- --disable-)\"\n"
msgstr ""

#. type: emph{#1}
#: zsh.texi:25386
msgid "Miscellaneous notes"
msgstr ""

#. type: table
#: zsh.texi:25394
msgid ""
"Finally, note that @t{_arguments} generally expects to be the primary "
"function handling any completion for which it is used.  It may have side "
"effects which change the treatment of any matches added by other functions "
"called after it.  To combine @t{_arguments} with other functions, those "
"functions should be called either before @t{_arguments}, as an @var{action} "
"within a @var{spec}, or in handlers for `@t{->}@var{state}' actions."
msgstr ""

#. type: table
#: zsh.texi:25397
msgid "Here is a more general example of the use of @t{_arguments}:"
msgstr ""

#. type: example
#: zsh.texi:25405
#, no-wrap
msgid ""
"_arguments '-l+:left border:' \\ \n"
"           '-format:paper size:(letter A4)' \\ \n"
"           '*-copy:output file:_files::resolution:(300 600)' \\ \n"
"           ':postscript file:_files -g \\*.\\(ps\\|eps\\)' \\ \n"
"           '*:page number:'\n"
msgstr ""

#. type: table
#: zsh.texi:25413
msgid ""
"This describes three options: `@t{-l}', `@t{-format}', and `@t{-copy}'.  The "
"first takes one argument described as `@var{left border}' for which no "
"completion will be offered because of the empty action.  Its argument may "
"come directly after the `@t{-l}' or it may be given as the next word on the "
"line."
msgstr ""

#. type: table
#: zsh.texi:25418
msgid ""
"The `@t{-format}' option takes one argument in the next word, described as "
"`@var{paper size}' for which only the strings `@t{letter}' and `@t{A4}' will "
"be completed."
msgstr ""

#. type: table
#: zsh.texi:25425
msgid ""
"The `@t{-copy}' option may appear more than once on the command line and "
"takes two arguments.  The first is mandatory and will be completed as a "
"filename.  The second is optional (because of the second colon before the "
"description `@var{resolution}') and will be completed from the strings "
"`@t{300}' and `@t{600}'."
msgstr ""

#. type: table
#: zsh.texi:25432
msgid ""
"The last two descriptions say what should be completed as arguments.  The "
"first describes the first argument as a `@var{postscript file}' and makes "
"files ending in `@t{ps}' or `@t{eps}' be completed.  The last description "
"gives all other arguments the description `@var{page number}' but does not "
"offer completions."
msgstr ""

#. type: findex
#: zsh.texi:25433
#, no-wrap
msgid "_cache_invalid"
msgstr ""

#. type: item
#: zsh.texi:25434
#, no-wrap
msgid "@t{_cache_invalid} @var{cache_identifier}"
msgstr ""

#. type: table
#: zsh.texi:25440
msgid ""
"This function returns status zero if the completions cache corresponding to "
"the given cache identifier needs rebuilding.  It determines this by looking "
"up the @t{cache-policy} style for the current context.  This should provide "
"a function name which is run with the full path to the relevant cache file "
"as the only argument."
msgstr ""

#. type: Plain text
#: zsh.texi:25443 zsh.texi:26618 zsh.texi:37420
msgid "Example:"
msgstr ""

#. type: example
#: zsh.texi:25452
#, no-wrap
msgid ""
"_example_caching_policy () @{\n"
"    # rebuild if cache is more than a week old\n"
"    local -a oldp\n"
"    oldp=( \"$1\"(Nm+7) )\n"
"    (( $#oldp ))\n"
"@}\n"
msgstr ""

#. type: findex
#: zsh.texi:25454
#, no-wrap
msgid "_call_function"
msgstr ""

#. type: item
#: zsh.texi:25455
#, no-wrap
msgid "@t{_call_function} @var{return} @var{name} [ @var{arg} ... ]"
msgstr ""

#. type: table
#: zsh.texi:25460
msgid ""
"If a function @var{name} exists, it is called with the arguments "
"@var{arg}s.  The @var{return} argument gives the name of a parameter in "
"which the return status from the function @var{name} should be stored; if "
"@var{return} is empty or a single hyphen it is ignored."
msgstr ""

#. type: table
#: zsh.texi:25464
msgid ""
"The return status of @t{_call_function} itself is zero if the function "
"@var{name} exists and was called and non-zero otherwise."
msgstr ""

#. type: findex
#: zsh.texi:25465
#, no-wrap
msgid "_call_program"
msgstr ""

#. type: item
#: zsh.texi:25466
#, no-wrap
msgid "@t{_call_program} [ @t{-l} ] [ @t{-p} ] @var{tag} @var{string} ..."
msgstr ""

#. type: table
#: zsh.texi:25474
msgid ""
"This function provides a mechanism for the user to override the use of an "
"external command.  It looks up the @t{command} style with the supplied "
"@var{tag}.  If the style is set, its value is used as the command to "
"execute.  The @var{string}s from the call to @t{_call_program}, or from the "
"style if set, are concatenated with spaces between them and the resulting "
"string is evaluated.  The return status is the return status of the command "
"called."
msgstr ""

#. type: table
#: zsh.texi:25480
msgid ""
"By default, the command is run in an environment where all the locale "
"categories (except for @t{LC_CTYPE}) are reset to `@t{C}' by calling the "
"utility function @t{_comp_locale} (see below). If the option `@t{-l}' is "
"given, the command is run with the current locale."
msgstr ""

#. type: table
#: zsh.texi:25490
msgid ""
"If the option `@t{-p}' is supplied it indicates that the command output is "
"influenced by the permissions it is run with. If the @t{gain-privileges} "
"style is set to true, @t{_call_program} will make use of commands such as "
"@t{sudo}, if present on the command-line, to match the permissions to "
"whatever the final command is likely to run under. When looking up the "
"@t{gain-privileges} and @t{command} styles, the command component of the "
"zstyle context will end with a slash (`@t{/}') followed by the command that "
"would be used to gain privileges."
msgstr ""

#. type: findex
#: zsh.texi:25491
#, no-wrap
msgid "_combination"
msgstr ""

#. type: item
#: zsh.texi:25492
#, no-wrap
msgid ""
"@t{_combination} [ @t{-s} @var{pattern} ] @var{tag} @var{style} @var{spec} "
"... @var{field} @var{opts} ..."
msgstr ""

#. type: table
#: zsh.texi:25497
msgid ""
"This function is used to complete combinations of values, for example pairs "
"of hostnames and usernames.  The @var{style} argument gives the style which "
"defines the pairs; it is looked up in a context with the @var{tag} "
"specified."
msgstr ""

#. type: table
#: zsh.texi:25504
msgid ""
"The style name consists of field names separated by hyphens, for example "
"`@t{users-hosts-ports}'.  For each field for a value is already known, a "
"@var{spec} of the form `@var{field}@t{=}@var{pattern}' is given.  For "
"example, if the command line so far specifies a user `@t{pws}', the argument "
"`@t{users=pws}' should appear."
msgstr ""

#. type: table
#: zsh.texi:25509
msgid ""
"The next argument with no equals sign is taken as the name of the field for "
"which completions should be generated (presumably not one of the "
"@var{field}s for which the value is known)."
msgstr ""

#. type: table
#: zsh.texi:25521
msgid ""
"The matches generated will be taken from the value of the style.  These "
"should contain the possible values for the combinations in the appropriate "
"order (users, hosts, ports in the example above).  The values for the "
"different fields are separated by colons.  This can be altered with the "
"option @t{-s} to @t{_combination} which specifies a pattern.  Typically this "
"is a character class, as for example `@t{-s \"[:@@]\"}' in the case of the "
"@t{users-hosts} style.  Each `@var{field}@t{=}@var{pattern}' specification "
"restricts the completions which apply to elements of the style with "
"appropriately matching fields."
msgstr ""

#. type: table
#: zsh.texi:25530
msgid ""
"If no style with the given name is defined for the given tag, or if none of "
"the strings in style's value match, but a function name of the required "
"field preceded by an underscore is defined, that function will be called to "
"generate the matches.  For example, if there is no `@t{users-hosts-ports}' "
"or no matching hostname when a host is required, the function `@t{_hosts}' "
"will automatically be called."
msgstr ""

#. type: table
#: zsh.texi:25536
msgid ""
"If the same name is used for more than one field, in both the "
"`@var{field}@t{=}@var{pattern}' and the argument that gives the name of the "
"field to be completed, the number of the field (starting with one) may be "
"given after the fieldname, separated from it by a colon."
msgstr ""

#. type: table
#: zsh.texi:25541
msgid ""
"All arguments after the required field name are passed to @t{compadd} when "
"generating matches from the style value, or to the functions for the fields "
"if they are called."
msgstr ""

#. type: findex
#: zsh.texi:25542
#, no-wrap
msgid "_command_names"
msgstr ""

#. type: item
#: zsh.texi:25543
#, no-wrap
msgid "@t{_command_names} [ @t{-e} | @t{-} ]"
msgstr ""

#. type: table
#: zsh.texi:25547
msgid ""
"This function completes words that are valid at command position: names of "
"aliases, builtins, hashed commands, functions, and so on.  With the @t{-e} "
"flag, only hashed commands are completed.  The @t{-} flag is ignored."
msgstr ""

#. type: t{#1}
#: zsh.texi:25548 zsh.texi:25549
#, no-wrap
msgid "_comp_locale"
msgstr ""

#. type: table
#: zsh.texi:25555
msgid ""
"This function resets all the locale categories other than @t{LC_CTYPE} to "
"`@t{C}' so that the output from external commands can be easily analyzed by "
"the completion system. @t{LC_CTYPE} retains the current value (taking "
"@t{LC_ALL} and @t{LANG} into account), ensuring that non-ASCII characters in "
"file names are still handled properly."
msgstr ""

#. type: table
#: zsh.texi:25560
msgid ""
"This function should normally be run only in a subshell, because the new "
"locale is exported to the environment. Typical usage would be "
"`@t{$(_comp_locale; }@var{command} ...@t{)}'."
msgstr ""

#. type: findex
#: zsh.texi:25561
#, no-wrap
msgid "_completers"
msgstr ""

#. type: item
#: zsh.texi:25562
#, no-wrap
msgid "@t{_completers} [ @t{-p} ]"
msgstr ""

#. type: table
#: zsh.texi:25564
msgid "This function completes names of completers."
msgstr ""

#. type: table
#: zsh.texi:25569
msgid "Include the leading underscore (`@t{_}') in the matches."
msgstr ""

#. type: t{#1}
#: zsh.texi:25572 zsh.texi:25573
#, no-wrap
msgid "_default"
msgstr ""

#. type: table
#: zsh.texi:25580
msgid ""
"This function corresponds to the @t{-default-} special context which is "
"applied where no completion is defined.  It is useful to call it under "
"certain error conditions such as completion after an unrecognised "
"subcommand.  This applies the concept of graceful degradation to the "
"completion system, allowing it to fallback on basic completion of commonly "
"useful things like filenames."
msgstr ""

#. type: findex
#: zsh.texi:25581
#, no-wrap
msgid "_describe"
msgstr ""

#. type: item
#: zsh.texi:25583
#, no-wrap
msgid ""
"@t{_describe }[@t{-12JVx}] [ @t{-oO} | @t{-t} @var{tag} ] @var{descr} "
"@var{name1} [ @var{name2} ] [ @var{opt} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:25584
#, no-wrap
msgid ""
"@t{@ @ @ @ @ @ @ @ @ @ }[ @t{-}@t{-} @var{name1} [ @var{name2} ] [ @var{opt} "
"... ] ... ]"
msgstr ""

#. type: table
#: zsh.texi:25588
msgid ""
"This function associates completions with descriptions.  Multiple groups "
"separated by @t{-}@t{-} can be supplied, potentially with different "
"completion options @var{opt}s."
msgstr ""

#. type: table
#: zsh.texi:25601
msgid ""
"The @var{descr} is taken as a string to display above the matches if the "
"@t{format} style for the @t{descriptions} tag is set.  This is followed by "
"one or two names of arrays followed by options to pass to @t{compadd}.  The "
"array @var{name1} contains the possible completions with their descriptions "
"in the form `@var{completion}@t{:}@var{description}'.  Any literal colons in "
"@var{completion} must be quoted with a backslash.  If a @var{name2} is "
"given, it should have the same number of elements as @var{name1}; in this "
"case the corresponding elements are added as possible completions instead of "
"the @var{completion} strings from @var{name1}.  The completion list will "
"retain the descriptions from @var{name1}.  Finally, a set of completion "
"options can appear."
msgstr ""

#. type: table
#: zsh.texi:25613
msgid ""
"If the option `@t{-o}' appears before the first argument, the matches added "
"will be treated as names of command options (N.B. not shell options), "
"typically following a `@t{-}', `@t{-}@t{-}' or `@t{+}' on the command line.  "
"In this case @t{_describe} uses the @t{prefix-hidden}, @t{prefix-needed} and "
"@t{verbose} styles to find out if the strings should be added as completions "
"and if the descriptions should be shown.  Without the `@t{-o}' option, only "
"the @t{verbose} style is used to decide how descriptions are shown.  If "
"`@t{-O}' is used instead of `@t{-o}', command options are completed as above "
"but @t{_describe} will not handle the @t{prefix-needed} style."
msgstr ""

#. type: table
#: zsh.texi:25617
msgid ""
"With the @t{-t} option a @var{tag} can be specified.  The default is "
"`@t{values}' or, if the @t{-o} option is given, `@t{options}'."
msgstr ""

#. type: table
#: zsh.texi:25621
msgid ""
"The options @t{-1}, @t{-2}, @t{-J}, @t{-V}, @t{-x} are passed to "
"@t{_next_label}."
msgstr ""

#. type: table
#: zsh.texi:25625
msgid ""
"If selected by the @t{list-grouped} style, strings with the same description "
"will appear together in the list."
msgstr ""

#. type: table
#: zsh.texi:25629
msgid ""
"@t{_describe} uses the @t{_all_labels} function to generate the matches, so "
"it does not need to appear inside a loop over tag labels."
msgstr ""

#. type: findex
#: zsh.texi:25630
#, no-wrap
msgid "_description"
msgstr ""

#. type: item
#: zsh.texi:25631
#, no-wrap
msgid ""
"@t{_description} [ @t{-x} ] [ @t{-12VJ} ] @var{tag} @var{name} @var{descr} [ "
"@var{spec} ... ]"
msgstr ""

#. type: table
#: zsh.texi:25636
msgid ""
"This function is not to be confused with the previous one; it is used as a "
"helper function for creating options to @t{compadd}.  It is buried inside "
"many of the higher level completion functions and so often does not need to "
"be called directly."
msgstr ""

#. type: table
#: zsh.texi:25643
msgid ""
"The styles listed below are tested in the current context using the given "
"@var{tag}.  The resulting options for @t{compadd} are put into the array "
"named @var{name} (this is traditionally `@t{expl}', but this convention is "
"not enforced).  The description for the corresponding set of matches is "
"passed to the function in @var{descr}."
msgstr ""

#. type: table
#: zsh.texi:25651
msgid ""
"The styles tested are: @t{format}, @t{hidden}, @t{matcher}, @t{ignore-line}, "
"@t{ignored-patterns}, @t{group-name} and @t{sort}.  The @t{format} style is "
"first tested for the given @var{tag} and then for the @t{descriptions} tag "
"if no value was found, while the remainder are only tested for the tag given "
"as the first argument.  The function also calls @t{_setup} which tests some "
"more styles."
msgstr ""

#. type: table
#: zsh.texi:25659
msgid ""
"The string returned by the @t{format} style (if any) will be modified so "
"that the sequence `@t{%d}' is replaced by the @var{descr} given as the third "
"argument without any leading or trailing white space.  If, after removing "
"the white space, the @var{descr} is the empty string, the format style will "
"not be used and the options put into the @var{name} array will not contain "
"an explanation string to be displayed above the matches."
msgstr ""

#. type: table
#: zsh.texi:25673
msgid ""
"If @t{_description} is called with more than three arguments, the additional "
"@var{spec}s should be of the form `@var{char}@t{:}@var{str}'.  These supply "
"escape sequence replacements for the @t{format} style: every appearance of "
"`@t{%}@var{char}' will be replaced by @var{string}.  If no additional "
"@var{spec}s are given but the description in @var{descr} conforms to a "
"common form then further escape sequences are set for elements of that "
"description.  These elements correspond to a default value (`@t{%o}'), the "
"units (`@t{%m}') range of acceptable values (`@t{%r}') and the remaining "
"initial part of the description (`@t{%h}').  The form the description takes "
"consists of specifying the units and range in parentheses and the default "
"value in square brackets, for example:"
msgstr ""

#. type: example
#: zsh.texi:25677
#, no-wrap
msgid "_description times expl 'timeout (seconds) (0-60) [20]'\n"
msgstr ""

#. type: table
#: zsh.texi:25684
msgid ""
"It is possible to use @t{zformat} conditional expressions when styling these "
"elements. So, for example, to add `@t{default:}' as a tag but only when "
"there is a default value to show, the @t{format} style might include "
"`@t{%(o.default: %o.)}'."
msgstr ""

#. type: table
#: zsh.texi:25690
msgid ""
"If the @t{-x} option is given, the description will be passed to @t{compadd} "
"using the @t{-x} option instead of the default @t{-X}.  This means that the "
"description will be displayed even if there are no corresponding matches."
msgstr ""

#. type: table
#: zsh.texi:25700
msgid ""
"The options placed in the array @var{name} take account of the "
"@t{group-name} style, so matches are placed in a separate group where "
"necessary.  The group normally has its elements sorted (by passing the "
"option @t{-J} to @t{compadd}), but if an option starting with `@t{-V}', "
"`@t{-J}', `@t{-1}', or `@t{-2}' is passed to @t{_description}, that option "
"will be included in the array.  Hence it is possible for the completion "
"group to be unsorted by giving the option `@t{-V}', `@t{-1V}', or `@t{-2V}'."
msgstr ""

#. type: table
#: zsh.texi:25703
msgid "In most cases, the function will be used like this:"
msgstr ""

#. type: example
#: zsh.texi:25709
#, no-wrap
msgid ""
"local expl\n"
"_description files expl file\n"
"compadd \"$expl[@@]\" - \"$files[@@]\"\n"
msgstr ""

#. type: table
#: zsh.texi:25716
msgid ""
"Note the use of the parameter @t{expl}, the hyphen, and the list of "
"matches.  Almost all calls to @t{compadd} within the completion system use a "
"similar format; this ensures that user-specified styles are correctly passed "
"down to the builtins which implement the internals of completion."
msgstr ""

#. type: findex
#: zsh.texi:25717
#, no-wrap
msgid "_dir_list"
msgstr ""

#. type: item
#: zsh.texi:25718
#, no-wrap
msgid "@t{_dir_list} [ @t{-s} @var{sep} ] [ @t{-S} ]"
msgstr ""

#. type: table
#: zsh.texi:25721
msgid ""
"Complete a list of directory names separated by colons (the same format as "
"@t{$PATH})."
msgstr ""

#. type: item
#: zsh.texi:25724
#, no-wrap
msgid "@t{-s} @var{sep}"
msgstr ""

#. type: table
#: zsh.texi:25727
msgid ""
"Use @var{sep} as separator between items.  @var{sep} defaults to a colon "
"(`@t{:}')."
msgstr ""

#. type: table
#: zsh.texi:25730
msgid "Add @var{sep} instead of slash (`@t{/}') as an autoremoveable suffix."
msgstr ""

#. type: findex
#: zsh.texi:25733
#, no-wrap
msgid "_dispatch"
msgstr ""

#. type: item
#: zsh.texi:25734
#, no-wrap
msgid "@t{_dispatch} @var{context string} ..."
msgstr ""

#. type: table
#: zsh.texi:25742
msgid ""
"This sets the current context to @var{context} and looks for completion "
"functions to handle this context by hunting through the list of command "
"names or special contexts (as described above for @t{compdef})  given as "
"@var{string}s.  The first completion function to be defined for one of the "
"contexts in the list is used to generate matches.  Typically, the last "
"@var{string} is @t{-default-} to cause the function for default completion "
"to be used as a fallback."
msgstr ""

#. type: table
#: zsh.texi:25748
msgid ""
"The function sets the parameter @t{$service} to the @var{string} being "
"tried, and sets the @var{context/command} field (the fourth) of the "
"@t{$curcontext} parameter to the @var{context} given as the first argument."
msgstr ""

#. type: findex
#: zsh.texi:25749
#, no-wrap
msgid "_email_addresses"
msgstr ""

#. type: item
#: zsh.texi:25750
#, no-wrap
msgid "@t{_email_addresses} [ @t{-c} ] [ @t{-n} @var{plugin} ]"
msgstr ""

#. type: table
#: zsh.texi:25752
msgid "Complete email addresses.  Addresses are provided by plugins."
msgstr ""

#. type: table
#: zsh.texi:25760
msgid ""
"Complete bare @t{localhost@@domain.tld} addresses, without a name part or a "
"comment.  Without this option, RFC822 `@var{Firstname Lastname} "
"@t{<}@var{address}@t{>}' strings are completed."
msgstr ""

#. type: item
#: zsh.texi:25761
#, no-wrap
msgid "@t{-n} @var{plugin}"
msgstr ""

#. type: table
#: zsh.texi:25763
msgid "Complete aliases from @var{plugin}."
msgstr ""

#. type: table
#: zsh.texi:25775
msgid ""
"The following plugins are available by default: @t{_email-ldap} (see the "
"@t{filter} style), @t{_email-local} (completes "
"@var{user}@t{@@}@var{hostname} Unix addresses), @t{_email-mail} (completes "
"aliases from @t{~/.mailrc}), @t{_email-mush}, @t{_email-mutt}, and "
"@t{_email-pine}."
msgstr ""

#. type: table
#: zsh.texi:25779
msgid ""
"Addresses from the @t{_email-}@var{foo} plugin are added under the tag "
"`@t{email-}@var{foo}'."
msgstr ""

#. type: emph{#1}
#: zsh.texi:25782
msgid "Writing plugins"
msgstr ""

#. type: table
#: zsh.texi:25789
msgid ""
"Plugins are written as separate functions with names starting with "
"`@t{_email-}'.  They are invoked with the @t{-c} option and @t{compadd} "
"options.  They should either do their own completion or set the @t{$reply} "
"array to a list of `@var{alias}@t{:}@var{address}' elements and return "
"@t{300}.  New plugins will be picked up and run automatically."
msgstr ""

#. type: t{#1}
#: zsh.texi:25790 zsh.texi:25791
#, no-wrap
msgid "_files"
msgstr ""

#. type: table
#: zsh.texi:25798
msgid ""
"The function @t{_files} is a wrapper around @t{_path_files}. It supports all "
"of the same functionality, with some enhancements --- notably, it respects "
"the @t{list-dirs-first} style, and it allows users to override the behaviour "
"of the @t{-g} and @t{-/} options with the @t{file-patterns} "
"style. @t{_files} should therefore be preferred over @t{_path_files} in most "
"cases."
msgstr ""

#. type: table
#: zsh.texi:25802
msgid ""
"This function accepts the full set of options allowed by @t{_path_files}, "
"described below."
msgstr ""

#. type: t{#1}
#: zsh.texi:25803 zsh.texi:25804
#, no-wrap
msgid "_gnu_generic"
msgstr ""

#. type: table
#: zsh.texi:25811
msgid ""
"This function is a simple wrapper around the @t{_arguments} function "
"described above.  It can be used to determine automatically the long options "
"understood by commands that produce a list when passed the option "
"`@t{-}@t{-help}'.  It is intended to be used as a top-level completion "
"function in its own right.  For example, to enable option completion for the "
"commands @t{foo} and @t{bar}, use"
msgstr ""

#. type: example
#: zsh.texi:25815
#, no-wrap
msgid "compdef _gnu_generic foo bar\n"
msgstr ""

#. type: table
#: zsh.texi:25819
msgid "after the call to @t{compinit}."
msgstr ""

#. type: table
#: zsh.texi:25824
msgid ""
"The completion system as supplied is conservative in its use of this "
"function, since it is important to be sure the command understands the "
"option `@t{-}@t{-help}'."
msgstr ""

#. type: findex
#: zsh.texi:25825
#, no-wrap
msgid "_guard"
msgstr ""

#. type: item
#: zsh.texi:25826
#, no-wrap
msgid "@t{_guard} [ @var{options} ] @var{pattern descr}"
msgstr ""

#. type: table
#: zsh.texi:25830
msgid ""
"This function displays @var{descr} if @var{pattern} matches the string to be "
"completed.  It is intended to be used in the @var{action} for the "
"specifications passed to @t{_arguments} and similar functions."
msgstr ""

#. type: table
#: zsh.texi:25834
msgid ""
"The return status is zero if the message was displayed and the word to "
"complete is not empty, and non-zero otherwise."
msgstr ""

#. type: table
#: zsh.texi:25841
msgid ""
"The @var{pattern} may be preceded by any of the options understood by "
"@t{compadd} that are passed down from @t{_description}, namely @t{-M}, "
"@t{-J}, @t{-V}, @t{-1}, @t{-2}, @t{-n}, @t{-F} and @t{-X}.  All of these "
"options will be ignored.  This fits in conveniently with the "
"argument-passing conventions of actions for @t{_arguments}."
msgstr ""

#. type: table
#: zsh.texi:25846
msgid ""
"As an example, consider a command taking the options @t{-n} and @t{-none}, "
"where @t{-n} must be followed by a numeric value in the same word.  By "
"using:"
msgstr ""

#. type: example
#: zsh.texi:25850
#, no-wrap
msgid "_arguments '-n-: :_guard \"[0-9]#\" \"numeric value\"' '-none'\n"
msgstr ""

#. type: table
#: zsh.texi:25858
msgid ""
"@t{_arguments} can be made to both display the message `@t{numeric value}' "
"and complete options after `@t{-n<TAB>}'.  If the `@t{-n}' is already "
"followed by one or more digits (the pattern passed to @t{_guard}) only the "
"message will be displayed; if the `@t{-n}' is followed by another character, "
"only options are completed."
msgstr ""

#. type: findex
#: zsh.texi:25859
#, no-wrap
msgid "_message"
msgstr ""

#. type: item
#: zsh.texi:25860
#, no-wrap
msgid "@t{_message} [ @t{-r12} ] [ @t{-VJ} @var{group} ] @var{descr}"
msgstr ""

#. type: itemx
#: zsh.texi:25861
#, no-wrap
msgid "@t{_message -e} [ @var{tag} ] @var{descr}"
msgstr ""

#. type: table
#: zsh.texi:25867
msgid ""
"The @var{descr} is used in the same way as the third argument to the "
"@t{_description} function, except that the resulting string will always be "
"shown whether or not matches were generated.  This is useful for displaying "
"a help message in places where no completions can be generated."
msgstr ""

#. type: table
#: zsh.texi:25872
msgid ""
"The @t{format} style is examined with the @t{messages} tag to find a "
"message; the usual tag, @t{descriptions}, is used only if the style is not "
"set with the former."
msgstr ""

#. type: table
#: zsh.texi:25880
msgid ""
"If the @t{-r} option is given, no style is used; the @var{descr} is taken "
"literally as the string to display.  This is most useful when the "
"@var{descr} comes from a pre-processed argument list which already contains "
"an expanded description.  Note that this option does not disable the "
"`@t{%}'-sequence parsing done by @t{compadd}."
msgstr ""

#. type: table
#: zsh.texi:25884
msgid ""
"The @t{-12VJ} options and the @var{group} are passed to @t{compadd} and "
"hence determine the group the message string is added to."
msgstr ""

#. type: table
#: zsh.texi:25894
msgid ""
"The second @t{-e} form gives a description for completions with the tag "
"@var{tag} to be shown even if there are no matches for that tag.  This form "
"is called by @t{_arguments} in the event that there is no action for an "
"option specification.  The tag can be omitted and if so the tag is taken "
"from the parameter @t{$curtag}; this is maintained by the completion system "
"and so is usually correct.  Note that if there are no matches at the time "
"this function is called, @t{compstate[insert]} is cleared, so additional "
"matches generated later are not inserted on the command line."
msgstr ""

#. type: findex
#: zsh.texi:25895
#, no-wrap
msgid "_multi_parts"
msgstr ""

#. type: item
#: zsh.texi:25896
#, no-wrap
msgid "@t{_multi_parts} [ @t{-i} ] @var{sep} @var{array}"
msgstr ""

#. type: table
#: zsh.texi:25906
msgid ""
"The argument @var{sep} is a separator character.  The @var{array} may be "
"either the name of an array parameter or a literal array in the form "
"`@t{(foo bar}@t{)}', a parenthesised list of words separated by whitespace.  "
"The possible completions are the strings from the array.  However, each "
"chunk delimited by @var{sep} will be completed separately.  For example, the "
"@t{_tar} function uses `@t{_multi_parts} @t{/} @var{patharray}' to complete "
"partial file paths from the given array of complete file paths."
msgstr ""

#. type: table
#: zsh.texi:25913
msgid ""
"The @t{-i} option causes @t{_multi_parts} to insert a unique match even if "
"that requires multiple separators to be inserted.  This is not usually the "
"expected behaviour with filenames, but certain other types of completion, "
"for example those with a fixed set of possibilities, may be more suited to "
"this form."
msgstr ""

#. type: table
#: zsh.texi:25919
msgid ""
"Like other utility functions, this function accepts the `@t{-V}', `@t{-J}', "
"`@t{-1}', `@t{-2}', `@t{-n}', `@t{-f}', `@t{-X}', `@t{-M}', `@t{-P}', "
"`@t{-S}', `@t{-r}', `@t{-R}', and `@t{-q}' options and passes them to the "
"@t{compadd} builtin."
msgstr ""

#. type: findex
#: zsh.texi:25920
#, no-wrap
msgid "_next_label"
msgstr ""

#. type: item
#: zsh.texi:25921
#, no-wrap
msgid ""
"@t{_next_label} [ @t{-x} ] [ @t{-12VJ} ] @var{tag} @var{name} @var{descr} [ "
"@var{option} ... ]"
msgstr ""

#. type: table
#: zsh.texi:25928
msgid ""
"This function is used to implement the loop over different tag labels for a "
"particular tag as described above for the @t{tag-order} style.  On each call "
"it checks to see if there are any more tag labels; if there is it returns "
"status zero, otherwise non-zero.  As this function requires a current tag to "
"be set, it must always follow a call to @t{_tags} or @t{_requested}."
msgstr ""

#. type: table
#: zsh.texi:25935
msgid ""
"The @t{-x12VJ} options and the first three arguments are passed to the "
"@t{_description} function.  Where appropriate the @var{tag} will be replaced "
"by a tag label in this call.  Any description given in the @t{tag-order} "
"style is preferred to the @var{descr} passed to @t{_next_label}."
msgstr ""

#. type: table
#: zsh.texi:25940
msgid ""
"The @var{option}s given after the @var{descr} are set in the parameter given "
"by @var{name}, and hence are to be passed to @t{compadd} or whatever "
"function is called to add the matches."
msgstr ""

#. type: table
#: zsh.texi:25946
msgid ""
"Here is a typical use of this function for the tag @t{foo}.  The call to "
"@t{_requested} determines if tag @t{foo} is required at all; the loop over "
"@t{_next_label} handles any labels defined for the tag in the @t{tag-order} "
"style."
msgstr ""

#. type: example
#: zsh.texi:25959
#, no-wrap
msgid ""
"local expl ret=1\n"
"...\n"
"if _requested foo; then\n"
"  ...\n"
"  while _next_label foo expl '...'; do\n"
"    compadd \"$expl[@@]\" ... && ret=0\n"
"  done\n"
"  ...\n"
"fi\n"
"return ret\n"
msgstr ""

#. type: findex
#: zsh.texi:25961
#, no-wrap
msgid "_normal"
msgstr ""

#. type: item
#: zsh.texi:25962
#, no-wrap
msgid "@t{_normal} [ @t{-P} | @t{-p} @var{precommand} ]"
msgstr ""

#. type: table
#: zsh.texi:25968
msgid ""
"This is the standard function called to handle completion outside any "
"special @t{-}@var{context}@t{-}.  It is called both to complete the command "
"word and also the arguments for a command.  In the second case, @t{_normal} "
"looks for a special completion for that command, and if there is none it "
"uses the completion for the @t{-default-} context."
msgstr ""

#. type: table
#: zsh.texi:25977
msgid ""
"A second use is to reexamine the command line specified by the @t{$words} "
"array and the @t{$CURRENT} parameter after those have been modified.  For "
"example, the function @t{_precommand}, which completes after precommand "
"specifiers such as @t{nohup}, removes the first word from the @t{words} "
"array, decrements the @t{CURRENT} parameter, then calls `@t{_normal -p "
"$service}'.  The effect is that `@t{nohup} @var{cmd ...}' is treated in the "
"same way as `@var{cmd ...}'."
msgstr ""

#. type: table
#: zsh.texi:25984
msgid ""
"Reset the list of precommands. This option should be used if completing a "
"command line which allows internal commands (e.g. builtins and functions) "
"regardless of prior precommands (e.g. `@t{zsh -c}')."
msgstr ""

#. type: item
#: zsh.texi:25985
#, no-wrap
msgid "@t{-p} @var{precommand}"
msgstr ""

#. type: table
#: zsh.texi:25988
msgid ""
"Append @var{precommand} to the list of precommands. This option should be "
"used in nearly all cases in which @t{-P} is not applicable."
msgstr ""

#. type: table
#: zsh.texi:25998
msgid ""
"If the command name matches one of the patterns given by one of the options "
"@t{-p} or @t{-P} to @t{compdef}, the corresponding completion function is "
"called and then the parameter @t{_compskip} is checked.  If it is set "
"completion is terminated at that point even if no matches have been found.  "
"This is the same effect as in the @t{-first-} context."
msgstr ""

#. type: findex
#: zsh.texi:25999
#, no-wrap
msgid "_numbers"
msgstr ""

#. type: item
#: zsh.texi:26000
#, no-wrap
msgid "@t{_numbers} [ @var{option} ... ] [ @var{description} ] [ @var{suffix} ... ]"
msgstr ""

#. type: table
#: zsh.texi:26004
msgid ""
"This can be used where a number is followed by a suffix to indicate the "
"units.  The unit suffixes are completed and can also be included in the "
"description used when completion is invoked for the preceding number."
msgstr ""

#. type: table
#: zsh.texi:26008
msgid ""
"In addition to common @t{compadd} options, @t{_numbers} accepts the "
"following options:"
msgstr ""

#. type: item
#: zsh.texi:26011
#, no-wrap
msgid "@t{-t} @var{tag}"
msgstr ""

#. type: table
#: zsh.texi:26013
msgid "Specify a tag to use instead of the default of @t{numbers}."
msgstr ""

#. type: item
#: zsh.texi:26014
#, no-wrap
msgid "@t{-u} @var{units}"
msgstr ""

#. type: table
#: zsh.texi:26016
msgid "Indicate the default units for the number, e.g. @t{bytes}."
msgstr ""

#. type: item
#: zsh.texi:26017
#, no-wrap
msgid "@t{-l} @var{min}"
msgstr ""

#. type: table
#: zsh.texi:26019
msgid "Specify the lowest possible value for the number."
msgstr ""

#. type: item
#: zsh.texi:26020
#, no-wrap
msgid "@t{-m} @var{max}"
msgstr ""

#. type: table
#: zsh.texi:26022
msgid "Specify the highest possible value for the number."
msgstr ""

#. type: item
#: zsh.texi:26023
#, no-wrap
msgid "@t{-d} @var{default}"
msgstr ""

#. type: table
#: zsh.texi:26025
msgid "Specify the default value."
msgstr ""

#. type: table
#: zsh.texi:26028
msgid "Allow negative numbers.  This is implied if the range includes a negative."
msgstr ""

#. type: table
#: zsh.texi:26031
msgid "Allow decimal numbers."
msgstr ""

#. type: table
#: zsh.texi:26040
msgid ""
"Where a particular suffix represents the default units for a number, it "
"should be prefixed with a colon.  Additionally, suffixes can be followed by "
"a colon and a description.  So for example, the following allows the age of "
"something to be specified, either in seconds or with an optional suffix with "
"a longer unit of time:"
msgstr ""

#. type: example
#: zsh.texi:26044
#, no-wrap
msgid "_numbers -u seconds age :s:seconds m:minutes h:hours d:days\n"
msgstr ""

#. type: table
#: zsh.texi:26050
msgid ""
"It is typically helpful for units to be presented in order of magnitude when "
"completed.  To facilitate this, the order in which they are given is "
"preserved."
msgstr ""

#. type: table
#: zsh.texi:26066
msgid ""
"When the @t{format} style is looked up with the @t{descriptions} tag or the "
"tag specified with @t{-t}, the list of suffixes is available as a `@t{%x}' "
"escape sequence. This is in addition to the usual sequences documented under "
"the @t{format} style. The form this list takes can also be configured. To "
"this end, the @t{format} style is first looked up with the tag "
"@t{unit-suffixes}. The retrieved format is applied to each suffix in turn "
"and the results are then concatenated to form the completed list. For the "
"@t{unit-suffixes} format, `@t{%x}' expands to the individual suffix and "
"`@t{%X}' to its description. @t{%d}' indicates a default suffix and can be "
"used in a condition. The index and reverse index are set in `@t{%i}' and "
"`@t{%r}' respectively and are useful for text included only with the first "
"and last suffixes in the list. So for example, the following joins the "
"suffixes together as a comma-separated list:"
msgstr ""

#. type: example
#: zsh.texi:26070
#, no-wrap
msgid "zstyle ':completion:*:unit-suffixes' format '%x%(r::,)'\n"
msgstr ""

#. type: t{#1}
#: zsh.texi:26074 zsh.texi:26075
#, no-wrap
msgid "_options"
msgstr ""

#. type: table
#: zsh.texi:26082
msgid ""
"This can be used to complete the names of shell options.  It provides a "
"matcher specification that ignores a leading `@t{no}', ignores underscores "
"and allows upper-case letters to match their lower-case counterparts (for "
"example, `@t{glob}', `@t{noglob}', `@t{NO_GLOB}' are all completed).  Any "
"arguments are propagated to the @t{compadd} builtin."
msgstr ""

#. type: findex
#: zsh.texi:26083
#, no-wrap
msgid "_options_set"
msgstr ""

#. type: findex
#: zsh.texi:26084
#, no-wrap
msgid "_options_unset"
msgstr ""

#. type: item
#: zsh.texi:26085
#, no-wrap
msgid "@t{_options_set} and @t{_options_unset}"
msgstr ""

#. type: table
#: zsh.texi:26088
msgid ""
"These functions complete only set or unset options, with the same matching "
"specification used in the @t{_options} function."
msgstr ""

#. type: table
#: zsh.texi:26095
msgid ""
"Note that you need to uncomment a few lines in the @t{_main_complete} "
"function for these functions to work properly.  The lines in question are "
"used to store the option settings in effect before the completion widget "
"locally sets the options it needs.  Hence these functions are not generally "
"used by the completion system."
msgstr ""

#. type: t{#1}
#: zsh.texi:26096 zsh.texi:26097
#, no-wrap
msgid "_parameters"
msgstr ""

#. type: table
#: zsh.texi:26099
msgid "This is used to complete the names of shell parameters."
msgstr ""

#. type: table
#: zsh.texi:26105
msgid ""
"The option `@t{-g} @var{pattern}' limits the completion to parameters whose "
"type matches the @var{pattern}.  The type of a parameter is that shown by "
"`@t{print $@{(t)}@var{param}@t{@}}', hence judicious use of `@t{*}' in "
"@var{pattern} is probably necessary."
msgstr ""

#. type: table
#: zsh.texi:26108
msgid "All other arguments are passed to the @t{compadd} builtin."
msgstr ""

#. type: t{#1}
#: zsh.texi:26109 zsh.texi:26110
#, no-wrap
msgid "_path_files"
msgstr ""

#. type: table
#: zsh.texi:26115
msgid ""
"This function is used throughout the completion system to complete "
"filenames.  It allows completion of partial paths.  For example, the string "
"`@t{/u/i/s/sig}' may be completed to `@t{/usr/include/sys/signal.h}'."
msgstr ""

#. type: table
#: zsh.texi:26118
msgid "The options accepted by both @t{_path_files} and @t{_files} are:"
msgstr ""

#. type: table
#: zsh.texi:26123
msgid "Complete all filenames.  This is the default."
msgstr ""

#. type: t{#1}
#: zsh.texi:26124 zsh.texi:27020
#, no-wrap
msgid "-/"
msgstr ""

#. type: table
#: zsh.texi:26126
msgid "Specifies that only directories should be completed."
msgstr ""

#. type: item
#: zsh.texi:26127
#, no-wrap
msgid "@t{-g} @var{pattern}"
msgstr ""

#. type: table
#: zsh.texi:26129
msgid "Specifies that only files matching the @var{pattern} should be completed."
msgstr ""

#. type: item
#: zsh.texi:26130
#, no-wrap
msgid "@t{-W} @var{paths}"
msgstr ""

#. type: table
#: zsh.texi:26136
msgid ""
"Specifies path prefixes that are to be prepended to the string from the "
"command line to generate the filenames but that should not be inserted as "
"completions nor shown in completion listings.  Here, @var{paths} may be the "
"name of an array parameter, a literal list of paths enclosed in parentheses "
"or an absolute pathname."
msgstr ""

#. type: item
#: zsh.texi:26137
#, no-wrap
msgid "@t{-F} @var{ignored-files}"
msgstr ""

#. type: table
#: zsh.texi:26142
msgid ""
"This behaves as for the corresponding option to the @t{compadd} builtin.  It "
"gives direct control over which filenames should be ignored.  If the option "
"is not present, the @t{ignored-patterns} style is used."
msgstr ""

#. type: table
#: zsh.texi:26150
msgid ""
"Both @t{_path_files} and @t{_files} also accept the following options which "
"are passed to @t{compadd}: `@t{-J}', `@t{-V}', `@t{-1}', `@t{-2}', `@t{-n}', "
"`@t{-X}', `@t{-M}', `@t{-P}', `@t{-S}', `@t{-q}', `@t{-r}', and `@t{-R}'."
msgstr ""

#. type: table
#: zsh.texi:26155
msgid ""
"Finally, the @t{_path_files} function uses the styles @t{expand}, "
"@t{ambiguous}, @t{special-dirs}, @t{list-suffixes} and @t{file-sort} "
"described above."
msgstr ""

#. type: findex
#: zsh.texi:26156
#, no-wrap
msgid "_pick_variant"
msgstr ""

#. type: item
#: zsh.texi:26158
#, no-wrap
msgid ""
"@t{_pick_variant }[ @t{-b} @var{builtin-label} ] [ @t{-c} @var{command} ] [ "
"@t{-r} @var{name} ]"
msgstr ""

#. type: itemx
#: zsh.texi:26159
#, no-wrap
msgid ""
"@t{@ @ @ @ @ @ @ @ @ @ @ @ @ @ }@var{label}@t{=}@var{pattern} "
"... @var{label} [ @var{arg} ... ]"
msgstr ""

#. type: table
#: zsh.texi:26164
msgid ""
"This function is used to resolve situations where a single command name "
"requires more than one type of handling, either because it has more than one "
"variant or because there is a name clash between two different commands."
msgstr ""

#. type: table
#: zsh.texi:26175
msgid ""
"The command to run is taken from the first element of the array @t{words} "
"unless this is overridden by the option @t{-c}.  This command is run and its "
"output is compared with a series of patterns.  Arguments to be passed to the "
"command can be specified at the end after all the other arguments.  The "
"patterns to try in order are given by the arguments "
"@var{label}@t{=}@var{pattern}; if the output of `@var{command} @var{arg} "
"...' contains @var{pattern}, then @var{label} is selected as the label for "
"the command variant.  If none of the patterns match, the final command label "
"is selected and status 1 is returned."
msgstr ""

#. type: table
#: zsh.texi:26180
msgid ""
"If the `@t{-b} @var{builtin-label}' is given, the command is tested to see "
"if it is provided as a shell builtin, possibly autoloaded; if so, the label "
"@var{builtin-label} is selected as the label for the variant."
msgstr ""

#. type: table
#: zsh.texi:26184
msgid ""
"If the `@t{-r} @var{name}' is given, the @var{label} picked is stored in the "
"parameter named @var{name}."
msgstr ""

#. type: table
#: zsh.texi:26188
msgid ""
"The results are also cached in the @t{_cmd_variant} associative array "
"indexed by the name of the command run."
msgstr ""

#. type: findex
#: zsh.texi:26189
#, no-wrap
msgid "_regex_arguments"
msgstr ""

#. type: item
#: zsh.texi:26190
#, no-wrap
msgid "@t{_regex_arguments} @var{name} @var{spec} ..."
msgstr ""

#. type: table
#: zsh.texi:26198
msgid ""
"This function generates a completion function @var{name} which matches the "
"specifications @var{spec}s, a set of regular expressions as described "
"below.  After running @t{_regex_arguments}, the function @var{name} should "
"be called as a normal completion function.  The pattern to be matched is "
"given by the contents of the @t{words} array up to the current cursor "
"position joined together with null characters; no quotation is applied."
msgstr ""

#. type: table
#: zsh.texi:26208
msgid ""
"The arguments are grouped as sets of alternatives separated by `@t{|}', "
"which are tried one after the other until one matches.  Each alternative "
"consists of a one or more specifications which are tried left to right, with "
"each pattern matched being stripped in turn from the command line being "
"tested, until all of the group succeeds or until one fails; in the latter "
"case, the next alternative is tried.  This structure can be repeated to "
"arbitrary depth by using parentheses; matching proceeds from inside to "
"outside."
msgstr ""

#. type: table
#: zsh.texi:26220
msgid ""
"A special procedure is applied if no test succeeds but the remaining command "
"line string contains no null character (implying the remaining word is the "
"one for which completions are to be generated).  The completion target is "
"restricted to the remaining word and any @var{action}s for the corresponding "
"patterns are executed.  In this case, nothing is stripped from the command "
"line string.  The order of evaluation of the @var{action}s can be determined "
"by the @t{tag-order} style; the various formats supported by "
"@t{_alternative} can be used in @var{action}.  The @var{descr} is used for "
"setting up the array parameter @t{expl}."
msgstr ""

#. type: table
#: zsh.texi:26225
msgid ""
"Specification arguments take one of following forms, in which metacharacters "
"such as `@t{(}', `@t{)}', `@t{#}' and `@t{|}' should be quoted."
msgstr ""

#. type: item
#: zsh.texi:26228
#, no-wrap
msgid ""
"@t{/}@var{pattern}@t{/} [@t{%}@var{lookahead}@t{%}] [@t{-}@var{guard}] "
"[@t{:}@var{tag}@t{:}@var{descr}@t{:}@var{action}]"
msgstr ""

#. type: table
#: zsh.texi:26237
msgid ""
"This is a single primitive component.  The function tests whether the "
"combined pattern `@t{(#b)((#B)}@var{pattern}@t{)}@var{lookahead}@t{*}' "
"matches the command line string.  If so, `@var{guard}' is evaluated and its "
"return status is examined to determine if the test has succeeded.  The "
"@var{pattern} string `@t{[]}' is guaranteed never to match.  The "
"@var{lookahead} is not stripped from the command line before the next "
"pattern is examined."
msgstr ""

#. type: table
#: zsh.texi:26241
msgid ""
"The argument starting with @t{:} is used in the same manner as an argument "
"to @t{_alternative}."
msgstr ""

#. type: table
#: zsh.texi:26249
msgid ""
"A component is used as follows: @var{pattern} is tested to see if the "
"component already exists on the command line.  If it does, any following "
"specifications are examined to find something to complete.  If a component "
"is reached but no such pattern exists yet on the command line, the string "
"containing the @var{action} is used to generate matches to insert at that "
"point."
msgstr ""

#. type: item
#: zsh.texi:26250
#, no-wrap
msgid ""
"@t{/}@var{pattern}@t{/+} [@t{%}@var{lookahead}@t{%}] [@t{-}@var{guard}] "
"[@t{:}@var{tag}@t{:}@var{descr}@t{:}@var{action}]"
msgstr ""

#. type: table
#: zsh.texi:26254
msgid ""
"This is similar to `@t{/}@var{pattern}@t{/} ...' but the left part of the "
"command line string (i.e. the part already matched by previous patterns)  is "
"also considered part of the completion target."
msgstr ""

#. type: item
#: zsh.texi:26255
#, no-wrap
msgid ""
"@t{/}@var{pattern}@t{/-} [@t{%}@var{lookahead}@t{%}] [@t{-}@var{guard}] "
"[@t{:}@var{tag}@t{:}@var{descr}@t{:}@var{action}]"
msgstr ""

#. type: table
#: zsh.texi:26259
msgid ""
"This is similar to `@t{/}@var{pattern}@t{/} ...' but the @var{action}s of "
"the current and previously matched patterns are ignored even if the "
"following `@var{pattern}' matches the empty string."
msgstr ""

#. type: item
#: zsh.texi:26260
#, no-wrap
msgid "@t{(} @var{spec} @t{)}"
msgstr ""

#. type: table
#: zsh.texi:26263
msgid ""
"Parentheses may be used to groups @var{spec}s; note each parenthesis is a "
"single argument to @t{_regex_arguments}."
msgstr ""

#. type: item
#: zsh.texi:26264
#, no-wrap
msgid "@var{spec} @t{#}"
msgstr ""

#. type: table
#: zsh.texi:26266
msgid "This allows any number of repetitions of @var{spec}."
msgstr ""

#. type: item
#: zsh.texi:26267
#, no-wrap
msgid "@var{spec} @var{spec}"
msgstr ""

#. type: table
#: zsh.texi:26270
msgid ""
"The two @var{spec}s are to be matched one after the other as described "
"above."
msgstr ""

#. type: item
#: zsh.texi:26271
#, no-wrap
msgid "@var{spec} @t{|} @var{spec}"
msgstr ""

#. type: table
#: zsh.texi:26273
msgid "Either of the two @var{spec}s can be matched."
msgstr ""

#. type: table
#: zsh.texi:26280
msgid ""
"The function @t{_regex_words} can be used as a helper function to generate "
"matches for a set of alternative words possibly with their own arguments as "
"a command line argument."
msgstr ""

#. type: example
#: zsh.texi:26288
#, no-wrap
msgid ""
"_regex_arguments _tst /$'[^\\0]#\\0'/ \\ \n"
"    /$'[^\\0]#\\0'/ :'compadd aaa'\n"
msgstr ""

#. type: table
#: zsh.texi:26297
msgid ""
"This generates a function @t{_tst} that completes @t{aaa} as its only "
"argument.  The @var{tag} and @var{description} for the action have been "
"omitted for brevity (this works but is not recommended in normal use).  The "
"first component matches the command word, which is arbitrary; the second "
"matches any argument.  As the argument is also arbitrary, any following "
"component would not depend on @t{aaa} being present."
msgstr ""

#. type: example
#: zsh.texi:26302
#, no-wrap
msgid ""
"_regex_arguments _tst /$'[^\\0]#\\0'/ \\ \n"
"    /$'aaa\\0'/ :'compadd aaa'\n"
msgstr ""

#. type: table
#: zsh.texi:26307
msgid ""
"This is a more typical use; it is similar, but any following patterns would "
"only match if @t{aaa} was present as the first argument."
msgstr ""

#. type: example
#: zsh.texi:26313
#, no-wrap
msgid ""
"_regex_arguments _tst /$'[^\\0]#\\0'/ \\( \\ \n"
"    /$'aaa\\0'/ :'compadd aaa' \\ \n"
"    /$'bbb\\0'/ :'compadd bbb' \\) \\#\n"
msgstr ""

#. type: table
#: zsh.texi:26320
msgid ""
"In this example, an indefinite number of command arguments may be "
"completed.  Odd arguments are completed as @t{aaa} and even arguments as "
"@t{bbb}.  Completion fails unless the set of @t{aaa} and @t{bbb} arguments "
"before the current one is matched correctly."
msgstr ""

#. type: example
#: zsh.texi:26326
#, no-wrap
msgid ""
"_regex_arguments _tst /$'[^\\0]#\\0'/ \\ \n"
"    \\( /$'aaa\\0'/ :'compadd aaa' \\| \\ \n"
"    /$'bbb\\0'/ :'compadd bbb' \\) \\#\n"
msgstr ""

#. type: table
#: zsh.texi:26332
msgid ""
"This is similar, but either @t{aaa} or @t{bbb} may be completed for any "
"argument.  In this case @t{_regex_words} could be used to generate a "
"suitable expression for the arguments."
msgstr ""

#. type: findex
#: zsh.texi:26335
#, no-wrap
msgid "_regex_words [ @t{-t} @var{term} ]"
msgstr ""

#. type: item
#: zsh.texi:26336
#, no-wrap
msgid "@t{_regex_words} @var{tag} @var{description} @var{spec} ..."
msgstr ""

#. type: table
#: zsh.texi:26343
msgid ""
"This function can be used to generate arguments for the @t{_regex_arguments} "
"command which may be inserted at any point where a set of rules is "
"expected.  The @var{tag} and @var{description} give a standard tag and "
"description pertaining to the current context.  Each @var{spec} contains two "
"or three arguments separated by a colon: note that there is no leading colon "
"in this case."
msgstr ""

#. type: table
#: zsh.texi:26348
msgid ""
"Each @var{spec} gives one of a set of words that may be completed at this "
"point, together with arguments.  It is thus roughly equivalent to the "
"@t{_arguments} function when used in normal (non-regex) completion."
msgstr ""

#. type: table
#: zsh.texi:26355
msgid ""
"The part of the @var{spec} before the first colon is the word to be "
"completed.  This may contain a @t{*}; the entire word, before and after the "
"@t{*} is completed, but only the text before the @t{*} is required for the "
"context to be matched, so that further arguments may be completed after the "
"abbreviated form."
msgstr ""

#. type: table
#: zsh.texi:26359
msgid "The second part of @var{spec} is a description for the word being completed."
msgstr ""

#. type: table
#: zsh.texi:26366
msgid ""
"The optional third part of the @var{spec} describes how words following the "
"one being completed are themselves to be completed.  It will be evaluated in "
"order to avoid problems with quoting.  This means that typically it contains "
"a reference to an array containing previously generated regex arguments."
msgstr ""

#. type: table
#: zsh.texi:26371
msgid ""
"The option @t{-t} @var{term} specifies a terminator for the word instead of "
"the usual space.  This is handled as an auto-removable suffix in the manner "
"of the option @t{-s} @var{sep} to @t{_values}."
msgstr ""

#. type: table
#: zsh.texi:26377
msgid ""
"The result of the processing by @t{_regex_words} is placed in the array "
"@t{reply}, which should be made local to the calling function.  If the set "
"of words and arguments may be matched repeatedly, a @t{#} should be appended "
"to the generated array at that point."
msgstr ""

#. type: example
#: zsh.texi:26389
#, no-wrap
msgid ""
"local -a reply\n"
"_regex_words mydb-commands 'mydb commands' \\ \n"
"  'add:add an entry to mydb:$mydb_add_cmds' \\ \n"
"  'show:show entries in mydb'\n"
"_regex_arguments _mydb \"$reply[@@]\"\n"
"_mydb \"$@@\"\n"
msgstr ""

#. type: table
#: zsh.texi:26397
msgid ""
"This shows a completion function for a command @t{mydb} which takes two "
"command arguments, @t{add} and @t{show}.  @t{show} takes no arguments, while "
"the arguments for @t{add} have already been prepared in an array "
"@t{mydb_add_cmds}, quite possibly by a previous call to @t{_regex_words}."
msgstr ""

#. type: findex
#: zsh.texi:26398
#, no-wrap
msgid "_requested"
msgstr ""

#. type: item
#: zsh.texi:26399
#, no-wrap
msgid ""
"@t{_requested} [ @t{-x} ] [ @t{-12VJ} ] @var{tag} [ @var{name} @var{descr} [ "
"@var{command} [ @var{arg} ... ] ]"
msgstr ""

#. type: table
#: zsh.texi:26405
msgid ""
"This function is called to decide whether a tag already registered by a call "
"to @t{_tags} (see below) has been requested by the user and hence completion "
"should be performed for it.  It returns status zero if the tag is requested "
"and non-zero otherwise.  The function is typically used as part of a loop "
"over different tags as follows:"
msgstr ""

#. type: example
#: zsh.texi:26416
#, no-wrap
msgid ""
"_tags foo bar baz\n"
"while _tags; do\n"
"  if _requested foo; then\n"
"    ... # perform completion for foo\n"
"  fi\n"
"  ... # test the tags bar and baz in the same way\n"
"  ... # exit loop if matches were generated\n"
"done\n"
msgstr ""

#. type: table
#: zsh.texi:26423
msgid ""
"Note that the test for whether matches were generated is not performed until "
"the end of the @t{_tags} loop.  This is so that the user can set the "
"@t{tag-order} style to specify a set of tags to be completed at the same "
"time."
msgstr ""

#. type: table
#: zsh.texi:26428
msgid ""
"If @var{name} and @var{descr} are given, @t{_requested} calls the "
"@t{_description} function with these arguments together with the options "
"passed to @t{_requested}."
msgstr ""

#. type: table
#: zsh.texi:26434
msgid ""
"If @var{command} is given, the @t{_all_labels} function will be called "
"immediately with the same arguments.  In simple cases this makes it possible "
"to perform the test for the tag and the matching in one go.  For example:"
msgstr ""

#. type: example
#: zsh.texi:26445
#, no-wrap
msgid ""
"local expl ret=1\n"
"_tags foo bar baz\n"
"while _tags; do\n"
"  _requested foo expl 'description' \\ \n"
"      compadd foobar foobaz && ret=0\n"
"  ...\n"
"  (( ret )) || break\n"
"done\n"
msgstr ""

#. type: table
#: zsh.texi:26450
msgid ""
"If the @var{command} is not @t{compadd}, it must nevertheless be prepared to "
"handle the same options."
msgstr ""

#. type: findex
#: zsh.texi:26451
#, no-wrap
msgid "_retrieve_cache"
msgstr ""

#. type: item
#: zsh.texi:26452
#, no-wrap
msgid "@t{_retrieve_cache} @var{cache_identifier}"
msgstr ""

#. type: table
#: zsh.texi:26460
msgid ""
"This function retrieves completion information from the file given by "
"@var{cache_identifier}, stored in a directory specified by the "
"@t{cache-path} style which defaults to @t{~/.zcompcache}.  The return status "
"is zero if retrieval was successful.  It will only attempt retrieval if the "
"@t{use-cache} style is set, so you can call this function without worrying "
"about whether the user wanted to use the caching layer."
msgstr ""

#. type: table
#: zsh.texi:26463
msgid "See @t{_store_cache} below for more details."
msgstr ""

#. type: t{#1}
#: zsh.texi:26464 zsh.texi:26465
#, no-wrap
msgid "_sep_parts"
msgstr ""

#. type: table
#: zsh.texi:26473
msgid ""
"This function is passed alternating arrays and separators as arguments.  The "
"arrays specify completions for parts of strings to be separated by the "
"separators.  The arrays may be the names of array parameters or a quoted "
"list of words in parentheses.  For example, with the array `@t{hosts=(ftp "
"news)}' the call `@t{_sep_parts '(foo bar)' @@ hosts}' will complete the "
"string `@t{f}' to `@t{foo}' and the string `@t{b@@n}' to `@t{bar@@news}'."
msgstr ""

#. type: table
#: zsh.texi:26479
msgid ""
"This function accepts the @t{compadd} options `@t{-V}', `@t{-J}', `@t{-1}', "
"`@t{-2}', `@t{-n}', `@t{-X}', `@t{-M}', `@t{-P}', `@t{-S}', `@t{-r}', "
"`@t{-R}', and `@t{-q}' and passes them on to the @t{compadd} builtin used to "
"add the matches."
msgstr ""

#. type: findex
#: zsh.texi:26480
#, no-wrap
msgid "_sequence"
msgstr ""

#. type: item
#: zsh.texi:26481
#, no-wrap
msgid ""
"@t{_sequence} [ @t{-s} @var{sep} ] [ @t{-n} @var{max} ] [ @t{-d} ] "
"@var{function} [ @t{-} ] ..."
msgstr ""

#. type: table
#: zsh.texi:26488
msgid ""
"This function is a wrapper to other functions for completing items in a "
"separated list. The same function is used to complete each item in the "
"list. The separator is specified with the @t{-s} option. If @t{-s} is "
"omitted it will use `@t{,}'. Duplicate values are not matched unless @t{-d} "
"is specified. If there is a fixed or maximum number of items in the list, "
"this can be specified with the @t{-n} option."
msgstr ""

#. type: table
#: zsh.texi:26493
msgid ""
"Common @t{compadd} options are passed on to the function. It is possible to "
"use @t{compadd} directly with @t{_sequence}, though @t{_values} may be more "
"appropriate in this situation."
msgstr ""

#. type: findex
#: zsh.texi:26494
#, no-wrap
msgid "_setup"
msgstr ""

#. type: item
#: zsh.texi:26495
#, no-wrap
msgid "@t{_setup} @var{tag} [ @var{group} ]"
msgstr ""

#. type: table
#: zsh.texi:26501
msgid ""
"This function sets up the special parameters used by the completion system "
"appropriately for the @var{tag} given as the first argument.  It uses the "
"styles @t{list-colors}, @t{list-packed}, @t{list-rows-first}, "
"@t{last-prompt}, @t{accept-exact}, @t{menu} and @t{force-list}."
msgstr ""

#. type: table
#: zsh.texi:26506
msgid ""
"The optional @var{group} supplies the name of the group in which the matches "
"will be placed.  If it is not given, the @var{tag} is used as the group "
"name."
msgstr ""

#. type: table
#: zsh.texi:26510
msgid ""
"This function is called automatically from @t{_description} and hence is not "
"normally called explicitly."
msgstr ""

#. type: findex
#: zsh.texi:26511
#, no-wrap
msgid "_store_cache"
msgstr ""

#. type: item
#: zsh.texi:26512
#, no-wrap
msgid "@t{_store_cache} @var{cache_identifier} @var{param} ..."
msgstr ""

#. type: table
#: zsh.texi:26520
msgid ""
"This function, together with @t{_retrieve_cache} and @t{_cache_invalid}, "
"implements a caching layer which can be used in any completion function.  "
"Data obtained by costly operations are stored in parameters; this function "
"then dumps the values of those parameters to a file.  The data can then be "
"retrieved quickly from that file via @t{_retrieve_cache}, even in different "
"instances of the shell."
msgstr ""

#. type: table
#: zsh.texi:26526
msgid ""
"The @var{cache_identifier} specifies the file which the data should be "
"dumped to.  The file is stored in a directory specified by the "
"@t{cache-path} style which defaults to @t{~/.zcompcache}.  The remaining "
"@var{param}s arguments are the parameters to dump to the file."
msgstr ""

#. type: table
#: zsh.texi:26532
msgid ""
"The return status is zero if storage was successful.  The function will only "
"attempt storage if the @t{use-cache} style is set, so you can call this "
"function without worrying about whether the user wanted to use the caching "
"layer."
msgstr ""

#. type: table
#: zsh.texi:26539
msgid ""
"The completion function may avoid calling @t{_retrieve_cache} when it "
"already has the completion data available as parameters.  However, in that "
"case it should call @t{_cache_invalid} to check whether the data in the "
"parameters and in the cache are still valid."
msgstr ""

#. type: table
#: zsh.texi:26543
msgid ""
"See the _perl_modules completion function for a simple example of the usage "
"of the caching layer."
msgstr ""

#. type: findex
#: zsh.texi:26544
#, no-wrap
msgid "_tags"
msgstr ""

#. type: item
#: zsh.texi:26545
#, no-wrap
msgid "@t{_tags} [ [ @t{-C} @var{name} ] @var{tag} ... ]"
msgstr ""

#. type: table
#: zsh.texi:26549
msgid ""
"If called with arguments, these are taken to be the names of tags valid for "
"completions in the current context.  These tags are stored internally and "
"sorted by using the @t{tag-order} style."
msgstr ""

#. type: table
#: zsh.texi:26557
msgid ""
"Next, @t{_tags} is called repeatedly without arguments from the same "
"completion function.  This successively selects the first, second, etc. set "
"of tags requested by the user.  The return status is zero if at least one of "
"the tags is requested and non-zero otherwise.  To test if a particular tag "
"is to be tried, the @t{_requested} function should be called (see above)."
msgstr ""

#. type: table
#: zsh.texi:26565
msgid ""
"If `@t{-C} @var{name}' is given, @var{name} is temporarily stored in the "
"@var{argument} field (the fifth) of the context in the @t{curcontext} "
"parameter during the call to @t{_tags}; the field is restored on exit.  This "
"allows @t{_tags} to use a more specific context without having to change and "
"reset the @t{curcontext} parameter (which has the same effect)."
msgstr ""

#. type: t{#1}
#: zsh.texi:26566 zsh.texi:26567
#, no-wrap
msgid "_tilde_files"
msgstr ""

#. type: table
#: zsh.texi:26571
msgid ""
"Like @t{_files}, but resolve leading tildes according to the rules of "
"filename expansion, so the suggested completions don't start with a `@t{~}' "
"even if the filename on the command-line does."
msgstr ""

#. type: findex
#: zsh.texi:26572
#, no-wrap
msgid "_values"
msgstr ""

#. type: item
#: zsh.texi:26573
#, no-wrap
msgid ""
"@t{_values} [ @t{-O} @var{name} ] [ @t{-s} @var{sep} ] [ @t{-S} @var{sep} ] "
"[ @t{-wC} ] @var{desc} @var{spec} ..."
msgstr ""

#. type: table
#: zsh.texi:26576
msgid ""
"This is used to complete arbitrary keywords (values) and their arguments, or "
"lists of such combinations."
msgstr ""

#. type: table
#: zsh.texi:26582
msgid ""
"If the first argument is the option `@t{-O} @var{name}', it will be used in "
"the same way as by the @t{_arguments} function.  In other words, the "
"elements of the @var{name} array will be passed to @t{compadd} when "
"executing an action."
msgstr ""

#. type: table
#: zsh.texi:26591
msgid ""
"If the first argument (or the first argument after `@t{-O} @var{name}')  is "
"`@t{-s}', the next argument is used as the character that separates multiple "
"values.  This character is automatically added after each value in an "
"auto-removable fashion (see below); all values completed by `@t{_values -s}' "
"appear in the same word on the command line, unlike completion using "
"@t{_arguments}.  If this option is not present, only a single value will be "
"completed per word."
msgstr ""

#. type: table
#: zsh.texi:26597
msgid ""
"Normally, @t{_values} will only use the current word to determine which "
"values are already present on the command line and hence are not to be "
"completed again.  If the @t{-w} option is given, other arguments are "
"examined as well."
msgstr ""

#. type: table
#: zsh.texi:26601
msgid ""
"The first non-option argument, @var{desc}, is used as a string to print as a "
"description before listing the values."
msgstr ""

#. type: table
#: zsh.texi:26609
msgid ""
"All other arguments describe the possible values and their arguments in the "
"same format used for the description of options by the @t{_arguments} "
"function (see above).  The only differences are that no minus or plus sign "
"is required at the beginning, values can have only one argument, and the "
"forms of action beginning with an equal sign are not supported."
msgstr ""

#. type: table
#: zsh.texi:26615
msgid ""
"The character separating a value from its argument can be set using the "
"option @t{-S} (like @t{-s}, followed by the character to use as the "
"separator in the next argument).  By default the equals sign will be used as "
"the separator between values and arguments."
msgstr ""

#. type: example
#: zsh.texi:26625
#, no-wrap
msgid ""
"_values -s , 'description' \\ \n"
"        '*foo[bar]' \\ \n"
"        '(two)*one[number]:first count:' \\ \n"
"        'two[another number]::second count:(1 2 3)'\n"
msgstr ""

#. type: table
#: zsh.texi:26641
msgid ""
"This describes three possible values: `@t{foo}', `@t{one}', and `@t{two}'.  "
"The first is described as `@t{bar}', takes no argument and may appear more "
"than once.  The second is described as `@t{number}', may appear more than "
"once, and takes one mandatory argument described as `@t{first count}'; no "
"action is specified, so it will not be completed.  The `@t{(two)}' at the "
"beginning says that if the value `@t{one}' is on the line, the value "
"`@t{two}' will no longer be considered a possible completion.  Finally, the "
"last value (`@t{two}') is described as `@t{another number}' and takes an "
"optional argument described as `@t{second count}' for which the completions "
"(to appear after an `@t{=}') are `@t{1}', `@t{2}', and `@t{3}'.  The "
"@t{_values} function will complete lists of these values separated by "
"commas."
msgstr ""

#. type: table
#: zsh.texi:26647
msgid ""
"Like @t{_arguments}, this function temporarily adds another context name "
"component to the arguments element (the fifth) of the current context while "
"executing the @var{action}.  Here this name is just the name of the value "
"for which the argument is completed."
msgstr ""

#. type: table
#: zsh.texi:26651
msgid ""
"The style @t{verbose} is used to decide if the descriptions for the values "
"(but not those for the arguments) should be printed."
msgstr ""

#. type: table
#: zsh.texi:26658
msgid ""
"The associative array @t{val_args} is used to report values and their "
"arguments; this works similarly to the @t{opt_args} associative array used "
"by @t{_arguments}.  Hence the function calling @t{_values} should declare "
"the local parameters @t{state}, @t{state_descr}, @t{line}, @t{context} and "
"@t{val_args}:"
msgstr ""

#. type: example
#: zsh.texi:26663
#, no-wrap
msgid ""
"local context state state_descr line\n"
"typeset -A val_args\n"
msgstr ""

#. type: table
#: zsh.texi:26671
msgid ""
"when using an action of the form `@t{->}@var{string}'.  With this function "
"the @t{context} parameter will be set to the name of the value whose "
"argument is to be completed.  Note that for @t{_values}, the @t{state} and "
"@t{state_descr} are scalars rather than arrays.  Only a single matching "
"state is returned."
msgstr ""

#. type: table
#: zsh.texi:26681
msgid ""
"Note also that @t{_values} normally adds the character used as the separator "
"between values as an auto-removable suffix (similar to a `@t{/}' after a "
"directory).  However, this is not possible for a `@t{->}@var{string}' action "
"as the matches for the argument are generated by the calling function.  To "
"get the usual behaviour, the calling function can add the separator @var{x} "
"as a suffix by passing the options `@t{-qS} @var{x}' either directly or "
"indirectly to @t{compadd}."
msgstr ""

#. type: table
#: zsh.texi:26686
msgid ""
"The option @t{-C} is treated in the same way as it is by @t{_arguments}.  In "
"that case the parameter @t{curcontext} should be made local instead of "
"@t{context} (as described above)."
msgstr ""

#. type: findex
#: zsh.texi:26687
#, no-wrap
msgid "_wanted"
msgstr ""

#. type: item
#: zsh.texi:26688
#, no-wrap
msgid ""
"@t{_wanted} [ @t{-x} ] [ @t{-C} @var{name} ]  [ @t{-12VJ} ] @var{tag} "
"@var{name} @var{descr} @var{command} [ @var{arg} ...]"
msgstr ""

#. type: table
#: zsh.texi:26693
msgid ""
"In many contexts, completion can only generate one particular set of "
"matches, usually corresponding to a single tag.  However, it is still "
"necessary to decide whether the user requires matches of this type.  This "
"function is useful in such a case."
msgstr ""

#. type: table
#: zsh.texi:26700
msgid ""
"The arguments to @t{_wanted} are the same as those to @t{_requested}, "
"i.e. arguments to be passed to @t{_description}.  However, in this case the "
"@var{command} is not optional; all the processing of tags, including the "
"loop over both tags and tag labels and the generation of matches, is carried "
"out automatically by @t{_wanted}."
msgstr ""

#. type: table
#: zsh.texi:26704
msgid ""
"Hence to offer only one tag and immediately add the corresponding matches "
"with the given description:"
msgstr ""

#. type: example
#: zsh.texi:26710
#, no-wrap
msgid ""
"local expl\n"
"_wanted tag expl 'description' \\ \n"
"    compadd -- @var{match1} @var{match2}...\n"
msgstr ""

#. type: table
#: zsh.texi:26715
msgid ""
"See also the use of @t{_wanted} in the example function in @ref{Dynamic "
"named directories}."
msgstr ""

#. type: table
#: zsh.texi:26719
msgid ""
"Note that, as for @t{_requested}, the @var{command} must be able to accept "
"options to be passed down to @t{compadd}."
msgstr ""

#. type: table
#: zsh.texi:26724
msgid ""
"Like @t{_tags} this function supports the @t{-C} option to give a different "
"name for the argument context field.  The @t{-x} option has the same meaning "
"as for @t{_description}."
msgstr ""

#. type: findex
#: zsh.texi:26725
#, no-wrap
msgid "_widgets"
msgstr ""

#. type: item
#: zsh.texi:26726
#, no-wrap
msgid "@t{_widgets} [ @t{-g} @var{pattern} ]"
msgstr ""

#. type: table
#: zsh.texi:26731
msgid ""
"This function completes names of zle widgets (see @ref{Zle Widgets}).  The "
"@var{pattern}, if present, is matched against values of the @t{$widgets} "
"special parameter, documented in @ref{The zsh/zleparameter Module}."
msgstr ""

#. type: cindex
#: zsh.texi:26739
#, no-wrap
msgid "completion system, variables"
msgstr ""

#. type: Plain text
#: zsh.texi:26744
msgid ""
"There are some standard variables, initialised by the @t{_main_complete} "
"function and then used from other functions."
msgstr ""

#. type: Plain text
#: zsh.texi:26747
msgid "The standard variables are:"
msgstr ""

#. type: t{#1}
#: zsh.texi:26750
#, no-wrap
msgid "_comp_caller_options"
msgstr ""

#. type: table
#: zsh.texi:26758
msgid ""
"The completion system uses @t{setopt} to set a number of options. This "
"allows functions to be written without concern for compatibility with every "
"possible combination of user options. However, sometimes completion needs to "
"know what the user's option preferences are. These are saved in the "
"@t{_comp_caller_options} associative array. Option names, spelled in "
"lowercase without underscores, are mapped to one or other of the strings "
"`@t{on}' and `@t{off}'."
msgstr ""

#. type: t{#1}
#: zsh.texi:26759
#, no-wrap
msgid "_comp_priv_prefix"
msgstr ""

#. type: table
#: zsh.texi:26763
msgid ""
"Completion functions such as @t{_sudo} can set the @t{_comp_priv_prefix} "
"array to a command prefix that may then be used by @t{_call_program} to "
"match the privileges when calling programs to generate matches."
msgstr ""

#. type: vindex
#: zsh.texi:26767
#, no-wrap
msgid "compprefuncs, use of"
msgstr ""

#. type: vindex
#: zsh.texi:26768
#, no-wrap
msgid "comppostfuncs, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:26774
msgid ""
"Two more features are offered by the @t{_main_complete} function.  The "
"arrays @t{compprefuncs} and @t{comppostfuncs} may contain names of functions "
"that are to be called immediately before or after completion has been "
"tried.  A function will only be called once unless it explicitly reinserts "
"itself into the array."
msgstr ""

#. type: cindex
#: zsh.texi:26780
#, no-wrap
msgid "completion system, directory structure"
msgstr ""

#. type: Plain text
#: zsh.texi:26790
msgid ""
"In the source distribution, the files are contained in various "
"subdirectories of the @t{Completion} directory.  They may have been "
"installed in the same structure, or into one single function directory.  The "
"following is a description of the files found in the original directory "
"structure.  If you wish to alter an installed file, you will need to copy it "
"to some directory which appears earlier in your @t{fpath} than the standard "
"directory where it appears."
msgstr ""

#. type: t{#1}
#: zsh.texi:26793
#, no-wrap
msgid "Base"
msgstr ""

#. type: table
#: zsh.texi:26797
msgid ""
"The core functions and special completion widgets automatically bound to "
"keys.  You will certainly need most of these, though will probably not need "
"to alter them.  Many of these are documented above."
msgstr ""

#. type: t{#1}
#: zsh.texi:26798
#, no-wrap
msgid "Zsh"
msgstr ""

#. type: table
#: zsh.texi:26802
msgid ""
"Functions for completing arguments of shell builtin commands and utility "
"functions for this.  Some of these are also used by functions from the "
"@t{Unix} directory."
msgstr ""

#. type: t{#1}
#: zsh.texi:26803
#, no-wrap
msgid "Unix"
msgstr ""

#. type: table
#: zsh.texi:26811
msgid ""
"Functions for completing arguments of external commands and suites of "
"commands.  They may need modifying for your system, although in many cases "
"some attempt is made to decide which version of a command is present.  For "
"example, completion for the @t{mount} command tries to determine the system "
"it is running on, while completion for many other utilities try to decide "
"whether the GNU version of the command is in use, and hence whether the "
"@t{-}@t{-help} option is supported."
msgstr ""

#. type: item
#: zsh.texi:26812
#, no-wrap
msgid "@t{X}, @t{AIX}, @t{BSD}, ..."
msgstr ""

#. type: table
#: zsh.texi:26817
msgid ""
"Completion and utility function for commands available only on some "
"systems.  These are not arranged hierarchically, so, for example, both the "
"@t{Linux} and @t{Debian} directories, as well as the @t{X} directory, may be "
"useful on your system."
msgstr ""

#. type: section
#: zsh.texi:26828
#, no-wrap
msgid "Types of completion"
msgstr ""

#. type: Plain text
#: zsh.texi:26836
msgid ""
"This version of zsh has two ways of performing completion of words on the "
"command line.  New users of the shell may prefer to use the newer and more "
"powerful system based on shell functions; this is described in "
"@ref{Completion System}, and the basic shell mechanisms which support it are "
"described in @ref{Completion Widgets}.  This chapter describes the older "
"@t{compctl} command."
msgstr ""

#. type: item
#: zsh.texi:26842
#, no-wrap
msgid "@t{compctl} [ @t{-CDT} ] @var{options} [ @var{command} ... ]"
msgstr ""

#. type: item
#: zsh.texi:26843 zsh.texi:27454
#, no-wrap
msgid ""
"@t{compctl }[ @t{-CDT} ] @var{options} [ @t{-x} @var{pattern} @var{options} "
"@t{-} ... @t{-}@t{-} ]"
msgstr ""

#. type: item
#: zsh.texi:26844 zsh.texi:27455
#, no-wrap
msgid ""
"@t{@ @ @ @ @ @ @ @ }[ @t{+} @var{options} [ @t{-x} ... @t{-}@t{-} ] "
"... [@t{+}] ] [ @var{command} ... ]"
msgstr ""

#. type: item
#: zsh.texi:26845
#, no-wrap
msgid "@t{compctl} @t{-M} @var{match-specs} ..."
msgstr ""

#. type: item
#: zsh.texi:26846
#, no-wrap
msgid "@t{compctl} @t{-L} [ @t{-CDTM} ] [ @var{command} ... ]"
msgstr ""

#. type: item
#: zsh.texi:26847
#, no-wrap
msgid "@t{compctl} @t{+} @var{command} ..."
msgstr ""

#. type: Plain text
#: zsh.texi:26861
msgid ""
"Control the editor's completion behavior according to the supplied set of "
"@var{options}.  Various editing commands, notably "
"@t{expand-or-complete-word}, usually bound to tab, will attempt to complete "
"a word typed by the user, while others, notably @t{delete-char-or-list}, "
"usually bound to ^D in EMACS editing mode, list the possibilities; "
"@t{compctl} controls what those possibilities are.  They may for example be "
"filenames (the most common case, and hence the default), shell variables, or "
"words from a user-specified list."
msgstr ""

#. type: node
#: zsh.texi:26870 zsh.texi:26872 zsh.texi:26980
#, no-wrap
msgid "Command Flags"
msgstr ""

#. type: node
#: zsh.texi:26870 zsh.texi:26980 zsh.texi:26982 zsh.texi:27009 zsh.texi:27110
#: zsh.texi:27193 zsh.texi:27421
#, no-wrap
msgid "Option Flags"
msgstr ""

#. type: Plain text
#: zsh.texi:26880
msgid ""
"Completion of the arguments of a command may be different for each command "
"or may use the default.  The behavior when completing the command word "
"itself may also be separately specified.  These correspond to the following "
"flags and arguments, all of which (except for @t{-L}) may be combined with "
"any combination of the @var{options} described subsequently in @ref{Option "
"Flags}:"
msgstr ""

#. type: item
#: zsh.texi:26883
#, no-wrap
msgid "@var{command} ..."
msgstr ""

#. type: table
#: zsh.texi:26889
msgid ""
"controls completion for the named commands, which must be listed last on the "
"command line.  If completion is attempted for a command with a pathname "
"containing slashes and no completion definition is found, the search is "
"retried with the last pathname component. If the command starts with a "
"@t{=}, completion is tried with the pathname of the command."
msgstr ""

#. type: table
#: zsh.texi:26901
msgid ""
"Any of the @var{command} strings may be patterns of the form normally used "
"for filename generation.  These should be quoted to protect them from "
"immediate expansion; for example the command string @t{'foo*'} arranges for "
"completion of the words of any command beginning with @t{foo}.  When "
"completion is attempted, all pattern completions are tried in the reverse "
"order of their definition until one matches.  By default, completion then "
"proceeds as normal, i.e. the shell will try to generate more matches for the "
"specific command on the command line; this can be overridden by including "
"@t{-tn} in the flags for the pattern completion."
msgstr ""

#. type: table
#: zsh.texi:26907
msgid ""
"Note that aliases are expanded before the command name is determined unless "
"the @t{COMPLETE_ALIASES} option is set.  Commands may not be combined with "
"the @t{-C}, @t{-D} or @t{-T} flags."
msgstr ""

#. type: table
#: zsh.texi:26913
msgid ""
"controls completion when the command word itself is being completed.  If no "
"@t{compctl -C} command has been issued, the names of any executable command "
"(whether in the path or specific to the shell, such as aliases or functions) "
"are completed."
msgstr ""

#. type: table
#: zsh.texi:26918
msgid ""
"controls default completion behavior for the arguments of commands not "
"assigned any special behavior.  If no @t{compctl -D} command has been "
"issued, filenames are completed."
msgstr ""

#. type: table
#: zsh.texi:26929
msgid ""
"supplies completion flags to be used before any other processing is done, "
"even before processing for @t{compctl}s defined for specific commands.  This "
"is especially useful when combined with extended completion (the @t{-x} "
"flag, see @ref{Extended Completion} below).  Using this flag you can define "
"default behavior which will apply to all commands without exception, or you "
"can alter the standard behavior for all commands.  For example, if your "
"access to the user database is too slow and/or it contains too many users "
"(so that completion after `@t{~}' is too slow to be usable), you can use"
msgstr ""

#. type: example
#: zsh.texi:26933
#, no-wrap
msgid "compctl -T -x 's[~] C[0,[^/]#]' -k friends -S/ -tn\n"
msgstr ""

#. type: table
#: zsh.texi:26940
msgid ""
"to complete the strings in the array @t{friends} after a `@t{~}'.  The "
"@t{C[}@var{...}@t{]} argument is necessary so that this form of "
"@t{~}-completion is not tried after the directory name is finished."
msgstr ""

#. type: table
#: zsh.texi:26947
msgid ""
"lists the existing completion behavior in a manner suitable for putting into "
"a start-up script; the existing behavior is not changed.  Any combination of "
"the above forms, or the @t{-M} flag (which must follow the @t{-L} flag), may "
"be specified, otherwise all defined completions are listed.  Any other flags "
"supplied are ignored."
msgstr ""

#. type: emph{#1}
#: zsh.texi:26948
#, no-wrap
msgid "no argument"
msgstr ""

#. type: table
#: zsh.texi:26952
msgid ""
"If no argument is given, @t{compctl} lists all defined completions in an "
"abbreviated form; with a list of @var{options}, all completions with those "
"flags set (not counting extended completion) are listed."
msgstr ""

#. type: Plain text
#: zsh.texi:26960
msgid ""
"If the @t{+} flag is alone and followed immediately by the @var{command} "
"list, the completion behavior for all the commands in the list is reset to "
"the default.  In other words, completion will subsequently use the options "
"specified by the @t{-D} flag."
msgstr ""

#. type: Plain text
#: zsh.texi:26968
msgid ""
"The form with @t{-M} as the first and only option defines global matching "
"specifications (see @ref{Completion Matching Control}). The match "
"specifications given will be used for every completion attempt (only when "
"using @t{compctl}, not with the new completion system) and are tried in the "
"order in which they are defined until one generates at least one "
"match. E.g.:"
msgstr ""

#. type: example
#: zsh.texi:26972
#, no-wrap
msgid "compctl -M @value{dsq} 'm:@{a-zA-Z@}=@{A-Za-z@}'\n"
msgstr ""

#. type: Plain text
#: zsh.texi:26978
msgid ""
"This will first try completion without any global match specifications (the "
"empty string) and, if that generates no matches, will try case insensitive "
"completion."
msgstr ""

#. type: node
#: zsh.texi:26980 zsh.texi:27421 zsh.texi:27423 zsh.texi:27440
#, no-wrap
msgid "Alternative Completion"
msgstr ""

#. type: item
#: zsh.texi:26985
#, no-wrap
msgid "[ @t{-fcFBdeaRGovNAIOPZEnbjrzu/12} ]"
msgstr ""

#. type: item
#: zsh.texi:26986
#, no-wrap
msgid ""
"[ @t{-k} @var{array} ] [ @t{-g} @var{globstring} ] [ @t{-s} "
"@var{subststring} ]"
msgstr ""

#. type: item
#: zsh.texi:26987
#, no-wrap
msgid "[ @t{-K} @var{function} ]"
msgstr ""

#. type: item
#: zsh.texi:26988
#, no-wrap
msgid "[ @t{-Q} ] [ @t{-P} @var{prefix} ] [ @t{-S} @var{suffix} ]"
msgstr ""

#. type: item
#: zsh.texi:26989
#, no-wrap
msgid "[ @t{-W} @var{file-prefix} ] [ @t{-H} @var{num pattern} ]"
msgstr ""

#. type: item
#: zsh.texi:26990
#, no-wrap
msgid "[ @t{-q} ] [ @t{-X} @var{explanation} ] [ @t{-Y} @var{explanation} ]"
msgstr ""

#. type: item
#: zsh.texi:26991
#, no-wrap
msgid ""
"[ @t{-y} @var{func-or-var} ] [ @t{-l} @var{cmd} ] [ @t{-h} @var{cmd} ] [ "
"@t{-U} ]"
msgstr ""

#. type: item
#: zsh.texi:26992
#, no-wrap
msgid "[ @t{-t} @var{continue} ] [ @t{-J} @var{name} ] [ @t{-V} @var{name} ]"
msgstr ""

#. type: item
#: zsh.texi:26993
#, no-wrap
msgid "[ @t{-M} @var{match-spec} ]"
msgstr ""

#. type: Plain text
#: zsh.texi:27002
msgid ""
"The remaining @var{options} specify the type of command arguments to look "
"for during completion.  Any combination of these flags may be specified; the "
"result is a sorted list of all the possibilities.  The options are as "
"follows."
msgstr ""

#. type: menuentry
#: zsh.texi:27006
msgid "Simple Flags::"
msgstr ""

#. type: menuentry
#: zsh.texi:27006
msgid "Flags with Arguments::"
msgstr ""

#. type: subsection
#: zsh.texi:27006 zsh.texi:27110 zsh.texi:27193 zsh.texi:27195
#, no-wrap
msgid "Control Flags"
msgstr ""

#. type: node
#: zsh.texi:27009 zsh.texi:27011 zsh.texi:27110
#, no-wrap
msgid "Simple Flags"
msgstr ""

#. type: node
#: zsh.texi:27009 zsh.texi:27110 zsh.texi:27112 zsh.texi:27193
#, no-wrap
msgid "Flags with Arguments"
msgstr ""

#. type: Plain text
#: zsh.texi:27014
msgid "These produce completion lists made up by the shell itself:"
msgstr ""

#. type: table
#: zsh.texi:27019
msgid "Filenames and file system paths."
msgstr ""

#. type: table
#: zsh.texi:27022
msgid "Just file system paths."
msgstr ""

#. type: table
#: zsh.texi:27026
msgid ""
"Command names, including aliases, shell functions, builtins and reserved "
"words."
msgstr ""

#. type: table
#: zsh.texi:27029
msgid "Function names."
msgstr ""

#. type: table
#: zsh.texi:27032
msgid "Names of builtin commands."
msgstr ""

#. type: table
#: zsh.texi:27035
msgid "Names of external commands."
msgstr ""

#. type: table
#: zsh.texi:27038
msgid "Reserved words."
msgstr ""

#. type: table
#: zsh.texi:27041
msgid "Alias names."
msgstr ""

#. type: table
#: zsh.texi:27044
msgid "Names of regular (non-global) aliases."
msgstr ""

#. type: table
#: zsh.texi:27047
msgid "Names of global aliases."
msgstr ""

#. type: table
#: zsh.texi:27052
msgid ""
"This can be combined with @t{-F}, @t{-B}, @t{-w}, @t{-a}, @t{-R} and @t{-G} "
"to get names of disabled functions, builtins, reserved words or aliases."
msgstr ""

#. type: table
#: zsh.texi:27059
msgid ""
"This option (to show enabled commands) is in effect by default, but may be "
"combined with @t{-d}; @t{-de} in combination with @t{-F}, @t{-B}, @t{-w}, "
"@t{-a}, @t{-R} and @t{-G} will complete names of functions, builtins, "
"reserved words or aliases whether or not they are disabled."
msgstr ""

#. type: table
#: zsh.texi:27063
msgid "Names of shell options (see @ref{Options})."
msgstr ""

#. type: table
#: zsh.texi:27066
msgid "Names of any variable defined in the shell."
msgstr ""

#. type: table
#: zsh.texi:27069
msgid "Names of scalar (non-array) parameters."
msgstr ""

#. type: table
#: zsh.texi:27072
msgid "Array names."
msgstr ""

#. type: table
#: zsh.texi:27075
msgid "Names of integer variables."
msgstr ""

#. type: table
#: zsh.texi:27078
msgid "Names of read-only variables."
msgstr ""

#. type: table
#: zsh.texi:27081
msgid "Names of parameters used by the shell (including special parameters)."
msgstr ""

#. type: table
#: zsh.texi:27084
msgid "Names of shell special parameters."
msgstr ""

#. type: table
#: zsh.texi:27087
msgid "Names of environment variables."
msgstr ""

#. type: table
#: zsh.texi:27090
msgid "Named directories."
msgstr ""

#. type: table
#: zsh.texi:27093
msgid "Key binding names."
msgstr ""

#. type: t{#1}
#: zsh.texi:27094
#, no-wrap
msgid "-j"
msgstr ""

#. type: table
#: zsh.texi:27097
msgid ""
"Job names: the first word of the job leader's command line.  This is useful "
"with the @t{kill} builtin."
msgstr ""

#. type: table
#: zsh.texi:27100
msgid "Names of running jobs."
msgstr ""

#. type: table
#: zsh.texi:27103
msgid "Names of suspended jobs."
msgstr ""

#. type: table
#: zsh.texi:27106
msgid "User names."
msgstr ""

#. type: Plain text
#: zsh.texi:27116
msgid ""
"These have user supplied arguments to determine how the list of completions "
"is to be made up:"
msgstr ""

#. type: item
#: zsh.texi:27119
#, no-wrap
msgid "@t{-k} @var{array}"
msgstr ""

#. type: table
#: zsh.texi:27126
msgid ""
"Names taken from the elements of @t{$}@var{array} (note that the `@t{$}' "
"does not appear on the command line).  Alternatively, the argument "
"@var{array} itself may be a set of space- or comma-separated values in "
"parentheses, in which any delimiter may be escaped with a backslash; in this "
"case the argument should be quoted.  For example,"
msgstr ""

#. type: example
#: zsh.texi:27131
#, no-wrap
msgid ""
"compctl -k \"(cputime filesize datasize stacksize\n"
"\t       coredumpsize resident descriptors)\" limit\n"
msgstr ""

#. type: item
#: zsh.texi:27133
#, no-wrap
msgid "@t{-g} @var{globstring}"
msgstr ""

#. type: table
#: zsh.texi:27141
msgid ""
"The @var{globstring} is expanded using filename globbing; it should be "
"quoted to protect it from immediate expansion. The resulting filenames are "
"taken as the possible completions.  Use `@t{*(/)}' instead of `@t{*/}' for "
"directories.  The @t{fignore} special parameter is not applied to the "
"resulting files.  More than one pattern may be given separated by "
"blanks. (Note that brace expansion is @emph{not} part of globbing.  Use the "
"syntax `@t{(either|or)}' to match alternatives.)"
msgstr ""

#. type: item
#: zsh.texi:27142
#, no-wrap
msgid "@t{-s} @var{subststring}"
msgstr ""

#. type: table
#: zsh.texi:27148
msgid ""
"The @var{subststring} is split into words and these words are than expanded "
"using all shell expansion mechanisms (see @ref{Expansion}).  The resulting "
"words are taken as possible completions.  The @t{fignore} special parameter "
"is not applied to the resulting files.  Note that @t{-g} is faster for "
"filenames."
msgstr ""

#. type: item
#: zsh.texi:27149
#, no-wrap
msgid "@t{-K} @var{function}"
msgstr ""

#. type: table
#: zsh.texi:27163
msgid ""
"Call the given function to get the completions.  Unless the name starts with "
"an underscore, the function is passed two arguments: the prefix and the "
"suffix of the word on which completion is to be attempted, in other words "
"those characters before the cursor position, and those from the cursor "
"position onwards.  The whole command line can be accessed with the @t{-c} "
"and @t{-l} flags of the @t{read} builtin. The function should set the "
"variable @t{reply} to an array containing the completions (one completion "
"per element); note that @t{reply} should not be made local to the function.  "
"From such a function the command line can be accessed with the @t{-c} and "
"@t{-l} flags to the @t{read} builtin.  For example,"
msgstr ""

#. type: example
#: zsh.texi:27168
#, no-wrap
msgid ""
"function whoson @{ reply=(`users`); @}\n"
"compctl -K whoson talk\n"
msgstr ""

#. type: table
#: zsh.texi:27173
msgid ""
"completes only logged-on users after `@t{talk}'.  Note that `@t{whoson}' "
"must return an array, so `@t{reply=`users`}' would be incorrect."
msgstr ""

#. type: item
#: zsh.texi:27174
#, no-wrap
msgid "@t{-H} @var{num pattern}"
msgstr ""

#. type: table
#: zsh.texi:27180
msgid ""
"The possible completions are taken from the last @var{num} history lines.  "
"Only words matching @var{pattern} are taken.  If @var{num} is zero or "
"negative the whole history is searched and if @var{pattern} is the empty "
"string all words are taken (as with `@t{*}').  A typical use is"
msgstr ""

#. type: example
#: zsh.texi:27184
#, no-wrap
msgid "compctl -D -f + -H 0 @value{dsq}\n"
msgstr ""

#. type: table
#: zsh.texi:27189
msgid ""
"which forces completion to look back in the history list for a word if no "
"filename matches."
msgstr ""

#. type: Plain text
#: zsh.texi:27199
msgid ""
"These do not directly specify types of name to be completed, but manipulate "
"the options that do:"
msgstr ""

#. type: table
#: zsh.texi:27211
msgid ""
"This instructs the shell not to quote any metacharacters in the possible "
"completions.  Normally the results of a completion are inserted into the "
"command line with any metacharacters quoted so that they are interpreted as "
"normal characters.  This is appropriate for filenames and ordinary strings.  "
"However, for special effects, such as inserting a backquoted expression from "
"a completion array (@t{-k}) so that the expression will not be evaluated "
"until the complete line is executed, this option must be used."
msgstr ""

#. type: table
#: zsh.texi:27216
msgid ""
"The @var{prefix} is inserted just before the completed string; any initial "
"part already typed will be completed and the whole @var{prefix} ignored for "
"completion purposes.  For example,"
msgstr ""

#. type: example
#: zsh.texi:27220
#, no-wrap
msgid "compctl -j -P \"%\" kill\n"
msgstr ""

#. type: table
#: zsh.texi:27224
msgid "inserts a `%' after the kill command and then completes job names."
msgstr ""

#. type: table
#: zsh.texi:27230
msgid ""
"When a completion is found the @var{suffix} is inserted after the completed "
"string.  In the case of menu completion the suffix is inserted immediately, "
"but it is still possible to cycle through the list of completions by "
"repeatedly hitting the same key."
msgstr ""

#. type: table
#: zsh.texi:27235
msgid ""
"With directory @var{file-prefix}: for command, file, directory and globbing "
"completion (options @t{-c}, @t{-f}, @t{-/}, @t{-g}), the file prefix is "
"implicitly added in front of the completion.  For example,"
msgstr ""

#. type: example
#: zsh.texi:27239
#, no-wrap
msgid "compctl -/ -W ~/Mail maildirs\n"
msgstr ""

#. type: table
#: zsh.texi:27248
msgid ""
"completes any subdirectories to any depth beneath the directory @t{~/Mail}, "
"although that prefix does not appear on the command line.  The "
"@var{file-prefix} may also be of the form accepted by the @t{-k} flag, "
"i.e. the name of an array or a literal list in parenthesis. In this case all "
"the directories in the list will be searched for possible completions."
msgstr ""

#. type: table
#: zsh.texi:27256
msgid ""
"If used with a suffix as specified by the @t{-S} option, this causes the "
"suffix to be removed if the next character typed is a blank or does not "
"insert anything or if the suffix consists of only one character and the next "
"character typed is the same character; this the same rule used for the "
"@t{AUTO_REMOVE_SLASH} option.  The option is most useful for list separators "
"(comma, colon, etc.)."
msgstr ""

#. type: item
#: zsh.texi:27257
#, no-wrap
msgid "@t{-l} @var{cmd}"
msgstr ""

#. type: table
#: zsh.texi:27268
msgid ""
"This option restricts the range of command line words that are considered to "
"be arguments.  If combined with one of the extended completion patterns "
"`@t{p[}...@t{]}', `@t{r[}...@t{]}', or `@t{R[}...@t{]}' (see @ref{Extended "
"Completion} below) the range is restricted to the range of arguments "
"specified in the brackets.  Completion is then performed as if these had "
"been given as arguments to the @var{cmd} supplied with the option. If the "
"@var{cmd} string is empty the first word in the range is instead taken as "
"the command name, and command name completion performed on the first word in "
"the range.  For example,"
msgstr ""

#. type: example
#: zsh.texi:27272
#, no-wrap
msgid "compctl -x 'r[-exec,;]' -l @value{dsq} -- find\n"
msgstr ""

#. type: table
#: zsh.texi:27278
msgid ""
"completes arguments between `@t{-exec}' and the following `@t{;}' (or the "
"end of the command line if there is no such string) as if they were a "
"separate command line."
msgstr ""

#. type: item
#: zsh.texi:27279
#, no-wrap
msgid "@t{-h} @var{cmd}"
msgstr ""

#. type: table
#: zsh.texi:27287
msgid ""
"Normally zsh completes quoted strings as a whole. With this option, "
"completion can be done separately on different parts of such strings. It "
"works like the @t{-l} option but makes the completion code work on the parts "
"of the current word that are separated by spaces. These parts are completed "
"as if they were arguments to the given @var{cmd}. If @var{cmd} is the empty "
"string, the first part is completed as a command name, as with @t{-l}."
msgstr ""

#. type: table
#: zsh.texi:27299
msgid ""
"Use the whole list of possible completions, whether or not they actually "
"match the word on the command line.  The word typed so far will be deleted.  "
"This is most useful with a function (given by the @t{-K} option) which can "
"examine the word components passed to it (or via the @t{read} builtin's "
"@t{-c} and @t{-l} flags) and use its own criteria to decide what matches.  "
"If there is no completion, the original word is retained.  Since the "
"produced possible completions seldom have interesting common prefixes and "
"suffixes, menu completion is started immediately if @t{AUTO_MENU} is set and "
"this flag is used."
msgstr ""

#. type: item
#: zsh.texi:27300
#, no-wrap
msgid "@t{-y} @var{func-or-var}"
msgstr ""

#. type: table
#: zsh.texi:27314
msgid ""
"The list provided by @var{func-or-var} is displayed instead of the list of "
"completions whenever a listing is required; the actual completions to be "
"inserted are not affected.  It can be provided in two ways. Firstly, if "
"@var{func-or-var} begins with a @t{$} it defines a variable, or if it begins "
"with a left parenthesis a literal array, which contains the list.  A "
"variable may have been set by a call to a function using the @t{-K} option.  "
"Otherwise it contains the name of a function which will be executed to "
"create the list.  The function will be passed as an argument list all "
"matching completions, including prefixes and suffixes expanded in full, and "
"should set the array @t{reply} to the result.  In both cases, the display "
"list will only be retrieved after a complete list of matches has been "
"created."
msgstr ""

#. type: table
#: zsh.texi:27321
msgid ""
"Note that the returned list does not have to correspond, even in length, to "
"the original set of matches, and may be passed as a scalar instead of an "
"array.  No special formatting of characters is performed on the output in "
"this case; in particular, newlines are printed literally and if they appear "
"output in columns is suppressed."
msgstr ""

#. type: table
#: zsh.texi:27336
msgid ""
"Print @var{explanation} when trying completion on the current set of "
"options. A `@t{%n}' in this string is replaced by the number of matches that "
"were added for this explanation string.  The explanation only appears if "
"completion was tried and there was no unique match, or when listing "
"completions. Explanation strings will be listed together with the matches of "
"the group specified together with the @t{-X} option (using the @t{-J} or "
"@t{-V} option). If the same explanation string is given to multiple @t{-X} "
"options, the string appears only once (for each group) and the number of "
"matches shown for the `@t{%n}' is the total number of all matches for each "
"of these uses. In any case, the explanation string will only be shown if "
"there was at least one match added for the explanation string."
msgstr ""

#. type: table
#: zsh.texi:27342
msgid ""
"The sequences @t{%B}, @t{%b}, @t{%S}, @t{%s}, @t{%U}, and @t{%u} specify "
"output attributes (bold, standout, and underline), @t{%F}, @t{%f}, @t{%K}, "
"@t{%k} specify foreground and background colours, and "
"@t{%@{}@var{...}@t{%@}} can be used to include literal escape sequences as "
"in prompts."
msgstr ""

#. type: item
#: zsh.texi:27343
#, no-wrap
msgid "@t{-Y} @var{explanation}"
msgstr ""

#. type: table
#: zsh.texi:27348
msgid ""
"Identical to @t{-X}, except that the @var{explanation} first undergoes "
"expansion following the usual rules for strings in double quotes.  The "
"expansion will be carried out after any functions are called for the @t{-K} "
"or @t{-y} options, allowing them to set variables."
msgstr ""

#. type: item
#: zsh.texi:27349
#, no-wrap
msgid "@t{-t} @var{continue}"
msgstr ""

#. type: table
#: zsh.texi:27352
msgid ""
"The @var{continue}-string contains a character that specifies which set of "
"completion flags should be used next.  It is useful:"
msgstr ""

#. type: table
#: zsh.texi:27357
msgid ""
"(i) With @t{-T}, or when trying a list of pattern completions, when "
"@t{compctl} would usually continue with ordinary processing after finding "
"matches; this can be suppressed with `@t{-tn}'."
msgstr ""

#. type: table
#: zsh.texi:27363
msgid ""
"(ii) With a list of alternatives separated by @t{+}, when @t{compctl} would "
"normally stop when one of the alternatives generates matches.  It can be "
"forced to consider the next set of completions by adding `@t{-t+}' to the "
"flags of the alternative before the `@t{+}'."
msgstr ""

#. type: table
#: zsh.texi:27371
msgid ""
"(iii) In an extended completion list (see below), when @t{compctl} would "
"normally continue until a set of conditions succeeded, then use only the "
"immediately following flags.  With `@t{-t-}', @t{compctl} will continue "
"trying extended completions after the next `@t{-}'; with `@t{-tx}' it will "
"attempt completion with the default flags, in other words those before the "
"`@t{-x}'."
msgstr ""

#. type: item
#: zsh.texi:27372
#, no-wrap
msgid "@t{-J} @var{name}"
msgstr ""

#. type: table
#: zsh.texi:27380
msgid ""
"This gives the name of the group the matches should be placed in. Groups are "
"listed and sorted separately; likewise, menu completion will offer the "
"matches in the groups in the order in which the groups were defined. If no "
"group name is explicitly given, the matches are stored in a group named "
"@t{default}. The first time a group name is encountered, a group with that "
"name is created. After that all matches with the same group name are stored "
"in that group."
msgstr ""

#. type: table
#: zsh.texi:27384
msgid ""
"This can be useful with non-exclusive alternative completions.  For example, "
"in"
msgstr ""

#. type: example
#: zsh.texi:27388
#, no-wrap
msgid "compctl -f -J files -t+ + -v -J variables foo\n"
msgstr ""

#. type: table
#: zsh.texi:27395
msgid ""
"both files and variables are possible completions, as the @t{-t+} forces "
"both sets of alternatives before and after the @t{+} to be considered at "
"once.  Because of the @t{-J} options, however, all files are listed before "
"all variables."
msgstr ""

#. type: item
#: zsh.texi:27396
#, no-wrap
msgid "@t{-V} @var{name}"
msgstr ""

#. type: table
#: zsh.texi:27401
msgid ""
"Like @t{-J}, but matches within the group will not be sorted in listings nor "
"in menu completion. These unsorted groups are in a different name space from "
"the sorted ones, so groups defined as @t{-J files} and @t{-V files} are "
"distinct."
msgstr ""

#. type: table
#: zsh.texi:27406
msgid ""
"If given together with the @t{-V} option, makes only consecutive duplicates "
"in the group be removed. Note that groups with and without this flag are in "
"different name spaces."
msgstr ""

#. type: table
#: zsh.texi:27417
msgid ""
"This defines additional matching control specifications that should be used "
"only when testing words for the list of flags this flag appears in. The "
"format of the @var{match-spec} string is described in @ref{Completion "
"Matching Control}."
msgstr ""

#. type: node
#: zsh.texi:27421 zsh.texi:27440 zsh.texi:27448 zsh.texi:27568
#, no-wrap
msgid "Extended Completion"
msgstr ""

#. type: item
#: zsh.texi:27426
#, no-wrap
msgid ""
"@t{compctl} [ @t{-CDT} ] @var{options} @t{+} @var{options} [ @t{+} ... ] [ "
"@t{+} ] @var{command} ..."
msgstr ""

#. type: Plain text
#: zsh.texi:27438
msgid ""
"The form with `@t{+}' specifies alternative options. Completion is tried "
"with the options before the first `@t{+}'. If this produces no matches "
"completion is tried with the flags after the `@t{+}' and so on. If there are "
"no flags after the last `@t{+}' and a match has not been found up to that "
"point, default completion is tried.  If the list of flags contains a @t{-t} "
"with a @t{+} character, the next list of flags is used even if the current "
"list produced matches."
msgstr ""

#. type: Plain text
#: zsh.texi:27445
msgid ""
"Additional options are available that restrict completion to some part of "
"the command line; this is referred to as `extended completion'."
msgstr ""

#. type: item
#: zsh.texi:27452
#, no-wrap
msgid ""
"@t{compctl }[ @t{-CDT} ] @var{options} @t{-x} @var{pattern} @var{options} "
"@t{-} ... @t{-}@t{-}"
msgstr ""

#. type: item
#: zsh.texi:27453
#, no-wrap
msgid "@t{@ @ @ @ @ @ @ @ }[ @var{command} ... ]"
msgstr ""

#. type: Plain text
#: zsh.texi:27467
msgid ""
"The form with `@t{-x}' specifies extended completion for the commands given; "
"as shown, it may be combined with alternative completion using `@t{+}'.  "
"Each @var{pattern} is examined in turn; when a match is found, the "
"corresponding @var{options}, as described in @ref{Option Flags} above, are "
"used to generate possible completions.  If no @var{pattern} matches, the "
"@var{options} given before the @t{-x} are used."
msgstr ""

#. type: Plain text
#: zsh.texi:27472
msgid ""
"Note that each pattern should be supplied as a single argument and should be "
"quoted to prevent expansion of metacharacters by the shell."
msgstr ""

#. type: Plain text
#: zsh.texi:27483
msgid ""
"A @var{pattern} is built of sub-patterns separated by commas; it matches if "
"at least one of these sub-patterns matches (they are `or'ed). These "
"sub-patterns are in turn composed of other sub-patterns separated by white "
"spaces which match if all of the sub-patterns match (they are `and'ed).  An "
"element of the sub-patterns is of the form `@var{c}@t{[}...@t{][}...@t{]}', "
"where the pairs of brackets may be repeated as often as necessary, and "
"matches if any of the sets of brackets match (an `or').  The example below "
"makes this clearer."
msgstr ""

#. type: Plain text
#: zsh.texi:27486
msgid "The elements may be any of the following:"
msgstr ""

#. type: item
#: zsh.texi:27489
#, no-wrap
msgid "@t{s[}@var{string}@t{]}..."
msgstr ""

#. type: table
#: zsh.texi:27493
msgid ""
"Matches if the current word on the command line starts with one of the "
"strings given in brackets.  The @var{string} is not removed and is not part "
"of the completion."
msgstr ""

#. type: item
#: zsh.texi:27494
#, no-wrap
msgid "@t{S[}@var{string}@t{]}..."
msgstr ""

#. type: table
#: zsh.texi:27497
msgid ""
"Like @t{s[}@var{string}@t{]} except that the @var{string} is part of the "
"completion."
msgstr ""

#. type: item
#: zsh.texi:27498
#, no-wrap
msgid "@t{p[}@var{from}@t{,}@var{to}@t{]}..."
msgstr ""

#. type: table
#: zsh.texi:27504
msgid ""
"Matches if the number of the current word is between one of the @var{from} "
"and @var{to} pairs inclusive. The comma and @var{to} are optional; @var{to} "
"defaults to the same value as @var{from}.  The numbers may be negative: "
"@t{-}@var{n} refers to the @var{n}'th last word on the line."
msgstr ""

#. type: item
#: zsh.texi:27505
#, no-wrap
msgid "@t{c[}@var{offset}@t{,}@var{string}@t{]}..."
msgstr ""

#. type: table
#: zsh.texi:27509
msgid ""
"Matches if the @var{string} matches the word offset by @var{offset} from the "
"current word position.  Usually @var{offset} will be negative."
msgstr ""

#. type: item
#: zsh.texi:27510
#, no-wrap
msgid "@t{C[}@var{offset}@t{,}@var{pattern}@t{]}..."
msgstr ""

#. type: table
#: zsh.texi:27512
msgid "Like @t{c} but using pattern matching instead."
msgstr ""

#. type: item
#: zsh.texi:27513
#, no-wrap
msgid "@t{w[}@var{index}@t{,}@var{string}@t{]}..."
msgstr ""

#. type: table
#: zsh.texi:27517
msgid ""
"Matches if the word in position @var{index} is equal to the corresponding "
"@var{string}.  Note that the word count is made after any alias expansion."
msgstr ""

#. type: item
#: zsh.texi:27518
#, no-wrap
msgid "@t{W[}@var{index}@t{,}@var{pattern}@t{]}..."
msgstr ""

#. type: table
#: zsh.texi:27520
msgid "Like @t{w} but using pattern matching instead."
msgstr ""

#. type: item
#: zsh.texi:27521
#, no-wrap
msgid "@t{n[}@var{index}@t{,}@var{string}@t{]}..."
msgstr ""

#. type: table
#: zsh.texi:27527
msgid ""
"Matches if the current word contains @var{string}.  Anything up to and "
"including the @var{index}th occurrence of this string will not be considered "
"part of the completion, but the rest will.  @var{index} may be negative to "
"count from the end: in most cases, @var{index} will be 1 or -1.  For "
"example,"
msgstr ""

#. type: example
#: zsh.texi:27531
#, no-wrap
msgid "compctl -s '`users`' -x 'n[1,@@]' -k hosts -- talk\n"
msgstr ""

#. type: table
#: zsh.texi:27538
msgid ""
"will usually complete usernames, but if you insert an @t{@@} after the name, "
"names from the array @var{hosts} (assumed to contain hostnames, though you "
"must make the array yourself) will be completed.  Other commands such as "
"@t{rcp} can be handled similarly."
msgstr ""

#. type: item
#: zsh.texi:27539
#, no-wrap
msgid "@t{N[}@var{index}@t{,}@var{string}@t{]}..."
msgstr ""

#. type: table
#: zsh.texi:27544
msgid ""
"Like @t{n} except that the string will be taken as a character class.  "
"Anything up to and including the @var{index}th occurrence of any of the "
"characters in @var{string} will not be considered part of the completion."
msgstr ""

#. type: item
#: zsh.texi:27545
#, no-wrap
msgid "@t{m[}@var{min}@t{,}@var{max}@t{]}..."
msgstr ""

#. type: table
#: zsh.texi:27548
msgid ""
"Matches if the total number of words lies between @var{min} and @var{max} "
"inclusive."
msgstr ""

#. type: item
#: zsh.texi:27549
#, no-wrap
msgid "@t{r[}@var{str1}@t{,}@var{str2}@t{]}..."
msgstr ""

#. type: table
#: zsh.texi:27555
msgid ""
"Matches if the cursor is after a word with prefix @var{str1}.  If there is "
"also a word with prefix @var{str2} on the command line after the one matched "
"by @var{str1} it matches only if the cursor is before this word. If the "
"comma and @var{str2} are omitted, it matches if the cursor is after a word "
"with prefix @var{str1}."
msgstr ""

#. type: item
#: zsh.texi:27556
#, no-wrap
msgid "@t{R[}@var{str1}@t{,}@var{str2}@t{]}..."
msgstr ""

#. type: table
#: zsh.texi:27558
msgid "Like @t{r} but using pattern matching instead."
msgstr ""

#. type: item
#: zsh.texi:27559
#, no-wrap
msgid "@t{q[}@var{str}@t{]}..."
msgstr ""

#. type: table
#: zsh.texi:27564
msgid ""
"Matches the word currently being completed is in single quotes and the "
"@var{str} begins with the letter `s', or if completion is done in double "
"quotes and @var{str} starts with the letter `d', or if completion is done in "
"backticks and @var{str} starts with a `b'."
msgstr ""

#. type: example
#: zsh.texi:27577
#, no-wrap
msgid ""
"compctl -u -x 's[+] c[-1,-f],s[-f+]' \\ \n"
"  -g '~/Mail/*(:t)' - 's[-f],c[-1,-f]' -f -- mail\n"
msgstr ""

#. type: Plain text
#: zsh.texi:27581
msgid "This is to be interpreted as follows:"
msgstr ""

#. type: Plain text
#: zsh.texi:27584
msgid "If the current command is @t{mail}, then"
msgstr ""

#. type: quotation
#: zsh.texi:27592
msgid ""
"if ((the current word begins with @t{+} and the previous word is @t{-f})  or "
"(the current word begins with @t{-f+})), then complete the non-directory "
"part (the `@t{:t}' glob modifier) of files in the directory @t{~/Mail}; else"
msgstr ""

#. type: quotation
#: zsh.texi:27596
msgid ""
"if the current word begins with @t{-f} or the previous word was @t{-f}, then "
"complete any file; else"
msgstr ""

#. type: quotation
#: zsh.texi:27599
msgid "complete user names."
msgstr ""

#. type: Plain text
#: zsh.texi:27618
msgid ""
"Some optional parts of zsh are in modules, separate from the core of the "
"shell.  Each of these modules may be linked in to the shell at build time, "
"or can be dynamically linked while the shell is running if the installation "
"supports this feature.  Modules are linked at runtime with the @t{zmodload} "
"command, see @ref{Shell Builtin Commands}."
msgstr ""

#. type: Plain text
#: zsh.texi:27621
msgid "The modules that are bundled with the zsh distribution are:"
msgstr ""

#. type: t{#1}
#: zsh.texi:27625
#, no-wrap
msgid "zsh/attr"
msgstr ""

#. type: table
#: zsh.texi:27627
msgid "Builtins for manipulating extended attributes (xattr)."
msgstr ""

#. type: t{#1}
#: zsh.texi:27628
#, no-wrap
msgid "zsh/cap"
msgstr ""

#. type: table
#: zsh.texi:27630
msgid "Builtins for manipulating POSIX.1e (POSIX.6) capability (privilege) sets."
msgstr ""

#. type: t{#1}
#: zsh.texi:27631
#, no-wrap
msgid "zsh/clone"
msgstr ""

#. type: table
#: zsh.texi:27633
msgid "A builtin that can clone a running shell onto another terminal."
msgstr ""

#. type: t{#1}
#: zsh.texi:27634
#, no-wrap
msgid "zsh/compctl"
msgstr ""

#. type: table
#: zsh.texi:27636
msgid "The @t{compctl} builtin for controlling completion."
msgstr ""

#. type: t{#1}
#: zsh.texi:27637
#, no-wrap
msgid "zsh/complete"
msgstr ""

#. type: table
#: zsh.texi:27639
msgid "The basic completion code."
msgstr ""

#. type: t{#1}
#: zsh.texi:27640
#, no-wrap
msgid "zsh/complist"
msgstr ""

#. type: table
#: zsh.texi:27642
msgid "Completion listing extensions."
msgstr ""

#. type: t{#1}
#: zsh.texi:27643
#, no-wrap
msgid "zsh/computil"
msgstr ""

#. type: table
#: zsh.texi:27646
msgid ""
"A module with utility builtins needed for the shell function based "
"completion system."
msgstr ""

#. type: t{#1}
#: zsh.texi:27647
#, no-wrap
msgid "zsh/curses"
msgstr ""

#. type: table
#: zsh.texi:27649
msgid "curses windowing commands"
msgstr ""

#. type: t{#1}
#: zsh.texi:27650
#, no-wrap
msgid "zsh/datetime"
msgstr ""

#. type: table
#: zsh.texi:27652
msgid "Some date/time commands and parameters."
msgstr ""

#. type: t{#1}
#: zsh.texi:27653
#, no-wrap
msgid "zsh/db/gdbm"
msgstr ""

#. type: table
#: zsh.texi:27655
msgid "Builtins for managing associative array parameters tied to GDBM databases."
msgstr ""

#. type: t{#1}
#: zsh.texi:27656
#, no-wrap
msgid "zsh/deltochar"
msgstr ""

#. type: table
#: zsh.texi:27658
msgid "A ZLE function duplicating EMACS' @t{zap-to-char}."
msgstr ""

#. type: t{#1}
#: zsh.texi:27659
#, no-wrap
msgid "zsh/example"
msgstr ""

#. type: table
#: zsh.texi:27661
msgid "An example of how to write a module."
msgstr ""

#. type: t{#1}
#: zsh.texi:27662
#, no-wrap
msgid "zsh/files"
msgstr ""

#. type: table
#: zsh.texi:27664
msgid "Some basic file manipulation commands as builtins."
msgstr ""

#. type: t{#1}
#: zsh.texi:27665
#, no-wrap
msgid "zsh/langinfo"
msgstr ""

#. type: table
#: zsh.texi:27667
msgid "Interface to locale information."
msgstr ""

#. type: t{#1}
#: zsh.texi:27668
#, no-wrap
msgid "zsh/mapfile"
msgstr ""

#. type: table
#: zsh.texi:27670
msgid "Access to external files via a special associative array."
msgstr ""

#. type: t{#1}
#: zsh.texi:27671
#, no-wrap
msgid "zsh/mathfunc"
msgstr ""

#. type: table
#: zsh.texi:27673
msgid "Standard scientific functions for use in mathematical evaluations."
msgstr ""

#. type: t{#1}
#: zsh.texi:27674
#, no-wrap
msgid "zsh/nearcolor"
msgstr ""

#. type: table
#: zsh.texi:27676
msgid "Map colours to the nearest colour in the available palette."
msgstr ""

#. type: t{#1}
#: zsh.texi:27677
#, no-wrap
msgid "zsh/newuser"
msgstr ""

#. type: table
#: zsh.texi:27679
msgid "Arrange for files for new users to be installed."
msgstr ""

#. type: t{#1}
#: zsh.texi:27680
#, no-wrap
msgid "zsh/parameter"
msgstr ""

#. type: table
#: zsh.texi:27682
msgid "Access to internal hash tables via special associative arrays."
msgstr ""

#. type: t{#1}
#: zsh.texi:27683
#, no-wrap
msgid "zsh/pcre"
msgstr ""

#. type: table
#: zsh.texi:27685
msgid "Interface to the PCRE library."
msgstr ""

#. type: t{#1}
#: zsh.texi:27686
#, no-wrap
msgid "zsh/param/private"
msgstr ""

#. type: table
#: zsh.texi:27688
msgid "Builtins for managing private-scoped parameters in function context."
msgstr ""

#. type: t{#1}
#: zsh.texi:27689
#, no-wrap
msgid "zsh/regex"
msgstr ""

#. type: table
#: zsh.texi:27691
msgid "Interface to the POSIX regex library."
msgstr ""

#. type: t{#1}
#: zsh.texi:27692
#, no-wrap
msgid "zsh/sched"
msgstr ""

#. type: table
#: zsh.texi:27694
msgid "A builtin that provides a timed execution facility within the shell."
msgstr ""

#. type: t{#1}
#: zsh.texi:27695
#, no-wrap
msgid "zsh/net/socket"
msgstr ""

#. type: table
#: zsh.texi:27697
msgid "Manipulation of Unix domain sockets"
msgstr ""

#. type: t{#1}
#: zsh.texi:27698
#, no-wrap
msgid "zsh/stat"
msgstr ""

#. type: table
#: zsh.texi:27700
msgid "A builtin command interface to the @t{stat} system call."
msgstr ""

#. type: t{#1}
#: zsh.texi:27701
#, no-wrap
msgid "zsh/system"
msgstr ""

#. type: table
#: zsh.texi:27703
msgid "A builtin interface to various low-level system features."
msgstr ""

#. type: t{#1}
#: zsh.texi:27704
#, no-wrap
msgid "zsh/net/tcp"
msgstr ""

#. type: table
#: zsh.texi:27706
msgid "Manipulation of TCP sockets"
msgstr ""

#. type: t{#1}
#: zsh.texi:27707
#, no-wrap
msgid "zsh/termcap"
msgstr ""

#. type: table
#: zsh.texi:27709
msgid "Interface to the termcap database."
msgstr ""

#. type: t{#1}
#: zsh.texi:27710
#, no-wrap
msgid "zsh/terminfo"
msgstr ""

#. type: table
#: zsh.texi:27712
msgid "Interface to the terminfo database."
msgstr ""

#. type: t{#1}
#: zsh.texi:27713
#, no-wrap
msgid "zsh/watch"
msgstr ""

#. type: table
#: zsh.texi:27715
msgid "Reporting of login and logout events."
msgstr ""

#. type: t{#1}
#: zsh.texi:27716
#, no-wrap
msgid "zsh/zftp"
msgstr ""

#. type: table
#: zsh.texi:27718
msgid "A builtin FTP client."
msgstr ""

#. type: t{#1}
#: zsh.texi:27719
#, no-wrap
msgid "zsh/zle"
msgstr ""

#. type: table
#: zsh.texi:27721
msgid "The Zsh Line Editor, including the @t{bindkey} and @t{vared} builtins."
msgstr ""

#. type: t{#1}
#: zsh.texi:27722
#, no-wrap
msgid "zsh/zleparameter"
msgstr ""

#. type: table
#: zsh.texi:27724
msgid "Access to internals of the Zsh Line Editor via parameters."
msgstr ""

#. type: t{#1}
#: zsh.texi:27725
#, no-wrap
msgid "zsh/zprof"
msgstr ""

#. type: table
#: zsh.texi:27727
msgid "A module allowing profiling for shell functions."
msgstr ""

#. type: t{#1}
#: zsh.texi:27728
#, no-wrap
msgid "zsh/zpty"
msgstr ""

#. type: table
#: zsh.texi:27730
msgid "A builtin for starting a command in a pseudo-terminal."
msgstr ""

#. type: t{#1}
#: zsh.texi:27731
#, no-wrap
msgid "zsh/zselect"
msgstr ""

#. type: table
#: zsh.texi:27733
msgid "Block and return when file descriptors are ready."
msgstr ""

#. type: t{#1}
#: zsh.texi:27734
#, no-wrap
msgid "zsh/zutil"
msgstr ""

#. type: table
#: zsh.texi:27737
msgid "Some utility builtins, e.g. the one for supporting configuration via styles."
msgstr ""

#. type: node
#: zsh.texi:27780 zsh.texi:27782 zsh.texi:27827
#, no-wrap
msgid "The zsh/attr Module"
msgstr ""

#. type: node
#: zsh.texi:27780 zsh.texi:27827 zsh.texi:27829 zsh.texi:27861
#, no-wrap
msgid "The zsh/cap Module"
msgstr ""

#. type: Plain text
#: zsh.texi:27790
msgid ""
"The @t{zsh/attr} module is used for manipulating extended attributes.  The "
"@t{-h} option causes all commands to operate on symbolic links instead of "
"their targets.  The builtins in this module are:"
msgstr ""

#. type: findex
#: zsh.texi:27793
#, no-wrap
msgid "zgetattr"
msgstr ""

#. type: cindex
#: zsh.texi:27794
#, no-wrap
msgid "extended attributes, xattr, getting from files"
msgstr ""

#. type: item
#: zsh.texi:27795
#, no-wrap
msgid "@t{zgetattr} [ @t{-h} ] @var{filename} @var{attribute} [ @var{parameter} ]"
msgstr ""

#. type: table
#: zsh.texi:27799
msgid ""
"Get the extended attribute @var{attribute} from the specified "
"@var{filename}. If the optional argument @var{parameter} is given, the "
"attribute is set on that parameter instead of being printed to stdout."
msgstr ""

#. type: findex
#: zsh.texi:27800
#, no-wrap
msgid "zsetattr"
msgstr ""

#. type: cindex
#: zsh.texi:27801
#, no-wrap
msgid "extended attributes, xattr, setting on files"
msgstr ""

#. type: item
#: zsh.texi:27802
#, no-wrap
msgid "@t{zsetattr} [ @t{-h} ] @var{filename} @var{attribute} @var{value}"
msgstr ""

#. type: table
#: zsh.texi:27805
msgid ""
"Set the extended attribute @var{attribute} on the specified @var{filename} "
"to @var{value}."
msgstr ""

#. type: findex
#: zsh.texi:27806
#, no-wrap
msgid "zdelattr"
msgstr ""

#. type: cindex
#: zsh.texi:27807
#, no-wrap
msgid "extended attributes, xattr, removing, deleting"
msgstr ""

#. type: item
#: zsh.texi:27808
#, no-wrap
msgid "@t{zdelattr} [ @t{-h} ] @var{filename} @var{attribute}"
msgstr ""

#. type: table
#: zsh.texi:27811
msgid ""
"Remove the extended attribute @var{attribute} from the specified "
"@var{filename}."
msgstr ""

#. type: findex
#: zsh.texi:27812
#, no-wrap
msgid "zlistattr"
msgstr ""

#. type: cindex
#: zsh.texi:27813
#, no-wrap
msgid "extended attributes, xattr, listing"
msgstr ""

#. type: item
#: zsh.texi:27814
#, no-wrap
msgid "@t{zlistattr} [ @t{-h} ] @var{filename} [ @var{parameter} ]"
msgstr ""

#. type: table
#: zsh.texi:27818
msgid ""
"List the extended attributes currently set on the specified "
"@var{filename}. If the optional argument @var{parameter} is given, the list "
"of attributes is set on that parameter instead of being printed to stdout."
msgstr ""

#. type: Plain text
#: zsh.texi:27827
msgid ""
"@t{zgetattr} and @t{zlistattr} allocate memory dynamically.  If the "
"attribute or list of attributes grows between the allocation and the call to "
"get them, they return 2.  On all other errors, 1 is returned.  This allows "
"the calling function to check for this case and retry."
msgstr ""

#. type: node
#: zsh.texi:27827 zsh.texi:27861 zsh.texi:27863 zsh.texi:27928
#, no-wrap
msgid "The zsh/clone Module"
msgstr ""

#. type: Plain text
#: zsh.texi:27837
msgid ""
"The @t{zsh/cap} module is used for manipulating POSIX.1e (POSIX.6) "
"capability sets.  If the operating system does not support this interface, "
"the builtins defined by this module will do nothing.  The builtins in this "
"module are:"
msgstr ""

#. type: cindex
#: zsh.texi:27841
#, no-wrap
msgid "capabilities, setting"
msgstr ""

#. type: item
#: zsh.texi:27842
#, no-wrap
msgid "@t{cap} [ @var{capabilities} ]"
msgstr ""

#. type: table
#: zsh.texi:27845
msgid ""
"Change the shell's process capability sets to the specified "
"@var{capabilities}, otherwise display the shell's current capabilities."
msgstr ""

#. type: cindex
#: zsh.texi:27847
#, no-wrap
msgid "capabilities, getting from files"
msgstr ""

#. type: item
#: zsh.texi:27848
#, no-wrap
msgid "@t{getcap} @var{filename} ..."
msgstr ""

#. type: table
#: zsh.texi:27851
msgid ""
"This is a built-in implementation of the POSIX standard utility.  It "
"displays the capability sets on each specified @var{filename}."
msgstr ""

#. type: cindex
#: zsh.texi:27853
#, no-wrap
msgid "capabilities, setting on files"
msgstr ""

#. type: item
#: zsh.texi:27854
#, no-wrap
msgid "@t{setcap} @var{capabilities} @var{filename} ..."
msgstr ""

#. type: table
#: zsh.texi:27858
msgid ""
"This is a built-in implementation of the POSIX standard utility.  It sets "
"the capability sets on each specified @var{filename} to the specified "
"@var{capabilities}."
msgstr ""

#. type: node
#: zsh.texi:27861 zsh.texi:27928 zsh.texi:27930 zsh.texi:27941
#, no-wrap
msgid "The zsh/compctl Module"
msgstr ""

#. type: Plain text
#: zsh.texi:27868
msgid "The @t{zsh/clone} module makes available one builtin command:"
msgstr ""

#. type: cindex
#: zsh.texi:27872
#, no-wrap
msgid "shell, cloning"
msgstr ""

#. type: cindex
#: zsh.texi:27873
#, no-wrap
msgid "cloning the shell"
msgstr ""

#. type: cindex
#: zsh.texi:27874
#, no-wrap
msgid "terminal"
msgstr ""

#. type: item
#: zsh.texi:27875
#, no-wrap
msgid "@t{clone} @var{tty}"
msgstr ""

#. type: table
#: zsh.texi:27880
msgid ""
"Creates a forked instance of the current shell, attached to the specified "
"@var{tty}.  In the new shell, the @t{PID}, @t{PPID} and @t{TTY} special "
"parameters are changed appropriately.  @t{$!} is set to zero in the new "
"shell, and to the new shell's PID in the original shell."
msgstr ""

#. type: table
#: zsh.texi:27884
msgid ""
"The return status of the builtin is zero in both shells if successful, and "
"non-zero on error."
msgstr ""

#. type: table
#: zsh.texi:27888
msgid ""
"The target of @t{clone} should be an unused terminal, such as an unused "
"virtual console or a virtual terminal created by"
msgstr ""

#. type: example
#: zsh.texi:27893
#, no-wrap
msgid ""
"xterm -e sh -c 'trap : INT QUIT TSTP; tty;\n"
"        while :; do sleep 100000000; done'\n"
msgstr ""

#. type: table
#: zsh.texi:27901
msgid ""
"Some words of explanation are warranted about this long xterm command line: "
"when doing clone on a pseudo-terminal, some other session (\"session\" meant "
"as a unix session group, or SID) is already owning the terminal. Hence the "
"cloned zsh cannot acquire the pseudo-terminal as a controlling tty. That "
"means two things:"
msgstr ""

#. type: itemize
#: zsh.texi:27909
msgid ""
"the job control signals will go to the sh-started-by-xterm process group "
"(that's why we disable INT QUIT and TSTP with trap; otherwise the while loop "
"could get suspended or killed)"
msgstr ""

#. type: itemize
#: zsh.texi:27912
msgid ""
"the cloned shell will have job control disabled, and the job control keys "
"(control-C, control-\\ and control-Z) will not work."
msgstr ""

#. type: table
#: zsh.texi:27916
msgid "This does not apply when cloning to an @emph{unused} vc."
msgstr ""

#. type: table
#: zsh.texi:27921
msgid ""
"Cloning to a used (and unprepared) terminal will result in two processes "
"reading simultaneously from the same terminal, with input bytes going "
"randomly to either process."
msgstr ""

#. type: table
#: zsh.texi:27925
msgid "@t{clone} is mostly useful as a shell built-in replacement for openvt."
msgstr ""

#. type: node
#: zsh.texi:27928 zsh.texi:27941 zsh.texi:27943 zsh.texi:27951
#, no-wrap
msgid "The zsh/complete Module"
msgstr ""

#. type: Plain text
#: zsh.texi:27941
msgid ""
"The @t{zsh/compctl} module makes available two builtin "
"commands. @t{compctl}, is the old, deprecated way to control completions for "
"ZLE.  See @ref{Completion Using compctl}.  The other builtin command, "
"@t{compcall} can be used in user-defined completion widgets, see "
"@ref{Completion Widgets}."
msgstr ""

#. type: node
#: zsh.texi:27941 zsh.texi:27951 zsh.texi:27953 zsh.texi:28401
#, no-wrap
msgid "The zsh/complist Module"
msgstr ""

#. type: Plain text
#: zsh.texi:27951
msgid ""
"The @t{zsh/complete} module makes available several builtin commands which "
"can be used in user-defined completion widgets, see @ref{Completion "
"Widgets}."
msgstr ""

#. type: node
#: zsh.texi:27951 zsh.texi:28401 zsh.texi:28403 zsh.texi:28494
#, no-wrap
msgid "The zsh/computil Module"
msgstr ""

#. type: cindex
#: zsh.texi:27958
#, no-wrap
msgid "completion, coloured listings"
msgstr ""

#. type: cindex
#: zsh.texi:27959
#, no-wrap
msgid "completion, scroll listings"
msgstr ""

#. type: Plain text
#: zsh.texi:27963
msgid ""
"The @t{zsh/complist} module offers three extensions to completion listings: "
"the ability to highlight matches in such a list, the ability to scroll "
"through long lists and a different style of menu completion."
msgstr ""

#. type: subsection
#: zsh.texi:27966
#, no-wrap
msgid "Colored completion listings"
msgstr ""

#. type: Plain text
#: zsh.texi:27973
msgid ""
"Whenever one of the parameters @t{ZLS_COLORS} or @t{ZLS_COLOURS} is set and "
"the @t{zsh/complist} module is loaded or linked into the shell, completion "
"lists will be colored.  Note, however, that @t{complist} will not "
"automatically be loaded if it is not linked in: on systems with dynamic "
"loading, `@t{zmodload zsh/complist}' is required."
msgstr ""

#. type: vindex
#: zsh.texi:27975
#, no-wrap
msgid "ZLS_COLORS"
msgstr ""

#. type: vindex
#: zsh.texi:27976
#, no-wrap
msgid "ZLS_COLOURS"
msgstr ""

#. type: Plain text
#: zsh.texi:27985
msgid ""
"The parameters @t{ZLS_COLORS} and @t{ZLS_COLOURS} describe how matches are "
"highlighted.  To turn on highlighting an empty value suffices, in which case "
"all the default values given below will be used.  The format of the value of "
"these parameters is the same as used by the GNU version of the @t{ls} "
"command: a colon-separated list of specifications of the form "
"`@var{name}@t{=}@var{value}'.  The @var{name} may be one of the following "
"strings, most of which specify file types for which the @var{value} will be "
"used.  The strings and their default values are:"
msgstr ""

#. type: t{#1}
#: zsh.texi:27988
#, no-wrap
msgid "no 0"
msgstr ""

#. type: table
#: zsh.texi:27990
msgid "for normal text (i.e. when displaying something other than a matched file)"
msgstr ""

#. type: t{#1}
#: zsh.texi:27991
#, no-wrap
msgid "fi 0"
msgstr ""

#. type: table
#: zsh.texi:27993
msgid "for regular files"
msgstr ""

#. type: t{#1}
#: zsh.texi:27994
#, no-wrap
msgid "di 32"
msgstr ""

#. type: table
#: zsh.texi:27996
msgid "for directories"
msgstr ""

#. type: t{#1}
#: zsh.texi:27997
#, no-wrap
msgid "ln 36"
msgstr ""

#. type: table
#: zsh.texi:28001
msgid ""
"for symbolic links.  If this has the special value @t{target}, symbolic "
"links are dereferenced and the target file used to determine the display "
"format."
msgstr ""

#. type: t{#1}
#: zsh.texi:28002
#, no-wrap
msgid "pi 31"
msgstr ""

#. type: table
#: zsh.texi:28004
msgid "for named pipes (FIFOs)"
msgstr ""

#. type: t{#1}
#: zsh.texi:28005
#, no-wrap
msgid "so 33"
msgstr ""

#. type: table
#: zsh.texi:28007
msgid "for sockets"
msgstr ""

#. type: t{#1}
#: zsh.texi:28008
#, no-wrap
msgid "bd 44;37"
msgstr ""

#. type: table
#: zsh.texi:28010
msgid "for block devices"
msgstr ""

#. type: t{#1}
#: zsh.texi:28011
#, no-wrap
msgid "cd 44;37"
msgstr ""

#. type: table
#: zsh.texi:28013
msgid "for character devices"
msgstr ""

#. type: item
#: zsh.texi:28014
#, no-wrap
msgid "@t{or} @var{none}"
msgstr ""

#. type: table
#: zsh.texi:28016
msgid "for a symlink to nonexistent file (default is the value defined for @t{ln})"
msgstr ""

#. type: item
#: zsh.texi:28017
#, no-wrap
msgid "@t{mi} @var{none}"
msgstr ""

#. type: table
#: zsh.texi:28020
msgid ""
"for a non-existent file (default is the value defined for @t{fi}); this code "
"is currently not used"
msgstr ""

#. type: t{#1}
#: zsh.texi:28021
#, no-wrap
msgid "su 37;41"
msgstr ""

#. type: table
#: zsh.texi:28023
msgid "for files with setuid bit set"
msgstr ""

#. type: t{#1}
#: zsh.texi:28024
#, no-wrap
msgid "sg 30;43"
msgstr ""

#. type: table
#: zsh.texi:28026
msgid "for files with setgid bit set"
msgstr ""

#. type: t{#1}
#: zsh.texi:28027
#, no-wrap
msgid "tw 30;42"
msgstr ""

#. type: table
#: zsh.texi:28029
msgid "for world writable directories with sticky bit set"
msgstr ""

#. type: t{#1}
#: zsh.texi:28030
#, no-wrap
msgid "ow 34;43"
msgstr ""

#. type: table
#: zsh.texi:28032
msgid "for world writable directories without sticky bit set"
msgstr ""

#. type: item
#: zsh.texi:28033
#, no-wrap
msgid "@t{sa} @var{none}"
msgstr ""

#. type: table
#: zsh.texi:28036
msgid ""
"for files with an associated suffix alias; this is only tested after "
"specific suffixes, as described below"
msgstr ""

#. type: t{#1}
#: zsh.texi:28037
#, no-wrap
msgid "st 37;44"
msgstr ""

#. type: table
#: zsh.texi:28039
msgid "for directories with sticky bit set but not world writable"
msgstr ""

#. type: t{#1}
#: zsh.texi:28040
#, no-wrap
msgid "ex 35"
msgstr ""

#. type: table
#: zsh.texi:28042
msgid "for executable files"
msgstr ""

#. type: t{#1}
#: zsh.texi:28043
#, no-wrap
msgid "lc \\e["
msgstr ""

#. type: table
#: zsh.texi:28045
msgid "for the left code (see below)"
msgstr ""

#. type: t{#1}
#: zsh.texi:28046
#, no-wrap
msgid "rc m"
msgstr ""

#. type: table
#: zsh.texi:28048
msgid "for the right code"
msgstr ""

#. type: t{#1}
#: zsh.texi:28049
#, no-wrap
msgid "tc 0"
msgstr ""

#. type: table
#: zsh.texi:28052
msgid ""
"for the character indicating the file type printed after filenames if the "
"@t{LIST_TYPES} option is set"
msgstr ""

#. type: t{#1}
#: zsh.texi:28053
#, no-wrap
msgid "sp 0"
msgstr ""

#. type: table
#: zsh.texi:28055
msgid "for the spaces printed after matches to align the next column"
msgstr ""

#. type: item
#: zsh.texi:28056
#, no-wrap
msgid "@t{ec} @var{none}"
msgstr ""

#. type: table
#: zsh.texi:28058
msgid "for the end code"
msgstr ""

#. type: Plain text
#: zsh.texi:28072
msgid ""
"Apart from these strings, the @var{name} may also be an asterisk (`@t{*}') "
"followed by any string. The @var{value} given for such a string will be used "
"for all files whose name ends with the string.  The @var{name} may also be "
"an equals sign (`@t{=}') followed by a pattern; the @t{EXTENDED_GLOB} option "
"will be turned on for evaluation of the pattern.  The @var{value} given for "
"this pattern will be used for all matches (not just filenames) whose display "
"string are matched by the pattern.  Definitions for the form with the "
"leading equal sign take precedence over the values defined for file types, "
"which in turn take precedence over the form with the leading asterisk (file "
"extensions)."
msgstr ""

#. type: Plain text
#: zsh.texi:28086
msgid ""
"The leading-equals form also allows different parts of the displayed strings "
"to be colored differently.  For this, the pattern has to use the `@t{(#b)}' "
"globbing flag and pairs of parentheses surrounding the parts of the strings "
"that are to be colored differently.  In this case the @var{value} may "
"consist of more than one color code separated by equal signs.  The first "
"code will be used for all parts for which no explicit code is specified and "
"the following codes will be used for the parts matched by the sub-patterns "
"in parentheses.  For example, the specification `@t{=(#b)(?)*(?)=0=3=7}' "
"will be used for all matches which are at least two characters long and will "
"use the code `@t{3}' for the first character, `@t{7}' for the last character "
"and `@t{0}' for the rest."
msgstr ""

#. type: Plain text
#: zsh.texi:28095
msgid ""
"All three forms of @var{name} may be preceded by a pattern in parentheses.  "
"If this is given, the @var{value} will be used only for matches in groups "
"whose names are matched by the pattern given in the parentheses.  For "
"example, `@t{(g*)m*=43}' highlights all matches beginning with `@t{m}' in "
"groups whose names begin with `@t{g}' using the color code `@t{43}'.  In "
"case of the `@t{lc}', `@t{rc}', and `@t{ec}' codes, the group pattern is "
"ignored."
msgstr ""

#. type: Plain text
#: zsh.texi:28103
msgid ""
"Note also that all patterns are tried in the order in which they appear in "
"the parameter value until the first one matches which is then used.  "
"Patterns may be matched against completions, descriptions (possibly with "
"spaces appended for padding), or lines consisting of a completion followed "
"by a description.  For consistent coloring it may be necessary to use more "
"than one pattern or a pattern with backreferences."
msgstr ""

#. type: Plain text
#: zsh.texi:28110
msgid ""
"When printing a match, the code prints the value of @t{lc}, the value for "
"the file-type or the last matching specification with a `@t{*}', the value "
"of @t{rc}, the string to display for the match itself, and then the value of "
"@t{ec} if that is defined or the values of @t{lc}, @t{no}, and @t{rc} if "
"@t{ec} is not defined."
msgstr ""

#. type: Plain text
#: zsh.texi:28120
msgid ""
"The default values are ISO 6429 (ANSI) compliant and can be used on vt100 "
"compatible terminals such as @t{xterm}s.  On monochrome terminals the "
"default values will have no visible effect.  The @t{colors} function from "
"the contribution can be used to get associative arrays containing the codes "
"for ANSI terminals (see @ref{Other Functions}).  For example, after loading "
"@t{colors}, one could use `@t{$color[red]}' to get the code for foreground "
"color red and `@t{$color[bg-green]}' for the code for background color "
"green."
msgstr ""

#. type: Plain text
#: zsh.texi:28126
msgid ""
"If the completion system invoked by compinit is used, these parameters "
"should not be set directly because the system controls them itself.  "
"Instead, the @t{list-colors} style should be used (see @ref{Completion "
"System Configuration})."
msgstr ""

#. type: subsection
#: zsh.texi:28129
#, no-wrap
msgid "Scrolling in completion listings"
msgstr ""

#. type: Plain text
#: zsh.texi:28147
msgid ""
"To enable scrolling through a completion list, the @t{LISTPROMPT} parameter "
"must be set.  Its value will be used as the prompt; if it is the empty "
"string, a default prompt will be used.  The value may contain escapes of the "
"form `@t{%x}'.  It supports the escapes `@t{%B}', `@t{%b}', `@t{%S}', "
"`@t{%s}', `@t{%U}', `@t{%u}', `@t{%F}', `@t{%f}', `@t{%K}', `@t{%k}' and "
"`@t{%@{}@var{...}@t{%@}}' used also in shell prompts as well as three pairs "
"of additional sequences: a `@t{%l}' or `@t{%L}' is replaced by the number of "
"the last line shown and the total number of lines in the form "
"`@var{number}@t{/}@var{total}'; a `@t{%m}' or `@t{%M}' is replaced with the "
"number of the last match shown and the total number of matches; and `@t{%p}' "
"or `@t{%P}' is replaced with `@t{Top}', `@t{Bottom}' or the position of the "
"first line shown in percent of the total number of lines, respectively.  In "
"each of these cases the form with the uppercase letter will be replaced with "
"a string of fixed width, padded to the right with spaces, while the "
"lowercase form will not be padded."
msgstr ""

#. type: Plain text
#: zsh.texi:28155
msgid ""
"If the parameter @t{LISTPROMPT} is set, the completion code will not ask if "
"the list should be shown.  Instead it immediately starts displaying the "
"list, stopping after the first screenful, showing the prompt at the bottom, "
"waiting for a keypress after temporarily switching to the @t{listscroll} "
"keymap.  Some of the zle functions have a special meaning while scrolling "
"lists:"
msgstr ""

#. type: table
#: zsh.texi:28160
msgid "stops listing discarding the key pressed"
msgstr ""

#. type: item
#: zsh.texi:28161
#, no-wrap
msgid "@t{accept-line}, @t{down-history}, @t{down-line-or-history}"
msgstr ""

#. type: itemx
#: zsh.texi:28162
#, no-wrap
msgid "@t{down-line-or-search}, @t{vi-down-line-or-history}"
msgstr ""

#. type: table
#: zsh.texi:28164
msgid "scrolls forward one line"
msgstr ""

#. type: item
#: zsh.texi:28165 zsh.texi:28350
#, no-wrap
msgid "@t{complete-word}, @t{menu-complete}, @t{expand-or-complete}"
msgstr ""

#. type: itemx
#: zsh.texi:28166
#, no-wrap
msgid "@t{expand-or-complete-prefix}, @t{menu-complete-or-expand}"
msgstr ""

#. type: table
#: zsh.texi:28168
msgid "scrolls forward one screenful"
msgstr ""

#. type: table
#: zsh.texi:28171
msgid "stop listing but take no other action"
msgstr ""

#. type: Plain text
#: zsh.texi:28179
msgid ""
"Every other character stops listing and immediately processes the key as "
"usual.  Any key that is not bound in the @t{listscroll} keymap or that is "
"bound to @t{undefined-key} is looked up in the keymap currently selected."
msgstr ""

#. type: Plain text
#: zsh.texi:28185
msgid ""
"As for the @t{ZLS_COLORS} and @t{ZLS_COLOURS} parameters, @t{LISTPROMPT} "
"should not be set directly when using the shell function based completion "
"system.  Instead, the @t{list-prompt} style should be used."
msgstr ""

#. type: subsection
#: zsh.texi:28188
#, no-wrap
msgid "Menu selection"
msgstr ""

#. type: cindex
#: zsh.texi:28190
#, no-wrap
msgid "completion, selecting by cursor"
msgstr ""

#. type: vindex
#: zsh.texi:28191
#, no-wrap
msgid "MENUSELECT"
msgstr ""

#. type: tindex
#: zsh.texi:28192
#, no-wrap
msgid "menu-select"
msgstr ""

#. type: Plain text
#: zsh.texi:28198
msgid ""
"The @t{zsh/complist} module also offers an alternative style of selecting "
"matches from a list, called menu selection, which can be used if the shell "
"is set up to return to the last prompt after showing a completion list (see "
"the @t{ALWAYS_LAST_PROMPT} option in @ref{Options})."
msgstr ""

#. type: Plain text
#: zsh.texi:28204
msgid ""
"Menu selection can be invoked directly by the widget @t{menu-select} defined "
"by this module.  This is a standard ZLE widget that can be bound to a key in "
"the usual way as described in @ref{Zsh Line Editor}."
msgstr ""

#. type: Plain text
#: zsh.texi:28214
msgid ""
"Alternatively, the parameter @t{MENUSELECT} can be set to an integer, which "
"gives the minimum number of matches that must be present before menu "
"selection is automatically turned on.  This second method requires that menu "
"completion be started, either directly from a widget such as "
"@t{menu-complete}, or due to one of the options @t{MENU_COMPLETE} or "
"@t{AUTO_MENU} being set.  If @t{MENUSELECT} is set, but is 0, 1 or empty, "
"menu selection will always be started during an ambiguous menu completion."
msgstr ""

#. type: Plain text
#: zsh.texi:28220
msgid ""
"When using the completion system based on shell functions, the "
"@t{MENUSELECT} parameter should not be used (like the @t{ZLS_COLORS} and "
"@t{ZLS_COLOURS} parameters described above).  Instead, the @t{menu} style "
"should be used with the @t{select=}@var{...} keyword."
msgstr ""

#. type: Plain text
#: zsh.texi:28232
msgid ""
"After menu selection is started, the matches will be listed. If there are "
"more matches than fit on the screen, only the first screenful is shown.  The "
"matches to insert into the command line can be selected from this list.  In "
"the list one match is highlighted using the value for @t{ma} from the "
"@t{ZLS_COLORS} or @t{ZLS_COLOURS} parameter.  The default value for this is "
"`@t{7}' which forces the selected match to be highlighted using standout "
"mode on a vt100-compatible terminal.  If neither @t{ZLS_COLORS} nor "
"@t{ZLS_COLOURS} is set, the same terminal control sequence as for the "
"`@t{%S}' escape in prompts is used."
msgstr ""

#. type: Plain text
#: zsh.texi:28240
msgid ""
"If there are more matches than fit on the screen and the parameter "
"@t{MENUPROMPT} is set, its value will be shown below the matches.  It "
"supports the same escape sequences as @t{LISTPROMPT}, but the number of the "
"match or line shown will be that of the one where the mark is placed.  If "
"its value is the empty string, a default prompt will be used."
msgstr ""

#. type: Plain text
#: zsh.texi:28248
msgid ""
"The @t{MENUSCROLL} parameter can be used to specify how the list is "
"scrolled.  If the parameter is unset, this is done line by line, if it is "
"set to `@t{0}' (zero), the list will scroll half the number of lines of the "
"screen.  If the value is positive, it gives the number of lines to scroll "
"and if it is negative, the list will be scrolled the number of lines of the "
"screen minus the (absolute) value."
msgstr ""

#. type: Plain text
#: zsh.texi:28255
msgid ""
"As for the @t{ZLS_COLORS}, @t{ZLS_COLOURS} and @t{LISTPROMPT} parameters, "
"neither @t{MENUPROMPT} nor @t{MENUSCROLL} should be set directly when using "
"the shell function based completion system.  Instead, the @t{select-prompt} "
"and @t{select-scroll} styles should be used."
msgstr ""

#. type: Plain text
#: zsh.texi:28268
msgid ""
"The completion code sometimes decides not to show all of the matches in the "
"list.  These hidden matches are either matches for which the completion "
"function which added them explicitly requested that they not appear in the "
"list (using the @t{-n} option of the @t{compadd} builtin command) or they "
"are matches which duplicate a string already in the list (because they "
"differ only in things like prefixes or suffixes that are not displayed).  In "
"the list used for menu selection, however, even these matches are shown so "
"that it is possible to select them.  To highlight such matches the @t{hi} "
"and @t{du} capabilities in the @t{ZLS_COLORS} and @t{ZLS_COLOURS} parameters "
"are supported for hidden matches of the first and second kind, respectively."
msgstr ""

#. type: Plain text
#: zsh.texi:28278
msgid ""
"Selecting matches is done by moving the mark around using the zle movement "
"functions.  When not all matches can be shown on the screen at the same "
"time, the list will scroll up and down when crossing the top or bottom "
"line.  The following zle functions have special meaning during menu "
"selection.  Note that the following always perform the same task within the "
"menu selection map and cannot be replaced by user defined widgets, nor can "
"the set of functions be extended:"
msgstr ""

#. type: item
#: zsh.texi:28281
#, no-wrap
msgid "@t{accept-line}, @t{accept-search}"
msgstr ""

#. type: table
#: zsh.texi:28284
msgid ""
"accept the current match and leave menu selection (but do not cause the "
"command line to be accepted)"
msgstr ""

#. type: table
#: zsh.texi:28288
msgid "leaves menu selection and restores the previous contents of the command line"
msgstr ""

#. type: item
#: zsh.texi:28289
#, no-wrap
msgid "@t{redisplay}, @t{clear-screen}"
msgstr ""

#. type: table
#: zsh.texi:28291
msgid "execute their normal function without leaving menu selection"
msgstr ""

#. type: item
#: zsh.texi:28292
#, no-wrap
msgid "@t{accept-and-hold}, @t{accept-and-menu-complete}"
msgstr ""

#. type: table
#: zsh.texi:28295
msgid ""
"accept the currently inserted match and continue selection allowing to "
"select the next match to insert into the line"
msgstr ""

#. type: table
#: zsh.texi:28304
msgid ""
"accepts the current match and then tries completion with menu selection "
"again; in the case of files this allows one to select a directory and "
"immediately attempt to complete files in it; if there are no matches, a "
"message is shown and one can use @t{undo} to go back to completion on the "
"previous level, every other key leaves menu selection (including the other "
"zle functions which are otherwise special during menu selection)"
msgstr ""

#. type: table
#: zsh.texi:28308
msgid ""
"removes matches inserted during the menu selection by one of the three "
"functions before"
msgstr ""

#. type: item
#: zsh.texi:28309
#, no-wrap
msgid "@t{down-history}, @t{down-line-or-history}"
msgstr ""

#. type: itemx
#: zsh.texi:28310
#, no-wrap
msgid "@t{vi-down-line-or-history},  @t{down-line-or-search}"
msgstr ""

#. type: table
#: zsh.texi:28312
msgid "moves the mark one line down"
msgstr ""

#. type: item
#: zsh.texi:28313
#, no-wrap
msgid "@t{up-history}, @t{up-line-or-history}"
msgstr ""

#. type: itemx
#: zsh.texi:28314
#, no-wrap
msgid "@t{vi-up-line-or-history}, @t{up-line-or-search}"
msgstr ""

#. type: table
#: zsh.texi:28316
msgid "moves the mark one line up"
msgstr ""

#. type: item
#: zsh.texi:28317
#, no-wrap
msgid "@t{forward-char}, @t{vi-forward-char}"
msgstr ""

#. type: table
#: zsh.texi:28319
msgid "moves the mark one column right"
msgstr ""

#. type: item
#: zsh.texi:28320
#, no-wrap
msgid "@t{backward-char}, @t{vi-backward-char}"
msgstr ""

#. type: table
#: zsh.texi:28322
msgid "moves the mark one column left"
msgstr ""

#. type: item
#: zsh.texi:28323
#, no-wrap
msgid "@t{forward-word}, @t{vi-forward-word}"
msgstr ""

#. type: itemx
#: zsh.texi:28324
#, no-wrap
msgid "@t{vi-forward-word-end}, @t{emacs-forward-word}"
msgstr ""

#. type: table
#: zsh.texi:28326
msgid "moves the mark one screenful down"
msgstr ""

#. type: item
#: zsh.texi:28327
#, no-wrap
msgid "@t{backward-word}, @t{vi-backward-word}, @t{emacs-backward-word}"
msgstr ""

#. type: table
#: zsh.texi:28329
msgid "moves the mark one screenful up"
msgstr ""

#. type: item
#: zsh.texi:28330
#, no-wrap
msgid "@t{vi-forward-blank-word}, @t{vi-forward-blank-word-end}"
msgstr ""

#. type: table
#: zsh.texi:28332
msgid "moves the mark to the first line of the next group of matches"
msgstr ""

#. type: table
#: zsh.texi:28335
msgid "moves the mark to the last line of the previous group of matches"
msgstr ""

#. type: table
#: zsh.texi:28338
msgid "moves the mark to the first line"
msgstr ""

#. type: table
#: zsh.texi:28341
msgid "moves the mark to the last line"
msgstr ""

#. type: item
#: zsh.texi:28342
#, no-wrap
msgid "@t{beginning-of-buffer-or-history}, @t{beginning-of-line}"
msgstr ""

#. type: itemx
#: zsh.texi:28343
#, no-wrap
msgid "@t{beginning-of-line-hist}, @t{vi-beginning-of-line}"
msgstr ""

#. type: table
#: zsh.texi:28345
msgid "moves the mark to the leftmost column"
msgstr ""

#. type: item
#: zsh.texi:28346
#, no-wrap
msgid "@t{end-of-buffer-or-history}, @t{end-of-line}"
msgstr ""

#. type: itemx
#: zsh.texi:28347
#, no-wrap
msgid "@t{end-of-line-hist}, @t{vi-end-of-line}"
msgstr ""

#. type: table
#: zsh.texi:28349
msgid "moves the mark to the rightmost column"
msgstr ""

#. type: itemx
#: zsh.texi:28351
#, no-wrap
msgid "@t{expand-or-complete-prefix}, @t{menu-expand-or-complete}"
msgstr ""

#. type: table
#: zsh.texi:28353
msgid "moves the mark to the next match"
msgstr ""

#. type: table
#: zsh.texi:28356
msgid "moves the mark to the previous match"
msgstr ""

#. type: table
#: zsh.texi:28366
msgid ""
"this toggles between normal and interactive mode; in interactive mode the "
"keys bound to @t{self-insert} and @t{self-insert-unmeta} insert into the "
"command line as in normal editing mode but without leaving menu selection; "
"after each character completion is tried again and the list changes to "
"contain only the new matches; the completion widgets make the longest "
"unambiguous string be inserted in the command line and @t{undo} and "
"@t{backward-delete-char} go back to the previous set of matches"
msgstr ""

#. type: table
#: zsh.texi:28372
msgid ""
"this starts incremental searches in the list of completions displayed; in "
"this mode, @t{accept-line} only leaves incremental search, going back to the "
"normal menu selection mode"
msgstr ""

#. type: Plain text
#: zsh.texi:28381
msgid ""
"All movement functions wrap around at the edges; any other zle function not "
"listed leaves menu selection and executes that function.  It is possible to "
"make widgets in the above list do the same by using the form of the widget "
"with a `@t{.}' in front.  For example, the widget `@t{.accept-line}' has the "
"effect of leaving menu selection and accepting the entire command line."
msgstr ""

#. type: Plain text
#: zsh.texi:28392
msgid ""
"During this selection the widget uses the keymap @t{menuselect}.  Any key "
"that is not defined in this keymap or that is bound to @t{undefined-key} is "
"looked up in the keymap currently selected.  This is used to ensure that the "
"most important keys used during selection (namely the cursor keys, return, "
"and TAB) have sensible defaults.  However, keys in the @t{menuselect} keymap "
"can be modified directly using the @t{bindkey} builtin command (see @ref{The "
"zsh/zle Module}). For example, to make the return key leave menu selection "
"without accepting the match currently selected one could call"
msgstr ""

#. type: example
#: zsh.texi:28396
#, no-wrap
msgid "bindkey -M menuselect '^M' send-break\n"
msgstr ""

#. type: Plain text
#: zsh.texi:28401
msgid "after loading the @t{zsh/complist} module."
msgstr ""

#. type: node
#: zsh.texi:28401 zsh.texi:28494 zsh.texi:28496 zsh.texi:28812
#, no-wrap
msgid "The zsh/curses Module"
msgstr ""

#. type: cindex
#: zsh.texi:28407
#, no-wrap
msgid "completion, utility"
msgstr ""

#. type: Plain text
#: zsh.texi:28415
msgid ""
"The @t{zsh/computil} module adds several builtin commands that are used by "
"some of the completion functions in the completion system based on shell "
"functions (see @ref{Completion System} ).  Except for @t{compquote} these "
"builtin commands are very specialised and thus not very interesting when "
"writing your own completion functions.  In summary, these builtin commands "
"are:"
msgstr ""

#. type: table
#: zsh.texi:28424
msgid ""
"This is used by the @t{_arguments} function to do the argument and command "
"line parsing.  Like @t{compdescribe} it has an option @t{-i} to do the "
"parsing and initialize some internal state and various options to access the "
"state information to decide what should be completed."
msgstr ""

#. type: table
#: zsh.texi:28435
msgid ""
"This is used by the @t{_describe} function to build the displays for the "
"matches and to get the strings to add as matches with their options.  On the "
"first call one of the options @t{-i} or @t{-I} should be supplied as the "
"first argument.  In the first case, display strings without the descriptions "
"will be generated, in the second case, the string used to separate the "
"matches from their descriptions must be given as the second argument and the "
"descriptions (if any) will be shown.  All other arguments are like the "
"definition arguments to @t{_describe} itself."
msgstr ""

#. type: table
#: zsh.texi:28445
msgid ""
"Once @t{compdescribe} has been called with either the @t{-i} or the @t{-I} "
"option, it can be repeatedly called with the @t{-g} option and the names of "
"four parameters as its arguments.  This will step through the different sets "
"of matches and store the value of @t{compstate[list]} in the first scalar, "
"the options for @t{compadd} in the second array, the matches in the third "
"array, and the strings to be displayed in the completion listing in the "
"fourth array.  The arrays may then be directly given to @t{compadd} to "
"register the matches with the completion code."
msgstr ""

#. type: table
#: zsh.texi:28457
msgid ""
"Used by the @t{_path_files} function to optimize complex recursive filename "
"generation (globbing).  It does three things.  With the @t{-p} and @t{-P} "
"options it builds the glob patterns to use, including the paths already "
"handled and trying to optimize the patterns with respect to the prefix and "
"suffix from the line and the match specification currently used.  The @t{-i} "
"option does the directory tests for the @t{ignore-parents} style and the "
"@t{-r} option tests if a component for some of the matches are equal to the "
"string on the line and removes all other matches if that is true."
msgstr ""

#. type: table
#: zsh.texi:28465
msgid ""
"Used by the @t{_tags} function to implement the internals of the "
"@t{group-order} style.  This only takes its arguments as names of completion "
"groups and creates the groups for it (all six types: sorted and unsorted, "
"both without removing duplicates, with removing all duplicates and with "
"removing consecutive duplicates)."
msgstr ""

#. type: item
#: zsh.texi:28467
#, no-wrap
msgid "@t{compquote} [ @t{-p} ] @var{names} ..."
msgstr ""

#. type: table
#: zsh.texi:28478
msgid ""
"There may be reasons to write completion functions that have to add the "
"matches using the @t{-Q} option to @t{compadd} and perform quoting "
"themselves.  Instead of interpreting the first character of the "
"@t{all_quotes} key of the @t{compstate} special association and using the "
"@t{q} flag for parameter expansions, one can use this builtin command.  The "
"arguments are the names of scalar or array parameters and the values of "
"these parameters are quoted as needed for the innermost quoting level.  If "
"the @t{-p} option is given, quoting is done as if there is some prefix "
"before the values of the parameters, so that a leading equal sign will not "
"be quoted."
msgstr ""

#. type: table
#: zsh.texi:28481
msgid "The return status is non-zero in case of an error and zero otherwise."
msgstr ""

#. type: table
#: zsh.texi:28487
msgid "These implement the internals of the tags mechanism."
msgstr ""

#. type: table
#: zsh.texi:28491
msgid "Like @t{comparguments}, but for the @t{_values} function."
msgstr ""

#. type: node
#: zsh.texi:28494 zsh.texi:28812 zsh.texi:28814 zsh.texi:28919
#, no-wrap
msgid "The zsh/datetime Module"
msgstr ""

#. type: Plain text
#: zsh.texi:28502
msgid ""
"The @t{zsh/curses} module makes available one builtin command and various "
"parameters."
msgstr ""

#. type: subsection
#: zsh.texi:28505
#, no-wrap
msgid "Builtin"
msgstr ""

#. type: findex
#: zsh.texi:28510
#, no-wrap
msgid "zcurses"
msgstr ""

#. type: cindex
#: zsh.texi:28511
#, no-wrap
msgid "windows, curses"
msgstr ""

#. type: item
#: zsh.texi:28512
#, no-wrap
msgid "@t{zcurses} @t{init}"
msgstr ""

#. type: itemx
#: zsh.texi:28513
#, no-wrap
msgid "@t{zcurses} @t{end}"
msgstr ""

#. type: itemx
#: zsh.texi:28514
#, no-wrap
msgid ""
"@t{zcurses} @t{addwin} @var{targetwin} @var{nlines} @var{ncols} "
"@var{begin_y} @var{begin_x} [ @var{parentwin} ]"
msgstr ""

#. type: itemx
#: zsh.texi:28515
#, no-wrap
msgid "@t{zcurses} @t{delwin} @var{targetwin}"
msgstr ""

#. type: itemx
#: zsh.texi:28516
#, no-wrap
msgid "@t{zcurses} @t{refresh} [ @var{targetwin} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:28517
#, no-wrap
msgid "@t{zcurses} @t{touch} @var{targetwin} ..."
msgstr ""

#. type: itemx
#: zsh.texi:28518
#, no-wrap
msgid "@t{zcurses} @t{move} @var{targetwin} @var{new_y} @var{new_x}"
msgstr ""

#. type: itemx
#: zsh.texi:28519
#, no-wrap
msgid "@t{zcurses} @t{clear} @var{targetwin} [ @t{redraw} | @t{eol} | @t{bot} ]"
msgstr ""

#. type: itemx
#: zsh.texi:28520
#, no-wrap
msgid "@t{zcurses} @t{position} @var{targetwin} @var{array}"
msgstr ""

#. type: itemx
#: zsh.texi:28521
#, no-wrap
msgid "@t{zcurses} @t{char} @var{targetwin} @var{character}"
msgstr ""

#. type: itemx
#: zsh.texi:28522
#, no-wrap
msgid "@t{zcurses} @t{string} @var{targetwin} @var{string}"
msgstr ""

#. type: itemx
#: zsh.texi:28523
#, no-wrap
msgid "@t{zcurses} @t{border} @var{targetwin} @var{border}"
msgstr ""

#. type: itemx
#: zsh.texi:28524
#, no-wrap
msgid ""
"@t{zcurses} @t{attr} @var{targetwin} [ [@t{+}|@t{-}]@var{attribute} | "
"@var{fg_col}@t{/}@var{bg_col} ] [...]"
msgstr ""

#. type: itemx
#: zsh.texi:28525
#, no-wrap
msgid ""
"@t{zcurses} @t{bg} @var{targetwin} [ [@t{+}|@t{-}]@var{attribute} | "
"@var{fg_col}@t{/}@var{bg_col} | @t{@@}@var{char} ] [...]"
msgstr ""

#. type: itemx
#: zsh.texi:28526
#, no-wrap
msgid ""
"@t{zcurses} @t{scroll} @var{targetwin} [ @t{on} | @t{off} | "
"[@t{+}|@t{-}]@var{lines} ]"
msgstr ""

#. type: itemx
#: zsh.texi:28527
#, no-wrap
msgid ""
"@t{zcurses} @t{input} @var{targetwin} [ @var{param} [ @var{kparam} [ "
"@var{mparam} ] ] ]"
msgstr ""

#. type: itemx
#: zsh.texi:28528
#, no-wrap
msgid "@t{zcurses} @t{mouse} [ @t{delay} @var{num} | [@t{+}|@t{-}]@t{motion} ]"
msgstr ""

#. type: itemx
#: zsh.texi:28529
#, no-wrap
msgid "@t{zcurses} @t{timeout} @var{targetwin} @var{intval}"
msgstr ""

#. type: itemx
#: zsh.texi:28530
#, no-wrap
msgid "@t{zcurses} @t{querychar} @var{targetwin} [ @var{param} ]"
msgstr ""

#. type: itemx
#: zsh.texi:28531
#, no-wrap
msgid ""
"@t{zcurses} @t{resize} @var{height} @var{width} [ @t{endwin} | @t{nosave} | "
"@t{endwin_nosave} ]"
msgstr ""

#. type: table
#: zsh.texi:28536
msgid ""
"Manipulate curses windows.  All uses of this command should be bracketed by "
"`@t{zcurses init}' to initialise use of curses, and `@t{zcurses end}' to end "
"it; omitting `@t{zcurses end}' can cause the terminal to be in an unwanted "
"state."
msgstr ""

#. type: table
#: zsh.texi:28545
msgid ""
"The subcommand @t{addwin} creates a window with @var{nlines} lines and "
"@var{ncols} columns.  Its upper left corner will be placed at row "
"@var{begin_y} and column @var{begin_x} of the screen.  @var{targetwin} is a "
"string and refers to the name of a window that is not currently assigned.  "
"Note in particular the curses convention that vertical values appear before "
"horizontal values."
msgstr ""

#. type: table
#: zsh.texi:28553
msgid ""
"If @t{addwin} is given an existing window as the final argument, the new "
"window is created as a subwindow of @var{parentwin}.  This differs from an "
"ordinary new window in that the memory of the window contents is shared with "
"the parent's memory.  Subwindows must be deleted before their parent.  Note "
"that the coordinates of subwindows are relative to the screen, not the "
"parent, as with other windows."
msgstr ""

#. type: table
#: zsh.texi:28558
msgid ""
"Use the subcommand @t{delwin} to delete a window created with @t{addwin}.  "
"Note that @t{end} does @emph{not} implicitly delete windows, and that "
"@t{delwin} does not erase the screen image of the window."
msgstr ""

#. type: table
#: zsh.texi:28563
msgid ""
"The window corresponding to the full visible screen is called @t{stdscr}; it "
"always exists after `@t{zcurses init}' and cannot be delete with @t{delwin}."
msgstr ""

#. type: table
#: zsh.texi:28570
msgid ""
"The subcommand @t{refresh} will refresh window @var{targetwin}; this is "
"necessary to make any pending changes (such as characters you have prepared "
"for output with @t{char}) visible on the screen.  @t{refresh} without an "
"argument causes the screen to be cleared and redrawn.  If multiple windows "
"are given, the screen is updated once at the end."
msgstr ""

#. type: table
#: zsh.texi:28575
msgid ""
"The subcommand @t{touch} marks the @var{targetwin}s listed as changed.  This "
"is necessary before @t{refresh}ing windows if a window that was in front of "
"another window (which may be @t{stdscr}) is deleted."
msgstr ""

#. type: table
#: zsh.texi:28581
msgid ""
"The subcommand @t{move} moves the cursor position in @var{targetwin} to new "
"coordinates @var{new_y} and @var{new_x}.  Note that the subcommand "
"@t{string} (but not the subcommand @t{char}) advances the cursor position "
"over the characters added."
msgstr ""

#. type: table
#: zsh.texi:28591
msgid ""
"The subcommand @t{clear} erases the contents of @var{targetwin}.  One (and "
"no more than one) of three options may be specified.  With the option "
"@t{redraw}, in addition the next @t{refresh} of @var{targetwin} will cause "
"the screen to be cleared and repainted.  With the option @t{eol}, "
"@var{targetwin} is only cleared to the end of the current cursor line.  With "
"the option @t{bot}, @var{targetwin} is cleared to the end of the window, i.e "
"everything to the right and below the cursor is cleared."
msgstr ""

#. type: table
#: zsh.texi:28596
msgid ""
"The subcommand @t{position} writes various positions associated with "
"@var{targetwin} into the array named @var{array}.  These are, in order:"
msgstr ""

#. type: table
#: zsh.texi:28600
msgid ""
"The y and x coordinates of the cursor relative to the top left of "
"@var{targetwin}"
msgstr ""

#. type: table
#: zsh.texi:28603
msgid "The y and x coordinates of the top left of @var{targetwin} on the screen"
msgstr ""

#. type: table
#: zsh.texi:28605
msgid "The size of @var{targetwin} in y and x dimensions."
msgstr ""

#. type: table
#: zsh.texi:28610
msgid ""
"Outputting characters and strings are achieved by @t{char} and @t{string} "
"respectively."
msgstr ""

#. type: table
#: zsh.texi:28616
msgid ""
"To draw a border around window @var{targetwin}, use @t{border}.  Note that "
"the border is not subsequently handled specially: in other words, the border "
"is simply a set of characters output at the edge of the window.  Hence it "
"can be overwritten, can scroll off the window, etc."
msgstr ""

#. type: table
#: zsh.texi:28624
msgid ""
"The subcommand @t{attr} will set @var{targetwin}'s attributes or "
"foreground/background color pair for any successive character output.  Each "
"@var{attribute} given on the line may be prepended by a @t{+} to set or a "
"@t{-} to unset that attribute; @t{+} is assumed if absent.  The attributes "
"supported are @t{blink}, @t{bold}, @t{dim}, @t{reverse}, @t{standout}, and "
"@t{underline}."
msgstr ""

#. type: table
#: zsh.texi:28636
msgid ""
"Each @var{fg_col}@t{/}@var{bg_col} attribute (to be read as `@var{fg_col} on "
"@var{bg_col}') sets the foreground and background color for character "
"output.  The color @t{default} is sometimes available (in particular if the "
"library is ncurses), specifying the foreground or background color with "
"which the terminal started.  The color pair @t{default/default} is always "
"available. To use more than the 8 named colors (red, green, etc.) construct "
"the @var{fg_col}@t{/}@var{bg_col} pairs where @var{fg_col} and @var{bg_col} "
"are decimal integers, e.g @t{128/200}.  The maximum color value is 254 if "
"the terminal supports 256 colors."
msgstr ""

#. type: table
#: zsh.texi:28647
msgid ""
"@t{bg} overrides the color and other attributes of all characters in the "
"window.  Its usual use is to set the background initially, but it will "
"overwrite the attributes of any characters at the time when it is called.  "
"In addition to the arguments allowed with @t{attr}, an argument "
"@t{@@}@var{char} specifies a character to be shown in otherwise blank areas "
"of the window.  Owing to limitations of curses this cannot be a multibyte "
"character (use of ASCII characters only is recommended).  As the specified "
"set of attributes override the existing background, turning attributes off "
"in the arguments is not useful, though this does not cause an error."
msgstr ""

#. type: table
#: zsh.texi:28657
msgid ""
"The subcommand @t{scroll} can be used with @t{on} or @t{off} to enabled or "
"disable scrolling of a window when the cursor would otherwise move below the "
"window due to typing or output.  It can also be used with a positive or "
"negative integer to scroll the window up or down the given number of lines "
"without changing the current cursor position (which therefore appears to "
"move in the opposite direction relative to the window).  In the second case, "
"if scrolling is @t{off} it is temporarily turned @t{on} to allow the window "
"to be scrolled."
msgstr ""

#. type: table
#: zsh.texi:28663
msgid ""
"The subcommand @t{input} reads a single character from the window without "
"echoing it back.  If @var{param} is supplied the character is assigned to "
"the parameter @var{param}, else it is assigned to the parameter @t{REPLY}."
msgstr ""

#. type: table
#: zsh.texi:28674
msgid ""
"If both @var{param} and @var{kparam} are supplied, the key is read in "
"`keypad' mode.  In this mode special keys such as function keys and arrow "
"keys return the name of the key in the parameter @var{kparam}.  The key "
"names are the macros defined in the @t{curses.h} or @t{ncurses.h} with the "
"prefix `@t{KEY_}' removed; see also the description of the parameter "
"@t{zcurses_keycodes} below.  Other keys cause a value to be set in "
"@var{param} as before.  On a successful return only one of @var{param} or "
"@var{kparam} contains a non-empty string; the other is set to an empty "
"string."
msgstr ""

#. type: table
#: zsh.texi:28684
msgid ""
"If @var{mparam} is also supplied, @t{input} attempts to handle mouse input.  "
"This is only available with the ncurses library; mouse handling can be "
"detected by checking for the exit status of `@t{zcurses mouse}' with no "
"arguments.  If a mouse button is clicked (or double- or triple-clicked, or "
"pressed or released with a configurable delay from being clicked) then "
"@var{kparam} is set to the string @t{MOUSE}, and @var{mparam} is set to an "
"array consisting of the following elements:"
msgstr ""

#. type: table
#: zsh.texi:28688
msgid ""
"An identifier to discriminate different input devices; this is only rarely "
"useful."
msgstr ""

#. type: table
#: zsh.texi:28693
msgid ""
"The x, y and z coordinates of the mouse click relative to the full screen, "
"as three elements in that order (i.e. the y coordinate is, unusually, after "
"the x coordinate).  The z coordinate is only available for a few unusual "
"input devices and is otherwise set to zero."
msgstr ""

#. type: table
#: zsh.texi:28698
msgid ""
"Any events that occurred as separate items; usually there will be just one.  "
"An event consists of @t{PRESSED}, @t{RELEASED}, @t{CLICKED}, "
"@t{DOUBLE_CLICKED} or @t{TRIPLE_CLICKED} followed immediately (in the same "
"element) by the number of the button."
msgstr ""

#. type: table
#: zsh.texi:28700
msgid "If the shift key was pressed, the string @t{SHIFT}."
msgstr ""

#. type: table
#: zsh.texi:28702
msgid "If the control key was pressed, the string @t{CTRL}."
msgstr ""

#. type: table
#: zsh.texi:28704
msgid "If the alt key was pressed, the string @t{ALT}."
msgstr ""

#. type: table
#: zsh.texi:28712
msgid ""
"Not all mouse events may be passed through to the terminal window; most "
"terminal emulators handle some mouse events themselves.  Note that the "
"ncurses manual implies that using input both with and without mouse handling "
"may cause the mouse cursor to appear and disappear."
msgstr ""

#. type: table
#: zsh.texi:28726
msgid ""
"The subcommand @t{mouse} can be used to configure the use of the mouse.  "
"There is no window argument; mouse options are global.  `@t{zcurses mouse}' "
"with no arguments returns status 0 if mouse handling is possible, else "
"status 1.  Otherwise, the possible arguments (which may be combined on the "
"same command line) are as follows.  @t{delay} @var{num} sets the maximum "
"delay in milliseconds between press and release events to be considered as a "
"click; the value 0 disables click resolution, and the default is one sixth "
"of a second.  @t{motion} proceeded by an optional `@t{+}' (the default) or "
"@t{-} turns on or off reporting of mouse motion in addition to clicks, "
"presses and releases, which are always reported.  However, it appears "
"reports for mouse motion are not currently implemented."
msgstr ""

#. type: table
#: zsh.texi:28736
msgid ""
"The subcommand @t{timeout} specifies a timeout value for input from "
"@var{targetwin}.  If @var{intval} is negative, `@t{zcurses input}' waits "
"indefinitely for a character to be typed; this is the default.  If "
"@var{intval} is zero, `@t{zcurses input}' returns immediately; if there is "
"typeahead it is returned, else no input is done and status 1 is returned.  "
"If @var{intval} is positive, `@t{zcurses input}' waits @var{intval} "
"milliseconds for input and if there is none at the end of that period "
"returns status 1."
msgstr ""

#. type: table
#: zsh.texi:28746
msgid ""
"The subcommand @t{querychar} queries the character at the current cursor "
"position.  The return values are stored in the array named @var{param} if "
"supplied, else in the array @t{reply}.  The first value is the character "
"(which may be a multibyte character if the system supports them); the second "
"is the color pair in the usual @var{fg_col}@t{/}@var{bg_col} notation, or "
"@t{0} if color is not supported.  Any attributes other than color that apply "
"to the character, as set with the subcommand @t{attr}, appear as additional "
"elements."
msgstr ""

#. type: table
#: zsh.texi:28762
msgid ""
"The subcommand @t{resize} resizes @t{stdscr} and all windows to given "
"dimensions (windows that stick out from the new dimensions are resized "
"down). The underlying curses extension (@t{resize_term call}) can be "
"unavailable. To verify, zeroes can be used for @var{height} and "
"@var{width}. If the result of the subcommand is @t{0}, resize_term is "
"available (@t{2} otherwise). Tests show that resizing can be normally "
"accomplished by calling @t{zcurses end} and @t{zcurses refresh}. The "
"@t{resize} subcommand is provided for versatility. Multiple system "
"configurations have been checked and @t{zcurses end} and @t{zcurses refresh} "
"are still needed for correct terminal state after resize. To invoke them "
"with @t{resize}, use @var{endwin} argument.  Using @var{nosave} argument "
"will cause new terminal state to not be saved internally by "
"@t{zcurses}. This is also provided for versatility and should normally be "
"not needed."
msgstr ""

#. type: t{#1}
#: zsh.texi:28772 zsh.texi:28773
#, no-wrap
msgid "ZCURSES_COLORS"
msgstr ""

#. type: table
#: zsh.texi:28777
msgid ""
"Readonly integer.  The maximum number of colors the terminal supports.  This "
"value is initialised by the curses library and is not available until the "
"first time @t{zcurses init} is run."
msgstr ""

#. type: t{#1}
#: zsh.texi:28778 zsh.texi:28779
#, no-wrap
msgid "ZCURSES_COLOR_PAIRS"
msgstr ""

#. type: table
#: zsh.texi:28786
msgid ""
"Readonly integer.  The maximum number of color pairs "
"@var{fg_col}@t{/}@var{bg_col} that may be defined in `@t{zcurses attr}' "
"commands; note this limit applies to all color pairs that have been used "
"whether or not they are currently active.  This value is initialised by the "
"curses library and is not available until the first time @t{zcurses init} is "
"run."
msgstr ""

#. type: t{#1}
#: zsh.texi:28787 zsh.texi:28788
#, no-wrap
msgid "zcurses_attrs"
msgstr ""

#. type: table
#: zsh.texi:28791
msgid ""
"Readonly array.  The attributes supported by @t{zsh/curses}; available as "
"soon as the module is loaded."
msgstr ""

#. type: t{#1}
#: zsh.texi:28792 zsh.texi:28793
#, no-wrap
msgid "zcurses_colors"
msgstr ""

#. type: table
#: zsh.texi:28796
msgid ""
"Readonly array.  The colors supported by @t{zsh/curses}; available as soon "
"as the module is loaded."
msgstr ""

#. type: t{#1}
#: zsh.texi:28797 zsh.texi:28798
#, no-wrap
msgid "zcurses_keycodes"
msgstr ""

#. type: table
#: zsh.texi:28803
msgid ""
"Readonly array.  The values that may be returned in the second parameter "
"supplied to `@t{zcurses input}' in the order in which they are defined "
"internally by curses.  Not all function keys are listed, only @t{F0}; curses "
"reserves space for @t{F0} up to @t{F63}."
msgstr ""

#. type: t{#1}
#: zsh.texi:28804 zsh.texi:28805
#, no-wrap
msgid "zcurses_windows"
msgstr ""

#. type: table
#: zsh.texi:28809
msgid ""
"Readonly array.  The current list of windows, i.e. all windows that have "
"been created with `@t{zcurses addwin}' and not removed with `@t{zcurses "
"delwin}'."
msgstr ""

#. type: node
#: zsh.texi:28812 zsh.texi:28919 zsh.texi:28921 zsh.texi:28994
#, no-wrap
msgid "The zsh/db/gdbm Module"
msgstr ""

#. type: Plain text
#: zsh.texi:28819
msgid "The @t{zsh/datetime} module makes available one builtin command:"
msgstr ""

#. type: findex
#: zsh.texi:28822
#, no-wrap
msgid "strftime"
msgstr ""

#. type: cindex
#: zsh.texi:28823
#, no-wrap
msgid "date string, printing"
msgstr ""

#. type: item
#: zsh.texi:28824
#, no-wrap
msgid ""
"@t{strftime} [ @t{-s} @var{scalar} | @t{-n} ] @var{format} [ @var{epochtime} "
"[ @var{nanoseconds} ] ]"
msgstr ""

#. type: itemx
#: zsh.texi:28825
#, no-wrap
msgid ""
"@t{strftime} @t{-r} [ @t{-q} ] [ @t{-s} @var{scalar} | @t{-n} ] @var{format} "
"@var{timestring}"
msgstr ""

#. type: table
#: zsh.texi:28833
msgid ""
"Output the date in the @var{format} specified.  With no @var{epochtime}, the "
"current system date/time is used; optionally, @var{epochtime} may be used to "
"specify the number of seconds since the epoch, and @var{nanoseconds} may "
"additionally be used to specify the number of nanoseconds past the second "
"(otherwise that number is assumed to be 0).  See strftime(3) for details.  "
"The zsh extensions described in @ref{Prompt Expansion} are also available."
msgstr ""

#. type: table
#: zsh.texi:28838
msgid "Suppress printing a newline after the formatted string."
msgstr ""

#. type: table
#: zsh.texi:28842
msgid ""
"Run quietly; suppress printing of all error messages described below.  "
"Errors for invalid @var{epochtime} values are always printed."
msgstr ""

#. type: table
#: zsh.texi:28850
msgid ""
"With the option @t{-r} (reverse), use @var{format} to parse the input string "
"@var{timestring} and output the number of seconds since the epoch at which "
"the time occurred.  The parsing is implemented by the system function "
"@t{strptime}; see strptime(3).  This means that zsh format extensions are "
"not available, but for reverse lookup they are not required."
msgstr ""

#. type: table
#: zsh.texi:28856
msgid ""
"In most implementations of @t{strftime} any timezone in the @var{timestring} "
"is ignored and the local timezone declared by the @t{TZ} environment "
"variable is used; other parameters are set to zero if not present."
msgstr ""

#. type: table
#: zsh.texi:28862
msgid ""
"If @var{timestring} does not match @var{format} the command returns status 1 "
"and prints an error message.  If @var{timestring} matches @var{format} but "
"not all characters in @var{timestring} were used, the conversion succeeds "
"but also prints an error message."
msgstr ""

#. type: table
#: zsh.texi:28866
msgid ""
"If either of the system functions @t{strptime} or @t{mktime} is not "
"available, status 2 is returned and an error message is printed."
msgstr ""

#. type: item
#: zsh.texi:28867
#, no-wrap
msgid "@t{-s} @var{scalar}"
msgstr ""

#. type: table
#: zsh.texi:28870
msgid ""
"Assign the date string (or epoch time in seconds if @t{-r} is given) to "
"@var{scalar} instead of printing it."
msgstr ""

#. type: table
#: zsh.texi:28877
msgid ""
"Note that depending on the system's declared integral time type, "
"@t{strftime} may produce incorrect results for epoch times greater than "
"2147483647 which corresponds to 2038-01-19 03:14:07 +0000."
msgstr ""

#. type: Plain text
#: zsh.texi:28883
msgid ""
"The @t{zsh/datetime} module makes available several parameters; all are "
"readonly:"
msgstr ""

#. type: t{#1}
#: zsh.texi:28886 zsh.texi:28887
#, no-wrap
msgid "EPOCHREALTIME"
msgstr ""

#. type: table
#: zsh.texi:28893
msgid ""
"A floating point value representing the number of seconds since the epoch.  "
"The notional accuracy is to nanoseconds if the @t{clock_gettime} call is "
"available and to microseconds otherwise, but in practice the range of double "
"precision floating point and shell scheduling latencies may be significant "
"effects."
msgstr ""

#. type: t{#1}
#: zsh.texi:28894 zsh.texi:28895
#, no-wrap
msgid "EPOCHSECONDS"
msgstr ""

#. type: table
#: zsh.texi:28898
msgid "An integer value representing the number of seconds since the epoch."
msgstr ""

#. type: t{#1}
#: zsh.texi:28899 zsh.texi:28900
#, no-wrap
msgid "epochtime"
msgstr ""

#. type: table
#: zsh.texi:28907
msgid ""
"An array value containing the number of seconds since the epoch in the first "
"element and the remainder of the time since the epoch in nanoseconds in the "
"second element.  To ensure the two elements are consistent the array should "
"be copied or otherwise referenced as a single substitution before the values "
"are used.  The following idiom may be used:"
msgstr ""

#. type: example
#: zsh.texi:28913
#, no-wrap
msgid ""
"for secs nsecs in $epochtime; do\n"
"  ...\n"
"done\n"
msgstr ""

#. type: node
#: zsh.texi:28919 zsh.texi:28994 zsh.texi:28996 zsh.texi:29018
#, no-wrap
msgid "The zsh/deltochar Module"
msgstr ""

#. type: Plain text
#: zsh.texi:28930
msgid ""
"The @t{zsh/db/gdbm} module is used to create \"tied\" associative arrays "
"that interface to database files.  If the GDBM interface is not available, "
"the builtins defined by this module will report an error.  This module is "
"also intended as a prototype for creating additional database interfaces, so "
"the @t{ztie} builtin may move to a more generic module in the future."
msgstr ""

#. type: Plain text
#: zsh.texi:28933
msgid "The builtins in this module are:"
msgstr ""

#. type: findex
#: zsh.texi:28936
#, no-wrap
msgid "ztie"
msgstr ""

#. type: cindex
#: zsh.texi:28937
#, no-wrap
msgid "database tied array, creating"
msgstr ""

#. type: item
#: zsh.texi:28938
#, no-wrap
msgid "@t{ztie -d db/gdbm -f} @var{filename} [ @t{-r} ] @var{arrayname}"
msgstr ""

#. type: table
#: zsh.texi:28943
msgid ""
"Open the GDBM database identified by @var{filename} and, if successful, "
"create the associative array @var{arrayname} linked to the file.  To create "
"a local tied array, the parameter must first be declared, so commands "
"similar to the following would be executed inside a function scope:"
msgstr ""

#. type: example
#: zsh.texi:28948
#, no-wrap
msgid ""
"local -A sampledb\n"
"ztie -d db/gdbm -f sample.gdbm sampledb\n"
msgstr ""

#. type: table
#: zsh.texi:28956
msgid ""
"The @t{-r} option opens the database file for reading only, creating a "
"parameter with the readonly attribute.  Without this option, using "
"`@t{ztie}' on a file for which the user does not have write permission is an "
"error.  If writable, the database is opened synchronously so fields changed "
"in @var{arrayname} are immediately written to @var{filename}."
msgstr ""

#. type: table
#: zsh.texi:28961
msgid ""
"Changes to the file modes @var{filename} after it has been opened do not "
"alter the state of @var{arrayname}, but `@t{typeset -r} @var{arrayname}' "
"works as expected."
msgstr ""

#. type: findex
#: zsh.texi:28962
#, no-wrap
msgid "zuntie"
msgstr ""

#. type: cindex
#: zsh.texi:28963
#, no-wrap
msgid "database tied array, destroying"
msgstr ""

#. type: item
#: zsh.texi:28964
#, no-wrap
msgid "@t{zuntie} [ @t{-u} ] @var{arrayname} ..."
msgstr ""

#. type: table
#: zsh.texi:28968
msgid ""
"Close the GDBM database associated with each @var{arrayname} and then unset "
"the parameter.  The @t{-u} option forces an unset of parameters made "
"readonly with `@t{ztie -r}'."
msgstr ""

#. type: table
#: zsh.texi:28974
msgid ""
"This happens automatically if the parameter is explicitly unset or its local "
"scope (function) ends.  Note that a readonly parameter may not be explicitly "
"unset, so the only way to unset a global parameter created with `@t{ztie "
"-r}' is to use `@t{zuntie -u}'."
msgstr ""

#. type: findex
#: zsh.texi:28975
#, no-wrap
msgid "zgdbmpath"
msgstr ""

#. type: cindex
#: zsh.texi:28976
#, no-wrap
msgid "database file path, reading"
msgstr ""

#. type: item
#: zsh.texi:28977
#, no-wrap
msgid "@t{zgdbmpath} @var{parametername}"
msgstr ""

#. type: table
#: zsh.texi:28980
msgid ""
"Put path to database file assigned to @var{parametername} into @t{REPLY} "
"scalar."
msgstr ""

#. type: t{#1}
#: zsh.texi:28981 zsh.texi:28983
#, no-wrap
msgid "zgdbm_tied"
msgstr ""

#. type: cindex
#: zsh.texi:28982
#, no-wrap
msgid "database tied arrays, enumerating"
msgstr ""

#. type: table
#: zsh.texi:28985
msgid "Array holding names of all tied parameters."
msgstr ""

#. type: Plain text
#: zsh.texi:28994
msgid ""
"The fields of an associative array tied to GDBM are neither cached nor "
"otherwise stored in memory, they are read from or written to the database on "
"each reference.  Thus, for example, the values in a readonly array may be "
"changed by a second writer of the same database file."
msgstr ""

#. type: node
#: zsh.texi:28994 zsh.texi:29018 zsh.texi:29020 zsh.texi:29041
#, no-wrap
msgid "The zsh/example Module"
msgstr ""

#. type: Plain text
#: zsh.texi:29001
msgid "The @t{zsh/deltochar} module makes available two ZLE functions:"
msgstr ""

#. type: t{#1}
#: zsh.texi:29004 zsh.texi:29005
#, no-wrap
msgid "delete-to-char"
msgstr ""

#. type: table
#: zsh.texi:29010
msgid ""
"Read a character from the keyboard, and delete from the cursor position up "
"to and including the next (or, with repeat count @var{n}, the @var{n}th) "
"instance of that character.  Negative repeat counts mean delete backwards."
msgstr ""

#. type: t{#1}
#: zsh.texi:29011 zsh.texi:29012
#, no-wrap
msgid "zap-to-char"
msgstr ""

#. type: table
#: zsh.texi:29015
msgid ""
"This behaves like @t{delete-to-char}, except that the final occurrence of "
"the character itself is not deleted."
msgstr ""

#. type: node
#: zsh.texi:29018 zsh.texi:29041 zsh.texi:29043 zsh.texi:29264
#, no-wrap
msgid "The zsh/files Module"
msgstr ""

#. type: Plain text
#: zsh.texi:29025
msgid "The @t{zsh/example} module makes available one builtin command:"
msgstr ""

#. type: findex
#: zsh.texi:29028
#, no-wrap
msgid "example"
msgstr ""

#. type: cindex
#: zsh.texi:29029
#, no-wrap
msgid "modules, example"
msgstr ""

#. type: cindex
#: zsh.texi:29030
#, no-wrap
msgid "modules, writing"
msgstr ""

#. type: cindex
#: zsh.texi:29031
#, no-wrap
msgid "writing modules"
msgstr ""

#. type: item
#: zsh.texi:29032
#, no-wrap
msgid "@t{example} [ @t{-flags} ] [ @var{args} ... ]"
msgstr ""

#. type: table
#: zsh.texi:29034
msgid "Displays the flags and arguments it is invoked with."
msgstr ""

#. type: Plain text
#: zsh.texi:29041
msgid ""
"The purpose of the module is to serve as an example of how to write a "
"module."
msgstr ""

#. type: node
#: zsh.texi:29041 zsh.texi:29264 zsh.texi:29266 zsh.texi:29309
#, no-wrap
msgid "The zsh/langinfo Module"
msgstr ""

#. type: cindex
#: zsh.texi:29047
#, no-wrap
msgid "files, manipulating"
msgstr ""

#. type: Plain text
#: zsh.texi:29053
msgid ""
"The @t{zsh/files} module makes available some common commands for file "
"manipulation as builtins; these commands are probably not needed for many "
"normal situations but can be useful in emergency recovery situations with "
"constrained resources.  The commands do not implement all features now "
"required by relevant standards committees."
msgstr ""

#. type: Plain text
#: zsh.texi:29059
msgid ""
"For all commands, a variant beginning @t{zf_} is also available and loaded "
"automatically.  Using the features capability of zmodload will let you load "
"only those names you want.  Note that it's possible to load only the "
"builtins with zsh-specific names using the following command:"
msgstr ""

#. type: example
#: zsh.texi:29063
#, no-wrap
msgid "zmodload -m -F zsh/files b:zf_\\*\n"
msgstr ""

#. type: Plain text
#: zsh.texi:29067
msgid "The commands loaded by default are:"
msgstr ""

#. type: findex
#: zsh.texi:29070
#, no-wrap
msgid "chgrp"
msgstr ""

#. type: item
#: zsh.texi:29071
#, no-wrap
msgid "@t{chgrp} [ @t{-hRs} ] @var{group} @var{filename} ..."
msgstr ""

#. type: table
#: zsh.texi:29074
msgid ""
"Changes group of files specified.  This is equivalent to @t{chown} with a "
"@var{user-spec} argument of `@t{:}@var{group}'."
msgstr ""

#. type: findex
#: zsh.texi:29075
#, no-wrap
msgid "chmod"
msgstr ""

#. type: item
#: zsh.texi:29076
#, no-wrap
msgid "@t{chmod} [ @t{-Rs} ] @var{mode} @var{filename} ..."
msgstr ""

#. type: table
#: zsh.texi:29078
msgid "Changes mode of files specified."
msgstr ""

#. type: table
#: zsh.texi:29081
msgid "The specified @var{mode} must be in octal."
msgstr ""

#. type: table
#: zsh.texi:29086
msgid ""
"The @t{-R} option causes @t{chmod} to recursively descend into directories, "
"changing the mode of all files in the directory after changing the mode of "
"the directory itself."
msgstr ""

#. type: table
#: zsh.texi:29097
msgid ""
"The @t{-s} option is a zsh extension to @t{chmod} functionality.  It enables "
"paranoid behaviour, intended to avoid security problems involving a "
"@t{chmod} being tricked into affecting files other than the ones intended.  "
"It will refuse to follow symbolic links, so that (for example)  "
"@value{dsbq}@t{chmod 600 /tmp/foo/passwd}@value{dsq} can't accidentally "
"chmod @t{/etc/passwd} if @t{/tmp/foo} happens to be a link to @t{/etc}.  It "
"will also check where it is after leaving directories, so that a recursive "
"chmod of a deep directory tree can't end up recursively chmoding @t{/usr} as "
"a result of directories being moved up the tree."
msgstr ""

#. type: findex
#: zsh.texi:29098
#, no-wrap
msgid "chown"
msgstr ""

#. type: item
#: zsh.texi:29099
#, no-wrap
msgid "@t{chown} [ @t{-hRs} ] @var{user-spec} @var{filename} ..."
msgstr ""

#. type: table
#: zsh.texi:29101
msgid "Changes ownership and group of files specified."
msgstr ""

#. type: table
#: zsh.texi:29104
msgid "The @var{user-spec} can be in four forms:"
msgstr ""

#. type: var{#1}
#: zsh.texi:29107
#, no-wrap
msgid "user"
msgstr ""

#. type: table
#: zsh.texi:29109 zsh.texi:29111
msgid "change owner to @var{user}; do not change group"
msgstr ""

#. type: item
#: zsh.texi:29109
#, no-wrap
msgid "@var{user}@t{::}"
msgstr ""

#. type: item
#: zsh.texi:29111
#, no-wrap
msgid "@var{user}@t{:}"
msgstr ""

#. type: table
#: zsh.texi:29113
msgid "change owner to @var{user}; change group to @var{user}'s primary group"
msgstr ""

#. type: item
#: zsh.texi:29113
#, no-wrap
msgid "@var{user}@t{:}@var{group}"
msgstr ""

#. type: table
#: zsh.texi:29115
msgid "change owner to @var{user}; change group to @var{group}"
msgstr ""

#. type: item
#: zsh.texi:29115
#, no-wrap
msgid "@t{:}@var{group}"
msgstr ""

#. type: table
#: zsh.texi:29117
msgid "do not change owner; change group to @var{group}"
msgstr ""

#. type: table
#: zsh.texi:29124
msgid ""
"In each case, the `@t{:}' may instead be a `@t{.}'.  The rule is that if "
"there is a `@t{:}' then the separator is `@t{:}', otherwise if there is a "
"`@t{.}' then the separator is `@t{.}', otherwise there is no separator."
msgstr ""

#. type: table
#: zsh.texi:29129
msgid ""
"Each of @var{user} and @var{group} may be either a username (or group name, "
"as appropriate) or a decimal user ID (group ID).  Interpretation as a name "
"takes precedence, if there is an all-numeric username (or group name)."
msgstr ""

#. type: table
#: zsh.texi:29133
msgid ""
"If the target is a symbolic link, the @t{-h} option causes @t{chown} to set "
"the ownership of the link instead of its target."
msgstr ""

#. type: table
#: zsh.texi:29138
msgid ""
"The @t{-R} option causes @t{chown} to recursively descend into directories, "
"changing the ownership of all files in the directory after changing the "
"ownership of the directory itself."
msgstr ""

#. type: table
#: zsh.texi:29149
msgid ""
"The @t{-s} option is a zsh extension to @t{chown} functionality.  It enables "
"paranoid behaviour, intended to avoid security problems involving a "
"@t{chown} being tricked into affecting files other than the ones intended.  "
"It will refuse to follow symbolic links, so that (for example)  "
"@value{dsbq}@t{chown luser /tmp/foo/passwd}@value{dsq} can't accidentally "
"chown @t{/etc/passwd} if @t{/tmp/foo} happens to be a link to @t{/etc}.  It "
"will also check where it is after leaving directories, so that a recursive "
"chown of a deep directory tree can't end up recursively chowning @t{/usr} as "
"a result of directories being moved up the tree."
msgstr ""

#. type: findex
#: zsh.texi:29150
#, no-wrap
msgid "ln"
msgstr ""

#. type: item
#: zsh.texi:29151
#, no-wrap
msgid "@t{ln} [ @t{-dfhins} ] @var{filename} @var{dest}"
msgstr ""

#. type: itemx
#: zsh.texi:29152
#, no-wrap
msgid "@t{ln} [ @t{-dfhins} ] @var{filename} ... @var{dir}"
msgstr ""

#. type: table
#: zsh.texi:29158
msgid ""
"Creates hard (or, with @t{-s}, symbolic) links.  In the first form, the "
"specified @var{dest}ination is created, as a link to the specified "
"@var{filename}.  In the second form, each of the @var{filename}s is taken in "
"turn, and linked to a pathname in the specified @var{dir}ectory that has the "
"same last pathname component."
msgstr ""

#. type: table
#: zsh.texi:29165
msgid ""
"Normally, @t{ln} will not attempt to create hard links to directories.  This "
"check can be overridden using the @t{-d} option.  Typically only the "
"super-user can actually succeed in creating hard links to directories.  This "
"does not apply to symbolic links in any case."
msgstr ""

#. type: table
#: zsh.texi:29171
msgid ""
"By default, existing files cannot be replaced by links.  The @t{-i} option "
"causes the user to be queried about replacing existing files.  The @t{-f} "
"option causes existing files to be silently deleted, without querying.  "
"@t{-f} takes precedence."
msgstr ""

#. type: table
#: zsh.texi:29182
msgid ""
"The @t{-h} and @t{-n} options are identical and both exist for "
"compatibility; either one indicates that if the target is a symlink then it "
"should not be dereferenced.  Typically this is used in combination with "
"@t{-sf} so that if an existing link points to a directory then it will be "
"removed, instead of followed.  If this option is used with multiple "
"filenames and the target is a symbolic link pointing to a directory then the "
"result is an error."
msgstr ""

#. type: findex
#: zsh.texi:29183
#, no-wrap
msgid "mkdir"
msgstr ""

#. type: item
#: zsh.texi:29184
#, no-wrap
msgid "@t{mkdir} [ @t{-p} ] [ @t{-m} @var{mode} ] @var{dir} ..."
msgstr ""

#. type: table
#: zsh.texi:29191
msgid ""
"Creates directories.  With the @t{-p} option, non-existing parent "
"directories are first created if necessary, and there will be no complaint "
"if the directory already exists.  The @t{-m} option can be used to specify "
"(in octal) a set of file permissions for the created directories, otherwise "
"mode 777 modified by the current @t{umask} (see umask(2)) is used."
msgstr ""

#. type: findex
#: zsh.texi:29192
#, no-wrap
msgid "mv"
msgstr ""

#. type: item
#: zsh.texi:29193
#, no-wrap
msgid "@t{mv} [ @t{-fi} ] @var{filename} @var{dest}"
msgstr ""

#. type: itemx
#: zsh.texi:29194
#, no-wrap
msgid "@t{mv} [ @t{-fi} ] @var{filename} ... @var{dir}"
msgstr ""

#. type: table
#: zsh.texi:29200
msgid ""
"Moves files.  In the first form, the specified @var{filename} is moved to "
"the specified @var{dest}ination.  In the second form, each of the "
"@var{filename}s is taken in turn, and moved to a pathname in the specified "
"@var{dir}ectory that has the same last pathname component."
msgstr ""

#. type: table
#: zsh.texi:29208
msgid ""
"By default, the user will be queried before replacing any file that the user "
"cannot write to, but writable files will be silently removed.  The @t{-i} "
"option causes the user to be queried about replacing any existing files.  "
"The @t{-f} option causes any existing files to be silently deleted, without "
"querying.  @t{-f} takes precedence."
msgstr ""

#. type: table
#: zsh.texi:29214
msgid ""
"Note that this @t{mv} will not move files across devices.  Historical "
"versions of @t{mv}, when actual renaming is impossible, fall back on copying "
"and removing files; if this behaviour is desired, use @t{cp} and @t{rm} "
"manually.  This may change in a future version."
msgstr ""

#. type: findex
#: zsh.texi:29215
#, no-wrap
msgid "rm"
msgstr ""

#. type: item
#: zsh.texi:29216
#, no-wrap
msgid "@t{rm} [ @t{-dfiRrs} ] @var{filename} ..."
msgstr ""

#. type: table
#: zsh.texi:29218
msgid "Removes files and directories specified."
msgstr ""

#. type: table
#: zsh.texi:29226
msgid ""
"Normally, @t{rm} will not remove directories (except with the @t{-R} or "
"@t{-r} options).  The @t{-d} option causes @t{rm} to try removing "
"directories with @t{unlink} (see unlink(2)), the same method used for "
"files.  Typically only the super-user can actually succeed in unlinking "
"directories in this way.  @t{-d} takes precedence over @t{-R} and @t{-r}."
msgstr ""

#. type: table
#: zsh.texi:29235
msgid ""
"By default, the user will be queried before removing any file that the user "
"cannot write to, but writable files will be silently removed.  The @t{-i} "
"option causes the user to be queried about removing any files.  The @t{-f} "
"option causes files to be silently deleted, without querying, and suppresses "
"all error indications.  @t{-f} takes precedence."
msgstr ""

#. type: table
#: zsh.texi:29240
msgid ""
"The @t{-R} and @t{-r} options cause @t{rm} to recursively descend into "
"directories, deleting all files in the directory before removing the "
"directory with the @t{rmdir} system call (see rmdir(2))."
msgstr ""

#. type: table
#: zsh.texi:29251
msgid ""
"The @t{-s} option is a zsh extension to @t{rm} functionality.  It enables "
"paranoid behaviour, intended to avoid common security problems involving a "
"root-run @t{rm} being tricked into removing files other than the ones "
"intended.  It will refuse to follow symbolic links, so that (for example)  "
"@value{dsbq}@t{rm /tmp/foo/passwd}@value{dsq} can't accidentally remove "
"@t{/etc/passwd} if @t{/tmp/foo} happens to be a link to @t{/etc}.  It will "
"also check where it is after leaving directories, so that a recursive "
"removal of a deep directory tree can't end up recursively removing @t{/usr} "
"as a result of directories being moved up the tree."
msgstr ""

#. type: findex
#: zsh.texi:29252
#, no-wrap
msgid "rmdir"
msgstr ""

#. type: item
#: zsh.texi:29253
#, no-wrap
msgid "@t{rmdir} @var{dir} ..."
msgstr ""

#. type: table
#: zsh.texi:29255
msgid "Removes empty directories specified."
msgstr ""

#. type: t{#1}
#: zsh.texi:29256 zsh.texi:29257 zsh.texi:30605
#, no-wrap
msgid "sync"
msgstr ""

#. type: table
#: zsh.texi:29261
msgid ""
"Calls the system call of the same name (see sync(2)), which flushes dirty "
"buffers to disk.  It might return before the I/O has actually been "
"completed."
msgstr ""

#. type: node
#: zsh.texi:29264 zsh.texi:29309 zsh.texi:29311 zsh.texi:29381
#, no-wrap
msgid "The zsh/mapfile Module"
msgstr ""

#. type: Plain text
#: zsh.texi:29271
msgid "The @t{zsh/langinfo} module makes available one parameter:"
msgstr ""

#. type: t{#1}
#: zsh.texi:29274 zsh.texi:29275
#, no-wrap
msgid "langinfo"
msgstr ""

#. type: table
#: zsh.texi:29278
msgid "An associative array that maps langinfo elements to their values."
msgstr ""

#. type: table
#: zsh.texi:29281
msgid "Your implementation may support a number of the following keys:"
msgstr ""

#. type: table
#: zsh.texi:29304
msgid ""
"@t{CODESET}, @t{D_T_FMT}, @t{D_FMT}, @t{T_FMT}, @t{RADIXCHAR}, @t{THOUSEP}, "
"@t{YESEXPR}, @t{NOEXPR}, @t{CRNCYSTR}, @t{ABDAY_@{1..7@}}, @t{DAY_@{1..7@}}, "
"@t{ABMON_@{1..12@}}, @t{MON_@{1..12@}}, @t{T_FMT_AMPM}, @t{AM_STR}, "
"@t{PM_STR}, @t{ERA}, @t{ERA_D_FMT}, @t{ERA_D_T_FMT}, @t{ERA_T_FMT}, "
"@t{ALT_DIGITS}"
msgstr ""

#. type: node
#: zsh.texi:29309 zsh.texi:29381 zsh.texi:29383 zsh.texi:29499
#, no-wrap
msgid "The zsh/mathfunc Module"
msgstr ""

#. type: cindex
#: zsh.texi:29315
#, no-wrap
msgid "parameter, file access via"
msgstr ""

#. type: Plain text
#: zsh.texi:29318
msgid ""
"The @t{zsh/mapfile} module provides one special associative array parameter "
"of the same name."
msgstr ""

#. type: t{#1}
#: zsh.texi:29321 zsh.texi:29322
#, no-wrap
msgid "mapfile"
msgstr ""

#. type: table
#: zsh.texi:29330
msgid ""
"This associative array takes as keys the names of files; the resulting value "
"is the content of the file.  The value is treated identically to any other "
"text coming from a parameter.  The value may also be assigned to, in which "
"case the file in question is written (whether or not it originally existed); "
"or an element may be unset, which will delete the file in question.  For "
"example, `@t{vared 'mapfile[myfile]'}' works as expected, editing the file "
"`@t{myfile}'."
msgstr ""

#. type: table
#: zsh.texi:29338
msgid ""
"When the array is accessed as a whole, the keys are the names of files in "
"the current directory, and the values are empty (to save a huge overhead in "
"memory).  Thus @t{$@{(k)mapfile@}} has the same effect as the glob operator "
"@t{*(D)}, since files beginning with a dot are not special.  Care must be "
"taken with expressions such as @t{rm $@{(k)mapfile@}}, which will delete "
"every file in the current directory without the usual `@t{rm *}' test."
msgstr ""

#. type: table
#: zsh.texi:29342
msgid ""
"The parameter @t{mapfile} may be made read-only; in that case, files "
"referenced may not be written or deleted."
msgstr ""

#. type: table
#: zsh.texi:29352
msgid ""
"A file may conveniently be read into an array as one line per element with "
"the form `@var{array}@t{=(\"$@{(f@@)mapfile[}@var{filename}@t{]@}\")}'.  The "
"double quotes and the `@t{@@}' are necessary to prevent empty lines from "
"being removed.  Note that if the file ends with a newline, the shell will "
"split on the final newline, generating an additional empty field; this can "
"be suppressed by using "
"`@var{array}@t{=(\"$@{(f@@)$@{mapfile[}@var{filename}@t{]%$'\\n'@}@}\")}'."
msgstr ""

#. type: subsection
#: zsh.texi:29357
#, no-wrap
msgid "Limitations"
msgstr ""

#. type: Plain text
#: zsh.texi:29370
msgid ""
"Although reading and writing of the file in question is efficiently handled, "
"zsh's internal memory management may be arbitrarily baroque; however, "
"@t{mapfile} is usually very much more efficient than anything involving a "
"loop.  Note in particular that the whole contents of the file will always "
"reside physically in memory when accessed (possibly multiple times, due to "
"standard parameter substitution operations).  In particular, this means "
"handling of sufficiently long files (greater than the machine's swap space, "
"or than the range of the pointer type) will be incorrect."
msgstr ""

#. type: Plain text
#: zsh.texi:29375
msgid ""
"No errors are printed or flagged for non-existent, unreadable, or unwritable "
"files, as the parameter mechanism is too low in the shell execution "
"hierarchy to make this convenient."
msgstr ""

#. type: Plain text
#: zsh.texi:29381
msgid ""
"It is unfortunate that the mechanism for loading modules does not yet allow "
"the user to specify the name of the shell parameter to be given the special "
"behaviour."
msgstr ""

#. type: node
#: zsh.texi:29381 zsh.texi:29499 zsh.texi:29501 zsh.texi:29545
#, no-wrap
msgid "The zsh/nearcolor Module"
msgstr ""

#. type: cindex
#: zsh.texi:29387
#, no-wrap
msgid "functions, mathematical"
msgstr ""

#. type: cindex
#: zsh.texi:29388
#, no-wrap
msgid "mathematical functions"
msgstr ""

#. type: Plain text
#: zsh.texi:29393
msgid ""
"The @t{zsh/mathfunc} module provides standard mathematical functions for use "
"when evaluating mathematical formulae.  The syntax agrees with normal C and "
"FORTRAN conventions, for example,"
msgstr ""

#. type: example
#: zsh.texi:29397
#, no-wrap
msgid "(( f = sin(0.3) ))\n"
msgstr ""

#. type: Plain text
#: zsh.texi:29401
msgid "assigns the sine of 0.3 to the parameter f."
msgstr ""

#. type: Plain text
#: zsh.texi:29410
msgid ""
"Most functions take floating point arguments and return a floating point "
"value.  However, any necessary conversions from or to integer type will be "
"performed automatically by the shell.  Apart from @t{atan} with a second "
"argument and the @t{abs}, @t{int} and @t{float} functions, all functions "
"behave as noted in the manual page for the corresponding C function, except "
"that any arguments out of range for the function in question will be "
"detected by the shell and an error reported."
msgstr ""

#. type: Plain text
#: zsh.texi:29421
msgid ""
"The following functions take a single floating point argument: @t{acos}, "
"@t{acosh}, @t{asin}, @t{asinh}, @t{atan}, @t{atanh}, @t{cbrt}, @t{ceil}, "
"@t{cos}, @t{cosh}, @t{erf}, @t{erfc}, @t{exp}, @t{expm1}, @t{fabs}, "
"@t{floor}, @t{gamma}, @t{j0}, @t{j1}, @t{lgamma}, @t{log}, @t{log10}, "
"@t{log1p}, @t{log2}, @t{logb}, @t{sin}, @t{sinh}, @t{sqrt}, @t{tan}, "
"@t{tanh}, @t{y0}, @t{y1}.  The @t{atan} function can optionally take a "
"second argument, in which case it behaves like the C function @t{atan2}.  "
"The @t{ilogb} function takes a single floating point argument, but returns "
"an integer."
msgstr ""

#. type: Plain text
#: zsh.texi:29428
msgid ""
"The function @t{signgam} takes no arguments, and returns an integer, which "
"is the C variable of the same name, as described in gamma(3).  Note that it "
"is therefore only useful immediately after a call to @t{gamma} or "
"@t{lgamma}.  Note also that `@t{signgam()}' and `@t{signgam}' are distinct "
"expressions."
msgstr ""

#. type: Plain text
#: zsh.texi:29433
msgid ""
"The functions @t{min}, @t{max}, and @t{sum} are defined not in this module "
"but in the @t{zmathfunc} autoloadable function, described in "
"@ref{Mathematical Functions}."
msgstr ""

#. type: Plain text
#: zsh.texi:29437
msgid ""
"The following functions take two floating point arguments: @t{copysign}, "
"@t{fmod}, @t{hypot}, @t{nextafter}."
msgstr ""

#. type: Plain text
#: zsh.texi:29441
msgid ""
"The following take an integer first argument and a floating point second "
"argument: @t{jn}, @t{yn}."
msgstr ""

#. type: Plain text
#: zsh.texi:29445
msgid ""
"The following take a floating point first argument and an integer second "
"argument: @t{ldexp}, @t{scalb}."
msgstr ""

#. type: Plain text
#: zsh.texi:29451
msgid ""
"The function @t{abs} does not convert the type of its single argument; it "
"returns the absolute value of either a floating point number or an integer.  "
"The functions @t{float} and @t{int} convert their arguments into a floating "
"point or integer value (by truncation) respectively."
msgstr ""

#. type: Plain text
#: zsh.texi:29455
msgid ""
"Note that the C @t{pow} function is available in ordinary math evaluation as "
"the `@t{**}' operator and is not provided here."
msgstr ""

#. type: Plain text
#: zsh.texi:29460
msgid ""
"The function @t{rand48} is available if your system's mathematical library "
"has the function @t{erand48(3)}.  It returns a pseudo-random floating point "
"number between 0 and 1.  It takes a single string optional argument."
msgstr ""

#. type: Plain text
#: zsh.texi:29466
msgid ""
"If the argument is not present, the random number seed is initialised by "
"three calls to the @t{rand(3)} function --- this produces the same random "
"numbers as the next three values of @t{$RANDOM}."
msgstr ""

#. type: Plain text
#: zsh.texi:29478
msgid ""
"If the argument is present, it gives the name of a scalar parameter where "
"the current random number seed will be stored.  On the first call, the value "
"must contain at least twelve hexadecimal digits (the remainder of the string "
"is ignored), or the seed will be initialised in the same manner as for a "
"call to @t{rand48} with no argument.  Subsequent calls to "
"@t{rand48}(@var{param}) will then maintain the seed in the parameter "
"@var{param} as a string of twelve hexadecimal digits, with no base "
"signifier.  The random number sequences for different parameters are "
"completely independent, and are also independent from that used by calls to "
"@t{rand48} with no argument."
msgstr ""

#. type: Plain text
#: zsh.texi:29481
msgid "For example, consider"
msgstr ""

#. type: example
#: zsh.texi:29487
#, no-wrap
msgid ""
"print $(( rand48(seed) ))\n"
"print $(( rand48() ))\n"
"print $(( rand48(seed) ))\n"
msgstr ""

#. type: Plain text
#: zsh.texi:29499
msgid ""
"Assuming @t{$seed} does not exist, it will be initialised by the first "
"call.  In the second call, the default seed is initialised; note, however, "
"that because of the properties of @t{rand()} there is a correlation between "
"the seeds used for the two initialisations, so for more secure uses, you "
"should generate your own 12-byte seed.  The third call returns to the same "
"sequence of random numbers used in the first call, unaffected by the "
"intervening @t{rand48()}."
msgstr ""

#. type: node
#: zsh.texi:29499 zsh.texi:29545 zsh.texi:29547 zsh.texi:29601
#, no-wrap
msgid "The zsh/newuser Module"
msgstr ""

#. type: Plain text
#: zsh.texi:29512
msgid ""
"The @t{zsh/nearcolor} module replaces colours specified as hex triplets with "
"the nearest colour in the 88 or 256 colour palettes that are widely used by "
"terminal emulators.  By default, 24-bit true colour escape codes are "
"generated when colours are specified using hex triplets.  These are not "
"supported by all terminals.  The purpose of this module is to make it easier "
"to define colour preferences in a form that can work across a range of "
"terminal emulators."
msgstr ""

#. type: Plain text
#: zsh.texi:29521
msgid ""
"Aside from the default colour, the ANSI standard for terminal escape codes "
"provides for eight colours. The bright attribute brings this to "
"sixteen. These basic colours are commonly used in terminal applications due "
"to being widely supported. Expanded 88 and 256 colour palettes are also "
"common and, while the first sixteen colours vary somewhat between terminals "
"and configurations, these add a generally consistent and predictable set of "
"colours."
msgstr ""

#. type: Plain text
#: zsh.texi:29528
msgid ""
"In order to use the @t{zsh/nearcolor} module, it only needs to be "
"loaded. Thereafter, whenever a colour is specified using a hex triplet, it "
"will be compared against each of the available colours and the closest will "
"be selected. The first sixteen colours are never matched in this process due "
"to being unpredictable."
msgstr ""

#. type: Plain text
#: zsh.texi:29534
msgid ""
"It isn't possible to reliably detect support for true colour in the terminal "
"emulator. It is therefore recommended to be selective in loading the "
"@t{zsh/nearcolor} module. For example, the following checks the "
"@t{COLORTERM} environment variable:"
msgstr ""

#. type: example
#: zsh.texi:29538
#, no-wrap
msgid "[[ $COLORTERM = *(24bit|truecolor)* ]] || zmodload zsh/nearcolor\n"
msgstr ""

#. type: Plain text
#: zsh.texi:29545
msgid ""
"Note that some terminals accept the true color escape codes but map them "
"internally to a more limited palette in a similar manner to the "
"@t{zsh/nearcolor} module."
msgstr ""

#. type: node
#: zsh.texi:29545 zsh.texi:29601 zsh.texi:29603 zsh.texi:29883
#, no-wrap
msgid "The zsh/parameter Module"
msgstr ""

#. type: Plain text
#: zsh.texi:29558
msgid ""
"The @t{zsh/newuser} module is loaded at boot if it is available, the @t{RCS} "
"option is set, and the @t{PRIVILEGED} option is not set (all three are true "
"by default).  This takes place immediately after commands in the global "
"@t{zshenv} file (typically @t{/etc/zshenv}), if any, have been executed.  If "
"the module is not available it is silently ignored by the shell; the module "
"may safely be removed from @t{$MODULE_PATH} by the administrator if it is "
"not required."
msgstr ""

#. type: Plain text
#: zsh.texi:29566
msgid ""
"On loading, the module tests if any of the start-up files @t{.zshenv}, "
"@t{.zprofile}, @t{.zshrc} or @t{.zlogin} exist in the directory given by the "
"environment variable @t{ZDOTDIR}, or the user's home directory if that is "
"not set.  The test is not performed and the module halts processing if the "
"shell was in an emulation mode (i.e. had been invoked as some other shell "
"than zsh)."
msgstr ""

#. type: Plain text
#: zsh.texi:29578
msgid ""
"If none of the start-up files were found, the module then looks for the file "
"@t{newuser} first in a sitewide directory, usually the parent directory of "
"the @t{site-functions} directory, and if that is not found the module "
"searches in a version-specific directory, usually the parent of the "
"@t{functions} directory containing version-specific functions.  (These "
"directories can be configured when zsh is built using the "
"@t{--enable-site-scriptdir=}@var{dir} and @t{--enable-scriptdir=}@var{dir} "
"flags to @t{configure}, respectively; the defaults are "
"@var{prefix}@t{/share/zsh} and @var{prefix}@t{/share/zsh/$ZSH_VERSION} where "
"the default @var{prefix} is @t{/usr/local}.)"
msgstr ""

#. type: Plain text
#: zsh.texi:29583
msgid ""
"If the file @t{newuser} is found, it is then sourced in the same manner as a "
"start-up file.  The file is expected to contain code to install start-up "
"files for the user, however any valid shell code will be executed."
msgstr ""

#. type: Plain text
#: zsh.texi:29586
msgid "The @t{zsh/newuser} module is then unconditionally unloaded."
msgstr ""

#. type: Plain text
#: zsh.texi:29592
msgid ""
"Note that it is possible to achieve exactly the same effect as the "
"@t{zsh/newuser} module by adding code to @t{/etc/zshenv}.  The module exists "
"simply to allow the shell to make arrangements for new users without the "
"need for intervention by package maintainers and system administrators."
msgstr ""

#. type: Plain text
#: zsh.texi:29601
msgid ""
"The script supplied with the module invokes the shell function "
"@t{zsh-newuser-install}.  This may be invoked directly by the user even if "
"the @t{zsh/newuser} module is disabled.  Note, however, that if the module "
"is not installed the function will not be installed either.  The function is "
"documented in @ref{User Configuration Functions}."
msgstr ""

#. type: node
#: zsh.texi:29601 zsh.texi:29883 zsh.texi:29885 zsh.texi:29989
#, no-wrap
msgid "The zsh/pcre Module"
msgstr ""

#. type: Plain text
#: zsh.texi:29610
msgid ""
"The @t{zsh/parameter} module gives access to some of the internal hash "
"tables used by the shell by defining some special parameters."
msgstr ""

#. type: table
#: zsh.texi:29622
msgid ""
"The keys for this associative array are the names of the options that can be "
"set and unset using the @t{setopt} and @t{unsetopt} builtins. The value of "
"each key is either the string @t{on} if the option is currently set, or the "
"string @t{off} if the option is unset.  Setting a key to one of these "
"strings is like setting or unsetting the option, respectively. Unsetting a "
"key in this array is like setting it to the value @t{off}."
msgstr ""

#. type: table
#: zsh.texi:29632
msgid ""
"This array gives access to the command hash table. The keys are the names of "
"external commands, the values are the pathnames of the files that would be "
"executed when the command would be invoked. Setting a key in this array "
"defines a new entry in this table in the same way as with the @t{hash} "
"builtin. Unsetting a key as in `@t{unset \"commands[foo]\"}' removes the "
"entry for the given key from the command hash table."
msgstr ""

#. type: table
#: zsh.texi:29639
msgid ""
"This associative array maps names of enabled functions to their "
"definitions. Setting a key in it is like defining a function with the name "
"given by the key and the body given by the value. Unsetting a key removes "
"the definition for the function named by the key."
msgstr ""

#. type: t{#1}
#: zsh.texi:29640 zsh.texi:29641
#, no-wrap
msgid "dis_functions"
msgstr ""

#. type: table
#: zsh.texi:29643
msgid "Like @t{functions} but for disabled functions."
msgstr ""

#. type: t{#1}
#: zsh.texi:29644 zsh.texi:29645
#, no-wrap
msgid "functions_source"
msgstr ""

#. type: table
#: zsh.texi:29648
msgid ""
"This readonly associative array maps names of enabled functions to the name "
"of the file containing the source of the function."
msgstr ""

#. type: table
#: zsh.texi:29654
msgid ""
"For an autoloaded function that has already been loaded, or marked for "
"autoload with an absolute path, or that has had its path resolved with "
"`@t{functions -r}', this is the file found for autoloading, resolved to an "
"absolute path."
msgstr ""

#. type: table
#: zsh.texi:29659
msgid ""
"For a function defined within the body of a script or sourced file, this is "
"the name of that file.  In this case, this is the exact path originally used "
"to that file, which may be a relative path."
msgstr ""

#. type: table
#: zsh.texi:29666
msgid ""
"For any other function, including any defined at an interactive prompt or an "
"autoload function whose path has not yet been resolved, this is the empty "
"string.  However, the hash element is reported as defined just so long as "
"the function is present: the keys to this hash are the same as those to "
"@t{$functions}."
msgstr ""

#. type: t{#1}
#: zsh.texi:29667 zsh.texi:29668
#, no-wrap
msgid "dis_functions_source"
msgstr ""

#. type: table
#: zsh.texi:29670
msgid "Like @t{functions_source} but for disabled functions."
msgstr ""

#. type: table
#: zsh.texi:29678
msgid ""
"This associative array gives information about the builtin commands "
"currently enabled. The keys are the names of the builtin commands and the "
"values are either `@t{undefined}' for builtin commands that will "
"automatically be loaded from a module if invoked or `@t{defined}' for "
"builtin commands that are already loaded."
msgstr ""

#. type: t{#1}
#: zsh.texi:29679 zsh.texi:29680
#, no-wrap
msgid "dis_builtins"
msgstr ""

#. type: table
#: zsh.texi:29682
msgid "Like @t{builtins} but for disabled builtin commands."
msgstr ""

#. type: t{#1}
#: zsh.texi:29683 zsh.texi:29684
#, no-wrap
msgid "reswords"
msgstr ""

#. type: table
#: zsh.texi:29686
msgid "This array contains the enabled reserved words."
msgstr ""

#. type: t{#1}
#: zsh.texi:29687 zsh.texi:29688
#, no-wrap
msgid "dis_reswords"
msgstr ""

#. type: table
#: zsh.texi:29690
msgid "Like @t{reswords} but for disabled reserved words."
msgstr ""

#. type: t{#1}
#: zsh.texi:29691 zsh.texi:29692
#, no-wrap
msgid "patchars"
msgstr ""

#. type: table
#: zsh.texi:29694
msgid "This array contains the enabled pattern characters."
msgstr ""

#. type: t{#1}
#: zsh.texi:29695 zsh.texi:29696
#, no-wrap
msgid "dis_patchars"
msgstr ""

#. type: table
#: zsh.texi:29698
msgid "Like @t{patchars} but for disabled pattern characters."
msgstr ""

#. type: t{#1}
#: zsh.texi:29699 zsh.texi:29700 zsh.texi:35791
#, no-wrap
msgid "aliases"
msgstr ""

#. type: table
#: zsh.texi:29703
msgid ""
"This maps the names of the regular aliases currently enabled to their "
"expansions."
msgstr ""

#. type: t{#1}
#: zsh.texi:29704 zsh.texi:29705
#, no-wrap
msgid "dis_aliases"
msgstr ""

#. type: table
#: zsh.texi:29707
msgid "Like @t{aliases} but for disabled regular aliases."
msgstr ""

#. type: t{#1}
#: zsh.texi:29708 zsh.texi:29709
#, no-wrap
msgid "galiases"
msgstr ""

#. type: table
#: zsh.texi:29711
msgid "Like @t{aliases}, but for global aliases."
msgstr ""

#. type: t{#1}
#: zsh.texi:29712 zsh.texi:29713
#, no-wrap
msgid "dis_galiases"
msgstr ""

#. type: table
#: zsh.texi:29715
msgid "Like @t{galiases} but for disabled global aliases."
msgstr ""

#. type: t{#1}
#: zsh.texi:29716 zsh.texi:29717
#, no-wrap
msgid "saliases"
msgstr ""

#. type: table
#: zsh.texi:29719
msgid "Like @t{raliases}, but for suffix aliases."
msgstr ""

#. type: t{#1}
#: zsh.texi:29720 zsh.texi:29721
#, no-wrap
msgid "dis_saliases"
msgstr ""

#. type: table
#: zsh.texi:29723
msgid "Like @t{saliases} but for disabled suffix aliases."
msgstr ""

#. type: table
#: zsh.texi:29732
msgid ""
"The keys in this associative array are the names of the parameters currently "
"defined. The values are strings describing the type of the parameter, in the "
"same format used by the @t{t} parameter flag, see @ref{Parameter Expansion} "
".  Setting or unsetting keys in this array is not possible."
msgstr ""

#. type: table
#: zsh.texi:29740
msgid ""
"An associative array giving information about modules. The keys are the "
"names of the modules loaded, registered to be autoloaded, or aliased. The "
"value says which state the named module is in and is one of the strings "
"`@t{loaded}', `@t{autoloaded}', or `@t{alias:}@var{name}', where @var{name} "
"is the name the module is aliased to."
msgstr ""

#. type: table
#: zsh.texi:29743
msgid "Setting or unsetting keys in this array is not possible."
msgstr ""

#. type: t{#1}
#: zsh.texi:29744 zsh.texi:29745
#, no-wrap
msgid "dirstack"
msgstr ""

#. type: table
#: zsh.texi:29749
msgid ""
"A normal array holding the elements of the directory stack. Note that the "
"output of the @t{dirs} builtin command includes one more directory, the "
"current working directory."
msgstr ""

#. type: table
#: zsh.texi:29756
msgid ""
"This associative array maps history event numbers to the full history "
"lines.  Although it is presented as an associative array, the array of all "
"values (@t{$@{history[@@]@}}) is guaranteed to be returned in order from "
"most recent to oldest history event, that is, by decreasing history event "
"number."
msgstr ""

#. type: t{#1}
#: zsh.texi:29757 zsh.texi:29758
#, no-wrap
msgid "historywords"
msgstr ""

#. type: table
#: zsh.texi:29761
msgid ""
"A special array containing the words stored in the history.  These also "
"appear in most to least recent order."
msgstr ""

#. type: t{#1}
#: zsh.texi:29762 zsh.texi:29763
#, no-wrap
msgid "jobdirs"
msgstr ""

#. type: table
#: zsh.texi:29766
msgid ""
"This associative array maps job numbers to the directories from which the "
"job was started (which may not be the current directory of the job)."
msgstr ""

#. type: table
#: zsh.texi:29772
msgid ""
"The keys of the associative arrays are usually valid job numbers, and these "
"are the values output with, for example, @t{$@{(k)jobdirs@}}.  Non-numeric "
"job references may be used when looking up a value; for example, "
"@t{$@{jobdirs[%+]@}} refers to the current job."
msgstr ""

#. type: table
#: zsh.texi:29775 zsh.texi:29787 zsh.texi:29807
msgid "See the @t{jobs} builtin for how job information is provided in a subshell."
msgstr ""

#. type: t{#1}
#: zsh.texi:29776 zsh.texi:29777
#, no-wrap
msgid "jobtexts"
msgstr ""

#. type: table
#: zsh.texi:29780
msgid ""
"This associative array maps job numbers to the texts of the command lines "
"that were used to start the jobs."
msgstr ""

#. type: table
#: zsh.texi:29784 zsh.texi:29804
msgid ""
"Handling of the keys of the associative array is as described for "
"@t{jobdirs} above."
msgstr ""

#. type: t{#1}
#: zsh.texi:29788 zsh.texi:29789
#, no-wrap
msgid "jobstates"
msgstr ""

#. type: table
#: zsh.texi:29800
msgid ""
"This associative array gives information about the states of the jobs "
"currently known. The keys are the job numbers and the values are strings of "
"the form "
"`@var{job-state}@t{:}@var{mark}@t{:}@var{pid}@t{=}@var{state}...'. The "
"@var{job-state} gives the state the whole job is currently in, one of "
"`@t{running}', `@t{suspended}', or `@t{done}'. The @var{mark} is `@t{+}' for "
"the current job, `@t{-}' for the previous job and empty otherwise. This is "
"followed by one `@t{:}@var{pid}@t{=}@var{state}' for every process in the "
"job. The @var{pid}s are, of course, the process IDs and the @var{state} "
"describes the state of that process."
msgstr ""

#. type: t{#1}
#: zsh.texi:29808 zsh.texi:29809
#, no-wrap
msgid "nameddirs"
msgstr ""

#. type: table
#: zsh.texi:29812
msgid ""
"This associative array maps the names of named directories to the pathnames "
"they stand for."
msgstr ""

#. type: t{#1}
#: zsh.texi:29813 zsh.texi:29814
#, no-wrap
msgid "userdirs"
msgstr ""

#. type: table
#: zsh.texi:29817
msgid ""
"This associative array maps user names to the pathnames of their home "
"directories."
msgstr ""

#. type: t{#1}
#: zsh.texi:29818 zsh.texi:29819
#, no-wrap
msgid "usergroups"
msgstr ""

#. type: table
#: zsh.texi:29823
msgid ""
"This associative array maps names of system groups of which the current user "
"is a member to the corresponding group identifiers.  The contents are the "
"same as the groups output by the @t{id} command."
msgstr ""

#. type: t{#1}
#: zsh.texi:29824 zsh.texi:29825
#, no-wrap
msgid "funcfiletrace"
msgstr ""

#. type: table
#: zsh.texi:29834
msgid ""
"This array contains the absolute line numbers and corresponding file names "
"for the point where the current function, sourced file, or (if "
"@t{EVAL_LINENO} is set) @t{eval} command was called.  The array is of the "
"same length as @t{funcsourcetrace} and @t{functrace}, but differs from "
"@t{funcsourcetrace} in that the line and file are the point of call, not the "
"point of definition, and differs from @t{functrace} in that all values are "
"absolute line numbers in files, rather than relative to the start of a "
"function, if any."
msgstr ""

#. type: t{#1}
#: zsh.texi:29835 zsh.texi:29836
#, no-wrap
msgid "funcsourcetrace"
msgstr ""

#. type: table
#: zsh.texi:29844
msgid ""
"This array contains the file names and line numbers of the points where the "
"functions, sourced files, and (if @t{EVAL_LINENO} is set)  @t{eval} commands "
"currently being executed were defined.  The line number is the line where "
"the `@t{function} @var{name}' or `@var{name} @t{()}' started.  In the case "
"of an autoloaded function the line number is reported as zero.  The format "
"of each element is @var{filename}@t{:}@var{lineno}."
msgstr ""

#. type: table
#: zsh.texi:29852
msgid ""
"For functions autoloaded from a file in native zsh format, where only the "
"body of the function occurs in the file, or for files that have been "
"executed by the @t{source} or `@t{.}' builtins, the trace information is "
"shown as @var{filename}@t{:}@var{0}, since the entire file is the "
"definition.  The source file name is resolved to an absolute path when the "
"function is loaded or the path to it otherwise resolved."
msgstr ""

#. type: table
#: zsh.texi:29856
msgid ""
"Most users will be interested in the information in the @t{funcfiletrace} "
"array instead."
msgstr ""

#. type: t{#1}
#: zsh.texi:29857 zsh.texi:29858
#, no-wrap
msgid "funcstack"
msgstr ""

#. type: table
#: zsh.texi:29863
msgid ""
"This array contains the names of the functions, sourced files, and (if "
"@t{EVAL_LINENO} is set) @t{eval} commands. currently being executed. The "
"first element is the name of the function using the parameter."
msgstr ""

#. type: table
#: zsh.texi:29872
msgid ""
"The standard shell array @t{zsh_eval_context} can be used to determine the "
"type of shell construct being executed at each depth: note, however, that is "
"in the opposite order, with the most recent item last, and it is more "
"detailed, for example including an entry for @t{toplevel}, the main shell "
"code being executed either interactively or from a script, which is not "
"present in @t{$funcstack}."
msgstr ""

#. type: t{#1}
#: zsh.texi:29873 zsh.texi:29874
#, no-wrap
msgid "functrace"
msgstr ""

#. type: table
#: zsh.texi:29880
msgid ""
"This array contains the names and line numbers of the callers corresponding "
"to the functions currently being executed.  The format of each element is "
"@var{name}@t{:}@var{lineno}.  Callers are also shown for sourced files; the "
"caller is the point where the @t{source} or `@t{.}' command was executed."
msgstr ""

#. type: node
#: zsh.texi:29883 zsh.texi:29989 zsh.texi:29991 zsh.texi:30108
#, no-wrap
msgid "The zsh/param/private Module"
msgstr ""

#. type: cindex
#: zsh.texi:29889
#, no-wrap
msgid "regular expressions, perl-compatible"
msgstr ""

#. type: Plain text
#: zsh.texi:29891
msgid "The @t{zsh/pcre} module makes some commands available as builtins:"
msgstr ""

#. type: findex
#: zsh.texi:29894
#, no-wrap
msgid "pcre_compile"
msgstr ""

#. type: item
#: zsh.texi:29895
#, no-wrap
msgid "@t{pcre_compile} [ @t{-aimxs} ] @var{PCRE}"
msgstr ""

#. type: table
#: zsh.texi:29897
msgid "Compiles a perl-compatible regular expression."
msgstr ""

#. type: table
#: zsh.texi:29907
msgid ""
"Option @t{-a} will force the pattern to be anchored.  Option @t{-i} will "
"compile a case-insensitive pattern.  Option @t{-m} will compile a multi-line "
"pattern; that is, @t{^} and @t{$} will match newlines within the pattern.  "
"Option @t{-x} will compile an extended pattern, wherein whitespace and @t{#} "
"comments are ignored.  Option @t{-s} makes the dot metacharacter match all "
"characters, including those that indicate newline."
msgstr ""

#. type: t{#1}
#: zsh.texi:29908 zsh.texi:29909
#, no-wrap
msgid "pcre_study"
msgstr ""

#. type: table
#: zsh.texi:29912
msgid "Studies the previously-compiled PCRE which may result in faster matching."
msgstr ""

#. type: findex
#: zsh.texi:29913
#, no-wrap
msgid "pcre_match"
msgstr ""

#. type: item
#: zsh.texi:29914
#, no-wrap
msgid ""
"@t{pcre_match} [ @t{-v} @var{var} ] [ @t{-a} @var{arr} ] [ @t{-n} "
"@var{offset} ] [ @t{-b} ] @var{string}"
msgstr ""

#. type: table
#: zsh.texi:29917
msgid "Returns successfully if @t{string} matches the previously-compiled PCRE."
msgstr ""

#. type: table
#: zsh.texi:29941
msgid ""
"Upon successful match, if the expression captures substrings within "
"parentheses, @t{pcre_match} will set the array @t{match} to those "
"substrings, unless the @t{-a} option is given, in which case it will set the "
"array @var{arr}.  Similarly, the variable @t{MATCH} will be set to the "
"entire matched portion of the string, unless the @t{-v} option is given, in "
"which case the variable @var{var} will be set.  No variables are altered if "
"there is no successful match.  A @t{-n} option starts searching for a match "
"from the byte @var{offset} position in @var{string}.  If the @t{-b} option "
"is given, the variable @t{ZPCRE_OP} will be set to an offset pair string, "
"representing the byte offset positions of the entire matched portion within "
"the @var{string}.  For example, a @t{ZPCRE_OP} set to \"32 45\" indicates "
"that the matched portion began on byte offset 32 and ended on byte offset "
"44.  Here, byte offset position 45 is the position directly after the "
"matched portion.  Keep in mind that the byte position isn't necessarily the "
"same as the character position when UTF-8 characters are involved.  "
"Consequently, the byte offset positions are only to be relied on in the "
"context of using them for subsequent searches on @var{string}, using an "
"offset position as an argument to the @t{-n} option.  This is mostly used to "
"implement the \"find all non-overlapping matches\" functionality."
msgstr ""

#. type: table
#: zsh.texi:29944
msgid "A simple example of \"find all non-overlapping matches\":"
msgstr ""

#. type: example
#: zsh.texi:29957
#, no-wrap
msgid ""
"string=\"The following zip codes: 78884 90210 99513\"\n"
"pcre_compile -m \"\\d@{5@}\"\n"
"accum=()\n"
"pcre_match -b -- $string\n"
"while [[ $? -eq 0 ]] do\n"
"    b=($=ZPCRE_OP)\n"
"    accum+=$MATCH\n"
"    pcre_match -b -n $b[2] -- $string\n"
"done\n"
"print -l $accum\n"
msgstr ""

#. type: Plain text
#: zsh.texi:29963
msgid "The @t{zsh/pcre} module makes available the following test condition:"
msgstr ""

#. type: findex
#: zsh.texi:29966
#, no-wrap
msgid "pcre-match"
msgstr ""

#. type: item
#: zsh.texi:29967
#, no-wrap
msgid "@var{expr} @t{-pcre-match} @var{pcre}"
msgstr ""

#. type: table
#: zsh.texi:29969
msgid "Matches a string against a perl-compatible regular expression."
msgstr ""

#. type: example
#: zsh.texi:29977
#, no-wrap
msgid ""
"[[ \"$text\" -pcre-match ^d+$ ]] &&\n"
"print text variable contains only \"d's\".\n"
msgstr ""

#. type: table
#: zsh.texi:29986
msgid ""
"If the @t{REMATCH_PCRE} option is set, the @t{=~} operator is equivalent to "
"@t{-pcre-match}, and the @t{NO_CASE_MATCH} option may be used.  Note that "
"@t{NO_CASE_MATCH} never applies to the @t{pcre_match} builtin, instead use "
"the @t{-i} switch of @t{pcre_compile}."
msgstr ""

#. type: node
#: zsh.texi:29989 zsh.texi:30108 zsh.texi:30110 zsh.texi:30164
#, no-wrap
msgid "The zsh/regex Module"
msgstr ""

#. type: Plain text
#: zsh.texi:29998
msgid ""
"The @t{zsh/param/private} module is used to create parameters whose scope is "
"limited to the current function body, and @emph{not} to other functions "
"called by the current function."
msgstr ""

#. type: Plain text
#: zsh.texi:30001
msgid "This module provides a single autoloaded builtin:"
msgstr ""

#. type: findex
#: zsh.texi:30003
#, no-wrap
msgid "private"
msgstr ""

#. type: cindex
#: zsh.texi:30004
#, no-wrap
msgid "private parameter, creating"
msgstr ""

#. type: item
#: zsh.texi:30005
#, no-wrap
msgid ""
"@t{private} [ @{@t{+}|@t{-}@}@t{AHUahlmrtux} ] [ @{@t{+}|@t{-}@}@t{EFLRZi} [ "
"@var{n} ] ] [ @var{name}[@t{=}@var{value}] ... ]"
msgstr ""

#. type: table
#: zsh.texi:30009
msgid ""
"The @t{private} builtin accepts all the same options and arguments as "
"@t{local} (@ref{Shell Builtin Commands}) except for the `@t{-}@t{T}' "
"option.  Tied parameters may not be made private."
msgstr ""

#. type: table
#: zsh.texi:30014
msgid ""
"The `@t{-}@t{p}' option is presently a no-op because the state of private "
"parameters cannot reliably be reloaded.  This also applies to printing "
"private parameters with `@t{typeset -p}'."
msgstr ""

#. type: table
#: zsh.texi:30022
msgid ""
"If used at the top level (outside a function scope), @t{private} creates a "
"normal parameter in the same manner as @t{declare} or @t{typeset}.  A "
"warning about this is printed if @t{WARN_CREATE_GLOBAL} is set "
"(@ref{Options}).  Used inside a function scope, @t{private} creates a local "
"parameter similar to one declared with @t{local}, except having special "
"properties noted below."
msgstr ""

#. type: table
#: zsh.texi:30029
msgid ""
"Special parameters which expose or manipulate internal shell state, such as "
"@t{ARGC}, @t{argv}, @t{COLUMNS}, @t{LINES}, @t{UID}, @t{EUID}, @t{IFS}, "
"@t{PROMPT}, @t{RANDOM}, @t{SECONDS}, etc., cannot be made private unless the "
"`@t{-}@t{h}' option is used to hide the special meaning of the parameter.  "
"This may change in the future."
msgstr ""

#. type: Plain text
#: zsh.texi:30041
msgid ""
"As with other @t{typeset} equivalents, @t{private} is both a builtin and a "
"reserved word, so arrays may be assigned with parenthesized word list "
"@var{name}@t{=(}@var{value}...@t{)} syntax.  However, the reserved word "
"`@t{private}' is not available until @t{zsh/param/private} is loaded, so "
"care must be taken with order of execution and parsing for function "
"definitions which use @t{private}.  To compensate for this, the module also "
"adds the option `@t{-P}' to the `@t{local}' builtin to declare private "
"parameters."
msgstr ""

#. type: Plain text
#: zsh.texi:30045
msgid ""
"For example, this construction fails if @t{zsh/param/private} has not yet "
"been loaded when `@t{bad_declaration}' is defined:"
msgstr ""

#. type: example
#: zsh.texi:30050
#, no-wrap
msgid ""
"bad_declaration() @{\n"
"  zmodload zsh/param/private\n"
"  private array=( one two three )\n"
"@}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:30055
msgid ""
"This construction works because @t{local} is already a keyword, and the "
"module is loaded before the statement is executed:"
msgstr ""

#. type: example
#: zsh.texi:30060
#, no-wrap
msgid ""
"good_declaration() @{\n"
"  zmodload zsh/param/private\n"
"  local -P array=( one two three )\n"
"@}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:30064
msgid "The following is usable in scripts but may have trouble with @t{autoload}:"
msgstr ""

#. type: example
#: zsh.texi:30069
#, no-wrap
msgid ""
"zmodload zsh/param/private\n"
"iffy_declaration() @{\n"
"  private array=( one two three )\n"
"@}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:30074
msgid ""
"The @t{private} builtin may always be used with scalar assignments and for "
"declarations without assignments."
msgstr ""

#. type: Plain text
#: zsh.texi:30077
msgid "Parameters declared with @t{private} have the following properties:"
msgstr ""

#. type: itemize
#: zsh.texi:30083
msgid ""
"Within the function body where it is declared, the parameter behaves as a "
"local, except as noted above for tied or special parameters."
msgstr ""

#. type: itemize
#: zsh.texi:30087
msgid ""
"The type of a parameter declared private cannot be changed in the scope "
"where it was declared, even if the parameter is unset.  Thus an array cannot "
"be assigned to a private scalar, etc."
msgstr ""

#. type: itemize
#: zsh.texi:30094
msgid ""
"Within any other function called by the declaring function, the private "
"parameter does @emph{NOT} hide other parameters of the same name, so for "
"example a global parameter of the same name is visible and may be assigned "
"or unset.  This includes calls to anonymous functions, although that may "
"also change in the future.  However, the private name may not be created "
"outside the local scope when it was not previously declared."
msgstr ""

#. type: itemize
#: zsh.texi:30098
msgid ""
"An exported private remains in the environment of inner scopes but appears "
"unset for the current shell in those scopes.  Generally, exporting private "
"parameters should be avoided."
msgstr ""

#. type: Plain text
#: zsh.texi:30108
msgid ""
"Note that this differs from the static scope defined by compiled languages "
"derived from C, in that the a new call to the same function creates a new "
"scope, i.e., the parameter is still associated with the call stack rather "
"than with the function definition.  It differs from ksh `@t{typeset -S}' "
"because the syntax used to define the function has no bearing on whether the "
"parameter scope is respected."
msgstr ""

#. type: node
#: zsh.texi:30108 zsh.texi:30164 zsh.texi:30166 zsh.texi:30245
#, no-wrap
msgid "The zsh/sched Module"
msgstr ""

#. type: cindex
#: zsh.texi:30114
#, no-wrap
msgid "regular expressions"
msgstr ""

#. type: cindex
#: zsh.texi:30115
#, no-wrap
msgid "regex"
msgstr ""

#. type: Plain text
#: zsh.texi:30117
msgid "The @t{zsh/regex} module makes available the following test condition:"
msgstr ""

#. type: findex
#: zsh.texi:30120
#, no-wrap
msgid "regex-match"
msgstr ""

#. type: item
#: zsh.texi:30121
#, no-wrap
msgid "@var{expr} @t{-regex-match} @var{regex}"
msgstr ""

#. type: table
#: zsh.texi:30128
msgid ""
"Matches a string against a POSIX extended regular expression.  On successful "
"match, matched portion of the string will normally be placed in the "
"@t{MATCH} variable.  If there are any capturing parentheses within the "
"regex, then the @t{match} array variable will contain those.  If the match "
"is not successful, then the variables will not be altered."
msgstr ""

#. type: example
#: zsh.texi:30136
#, no-wrap
msgid ""
"[[ alphabetical -regex-match ^a([^a]+)a([^a]+)a ]] &&\n"
"print -l $MATCH X $match\n"
msgstr ""

#. type: table
#: zsh.texi:30142
msgid ""
"If the option @t{REMATCH_PCRE} is not set, then the @t{=~} operator will "
"automatically load this module as needed and will invoke the "
"@t{-regex-match} operator."
msgstr ""

#. type: table
#: zsh.texi:30146
msgid ""
"If @t{BASH_REMATCH} is set, then the array @t{BASH_REMATCH} will be set "
"instead of @t{MATCH} and @t{match}."
msgstr ""

#. type: table
#: zsh.texi:30151
msgid ""
"Note that the @t{zsh/regex} module logic relies on the host system. The same "
"@var{expr} and @var{regex} pair could produce different results on different "
"platforms if a @var{regex} with non-standard syntax is given."
msgstr ""

#. type: table
#: zsh.texi:30157
msgid ""
"For example, no syntax for matching a word boundary is defined in the POSIX "
"extended regular expression standard. GNU @t{libc} and BSD @t{libc} both "
"provide such syntaxes as extensions (@t{\\b} and @t{[[:<:]]}/@t{[[:>:]]} "
"respectively), but neither of these syntaxes is supported by both of these "
"implementations."
msgstr ""

#. type: table
#: zsh.texi:30161
msgid ""
"Refer to the regcomp(3) and re_format(7) manual pages on your system for "
"locally-supported syntax."
msgstr ""

#. type: node
#: zsh.texi:30164 zsh.texi:30245 zsh.texi:30247 zsh.texi:30342
#, no-wrap
msgid "The zsh/net/socket Module"
msgstr ""

#. type: Plain text
#: zsh.texi:30172
msgid ""
"The @t{zsh/sched} module makes available one builtin command and one "
"parameter."
msgstr ""

#. type: cindex
#: zsh.texi:30176
#, no-wrap
msgid "timed execution"
msgstr ""

#. type: cindex
#: zsh.texi:30177
#, no-wrap
msgid "execution, timed"
msgstr ""

#. type: item
#: zsh.texi:30178
#, no-wrap
msgid ""
"@t{sched} [@t{-o}] [@t{+}]@var{hh}@t{:}@var{mm}[@t{:}@var{ss}] @var{command} "
"..."
msgstr ""

#. type: itemx
#: zsh.texi:30179
#, no-wrap
msgid "@t{sched} [@t{-o}] [@t{+}]@var{seconds} @var{command} ..."
msgstr ""

#. type: itemx
#: zsh.texi:30180
#, no-wrap
msgid "@t{sched} [ @t{-}@var{item} ]"
msgstr ""

#. type: table
#: zsh.texi:30189
msgid ""
"Make an entry in the scheduled list of commands to execute.  The time may be "
"specified in either absolute or relative time, and either as hours, minutes "
"and (optionally) seconds separated by a colon, or seconds alone.  An "
"absolute number of seconds indicates the time since the epoch (1970/01/01 "
"00:00); this is useful in combination with the features in the "
"@t{zsh/datetime} module, see @ref{The zsh/datetime Module}."
msgstr ""

#. type: table
#: zsh.texi:30194
msgid ""
"With no arguments, prints the list of scheduled commands.  If the scheduled "
"command has the @t{-o} flag set, this is shown at the start of the command."
msgstr ""

#. type: table
#: zsh.texi:30200
msgid ""
"With the argument `@t{-}@var{item}', removes the given item from the list.  "
"The numbering of the list is continuous and entries are in time order, so "
"the numbering can change when entries are added or deleted."
msgstr ""

#. type: table
#: zsh.texi:30210
msgid ""
"Commands are executed either immediately before a prompt, or while the "
"shell's line editor is waiting for input.  In the latter case it is useful "
"to be able to produce output that does not interfere with the line being "
"edited.  Providing the option @t{-o} causes the shell to clear the command "
"line before the event and redraw it afterwards.  This should be used with "
"any scheduled event that produces visible output to the terminal; it is not "
"needed, for example, with output that updates a terminal emulator's title "
"bar."
msgstr ""

#. type: table
#: zsh.texi:30216
msgid ""
"To effect changes to the editor buffer when an event executes, use the "
"`@t{zle}' command with no arguments to test whether the editor is active, "
"and if it is, then use `@t{zle }@var{widget}' to access the editor via the "
"named @var{widget}."
msgstr ""

#. type: table
#: zsh.texi:30221
msgid ""
"The @t{sched} builtin is not made available by default when the shell starts "
"in a mode emulating another shell.  It can be made available with the "
"command `@t{zmodload -F zsh/sched b:sched}'."
msgstr ""

#. type: table
#: zsh.texi:30237
msgid ""
"A readonly array corresponding to the events scheduled by the @t{sched} "
"builtin.  The indices of the array correspond to the numbers shown when "
"@t{sched} is run with no arguments (provided that the @t{KSH_ARRAYS} option "
"is not set).  The value of the array consists of the scheduled time in "
"seconds since the epoch (see @ref{The zsh/datetime Module} for facilities "
"for using this number), followed by a colon, followed by any options (which "
"may be empty but will be preceded by a `@t{-}' otherwise), followed by a "
"colon, followed by the command to be executed."
msgstr ""

#. type: table
#: zsh.texi:30242
msgid ""
"The @t{sched} builtin should be used for manipulating the events.  Note that "
"this will have an immediate effect on the contents of the array, so that "
"indices may become invalid."
msgstr ""

#. type: node
#: zsh.texi:30245 zsh.texi:30342 zsh.texi:30344 zsh.texi:30526
#, no-wrap
msgid "The zsh/stat Module"
msgstr ""

#. type: Plain text
#: zsh.texi:30252
msgid "The @t{zsh/net/socket} module makes available one builtin command:"
msgstr ""

#. type: cindex
#: zsh.texi:30257
#, no-wrap
msgid "sockets, Unix domain"
msgstr ""

#. type: item
#: zsh.texi:30258
#, no-wrap
msgid "@t{zsocket} [ @t{-altv} ] [ @t{-d} @var{fd} ] [ @var{args} ]"
msgstr ""

#. type: table
#: zsh.texi:30261
msgid ""
"@t{zsocket} is implemented as a builtin to allow full use of shell command "
"line editing, file I/O, and job control mechanisms."
msgstr ""

#. type: subsection
#: zsh.texi:30266 zsh.texi:30924
#, no-wrap
msgid "Outbound Connections"
msgstr ""

#. type: cindex
#: zsh.texi:30268
#, no-wrap
msgid "sockets, outbound Unix domain"
msgstr ""

#. type: item
#: zsh.texi:30272
#, no-wrap
msgid "@t{zsocket} [ @t{-v} ] [ @t{-d} @var{fd} ] @var{filename}"
msgstr ""

#. type: table
#: zsh.texi:30277
msgid ""
"Open a new Unix domain connection to @var{filename}.  The shell parameter "
"@t{REPLY} will be set to the file descriptor associated with that "
"connection.  Currently, only stream connections are supported."
msgstr ""

#. type: table
#: zsh.texi:30282 zsh.texi:30315 zsh.texi:30331 zsh.texi:30940 zsh.texi:30964
#: zsh.texi:30980
msgid ""
"If @t{-d} is specified, its argument will be taken as the target file "
"descriptor for the connection."
msgstr ""

#. type: table
#: zsh.texi:30285 zsh.texi:30318 zsh.texi:30339 zsh.texi:30943 zsh.texi:30967
#: zsh.texi:30988 zsh.texi:31014
msgid "In order to elicit more verbose output, use @t{-v}."
msgstr ""

#. type: table
#: zsh.texi:30289
msgid ""
"File descriptors can be closed with normal shell syntax when no longer "
"needed, for example:"
msgstr ""

#. type: example
#: zsh.texi:30293
#, no-wrap
msgid "exec @{REPLY@}>&-\n"
msgstr ""

#. type: subsection
#: zsh.texi:30299 zsh.texi:30948
#, no-wrap
msgid "Inbound Connections"
msgstr ""

#. type: cindex
#: zsh.texi:30301
#, no-wrap
msgid "sockets, inbound Unix domain"
msgstr ""

#. type: item
#: zsh.texi:30305
#, no-wrap
msgid "@t{zsocket} @t{-l} [ @t{-v} ] [ @t{-d} @var{fd} ] @var{filename}"
msgstr ""

#. type: table
#: zsh.texi:30310
msgid ""
"@t{zsocket -l} will open a socket listening on @var{filename}.  The shell "
"parameter @t{REPLY} will be set to the file descriptor associated with that "
"listener.  The file descriptor remains open in subshells and forked external "
"executables."
msgstr ""

#. type: item
#: zsh.texi:30319
#, no-wrap
msgid "@t{zsocket} @t{-a} [ @t{-tv} ] [ @t{-d} @var{targetfd} ] @var{listenfd}"
msgstr ""

#. type: table
#: zsh.texi:30326
msgid ""
"@t{zsocket -a} will accept an incoming connection to the socket associated "
"with @var{listenfd}.  The shell parameter @t{REPLY} will be set to the file "
"descriptor associated with the inbound connection.  The file descriptor "
"remains open in subshells and forked external executables."
msgstr ""

#. type: table
#: zsh.texi:30336
msgid ""
"If @t{-t} is specified, @t{zsocket} will return if no incoming connection is "
"pending.  Otherwise it will wait for one."
msgstr ""

#. type: node
#: zsh.texi:30342 zsh.texi:30526 zsh.texi:30528 zsh.texi:30847
#, no-wrap
msgid "The zsh/system Module"
msgstr ""

#. type: Plain text
#: zsh.texi:30350
msgid ""
"The @t{zsh/stat} module makes available one builtin command under two "
"possible names:"
msgstr ""

#. type: findex
#: zsh.texi:30353
#, no-wrap
msgid "zstat"
msgstr ""

#. type: cindex
#: zsh.texi:30355
#, no-wrap
msgid "files, listing"
msgstr ""

#. type: cindex
#: zsh.texi:30356
#, no-wrap
msgid "files, examining"
msgstr ""

#. type: item
#: zsh.texi:30358
#, no-wrap
msgid ""
"@t{zstat }[ @t{-gnNolLtTrs} ] [ @t{-f} @var{fd} ] [ @t{-H} @var{hash} ] [ "
"@t{-A} @var{array} ] [ @t{-F} @var{fmt} ]"
msgstr ""

#. type: itemx
#: zsh.texi:30359
#, no-wrap
msgid "@t{@ @ @ @ @ @ }[ @t{+}@var{element} ] [ @var{file} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:30360
#, no-wrap
msgid "@t{stat} @var{...}"
msgstr ""

#. type: table
#: zsh.texi:30367
msgid ""
"The command acts as a front end to the @t{stat} system call (see stat(2)).  "
"The same command is provided with two names; as the name @t{stat} is often "
"used by an external command it is recommended that only the @t{zstat} form "
"of the command is used.  This can be arranged by loading the module with the "
"command `@t{zmodload -F zsh/stat b:zstat}'."
msgstr ""

#. type: table
#: zsh.texi:30375
msgid ""
"If the @t{stat} call fails, the appropriate system error message printed and "
"status 1 is returned.  The fields of @t{struct stat} give information about "
"the files provided as arguments to the command.  In addition to those "
"available from the @t{stat} call, an extra element `@t{link}' is provided.  "
"These elements are:"
msgstr ""

#. type: t{#1}
#: zsh.texi:30378
#, no-wrap
msgid "device"
msgstr ""

#. type: table
#: zsh.texi:30380
msgid "The number of the device on which the file resides."
msgstr ""

#. type: t{#1}
#: zsh.texi:30381
#, no-wrap
msgid "inode"
msgstr ""

#. type: table
#: zsh.texi:30383
msgid "The unique number of the file on this device (`@emph{inode}' number)."
msgstr ""

#. type: t{#1}
#: zsh.texi:30384
#, no-wrap
msgid "mode"
msgstr ""

#. type: table
#: zsh.texi:30389
msgid ""
"The mode of the file; that is, the file's type and access permissions.  With "
"the @t{-s} option, this will be returned as a string corresponding to the "
"first column in the display of the @t{ls -l} command."
msgstr ""

#. type: t{#1}
#: zsh.texi:30390
#, no-wrap
msgid "nlink"
msgstr ""

#. type: table
#: zsh.texi:30392
msgid "The number of hard links to the file."
msgstr ""

#. type: t{#1}
#: zsh.texi:30393
#, no-wrap
msgid "uid"
msgstr ""

#. type: table
#: zsh.texi:30396
msgid ""
"The user ID of the owner of the file.  With the @t{-s} option, this is "
"displayed as a user name."
msgstr ""

#. type: t{#1}
#: zsh.texi:30397
#, no-wrap
msgid "gid"
msgstr ""

#. type: table
#: zsh.texi:30400
msgid ""
"The group ID of the file.  With the @t{-s} option, this is displayed as a "
"group name."
msgstr ""

#. type: t{#1}
#: zsh.texi:30401
#, no-wrap
msgid "rdev"
msgstr ""

#. type: table
#: zsh.texi:30403
msgid "The raw device number.  This is only useful for special devices."
msgstr ""

#. type: t{#1}
#: zsh.texi:30404
#, no-wrap
msgid "size"
msgstr ""

#. type: table
#: zsh.texi:30406
msgid "The size of the file in bytes."
msgstr ""

#. type: t{#1}
#: zsh.texi:30407
#, no-wrap
msgid "atime"
msgstr ""

#. type: t{#1}
#: zsh.texi:30408
#, no-wrap
msgid "mtime"
msgstr ""

#. type: t{#1}
#: zsh.texi:30409
#, no-wrap
msgid "ctime"
msgstr ""

#. type: table
#: zsh.texi:30416
msgid ""
"The last access, modification and inode change times of the file, "
"respectively, as the number of seconds since midnight GMT on 1st January, "
"1970.  With the @t{-s} option, these are printed as strings for the local "
"time zone; the format can be altered with the @t{-F} option, and with the "
"@t{-g} option the times are in GMT."
msgstr ""

#. type: t{#1}
#: zsh.texi:30417
#, no-wrap
msgid "blksize"
msgstr ""

#. type: table
#: zsh.texi:30420
msgid ""
"The number of bytes in one allocation block on the device on which the file "
"resides."
msgstr ""

#. type: t{#1}
#: zsh.texi:30421
#, no-wrap
msgid "block"
msgstr ""

#. type: table
#: zsh.texi:30423
msgid "The number of disk blocks used by the file."
msgstr ""

#. type: t{#1}
#: zsh.texi:30424
#, no-wrap
msgid "link"
msgstr ""

#. type: table
#: zsh.texi:30429
msgid ""
"If the file is a link and the @t{-L} option is in effect, this contains the "
"name of the file linked to, otherwise it is empty.  Note that if this "
"element is selected (@value{dsbq}@t{zstat +link}@value{dsq})  then the "
"@t{-L} option is automatically used."
msgstr ""

#. type: table
#: zsh.texi:30437
msgid ""
"A particular element may be selected by including its name preceded by a "
"`@t{+}' in the option list; only one element is allowed.  The element may be "
"shortened to any unique set of leading characters.  Otherwise, all elements "
"will be shown for all files."
msgstr ""

#. type: table
#: zsh.texi:30440 zsh.texi:33068 zsh.texi:33628 zsh.texi:41129
msgid "Options:"
msgstr ""

#. type: table
#: zsh.texi:30453
msgid ""
"Instead of displaying the results on standard output, assign them to an "
"@var{array}, one @t{struct stat} element per array element for each file in "
"order.  In this case neither the name of the element nor the name of the "
"files appears in @var{array} unless the @t{-t} or @t{-n} options were given, "
"respectively.  If @t{-t} is given, the element name appears as a prefix to "
"the appropriate array element; if @t{-n} is given, the file name appears as "
"a separate array element preceding all the others.  Other formatting options "
"are respected."
msgstr ""

#. type: item
#: zsh.texi:30454
#, no-wrap
msgid "@t{-H} @var{hash}"
msgstr ""

#. type: table
#: zsh.texi:30458
msgid ""
"Similar to @t{-A}, but instead assign the values to @var{hash}.  The keys "
"are the elements listed above.  If the @t{-n} option is provided then the "
"name of the file is included in the hash with key @t{name}."
msgstr ""

#. type: item
#: zsh.texi:30459
#, no-wrap
msgid "@t{-f} @var{fd}"
msgstr ""

#. type: table
#: zsh.texi:30462
msgid ""
"Use the file on file descriptor @var{fd} instead of named files; no list of "
"file names is allowed in this case."
msgstr ""

#. type: item
#: zsh.texi:30463
#, no-wrap
msgid "@t{-F} @var{fmt}"
msgstr ""

#. type: table
#: zsh.texi:30471
msgid ""
"Supplies a @t{strftime} (see strftime(3)) string for the formatting of the "
"time elements.  The format string supports all of the zsh extensions "
"described in @ref{Prompt Expansion}.  In particular, @t{-F %s.%N} can be "
"used to show timestamps with nanosecond precision if supported by the "
"system.  The @t{-s} option is implied."
msgstr ""

#. type: table
#: zsh.texi:30475
msgid "Show the time elements in the GMT time zone.  The @t{-s} option is implied."
msgstr ""

#. type: table
#: zsh.texi:30480
msgid ""
"List the names of the type elements (to standard output or an array as "
"appropriate) and return immediately; arguments, and options other than "
"@t{-A}, are ignored."
msgstr ""

#. type: table
#: zsh.texi:30488
msgid ""
"Perform an @t{lstat} (see lstat(2)) rather than a @t{stat} system call.  In "
"this case, if the file is a link, information about the link itself rather "
"than the target file is returned.  This option is required to make the "
"@t{link} element useful.  It's important to note that this is the exact "
"opposite from ls(1), etc."
msgstr ""

#. type: table
#: zsh.texi:30493
msgid ""
"Always show the names of files.  Usually these are only shown when output is "
"to standard output and there is more than one file in the list."
msgstr ""

#. type: table
#: zsh.texi:30496
msgid "Never show the names of files."
msgstr ""

#. type: table
#: zsh.texi:30503
msgid ""
"If a raw file mode is printed, show it in octal, which is more useful for "
"human consumption than the default of decimal.  A leading zero will be "
"printed in this case.  Note that this does not affect whether a raw or "
"formatted file mode is shown, which is controlled by the @t{-r} and @t{-s} "
"options, nor whether a mode is shown at all."
msgstr ""

#. type: table
#: zsh.texi:30508
msgid ""
"Print raw data (the default format) alongside string data (the @t{-s} "
"format); the string data appears in parentheses after the raw data."
msgstr ""

#. type: table
#: zsh.texi:30513
msgid ""
"Print @t{mode}, @t{uid}, @t{gid} and the three time elements as strings "
"instead of numbers.  In each case the format is like that of @t{ls -l}."
msgstr ""

#. type: table
#: zsh.texi:30518
msgid ""
"Always show the type names for the elements of @t{struct stat}.  Usually "
"these are only shown when output is to standard output and no individual "
"element has been selected."
msgstr ""

#. type: table
#: zsh.texi:30521
msgid "Never show the type names of the @t{struct stat} elements."
msgstr ""

#. type: node
#: zsh.texi:30526 zsh.texi:30847 zsh.texi:30849 zsh.texi:31068
#, no-wrap
msgid "The zsh/net/tcp Module"
msgstr ""

#. type: Plain text
#: zsh.texi:30534
msgid ""
"The @t{zsh/system} module makes available various builtin commands and "
"parameters."
msgstr ""

#. type: subsection
#: zsh.texi:30537
#, no-wrap
msgid "Builtins"
msgstr ""

#. type: findex
#: zsh.texi:30542
#, no-wrap
msgid "syserror"
msgstr ""

#. type: item
#: zsh.texi:30543
#, no-wrap
msgid ""
"@t{syserror} [ @t{-e} @var{errvar} ] [ @t{-p} @var{prefix} ] [ @var{errno} | "
"@var{errname} ]"
msgstr ""

#. type: table
#: zsh.texi:30546
msgid ""
"This command prints out the error message associated with @var{errno}, a "
"system error number, followed by a newline to standard error."
msgstr ""

#. type: table
#: zsh.texi:30551
msgid ""
"Instead of the error number, a name @var{errname}, for example @t{ENOENT}, "
"may be used.  The set of names is the same as the contents of the array "
"@t{errnos}, see below."
msgstr ""

#. type: table
#: zsh.texi:30555
msgid ""
"If the string @var{prefix} is given, it is printed in front of the error "
"message, with no intervening space."
msgstr ""

#. type: table
#: zsh.texi:30559
msgid ""
"If @var{errvar} is supplied, the entire message, without a newline, is "
"assigned to the parameter names @var{errvar} and nothing is output."
msgstr ""

#. type: table
#: zsh.texi:30566
msgid ""
"A return status of 0 indicates the message was successfully printed "
"(although it may not be useful if the error number was out of the system's "
"range), a return status of 1 indicates an error in the parameters, and a "
"return status of 2 indicates the error name was not recognised (no message "
"is printed for this)."
msgstr ""

#. type: findex
#: zsh.texi:30567
#, no-wrap
msgid "sysopen"
msgstr ""

#. type: item
#: zsh.texi:30569
#, no-wrap
msgid ""
"@t{sysopen} [ @t{-arw} ] [ @t{-m} @var{permissions} ] [ @t{-o} @var{options} "
"]"
msgstr ""

#. type: itemx
#: zsh.texi:30570
#, no-wrap
msgid "@t{@ @ @ @ @ @ @ @ }@t{-u} @var{fd} @var{file}"
msgstr ""

#. type: table
#: zsh.texi:30578
msgid ""
"This command opens a file. The @t{-r}, @t{-w} and @t{-a} flags indicate "
"whether the file should be opened for reading, writing and appending, "
"respectively. The @t{-m} option allows the initial permissions to use when "
"creating a file to be specified in octal form.  The file descriptor is "
"specified with @t{-u}. Either an explicit file descriptor in the range 0 to "
"9 can be specified or a variable name can be given to which the file "
"descriptor number will be assigned."
msgstr ""

#. type: table
#: zsh.texi:30583
msgid ""
"The @t{-o} option allows various system specific options to be specified as "
"a comma-separated list. The following is a list of possible options. Note "
"that, depending on the system, some may not be available."
msgstr ""

#. type: t{#1}
#: zsh.texi:30584
#, no-wrap
msgid "cloexec"
msgstr ""

#. type: table
#: zsh.texi:30588
msgid ""
"mark file to be closed when other programs are executed (else the file "
"descriptor remains open in subshells and forked external executables)"
msgstr ""

#. type: t{#1}
#: zsh.texi:30589
#, no-wrap
msgid "create"
msgstr ""

#. type: t{#1}
#: zsh.texi:30590
#, no-wrap
msgid "creat"
msgstr ""

#. type: table
#: zsh.texi:30592
msgid "create file if it does not exist"
msgstr ""

#. type: t{#1}
#: zsh.texi:30593
#, no-wrap
msgid "excl"
msgstr ""

#. type: table
#: zsh.texi:30595
msgid "create file, error if it already exists"
msgstr ""

#. type: t{#1}
#: zsh.texi:30596
#, no-wrap
msgid "noatime"
msgstr ""

#. type: table
#: zsh.texi:30598
msgid "suppress updating of the file atime"
msgstr ""

#. type: t{#1}
#: zsh.texi:30599
#, no-wrap
msgid "nofollow"
msgstr ""

#. type: table
#: zsh.texi:30601
msgid "fail if @var{file} is a symbolic link"
msgstr ""

#. type: t{#1}
#: zsh.texi:30602
#, no-wrap
msgid "nonblock"
msgstr ""

#. type: table
#: zsh.texi:30604
msgid "the file is opened in nonblocking mode"
msgstr ""

#. type: table
#: zsh.texi:30607
msgid "request that writes wait until data has been physically written"
msgstr ""

#. type: t{#1}
#: zsh.texi:30608
#, no-wrap
msgid "truncate"
msgstr ""

#. type: t{#1}
#: zsh.texi:30609
#, no-wrap
msgid "trunc"
msgstr ""

#. type: table
#: zsh.texi:30611
msgid "truncate file to size 0"
msgstr ""

#. type: table
#: zsh.texi:30616
msgid "To close the file, use one of the following:"
msgstr ""

#. type: example
#: zsh.texi:30621
#, no-wrap
msgid ""
"@t{exec @{}@var{fd}@t{@}<&-}\n"
"@t{exec @{}@var{fd}@t{@}>&-}\n"
msgstr ""

#. type: findex
#: zsh.texi:30623
#, no-wrap
msgid "sysread"
msgstr ""

#. type: item
#: zsh.texi:30625
#, no-wrap
msgid ""
"@t{sysread }[ @t{-c} @var{countvar} ] [ @t{-i} @var{infd} ] [ @t{-o} "
"@var{outfd} ]"
msgstr ""

#. type: itemx
#: zsh.texi:30626
#, no-wrap
msgid ""
"@t{@ @ @ @ @ @ @ @ }[ @t{-s} @var{bufsize} ] [ @t{-t} @var{timeout} ] [ "
"@var{param} ]"
msgstr ""

#. type: table
#: zsh.texi:30631
msgid ""
"Perform a single system read from file descriptor @var{infd}, or zero if "
"that is not given.  The result of the read is stored in @var{param} or "
"@t{REPLY} if that is not given.  If @var{countvar} is given, the number of "
"bytes read is assigned to the parameter named by @var{countvar}."
msgstr ""

#. type: table
#: zsh.texi:30636
msgid ""
"The maximum number of bytes read is @var{bufsize} or 8192 if that is not "
"given, however the command returns as soon as any number of bytes was "
"successfully read."
msgstr ""

#. type: table
#: zsh.texi:30642
msgid ""
"If @var{timeout} is given, it specifies a timeout in seconds, which may be "
"zero to poll the file descriptor.  This is handled by the @t{poll} system "
"call if available, otherwise the @t{select} system call if available."
msgstr ""

#. type: table
#: zsh.texi:30653
msgid ""
"If @var{outfd} is given, an attempt is made to write all the bytes just read "
"to the file descriptor @var{outfd}.  If this fails, because of a system "
"error other than @t{EINTR} or because of an internal zsh error during an "
"interrupt, the bytes read but not written are stored in the parameter named "
"by @var{param} if supplied (no default is used in this case), and the number "
"of bytes read but not written is stored in the parameter named by "
"@var{countvar} if that is supplied.  If it was successful, @var{countvar} "
"contains the full number of bytes transferred, as usual, and @var{param} is "
"not set."
msgstr ""

#. type: table
#: zsh.texi:30658
msgid ""
"The error @t{EINTR} (interrupted system call) is handled internally so that "
"shell interrupts are transparent to the caller.  Any other error causes a "
"return."
msgstr ""

#. type: table
#: zsh.texi:30661
msgid "The possible return statuses are"
msgstr ""

#. type: table
#: zsh.texi:30665
msgid ""
"At least one byte of data was successfully read and, if appropriate, "
"written."
msgstr ""

#. type: item
#: zsh.texi:30666
#, no-wrap
msgid "1"
msgstr ""

#. type: table
#: zsh.texi:30669
msgid ""
"There was an error in the parameters to the command.  This is the only error "
"for which a message is printed to standard error."
msgstr ""

#. type: t{#1}
#: zsh.texi:30670 zsh.texi:37006 zsh.texi:38807
#, no-wrap
msgid "2"
msgstr ""

#. type: table
#: zsh.texi:30673
msgid ""
"There was an error on the read, or on polling the input file descriptor for "
"a timeout.  The parameter @t{ERRNO} gives the error."
msgstr ""

#. type: item
#: zsh.texi:30674
#, no-wrap
msgid "3"
msgstr ""

#. type: table
#: zsh.texi:30677
msgid ""
"Data were successfully read, but there was an error writing them to "
"@var{outfd}.  The parameter @t{ERRNO} gives the error."
msgstr ""

#. type: item
#: zsh.texi:30678
#, no-wrap
msgid "4"
msgstr ""

#. type: table
#: zsh.texi:30681
msgid ""
"The attempt to read timed out.  Note this does not set @t{ERRNO} as this is "
"not a system error."
msgstr ""

#. type: item
#: zsh.texi:30682
#, no-wrap
msgid "5"
msgstr ""

#. type: table
#: zsh.texi:30686
msgid ""
"No system error occurred, but zero bytes were read.  This usually indicates "
"end of file.  The parameters are set according to the usual rules; no write "
"to @var{outfd} is attempted."
msgstr ""

#. type: item
#: zsh.texi:30689
#, no-wrap
msgid ""
"@t{sysseek} [ @t{-u} @var{fd} ] [ @t{-w} @t{start}|@t{end}|@t{current} ] "
"@var{offset}"
msgstr ""

#. type: table
#: zsh.texi:30696
msgid ""
"The current file position at which future reads and writes will take place "
"is adjusted to the specified byte offset. The @var{offset} is evaluated as a "
"math expression. The @t{-u} option allows the file descriptor to be "
"specified. By default the offset is specified relative to the start or the "
"file but, with the @t{-w} option, it is possible to specify that the offset "
"should be relative to the current position or the end of the file."
msgstr ""

#. type: item
#: zsh.texi:30697
#, no-wrap
msgid "@t{syswrite} [ @t{-c} @var{countvar} ] [ @t{-o} @var{outfd} ] @var{data}"
msgstr ""

#. type: table
#: zsh.texi:30702
msgid ""
"The data (a single string of bytes) are written to the file descriptor "
"@var{outfd}, or 1 if that is not given, using the @t{write} system call.  "
"Multiple write operations may be used if the first does not write all the "
"data."
msgstr ""

#. type: table
#: zsh.texi:30707
msgid ""
"If @var{countvar} is given, the number of byte written is stored in the "
"parameter named by @var{countvar}; this may not be the full length of "
"@var{data} if an error occurred."
msgstr ""

#. type: table
#: zsh.texi:30714
msgid ""
"The error @t{EINTR} (interrupted system call) is handled internally by "
"retrying; otherwise an error causes the command to return.  For example, if "
"the file descriptor is set to non-blocking output, an error @t{EAGAIN} (on "
"some systems, @t{EWOULDBLOCK}) may result in the command returning early."
msgstr ""

#. type: table
#: zsh.texi:30720
msgid ""
"The return status may be 0 for success, 1 for an error in the parameters to "
"the command, or 2 for an error on the write; no error message is printed in "
"the last case, but the parameter @t{ERRNO} will reflect the error that "
"occurred."
msgstr ""

#. type: item
#: zsh.texi:30721
#, no-wrap
msgid ""
"@t{zsystem flock} [ @t{-t} @var{timeout} ] [ @t{-i} @var{interval} ] [ "
"@t{-f} @var{var} ] [@t{-er}] @var{file}"
msgstr ""

#. type: itemx
#: zsh.texi:30722
#, no-wrap
msgid "@t{zsystem flock -u} @var{fd_expr}"
msgstr ""

#. type: table
#: zsh.texi:30728
msgid ""
"The builtin @t{zsystem}'s subcommand @t{flock} performs advisory file "
"locking (via the fcntl(2) system call) over the entire contents of the given "
"file.  This form of locking requires the processes accessing the file to "
"cooperate; its most obvious use is between two instances of the shell "
"itself."
msgstr ""

#. type: table
#: zsh.texi:30740
msgid ""
"In the first form the named @var{file}, which must already exist, is locked "
"by opening a file descriptor to the file and applying a lock to the file "
"descriptor.  The lock terminates when the shell process that created the "
"lock exits; it is therefore often convenient to create file locks within "
"subshells, since the lock is automatically released when the subshell "
"exits.  Note that use of the @t{print} builtin with the @t{-u} option will, "
"as a side effect, release the lock, as will redirection to the file in the "
"shell holding the lock.  To work around this use a subshell, e.g. `@t{(print "
"message) >> }@var{file}'.  Status 0 is returned if the lock succeeds, else "
"status 1."
msgstr ""

#. type: table
#: zsh.texi:30750
msgid ""
"In the second form the file descriptor given by the arithmetic expression "
"@var{fd_expr} is closed, releasing a lock.  The file descriptor can be "
"queried by using the `@t{-f} @var{var}' form during the lock; on a "
"successful lock, the shell variable @var{var} is set to the file descriptor "
"used for locking.  The lock will be released if the file descriptor is "
"closed by any other means, for example using `@t{exec "
"@{}@var{var}@t{@}>&-}'; however, the form described here performs a safety "
"check that the file descriptor is in use for file locking."
msgstr ""

#. type: table
#: zsh.texi:30760
msgid ""
"By default the shell waits indefinitely for the lock to succeed.  The option "
"@t{-t} @var{timeout} specifies a timeout for the lock in seconds; fractional "
"seconds are allowed.  During this period, the shell will attempt to lock the "
"file every @var{interval} seconds if the @t{-i} @var{interval} option is "
"given, otherwise once a second.  (This @var{interval} is shortened before "
"the last attempt if needed, so that the shell waits only until the "
"@var{timeout} and not longer.)  If the attempt times out, status 2 is "
"returned."
msgstr ""

#. type: table
#: zsh.texi:30765
msgid ""
"(Note: @var{timeout} is limited to 2^30-1 seconds (about 34 years), and "
"@var{interval} to 0.999 * LONG_MAX microseconds (only about 35 minutes on "
"32-bit systems).)"
msgstr ""

#. type: table
#: zsh.texi:30770
msgid ""
"If the option @t{-e} is given, the file descriptor for the lock is preserved "
"when the shell uses @t{exec} to start a new process; otherwise it is closed "
"at that point and the lock released."
msgstr ""

#. type: table
#: zsh.texi:30775
msgid ""
"If the option @t{-r} is given, the lock is only for reading, otherwise it is "
"for reading and writing.  The file descriptor is opened accordingly."
msgstr ""

#. type: item
#: zsh.texi:30776
#, no-wrap
msgid "@t{zsystem supports} @var{subcommand}"
msgstr ""

#. type: table
#: zsh.texi:30785
msgid ""
"The builtin @t{zsystem}'s subcommand @t{supports} tests whether a given "
"subcommand is supported.  It returns status 0 if so, else status 1.  It "
"operates silently unless there was a syntax error (i.e. the wrong number of "
"arguments), in which case status 255 is returned.  Status 1 can indicate one "
"of two things: @var{subcommand} is known but not supported by the current "
"operating system, or @var{subcommand} is not known (possibly because this is "
"an older version of the shell before it was implemented)."
msgstr ""

#. type: subsection
#: zsh.texi:30790
#, no-wrap
msgid "Math Functions"
msgstr ""

#. type: t{#1}
#: zsh.texi:30795
#, no-wrap
msgid "systell(@var{fd})"
msgstr ""

#. type: table
#: zsh.texi:30798
msgid ""
"The systell math function returns the current file position for the file "
"descriptor passed as an argument."
msgstr ""

#. type: t{#1}
#: zsh.texi:30808 zsh.texi:30809
#, no-wrap
msgid "errnos"
msgstr ""

#. type: table
#: zsh.texi:30816
msgid ""
"A readonly array of the names of errors defined on the system.  These are "
"typically macros defined in C by including the system header file "
"@t{errno.h}.  The index of each name (assuming the option @t{KSH_ARRAYS} is "
"unset) corresponds to the error number.  Error numbers @var{num} before the "
"last known error which have no name are given the name @t{E}@var{num} in the "
"array."
msgstr ""

#. type: table
#: zsh.texi:30820
msgid ""
"Note that aliases for errors are not handled; only the canonical name is "
"used."
msgstr ""

#. type: t{#1}
#: zsh.texi:30821 zsh.texi:30822
#, no-wrap
msgid "sysparams"
msgstr ""

#. type: table
#: zsh.texi:30824
msgid "A readonly associative array.  The keys are:"
msgstr ""

#. type: t{#1}
#: zsh.texi:30827
#, no-wrap
msgid "pid"
msgstr ""

#. type: vindex
#: zsh.texi:30828
#, no-wrap
msgid "pid, sysparams"
msgstr ""

#. type: table
#: zsh.texi:30831
msgid ""
"Returns the process ID of the current process, even in subshells.  Compare "
"@t{$$}, which returns the process ID of the main shell process."
msgstr ""

#. type: t{#1}
#: zsh.texi:30832
#, no-wrap
msgid "ppid"
msgstr ""

#. type: vindex
#: zsh.texi:30833
#, no-wrap
msgid "ppid, sysparams"
msgstr ""

#. type: table
#: zsh.texi:30837
msgid ""
"Returns the current process ID of the parent of the current process, even in "
"subshells.  Compare @t{$PPID}, which returns the process ID of the initial "
"parent of the main shell process."
msgstr ""

#. type: t{#1}
#: zsh.texi:30838
#, no-wrap
msgid "procsubstpid"
msgstr ""

#. type: table
#: zsh.texi:30842
msgid ""
"Returns the process ID of the last process started for process substitution, "
"i.e. the @t{<(}@var{...}@t{)} and @t{>(}@var{...}@t{)} expansions."
msgstr ""

#. type: node
#: zsh.texi:30847 zsh.texi:31068 zsh.texi:31070 zsh.texi:31098
#, no-wrap
msgid "The zsh/termcap Module"
msgstr ""

#. type: Plain text
#: zsh.texi:30854
msgid "The @t{zsh/net/tcp} module makes available one builtin command:"
msgstr ""

#. type: cindex
#: zsh.texi:30858
#, no-wrap
msgid "TCP"
msgstr ""

#. type: cindex
#: zsh.texi:30859
#, no-wrap
msgid "sockets, TCP"
msgstr ""

#. type: item
#: zsh.texi:30860
#, no-wrap
msgid "@t{ztcp} [ @t{-acflLtv} ] [ @t{-d} @var{fd} ] [ @var{args} ]"
msgstr ""

#. type: table
#: zsh.texi:30863
msgid ""
"@t{ztcp} is implemented as a builtin to allow full use of shell command line "
"editing, file I/O, and job control mechanisms."
msgstr ""

#. type: table
#: zsh.texi:30867
msgid ""
"If @t{ztcp} is run with no options, it will output the contents of its "
"session table."
msgstr ""

#. type: table
#: zsh.texi:30874
msgid ""
"If it is run with only the option @t{-L}, it will output the contents of the "
"session table in a format suitable for automatic parsing.  The option is "
"ignored if given with a command to open or close a session.  The output "
"consists of a set of lines, one per session, each containing the following "
"elements separated by spaces:"
msgstr ""

#. type: item
#: zsh.texi:30877
#, no-wrap
msgid "File descriptor"
msgstr ""

#. type: table
#: zsh.texi:30881
msgid ""
"The file descriptor in use for the connection.  For normal inbound (@t{I})  "
"and outbound (@t{O}) connections this may be read and written by the usual "
"shell mechanisms.  However, it should only be close with `@t{ztcp -c}'."
msgstr ""

#. type: item
#: zsh.texi:30882
#, no-wrap
msgid "Connection type"
msgstr ""

#. type: table
#: zsh.texi:30884
msgid "A letter indicating how the session was created:"
msgstr ""

#. type: t{#1}
#: zsh.texi:30887
#, no-wrap
msgid "Z"
msgstr ""

#. type: table
#: zsh.texi:30889
msgid "A session created with the @t{zftp} command."
msgstr ""

#. type: table
#: zsh.texi:30892
msgid "A connection opened for listening with `@t{ztcp -l}'."
msgstr ""

#. type: table
#: zsh.texi:30895
msgid "An inbound connection accepted with `@t{ztcp -a}'."
msgstr ""

#. type: table
#: zsh.texi:30898
msgid "An outbound connection created with `@t{ztcp} @var{host} @var{...}'."
msgstr ""

#. type: item
#: zsh.texi:30903
#, no-wrap
msgid "The local host"
msgstr ""

#. type: table
#: zsh.texi:30906
msgid ""
"This is usually set to an all-zero IP address as the address of the "
"localhost is irrelevant."
msgstr ""

#. type: item
#: zsh.texi:30907
#, no-wrap
msgid "The local port"
msgstr ""

#. type: table
#: zsh.texi:30909
msgid "This is likely to be zero unless the connection is for listening."
msgstr ""

#. type: item
#: zsh.texi:30910
#, no-wrap
msgid "The remote host"
msgstr ""

#. type: table
#: zsh.texi:30914
msgid ""
"This is the fully qualified domain name of the peer, if available, else an "
"IP address.  It is an all-zero IP address for a session opened for "
"listening."
msgstr ""

#. type: item
#: zsh.texi:30915
#, no-wrap
msgid "The remote port"
msgstr ""

#. type: table
#: zsh.texi:30917
msgid "This is zero for a connection opened for listening."
msgstr ""

#. type: cindex
#: zsh.texi:30926
#, no-wrap
msgid "sockets, outbound TCP"
msgstr ""

#. type: item
#: zsh.texi:30930
#, no-wrap
msgid "@t{ztcp} [ @t{-v} ] [ @t{-d} @var{fd} ] @var{host} [ @var{port} ]"
msgstr ""

#. type: table
#: zsh.texi:30936
msgid ""
"Open a new TCP connection to @var{host}.  If the @var{port} is omitted, it "
"will default to port 23.  The connection will be added to the session table "
"and the shell parameter @t{REPLY} will be set to the file descriptor "
"associated with that connection."
msgstr ""

#. type: cindex
#: zsh.texi:30950
#, no-wrap
msgid "sockets, inbound TCP"
msgstr ""

#. type: item
#: zsh.texi:30954
#, no-wrap
msgid "@t{ztcp} @t{-l} [ @t{-v} ] [ @t{-d} @var{fd} ] @var{port}"
msgstr ""

#. type: table
#: zsh.texi:30960
msgid ""
"@t{ztcp -l} will open a socket listening on TCP @var{port}.  The socket will "
"be added to the session table and the shell parameter @t{REPLY} will be set "
"to the file descriptor associated with that listener."
msgstr ""

#. type: item
#: zsh.texi:30968
#, no-wrap
msgid "@t{ztcp} @t{-a} [ @t{-tv} ] [ @t{-d} @var{targetfd} ] @var{listenfd}"
msgstr ""

#. type: table
#: zsh.texi:30975
msgid ""
"@t{ztcp -a} will accept an incoming connection to the port associated with "
"@var{listenfd}.  The connection will be added to the session table and the "
"shell parameter @t{REPLY} will be set to the file descriptor associated with "
"the inbound connection."
msgstr ""

#. type: table
#: zsh.texi:30985
msgid ""
"If @t{-t} is specified, @t{ztcp} will return if no incoming connection is "
"pending.  Otherwise it will wait for one."
msgstr ""

#. type: subsection
#: zsh.texi:30993
#, no-wrap
msgid "Closing Connections"
msgstr ""

#. type: cindex
#: zsh.texi:30995
#, no-wrap
msgid "sockets, closing TCP"
msgstr ""

#. type: item
#: zsh.texi:30999
#, no-wrap
msgid "@t{ztcp} @t{-cf} [ @t{-v} ] [ @var{fd} ]"
msgstr ""

#. type: itemx
#: zsh.texi:31000
#, no-wrap
msgid "@t{ztcp} @t{-c} [ @t{-v} ] [ @var{fd} ]"
msgstr ""

#. type: table
#: zsh.texi:31005
msgid ""
"@t{ztcp -c} will close the socket associated with @var{fd}.  The socket will "
"be removed from the session table.  If @var{fd} is not specified, @t{ztcp} "
"will close everything in the session table."
msgstr ""

#. type: table
#: zsh.texi:31011
msgid ""
"Normally, sockets registered by zftp (see @ref{The zsh/zftp Module} ) cannot "
"be closed this way.  In order to force such a socket closed, use @t{-f}."
msgstr ""

#. type: cindex
#: zsh.texi:31021
#, no-wrap
msgid "TCP, example"
msgstr ""

#. type: Plain text
#: zsh.texi:31024
msgid ""
"Here is how to create a TCP connection between two instances of zsh.  We "
"need to pick an unassigned port; here we use the randomly chosen 5123."
msgstr ""

#. type: Plain text
#: zsh.texi:31027
msgid "On @t{host1},"
msgstr ""

#. type: example
#: zsh.texi:31033
#, no-wrap
msgid ""
"zmodload zsh/net/tcp\n"
"ztcp -l 5123\n"
"listenfd=$REPLY\n"
"ztcp -a $listenfd\n"
"fd=$REPLY\n"
msgstr ""

#. type: Plain text
#: zsh.texi:31035
msgid "The second from last command blocks until there is an incoming connection."
msgstr ""

#. type: Plain text
#: zsh.texi:31039
msgid ""
"Now create a connection from @t{host2} (which may, of course, be the same "
"machine):"
msgstr ""

#. type: example
#: zsh.texi:31043
#, no-wrap
msgid ""
"zmodload zsh/net/tcp\n"
"ztcp host1 5123\n"
"fd=$REPLY\n"
msgstr ""

#. type: Plain text
#: zsh.texi:31048
msgid ""
"Now on each host, @t{$fd} contains a file descriptor for talking to the "
"other.  For example, on @t{host1}:"
msgstr ""

#. type: example
#: zsh.texi:31050
#, no-wrap
msgid "print This is a message >&$fd\n"
msgstr ""

#. type: Plain text
#: zsh.texi:31052
msgid "and on @t{host2}:"
msgstr ""

#. type: example
#: zsh.texi:31054
#, no-wrap
msgid "read -r line <&$fd; print -r - $line\n"
msgstr ""

#. type: Plain text
#: zsh.texi:31056
msgid "prints `@t{This is a message}'."
msgstr ""

#. type: Plain text
#: zsh.texi:31059
msgid "To tidy up, on @t{host1}:"
msgstr ""

#. type: example
#: zsh.texi:31062
#, no-wrap
msgid ""
"ztcp -c $listenfd\n"
"ztcp -c $fd\n"
msgstr ""

#. type: Plain text
#: zsh.texi:31064
msgid "and on @t{host2}"
msgstr ""

#. type: example
#: zsh.texi:31066
#, no-wrap
msgid "ztcp -c $fd\n"
msgstr ""

#. type: node
#: zsh.texi:31068 zsh.texi:31098 zsh.texi:31100 zsh.texi:31128
#, no-wrap
msgid "The zsh/terminfo Module"
msgstr ""

#. type: Plain text
#: zsh.texi:31075
msgid "The @t{zsh/termcap} module makes available one builtin command:"
msgstr ""

#. type: cindex
#: zsh.texi:31079
#, no-wrap
msgid "termcap value, printing"
msgstr ""

#. type: item
#: zsh.texi:31080
#, no-wrap
msgid "@t{echotc} @var{cap} [ @var{arg} ... ]"
msgstr ""

#. type: table
#: zsh.texi:31083
msgid ""
"Output the termcap value corresponding to the capability @var{cap}, with "
"optional arguments."
msgstr ""

#. type: Plain text
#: zsh.texi:31088
msgid "The @t{zsh/termcap} module makes available one parameter:"
msgstr ""

#. type: t{#1}
#: zsh.texi:31091 zsh.texi:31092
#, no-wrap
msgid "termcap"
msgstr ""

#. type: table
#: zsh.texi:31095
msgid "An associative array that maps termcap capability codes to their values."
msgstr ""

#. type: node
#: zsh.texi:31098 zsh.texi:31128 zsh.texi:31130 zsh.texi:31291
#, no-wrap
msgid "The zsh/watch Module"
msgstr ""

#. type: Plain text
#: zsh.texi:31105
msgid "The @t{zsh/terminfo} module makes available one builtin command:"
msgstr ""

#. type: cindex
#: zsh.texi:31109
#, no-wrap
msgid "terminfo value, printing"
msgstr ""

#. type: item
#: zsh.texi:31110
#, no-wrap
msgid "@t{echoti} @var{cap} [ @var{arg} ]"
msgstr ""

#. type: table
#: zsh.texi:31113
msgid ""
"Output the terminfo value corresponding to the capability @var{cap}, "
"instantiated with @var{arg} if applicable."
msgstr ""

#. type: Plain text
#: zsh.texi:31118
msgid "The @t{zsh/terminfo} module makes available one parameter:"
msgstr ""

#. type: t{#1}
#: zsh.texi:31121 zsh.texi:31122
#, no-wrap
msgid "terminfo"
msgstr ""

#. type: table
#: zsh.texi:31125
msgid "An associative array that maps terminfo capability names to their values."
msgstr ""

#. type: node
#: zsh.texi:31128 zsh.texi:31291 zsh.texi:31293 zsh.texi:31845
#, no-wrap
msgid "The zsh/zftp Module"
msgstr ""

#. type: Plain text
#: zsh.texi:31136
msgid ""
"The @t{zsh/watch} module can be used to report when specific users log in or "
"out. This is controlled via the following parameters."
msgstr ""

#. type: t{#1}
#: zsh.texi:31139 zsh.texi:31140
#, no-wrap
msgid "LOGCHECK"
msgstr ""

#. type: table
#: zsh.texi:31143
msgid ""
"The interval in seconds between checks for login/logout activity using the "
"@t{watch} parameter."
msgstr ""

#. type: vindex
#: zsh.texi:31144
#, no-wrap
msgid "watch"
msgstr ""

#. type: vindex
#: zsh.texi:31145
#, no-wrap
msgid "WATCH"
msgstr ""

#. type: item
#: zsh.texi:31146
#, no-wrap
msgid "@t{watch} <S> <Z> (@t{WATCH} <S>)"
msgstr ""

#. type: table
#: zsh.texi:31148
msgid "An array (colon-separated list) of login/logout events to report."
msgstr ""

#. type: table
#: zsh.texi:31153
msgid ""
"If it contains the single word `@t{all}', then all login/logout events are "
"reported.  If it contains the single word `@t{notme}', then all events are "
"reported as with `@t{all}' except @t{$USERNAME}."
msgstr ""

#. type: table
#: zsh.texi:31164
msgid ""
"An entry in this list may consist of a username, an `@t{@@}' followed by a "
"remote hostname, and a `@t{%}' followed by a line (tty).  Any of these may "
"be a pattern (be sure to quote this during the assignment to @t{watch} so "
"that it does not immediately perform file generation); the setting of the "
"@t{EXTENDED_GLOB} option is respected.  Any or all of these components may "
"be present in an entry; if a login/logout event matches all of them, it is "
"reported."
msgstr ""

#. type: table
#: zsh.texi:31167
msgid "For example, with the @t{EXTENDED_GLOB} option set, the following:"
msgstr ""

#. type: example
#: zsh.texi:31171
#, no-wrap
msgid "watch=('^(pws|barts)')\n"
msgstr ""

#. type: table
#: zsh.texi:31176
msgid ""
"causes reports for activity associated with any user other than @t{pws} or "
"@t{barts}."
msgstr ""

#. type: t{#1}
#: zsh.texi:31177 zsh.texi:31178
#, no-wrap
msgid "WATCHFMT"
msgstr ""

#. type: table
#: zsh.texi:31182
msgid ""
"The format of login/logout reports if the @t{watch} parameter is set.  "
"Default is `@t{%n has %a %l from %m}'.  Recognizes the following escape "
"sequences:"
msgstr ""

#. type: table
#: zsh.texi:31187
msgid "The name of the user that logged in/out."
msgstr ""

#. type: t{#1}
#: zsh.texi:31188 zsh.texi:37064 zsh.texi:37157
#, no-wrap
msgid "%a"
msgstr ""

#. type: table
#: zsh.texi:31190
msgid "The observed action, i.e. \"logged on\" or \"logged off\"."
msgstr ""

#. type: table
#: zsh.texi:31193
msgid "The line (tty) the user is logged in on."
msgstr ""

#. type: table
#: zsh.texi:31196
msgid "The full hostname of the remote host."
msgstr ""

#. type: table
#: zsh.texi:31201
msgid ""
"The hostname up to the first `@t{.}'.  If only the IP address is available "
"or the utmp field contains the name of an X-windows display, the whole name "
"is printed."
msgstr ""

#. type: table
#: zsh.texi:31207
msgid ""
"@emph{NOTE:} The `@t{%m}' and `@t{%M}' escapes will work only if there is a "
"host name field in the utmp on your machine.  Otherwise they are treated as "
"ordinary strings."
msgstr ""

#. type: item
#: zsh.texi:31208
#, no-wrap
msgid "@t{%F@{}@var{color}@t{@}} (@t{%f})"
msgstr ""

#. type: table
#: zsh.texi:31210
msgid "Start (stop) using a different foreground color."
msgstr ""

#. type: item
#: zsh.texi:31211
#, no-wrap
msgid "@t{%K@{}@var{color}@t{@}} (@t{%k})"
msgstr ""

#. type: table
#: zsh.texi:31213
msgid "Start (stop) using a different background color."
msgstr ""

#. type: table
#: zsh.texi:31226
msgid "The time, in 12-hour, am/pm format."
msgstr ""

#. type: table
#: zsh.texi:31229
msgid "The time, in 24-hour format."
msgstr ""

#. type: table
#: zsh.texi:31232
msgid "The date in `@var{day}@t{-}@var{dd}' format."
msgstr ""

#. type: table
#: zsh.texi:31235
msgid "The date in `@var{mm}@t{/}@var{dd}@t{/}@var{yy}' format."
msgstr ""

#. type: table
#: zsh.texi:31238
msgid "The date in `@var{yy}@t{-}@var{mm}@t{-}@var{dd}' format."
msgstr ""

#. type: table
#: zsh.texi:31243
msgid ""
"The date formatted as @var{string} using the @t{strftime} function, with zsh "
"extensions as described by @ref{Prompt Expansion}."
msgstr ""

#. type: item
#: zsh.texi:31244
#, no-wrap
msgid "@t{%(}@var{x}@t{:}@var{true-text}@t{:}@var{false-text}@t{)}"
msgstr ""

#. type: table
#: zsh.texi:31252
msgid ""
"Specifies a ternary expression.  The character following the @var{x} is "
"arbitrary; the same character is used to separate the text for the \"true\" "
"result from that for the \"false\" result.  Both the separator and the right "
"parenthesis may be escaped with a backslash.  Ternary expressions may be "
"nested."
msgstr ""

#. type: table
#: zsh.texi:31261
msgid ""
"The test character @var{x} may be any one of `@t{l}', `@t{n}', `@t{m}' or "
"`@t{M}', which indicate a `true' result if the corresponding escape sequence "
"would return a non-empty value; or it may be `@t{a}', which indicates a "
"`true' result if the watched user has logged in, or `false' if he has logged "
"out.  Other characters evaluate to neither true nor false; the entire "
"expression is omitted in this case."
msgstr ""

#. type: table
#: zsh.texi:31270
msgid ""
"If the result is `true', then the @var{true-text} is formatted according to "
"the rules above and printed, and the @var{false-text} is skipped.  If "
"`false', the @var{true-text} is skipped and the @var{false-text} is "
"formatted and printed.  Either or both of the branches may be empty, but "
"both separators must be present in any case."
msgstr ""

#. type: Plain text
#: zsh.texi:31278
msgid "Furthermore, the @t{zsh/watch} module makes available one builtin command:"
msgstr ""

#. type: t{#1}
#: zsh.texi:31281 zsh.texi:31285
#, no-wrap
msgid "log"
msgstr ""

#. type: vindex
#: zsh.texi:31282
#, no-wrap
msgid "watch, use of"
msgstr ""

#. type: cindex
#: zsh.texi:31283
#, no-wrap
msgid "watching users"
msgstr ""

#. type: cindex
#: zsh.texi:31284
#, no-wrap
msgid "users, watching"
msgstr ""

#. type: table
#: zsh.texi:31288
msgid ""
"List all users currently logged in who are affected by the current setting "
"of the @t{watch} parameter."
msgstr ""

#. type: node
#: zsh.texi:31291 zsh.texi:31845 zsh.texi:31847 zsh.texi:31854
#, no-wrap
msgid "The zsh/zle Module"
msgstr ""

#. type: Plain text
#: zsh.texi:31298
msgid "The @t{zsh/zftp} module makes available one builtin command:"
msgstr ""

#. type: cindex
#: zsh.texi:31302
#, no-wrap
msgid "FTP"
msgstr ""

#. type: cindex
#: zsh.texi:31303
#, no-wrap
msgid "files, transferring"
msgstr ""

#. type: item
#: zsh.texi:31304
#, no-wrap
msgid "@t{zftp} @var{subcommand} [ @var{args} ]"
msgstr ""

#. type: table
#: zsh.texi:31312
msgid ""
"The @t{zsh/zftp} module is a client for FTP (file transfer protocol).  It is "
"implemented as a builtin to allow full use of shell command line editing, "
"file I/O, and job control mechanisms.  Often, users will access it via shell "
"functions providing a more powerful interface; a set is provided with the "
"@t{zsh} distribution and is described in @ref{Zftp Function System}.  "
"However, the @t{zftp} command is entirely usable in its own right."
msgstr ""

#. type: table
#: zsh.texi:31319
msgid ""
"All commands consist of the command name @t{zftp} followed by the name of a "
"subcommand.  These are listed below.  The return status of each subcommand "
"is supposed to reflect the success or failure of the remote operation.  See "
"a description of the variable @t{ZFTP_VERBOSE} for more information on how "
"responses from the server may be printed."
msgstr ""

#. type: subsection
#: zsh.texi:31324
#, no-wrap
msgid "Subcommands"
msgstr ""

#. type: cindex
#: zsh.texi:31326
#, no-wrap
msgid "zftp, subcommands"
msgstr ""

#. type: cindex
#: zsh.texi:31330
#, no-wrap
msgid "FTP, starting a session"
msgstr ""

#. type: item
#: zsh.texi:31331
#, no-wrap
msgid ""
"@t{open} @var{host}[@t{:}@var{port}] [ @var{user} [ @var{password} [ "
"@var{account} ] ] ]"
msgstr ""

#. type: table
#: zsh.texi:31338
msgid ""
"Open a new FTP session to @var{host}, which may be the name of a TCP/IP "
"connected host or an IP number in the standard dot notation.  If the "
"argument is in the form @var{host}@t{:}@var{port}, open a connection to TCP "
"port @var{port} instead of the standard FTP port 21.  This may be the name "
"of a TCP service or a number: see the description of @t{ZFTP_PORT} below for "
"more information."
msgstr ""

#. type: table
#: zsh.texi:31344
msgid ""
"If IPv6 addresses in colon format are used, the @var{host} should be "
"surrounded by quoted square brackets to distinguish it from the @var{port}, "
"for example @t{'[fe80::203:baff:fe02:8b56]'}.  For consistency this is "
"allowed with all forms of @var{host}."
msgstr ""

#. type: table
#: zsh.texi:31350
msgid ""
"Remaining arguments are passed to the @t{login} subcommand.  Note that if no "
"arguments beyond @var{host} are supplied, @t{open} will @emph{not} "
"automatically call @t{login}.  If no arguments at all are supplied, @t{open} "
"will use the parameters set by the @t{params} subcommand."
msgstr ""

#. type: table
#: zsh.texi:31355
msgid ""
"After a successful open, the shell variables @t{ZFTP_HOST}, @t{ZFTP_PORT}, "
"@t{ZFTP_IP} and @t{ZFTP_SYSTEM} are available; see `Variables' below."
msgstr ""

#. type: item
#: zsh.texi:31356
#, no-wrap
msgid "@t{login} [ @var{name} [ @var{password} [ @var{account} ] ] ]"
msgstr ""

#. type: itemx
#: zsh.texi:31357
#, no-wrap
msgid "@t{user} [ @var{name} [ @var{password} [ @var{account} ] ] ]"
msgstr ""

#. type: table
#: zsh.texi:31364
msgid ""
"Login the user @var{name} with parameters @var{password} and @var{account}.  "
"Any of the parameters can be omitted, and will be read from standard input "
"if needed (@var{name} is always needed).  If standard input is a terminal, a "
"prompt for each one will be printed on standard error and @var{password} "
"will not be echoed.  If any of the parameters are not used, a warning "
"message is printed."
msgstr ""

#. type: table
#: zsh.texi:31369
msgid ""
"After a successful login, the shell variables @t{ZFTP_USER}, "
"@t{ZFTP_ACCOUNT} and @t{ZFTP_PWD} are available; see `Variables' below."
msgstr ""

#. type: table
#: zsh.texi:31373
msgid ""
"This command may be re-issued when a user is already logged in, and the "
"server will first be reinitialized for a new user."
msgstr ""

#. type: item
#: zsh.texi:31374
#, no-wrap
msgid ""
"@t{params} [ @var{host} [ @var{user} [ @var{password} [ @var{account} ] ] ] "
"]"
msgstr ""

#. type: itemx
#: zsh.texi:31375
#, no-wrap
msgid "@t{params} @t{-}"
msgstr ""

#. type: table
#: zsh.texi:31381
msgid ""
"Store the given parameters for a later @t{open} command with no arguments.  "
"Only those given on the command line will be remembered.  If no arguments "
"are given, the parameters currently set are printed, although the password "
"will appear as a line of stars; the return status is one if no parameters "
"were set, zero otherwise."
msgstr ""

#. type: table
#: zsh.texi:31393
msgid ""
"Any of the parameters may be specified as a `@t{?}', which may need to be "
"quoted to protect it from shell expansion.  In this case, the appropriate "
"parameter will be read from stdin as with the @t{login} subcommand, "
"including special handling of @var{password}.  If the `@t{?}' is followed by "
"a string, that is used as the prompt for reading the parameter instead of "
"the default message (any necessary punctuation and whitespace should be "
"included at the end of the prompt).  The first letter of the parameter "
"(only) may be quoted with a `@t{\\}'; hence an argument @t{\"\\\\$word\"} "
"guarantees that the string from the shell parameter @t{$word} will be "
"treated literally, whether or not it begins with a `@t{?}'."
msgstr ""

#. type: table
#: zsh.texi:31398
msgid ""
"If instead a single `@t{-}' is given, the existing parameters, if any, are "
"deleted.  In that case, calling @t{open} with no arguments will cause an "
"error."
msgstr ""

#. type: table
#: zsh.texi:31402
msgid ""
"The list of parameters is not deleted after a @t{close}, however it will be "
"deleted if the @t{zsh/zftp} module is unloaded."
msgstr ""

#. type: example
#: zsh.texi:31409
#, no-wrap
msgid "zftp params ftp.elsewhere.xx juser '?Password for juser: '\n"
msgstr ""

#. type: table
#: zsh.texi:31414
msgid ""
"will store the host @t{ftp.elsewhere.xx} and the user @t{juser} and then "
"prompt the user for the corresponding password with the given prompt."
msgstr ""

#. type: table
#: zsh.texi:31423
msgid ""
"Test the connection; if the server has reported that it has closed the "
"connection (maybe due to a timeout), return status 2; if no connection was "
"open anyway, return status 1; else return status 0.  The @t{test} subcommand "
"is silent, apart from messages printed by the @t{$ZFTP_VERBOSE} mechanism, "
"or error messages if the connection closes.  There is no network overhead "
"for this test."
msgstr ""

#. type: table
#: zsh.texi:31429
msgid ""
"The test is only supported on systems with either the @t{select(2)} or "
"@t{poll(2)} system calls; otherwise the message `@t{not supported on this "
"system}' is printed instead."
msgstr ""

#. type: table
#: zsh.texi:31433
msgid ""
"The @t{test} subcommand will automatically be called at the start of any "
"other subcommand for the current session when a connection is open."
msgstr ""

#. type: item
#: zsh.texi:31434
#, no-wrap
msgid "@t{cd} @var{directory}"
msgstr ""

#. type: table
#: zsh.texi:31437
msgid ""
"Change the remote directory to @var{directory}.  Also alters the shell "
"variable @t{ZFTP_PWD}."
msgstr ""

#. type: t{#1}
#: zsh.texi:31438
#, no-wrap
msgid "cdup"
msgstr ""

#. type: table
#: zsh.texi:31441
msgid ""
"Change the remote directory to the one higher in the directory tree.  Note "
"that @t{cd ..} will also work correctly on non-UNIX systems."
msgstr ""

#. type: item
#: zsh.texi:31442
#, no-wrap
msgid "@t{dir} [ @var{arg} ... ]"
msgstr ""

#. type: table
#: zsh.texi:31448
msgid ""
"Give a (verbose) listing of the remote directory.  The @var{arg}s are passed "
"directly to the server. The command's behaviour is implementation dependent, "
"but a UNIX server will typically interpret @var{arg}s as arguments to the "
"@t{ls} command and with no arguments return the result of `@t{ls -l}'. The "
"directory is listed to standard output."
msgstr ""

#. type: item
#: zsh.texi:31449
#, no-wrap
msgid "@t{ls} [ @var{arg} ... ]"
msgstr ""

#. type: table
#: zsh.texi:31454
msgid ""
"Give a (short) listing of the remote directory.  With no @var{arg}, produces "
"a raw list of the files in the directory, one per line.  Otherwise, up to "
"vagaries of the server implementation, behaves similar to @t{dir}."
msgstr ""

#. type: item
#: zsh.texi:31455
#, no-wrap
msgid "@t{type} [ @var{type} ]"
msgstr ""

#. type: table
#: zsh.texi:31459
msgid ""
"Change the type for the transfer to @var{type}, or print the current type if "
"@var{type} is absent.  The allowed values are `@t{A}' (ASCII), `@t{I}' "
"(Image, i.e. binary), or `@t{B}' (a synonym for `@t{I}')."
msgstr ""

#. type: table
#: zsh.texi:31465
msgid ""
"The FTP default for a transfer is ASCII.  However, if @t{zftp} finds that "
"the remote host is a UNIX machine with 8-bit byes, it will automatically "
"switch to using binary for file transfers upon @t{open}.  This can "
"subsequently be overridden."
msgstr ""

#. type: table
#: zsh.texi:31469
msgid ""
"The transfer type is only passed to the remote host when a data connection "
"is established; this command involves no network overhead."
msgstr ""

#. type: t{#1}
#: zsh.texi:31470
#, no-wrap
msgid "ascii"
msgstr ""

#. type: table
#: zsh.texi:31472
msgid "The same as @t{type A}."
msgstr ""

#. type: t{#1}
#: zsh.texi:31473
#, no-wrap
msgid "binary"
msgstr ""

#. type: table
#: zsh.texi:31475
msgid "The same as @t{type I}."
msgstr ""

#. type: item
#: zsh.texi:31476
#, no-wrap
msgid "@t{mode} [ @t{S} | @t{B} ]"
msgstr ""

#. type: table
#: zsh.texi:31479
msgid ""
"Set the mode type to stream (@t{S}) or block (@t{B}).  Stream mode is the "
"default; block mode is not widely supported."
msgstr ""

#. type: item
#: zsh.texi:31480
#, no-wrap
msgid "@t{remote} @var{file} ..."
msgstr ""

#. type: itemx
#: zsh.texi:31481
#, no-wrap
msgid "@t{local} [ @var{file} ... ]"
msgstr ""

#. type: table
#: zsh.texi:31491
msgid ""
"Print the size and last modification time of the remote or local files.  If "
"there is more than one item on the list, the name of the file is printed "
"first.  The first number is the file size, the second is the last "
"modification time of the file in the format @t{CCYYMMDDhhmmSS} consisting of "
"year, month, date, hour, minutes and seconds in GMT.  Note that this format, "
"including the length, is guaranteed, so that time strings can be directly "
"compared via the @t{[[} builtin's @t{<} and @t{>} operators, even if they "
"are too long to be represented as integers."
msgstr ""

#. type: table
#: zsh.texi:31496
msgid ""
"Not all servers support the commands for retrieving this information.  In "
"that case, the @t{remote} command will print nothing and return status 2, "
"compared with status 1 for a file not found."
msgstr ""

#. type: table
#: zsh.texi:31502
msgid ""
"The @t{local} command (but not @t{remote}) may be used with no arguments, in "
"which case the information comes from examining file descriptor zero.  This "
"is the same file as seen by a @t{put} command with no further redirection."
msgstr ""

#. type: item
#: zsh.texi:31503
#, no-wrap
msgid "@t{get} @var{file} ..."
msgstr ""

#. type: table
#: zsh.texi:31506
msgid ""
"Retrieve all @var{file}s from the server, concatenating them and sending "
"them to standard output."
msgstr ""

#. type: item
#: zsh.texi:31507
#, no-wrap
msgid "@t{put} @var{file} ..."
msgstr ""

#. type: table
#: zsh.texi:31510
msgid ""
"For each @var{file}, read a file from standard input and send that to the "
"remote host with the given name."
msgstr ""

#. type: item
#: zsh.texi:31511
#, no-wrap
msgid "@t{append} @var{file} ..."
msgstr ""

#. type: table
#: zsh.texi:31514
msgid ""
"As @t{put}, but if the remote @var{file} already exists, data is appended to "
"it instead of overwriting it."
msgstr ""

#. type: item
#: zsh.texi:31515
#, no-wrap
msgid "@t{getat} @var{file} @var{point}"
msgstr ""

#. type: itemx
#: zsh.texi:31516
#, no-wrap
msgid "@t{putat} @var{file} @var{point}"
msgstr ""

#. type: itemx
#: zsh.texi:31517
#, no-wrap
msgid "@t{appendat} @var{file} @var{point}"
msgstr ""

#. type: table
#: zsh.texi:31523
msgid ""
"Versions of @t{get}, @t{put} and @t{append} which will start the transfer at "
"the given @var{point} in the remote @var{file}.  This is useful for "
"appending to an incomplete local file.  However, note that this ability is "
"not universally supported by servers (and is not quite the behaviour "
"specified by the standard)."
msgstr ""

#. type: item
#: zsh.texi:31524
#, no-wrap
msgid "@t{delete} @var{file} ..."
msgstr ""

#. type: table
#: zsh.texi:31526
msgid "Delete the list of files on the server."
msgstr ""

#. type: item
#: zsh.texi:31527
#, no-wrap
msgid "@t{mkdir} @var{directory}"
msgstr ""

#. type: table
#: zsh.texi:31529
msgid "Create a new directory @var{directory} on the server."
msgstr ""

#. type: item
#: zsh.texi:31530
#, no-wrap
msgid "@t{rmdir} @var{directory}"
msgstr ""

#. type: table
#: zsh.texi:31532
msgid "Delete the directory @var{directory} on the server."
msgstr ""

#. type: item
#: zsh.texi:31533
#, no-wrap
msgid "@t{rename} @var{old-name} @var{new-name}"
msgstr ""

#. type: table
#: zsh.texi:31535
msgid "Rename file @var{old-name} to @var{new-name} on the server."
msgstr ""

#. type: item
#: zsh.texi:31536
#, no-wrap
msgid "@t{site} @var{arg} ..."
msgstr ""

#. type: table
#: zsh.texi:31539
msgid ""
"Send a host-specific command to the server.  You will probably only need "
"this if instructed by the server to use it."
msgstr ""

#. type: item
#: zsh.texi:31540
#, no-wrap
msgid "@t{quote} @var{arg} ..."
msgstr ""

#. type: table
#: zsh.texi:31547
msgid ""
"Send the raw FTP command sequence to the server.  You should be familiar "
"with the FTP command set as defined in RFC959 before doing this.  Useful "
"commands may include @t{STAT} and @t{HELP}.  Note also the mechanism for "
"returning messages as described for the variable @t{ZFTP_VERBOSE} below, in "
"particular that all messages from the control connection are sent to "
"standard error."
msgstr ""

#. type: t{#1}
#: zsh.texi:31548
#, no-wrap
msgid "close"
msgstr ""

#. type: t{#1}
#: zsh.texi:31549
#, no-wrap
msgid "quit"
msgstr ""

#. type: table
#: zsh.texi:31553
msgid ""
"Close the current data connection.  This unsets the shell parameters "
"@t{ZFTP_HOST}, @t{ZFTP_PORT}, @t{ZFTP_IP}, @t{ZFTP_SYSTEM}, @t{ZFTP_USER}, "
"@t{ZFTP_ACCOUNT}, @t{ZFTP_PWD}, @t{ZFTP_TYPE} and @t{ZFTP_MODE}."
msgstr ""

#. type: item
#: zsh.texi:31554
#, no-wrap
msgid "@t{session} [ @var{sessname} ]"
msgstr ""

#. type: table
#: zsh.texi:31560
msgid ""
"Allows multiple FTP sessions to be used at once.  The name of the session is "
"an arbitrary string of characters; the default session is called "
"`@t{default}'.  If this command is called without an argument, it will list "
"all the current sessions; with an argument, it will either switch to the "
"existing session called @var{sessname}, or create a new session of that "
"name."
msgstr ""

#. type: table
#: zsh.texi:31569
msgid ""
"Each session remembers the status of the connection, the set of "
"connection-specific shell parameters (the same set as are unset when a "
"connection closes, as given in the description of @t{close}), and any user "
"parameters specified with the @t{params} subcommand.  Changing to a previous "
"session restores those values; changing to a new session initialises them in "
"the same way as if @t{zftp} had just been loaded.  The name of the current "
"session is given by the parameter @t{ZFTP_SESSION}."
msgstr ""

#. type: item
#: zsh.texi:31570
#, no-wrap
msgid "@t{rmsession} [ @var{sessname} ]"
msgstr ""

#. type: table
#: zsh.texi:31579
msgid ""
"Delete a session; if a name is not given, the current session is deleted.  "
"If the current session is deleted, the earliest existing session becomes the "
"new current session, otherwise the current session is not changed.  If the "
"session being deleted is the only one, a new session called `@t{default}' is "
"created and becomes the current session; note that this is a new session "
"even if the session being deleted is also called `@t{default}'. It is "
"recommended that sessions not be deleted while background commands which use "
"@t{zftp} are still active."
msgstr ""

#. type: cindex
#: zsh.texi:31586
#, no-wrap
msgid "zftp, parameters"
msgstr ""

#. type: Plain text
#: zsh.texi:31589
msgid ""
"The following shell parameters are used by @t{zftp}.  Currently none of them "
"are special."
msgstr ""

#. type: t{#1}
#: zsh.texi:31592 zsh.texi:31593
#, no-wrap
msgid "ZFTP_TMOUT"
msgstr ""

#. type: table
#: zsh.texi:31600
msgid ""
"Integer.  The time in seconds to wait for a network operation to complete "
"before returning an error.  If this is not set when the module is loaded, it "
"will be given the default value 60.  A value of zero turns off timeouts.  If "
"a timeout occurs on the control connection it will be closed.  Use a larger "
"value if this occurs too frequently."
msgstr ""

#. type: t{#1}
#: zsh.texi:31601 zsh.texi:31602
#, no-wrap
msgid "ZFTP_IP"
msgstr ""

#. type: table
#: zsh.texi:31604
msgid "Readonly.  The IP address of the current connection in dot notation."
msgstr ""

#. type: t{#1}
#: zsh.texi:31605 zsh.texi:31606
#, no-wrap
msgid "ZFTP_HOST"
msgstr ""

#. type: table
#: zsh.texi:31611
msgid ""
"Readonly.  The hostname of the current remote server.  If the host was "
"opened as an IP number, @t{ZFTP_HOST} contains that instead; this saves the "
"overhead for a name lookup, as IP numbers are most commonly used when a "
"nameserver is unavailable."
msgstr ""

#. type: t{#1}
#: zsh.texi:31612 zsh.texi:31613
#, no-wrap
msgid "ZFTP_PORT"
msgstr ""

#. type: table
#: zsh.texi:31617
msgid ""
"Readonly.  The number of the remote TCP port to which the connection is open "
"(even if the port was originally specified as a named service).  Usually "
"this is the standard FTP port, 21."
msgstr ""

#. type: table
#: zsh.texi:31624
msgid ""
"In the unlikely event that your system does not have the appropriate "
"conversion functions, this appears in network byte order.  If your system is "
"little-endian, the port then consists of two swapped bytes and the standard "
"port will be reported as 5376.  In that case, numeric ports passed to "
"@t{zftp open} will also need to be in this format."
msgstr ""

#. type: t{#1}
#: zsh.texi:31625 zsh.texi:31626
#, no-wrap
msgid "ZFTP_SYSTEM"
msgstr ""

#. type: table
#: zsh.texi:31631
msgid ""
"Readonly.  The system type string returned by the server in response to an "
"FTP @t{SYST} request.  The most interesting case is a string beginning "
"@t{\"UNIX Type: L8\"}, which ensures maximum compatibility with a local UNIX "
"host."
msgstr ""

#. type: t{#1}
#: zsh.texi:31632 zsh.texi:31633
#, no-wrap
msgid "ZFTP_TYPE"
msgstr ""

#. type: table
#: zsh.texi:31636
msgid ""
"Readonly.  The type to be used for data transfers , either `@t{A}' or "
"`@t{I}'.  Use the @t{type} subcommand to change this."
msgstr ""

#. type: t{#1}
#: zsh.texi:31637 zsh.texi:31638
#, no-wrap
msgid "ZFTP_USER"
msgstr ""

#. type: table
#: zsh.texi:31640
msgid "Readonly.  The username currently logged in, if any."
msgstr ""

#. type: t{#1}
#: zsh.texi:31641 zsh.texi:31642
#, no-wrap
msgid "ZFTP_ACCOUNT"
msgstr ""

#. type: table
#: zsh.texi:31645
msgid ""
"Readonly.  The account name of the current user, if any.  Most servers do "
"not require an account name."
msgstr ""

#. type: t{#1}
#: zsh.texi:31646 zsh.texi:31647
#, no-wrap
msgid "ZFTP_PWD"
msgstr ""

#. type: table
#: zsh.texi:31649
msgid "Readonly.  The current directory on the server."
msgstr ""

#. type: t{#1}
#: zsh.texi:31650 zsh.texi:31651
#, no-wrap
msgid "ZFTP_CODE"
msgstr ""

#. type: table
#: zsh.texi:31655
msgid ""
"Readonly.  The three digit code of the last FTP reply from the server as a "
"string.  This can still be read after the connection is closed, and is not "
"changed when the current session changes."
msgstr ""

#. type: t{#1}
#: zsh.texi:31656 zsh.texi:31657
#, no-wrap
msgid "ZFTP_REPLY"
msgstr ""

#. type: table
#: zsh.texi:31661
msgid ""
"Readonly.  The last line of the last reply sent by the server.  This can "
"still be read after the connection is closed, and is not changed when the "
"current session changes."
msgstr ""

#. type: t{#1}
#: zsh.texi:31662 zsh.texi:31663
#, no-wrap
msgid "ZFTP_SESSION"
msgstr ""

#. type: table
#: zsh.texi:31666
msgid ""
"Readonly.  The name of the current FTP session; see the description of the "
"@t{session} subcommand."
msgstr ""

#. type: t{#1}
#: zsh.texi:31667 zsh.texi:31668
#, no-wrap
msgid "ZFTP_PREFS"
msgstr ""

#. type: table
#: zsh.texi:31671
msgid ""
"A string of preferences for altering aspects of @t{zftp}'s behaviour.  Each "
"preference is a single character.  The following are defined:"
msgstr ""

#. type: table
#: zsh.texi:31679
msgid ""
"Passive: attempt to make the remote server initiate data transfers.  This is "
"slightly more efficient than sendport mode.  If the letter @t{S} occurs "
"later in the string, @t{zftp} will use sendport mode if passive mode is not "
"available."
msgstr ""

#. type: table
#: zsh.texi:31684
msgid ""
"Sendport: initiate transfers by the FTP @t{PORT} command.  If this occurs "
"before any @t{P} in the string, passive mode will never be attempted."
msgstr ""

#. type: table
#: zsh.texi:31691
msgid ""
"Dumb: use only the bare minimum of FTP commands.  This prevents the "
"variables @t{ZFTP_SYSTEM} and @t{ZFTP_PWD} from being set, and will mean all "
"connections default to ASCII type.  It may prevent @t{ZFTP_SIZE} from being "
"set during a transfer if the server does not send it anyway (many servers "
"do)."
msgstr ""

#. type: table
#: zsh.texi:31698
msgid ""
"If @t{ZFTP_PREFS} is not set when @t{zftp} is loaded, it will be set to a "
"default of `@t{PS}', i.e. use passive mode if available, otherwise fall back "
"to sendport mode."
msgstr ""

#. type: t{#1}
#: zsh.texi:31699 zsh.texi:31700
#, no-wrap
msgid "ZFTP_VERBOSE"
msgstr ""

#. type: table
#: zsh.texi:31707
msgid ""
"A string of digits between 0 and 5 inclusive, specifying which responses "
"from the server should be printed.  All responses go to standard error.  If "
"any of the numbers 1 to 5 appear in the string, raw responses from the "
"server with reply codes beginning with that digit will be printed to "
"standard error.  The first digit of the three digit reply code is defined by "
"RFC959 to correspond to:"
msgstr ""

#. type: table
#: zsh.texi:31712
msgid "A positive preliminary reply."
msgstr ""

#. type: table
#: zsh.texi:31715
msgid "A positive completion reply."
msgstr ""

#. type: table
#: zsh.texi:31718
msgid "A positive intermediate reply."
msgstr ""

#. type: table
#: zsh.texi:31721
msgid "A transient negative completion reply."
msgstr ""

#. type: table
#: zsh.texi:31724
msgid "A permanent negative completion reply."
msgstr ""

#. type: table
#: zsh.texi:31732
msgid ""
"It should be noted that, for unknown reasons, the reply `Service not "
"available', which forces termination of a connection, is classified as 421, "
"i.e. `transient negative', an interesting interpretation of the word "
"`transient'."
msgstr ""

#. type: table
#: zsh.texi:31740
msgid ""
"The code 0 is special: it indicates that all but the last line of multiline "
"replies read from the server will be printed to standard error in a "
"processed format.  By convention, servers use this mechanism for sending "
"information for the user to read.  The appropriate reply code, if it matches "
"the same response, takes priority."
msgstr ""

#. type: table
#: zsh.texi:31746
msgid ""
"If @t{ZFTP_VERBOSE} is not set when @t{zftp} is loaded, it will be set to "
"the default value @t{450}, i.e., messages destined for the user and all "
"errors will be printed.  A null string is valid and specifies that no "
"messages should be printed."
msgstr ""

#. type: cindex
#: zsh.texi:31753
#, no-wrap
msgid "zftp, functions"
msgstr ""

#. type: findex
#: zsh.texi:31757
#, no-wrap
msgid "zftp_chpwd, specification"
msgstr ""

#. type: t{#1}
#: zsh.texi:31758 zsh.texi:35225
#, no-wrap
msgid "zftp_chpwd"
msgstr ""

#. type: table
#: zsh.texi:31763
msgid ""
"If this function is set by the user, it is called every time the directory "
"changes on the server, including when a user is logged in, or when a "
"connection is closed.  In the last case, @t{$ZFTP_PWD} will be unset; "
"otherwise it will reflect the new directory."
msgstr ""

#. type: findex
#: zsh.texi:31764
#, no-wrap
msgid "zftp_progress, specification"
msgstr ""

#. type: t{#1}
#: zsh.texi:31765 zsh.texi:35248
#, no-wrap
msgid "zftp_progress"
msgstr ""

#. type: table
#: zsh.texi:31772
msgid ""
"If this function is set by the user, it will be called during a @t{get}, "
"@t{put} or @t{append} operation each time sufficient data has been received "
"from the host.  During a @t{get}, the data is sent to standard output, so it "
"is vital that this function should write to standard error or directly to "
"the terminal, @emph{not} to standard output."
msgstr ""

#. type: table
#: zsh.texi:31776
msgid ""
"When it is called with a transfer in progress, the following additional "
"shell parameters are set:"
msgstr ""

#. type: t{#1}
#: zsh.texi:31779 zsh.texi:31780
#, no-wrap
msgid "ZFTP_FILE"
msgstr ""

#. type: table
#: zsh.texi:31782
msgid "The name of the remote file being transferred from or to."
msgstr ""

#. type: t{#1}
#: zsh.texi:31783 zsh.texi:31784
#, no-wrap
msgid "ZFTP_TRANSFER"
msgstr ""

#. type: table
#: zsh.texi:31786
msgid "A @t{G} for a @t{get} operation and a @t{P} for a @t{put} operation."
msgstr ""

#. type: t{#1}
#: zsh.texi:31787 zsh.texi:31788
#, no-wrap
msgid "ZFTP_SIZE"
msgstr ""

#. type: table
#: zsh.texi:31795
msgid ""
"The total size of the complete file being transferred: the same as the first "
"value provided by the @t{remote} and @t{local} subcommands for a particular "
"file.  If the server cannot supply this value for a remote file being "
"retrieved, it will not be set.  If input is from a pipe the value may be "
"incorrect and correspond simply to a full pipe buffer."
msgstr ""

#. type: t{#1}
#: zsh.texi:31796 zsh.texi:31797
#, no-wrap
msgid "ZFTP_COUNT"
msgstr ""

#. type: table
#: zsh.texi:31800
msgid ""
"The amount of data so far transferred; a number between zero and "
"@t{$ZFTP_SIZE}, if that is set.  This number is always available."
msgstr ""

#. type: table
#: zsh.texi:31810
msgid ""
"The function is initially called with @t{ZFTP_TRANSFER} set appropriately "
"and @t{ZFTP_COUNT} set to zero.  After the transfer is finished, the "
"function will be called one more time with @t{ZFTP_TRANSFER} set to @t{GF} "
"or @t{PF}, in case it wishes to tidy up.  It is otherwise never called twice "
"with the same value of @t{ZFTP_COUNT}."
msgstr ""

#. type: table
#: zsh.texi:31815
msgid ""
"Sometimes the progress meter may cause disruption.  It is up to the user to "
"decide whether the function should be defined and to use @t{unfunction} when "
"necessary."
msgstr ""

#. type: subsection
#: zsh.texi:31820
#, no-wrap
msgid "Problems"
msgstr ""

#. type: cindex
#: zsh.texi:31822
#, no-wrap
msgid "zftp, problems"
msgstr ""

#. type: Plain text
#: zsh.texi:31831
msgid ""
"A connection may not be opened in the left hand side of a pipe as this "
"occurs in a subshell and the file information is not updated in the main "
"shell.  In the case of type or mode changes or closing the connection in a "
"subshell, the information is returned but variables are not updated until "
"the next call to @t{zftp}.  Other status changes in subshells will not be "
"reflected by changes to the variables (but should be otherwise harmless)."
msgstr ""

#. type: Plain text
#: zsh.texi:31838
msgid ""
"Deleting sessions while a @t{zftp} command is active in the background can "
"have unexpected effects, even if it does not use the session being deleted.  "
"This is because all shell subprocesses share information on the state of all "
"connections, and deleting a session changes the ordering of that "
"information."
msgstr ""

#. type: Plain text
#: zsh.texi:31845
msgid ""
"On some operating systems, the control connection is not valid after a "
"fork(), so that operations in subshells, on the left hand side of a "
"pipeline, or in the background are not possible, as they should be.  This is "
"presumably a bug in the operating system."
msgstr ""

#. type: node
#: zsh.texi:31845 zsh.texi:31854 zsh.texi:31856 zsh.texi:31888
#, no-wrap
msgid "The zsh/zleparameter Module"
msgstr ""

#. type: Plain text
#: zsh.texi:31854
msgid ""
"The @t{zsh/zle} module contains the Zsh Line Editor.  See @ref{Zsh Line "
"Editor}."
msgstr ""

#. type: node
#: zsh.texi:31854 zsh.texi:31888 zsh.texi:31890 zsh.texi:31959
#, no-wrap
msgid "The zsh/zprof Module"
msgstr ""

#. type: Plain text
#: zsh.texi:31864
msgid ""
"The @t{zsh/zleparameter} module defines two special parameters that can be "
"used to access internal information of the Zsh Line Editor (see @ref{Zsh "
"Line Editor})."
msgstr ""

#. type: table
#: zsh.texi:31870
msgid "This array contains the names of the keymaps currently defined."
msgstr ""

#. type: table
#: zsh.texi:31885
msgid ""
"This associative array contains one entry per widget. The name of the widget "
"is the key and the value gives information about the widget. It is either "
"the string `@t{builtin}' for builtin widgets, a string of the form "
"`@t{user:}@var{name}' for user-defined widgets, where @var{name} is the name "
"of the shell function implementing the widget, a string of the form "
"`@t{completion:}@var{type}@t{:}@var{name}' for completion widgets, or a null "
"value if the widget is not yet fully defined.  In the penultimate case, "
"@var{type} is the name of the builtin widget the completion widget imitates "
"in its behavior and @var{name} is the name of the shell function "
"implementing the completion widget."
msgstr ""

#. type: node
#: zsh.texi:31888 zsh.texi:31959 zsh.texi:31961 zsh.texi:32064
#, no-wrap
msgid "The zsh/zpty Module"
msgstr ""

#. type: cindex
#: zsh.texi:31894
#, no-wrap
msgid "functions, profiling"
msgstr ""

#. type: Plain text
#: zsh.texi:31899
msgid ""
"When loaded, the @t{zsh/zprof} causes shell functions to be profiled.  The "
"profiling results can be obtained with the @t{zprof} builtin command made "
"available by this module.  There is no way to turn profiling off other than "
"unloading the module."
msgstr ""

#. type: item
#: zsh.texi:31903
#, no-wrap
msgid "@t{zprof} [ @t{-c} ]"
msgstr ""

#. type: table
#: zsh.texi:31907
msgid ""
"Without the @t{-c} option, @t{zprof} lists profiling results to standard "
"output.  The format is comparable to that of commands like @t{gprof}."
msgstr ""

#. type: table
#: zsh.texi:31922
msgid ""
"At the top there is a summary listing all functions that were called at "
"least once.  This summary is sorted in decreasing order of the amount of "
"time spent in each.  The lines contain the number of the function in order, "
"which is used in other parts of the list in suffixes of the form "
"`@t{[}@var{num}@t{]}', then the number of calls made to the function.  The "
"next three columns list the time in milliseconds spent in the function and "
"its descendants, the average time in milliseconds spent in the function and "
"its descendants per call and the percentage of time spent in all shell "
"functions used in this function and its descendants.  The following three "
"columns give the same information, but counting only the time spent in the "
"function itself.  The final column shows the name of the function."
msgstr ""

#. type: table
#: zsh.texi:31934
msgid ""
"After the summary, detailed information about every function that was "
"invoked is listed, sorted in decreasing order of the amount of time spent in "
"each function and its descendants.  Each of these entries consists of "
"descriptions for the functions that called the function described, the "
"function itself, and the functions that were called from it.  The "
"description for the function itself has the same format as in the summary "
"(and shows the same information).  The other lines don't show the number of "
"the function at the beginning and have their function named indented to make "
"it easier to distinguish the line showing the function described in the "
"section from the surrounding lines."
msgstr ""

#. type: table
#: zsh.texi:31944
msgid ""
"The information shown in this case is almost the same as in the summary, but "
"only refers to the call hierarchy being displayed.  For example, for a "
"calling function the column showing the total running time lists the time "
"spent in the described function and its descendants only for the times when "
"it was called from that particular calling function.  Likewise, for a called "
"function, this columns lists the total time spent in the called function and "
"its descendants only for the times when it was called from the function "
"described."
msgstr ""

#. type: table
#: zsh.texi:31949
msgid ""
"Also in this case, the column showing the number of calls to a function also "
"shows a slash and then the total number of invocations made to the called "
"function."
msgstr ""

#. type: table
#: zsh.texi:31956
msgid ""
"As long as the @t{zsh/zprof} module is loaded, profiling will be done and "
"multiple invocations of the @t{zprof} builtin command will show the times "
"and numbers of calls since the module was loaded.  With the @t{-c} option, "
"the @t{zprof} builtin command will reset its internal counters and will not "
"show the listing."
msgstr ""

#. type: node
#: zsh.texi:31959 zsh.texi:32064 zsh.texi:32066 zsh.texi:32146
#, no-wrap
msgid "The zsh/zselect Module"
msgstr ""

#. type: Plain text
#: zsh.texi:31966
msgid "The @t{zsh/zpty} module offers one builtin:"
msgstr ""

#. type: item
#: zsh.texi:31970
#, no-wrap
msgid "@t{zpty} [ @t{-e} ] [ @t{-b} ] @var{name} [ @var{arg} ... ]"
msgstr ""

#. type: table
#: zsh.texi:31977
msgid ""
"The arguments following @var{name} are concatenated with spaces between, "
"then executed as a command, as if passed to the @t{eval} builtin.  The "
"command runs under a newly assigned pseudo-terminal; this is useful for "
"running commands non-interactively which expect an interactive environment.  "
"The @var{name} is not part of the command, but is used to refer to this "
"command in later calls to @t{zpty}."
msgstr ""

#. type: table
#: zsh.texi:31981
msgid ""
"With the @t{-e} option, the pseudo-terminal is set up so that input "
"characters are echoed."
msgstr ""

#. type: table
#: zsh.texi:31985
msgid ""
"With the @t{-b} option, input to and output from the pseudo-terminal are "
"made non-blocking."
msgstr ""

#. type: table
#: zsh.texi:31993
msgid ""
"The shell parameter @t{REPLY} is set to the file descriptor assigned to the "
"master side of the pseudo-terminal.  This allows the terminal to be "
"monitored with ZLE descriptor handlers (see @ref{Zle Builtins}) or "
"manipulated with @t{sysread} and @t{syswrite} (see @ref{The zsh/system "
"Module}).  @emph{Warning}: Use of @t{sysread} and @t{syswrite} is @emph{not} "
"recommended; use @t{zpty -r} and @t{zpty -w} unless you know exactly what "
"you are doing."
msgstr ""

#. type: item
#: zsh.texi:31994
#, no-wrap
msgid "@t{zpty} @t{-d} [ @var{name} ... ]"
msgstr ""

#. type: table
#: zsh.texi:31999
msgid ""
"The second form, with the @t{-d} option, is used to delete commands "
"previously started, by supplying a list of their @var{name}s.  If no "
"@var{name} is given, all commands are deleted.  Deleting a command causes "
"the HUP signal to be sent to the corresponding process."
msgstr ""

#. type: item
#: zsh.texi:32000
#, no-wrap
msgid "@t{zpty} @t{-w} [ @t{-n} ] @var{name} [ @var{string} ... ]"
msgstr ""

#. type: table
#: zsh.texi:32004
msgid ""
"The @t{-w} option can be used to send the to command @var{name} the given "
"@var{string}s as input (separated by spaces).  If the @t{-n} option is "
"@emph{not} given, a newline is added at the end."
msgstr ""

#. type: table
#: zsh.texi:32010
msgid ""
"If no @var{string} is provided, the standard input is copied to the "
"pseudo-terminal; this may stop before copying the full input if the "
"pseudo-terminal is non-blocking.  The exact input is always copied: the "
"@t{-n} option is not applied."
msgstr ""

#. type: table
#: zsh.texi:32015
msgid ""
"Note that the command under the pseudo-terminal sees this input as if it "
"were typed, so beware when sending special tty driver characters such as "
"word-erase, line-kill, and end-of-file."
msgstr ""

#. type: item
#: zsh.texi:32016
#, no-wrap
msgid "@t{zpty} @t{-r} [ @t{-mt} ] @var{name} [ @var{param} [ @var{pattern} ] ]"
msgstr ""

#. type: table
#: zsh.texi:32023
msgid ""
"The @t{-r} option can be used to read the output of the command @var{name}.  "
"With only a @var{name} argument, the output read is copied to the standard "
"output.  Unless the pseudo-terminal is non-blocking, copying continues until "
"the command under the pseudo-terminal exits; when non-blocking, only as much "
"output as is immediately available is copied.  The return status is zero if "
"any output is copied."
msgstr ""

#. type: table
#: zsh.texi:32029
msgid ""
"When also given a @var{param} argument, at most one line is read and stored "
"in the parameter named @var{param}.  Less than a full line may be read if "
"the pseudo-terminal is non-blocking.  The return status is zero if at least "
"one character is stored in @var{param}."
msgstr ""

#. type: table
#: zsh.texi:32039
msgid ""
"If a @var{pattern} is given as well, output is read until the whole string "
"read matches the @var{pattern}, even in the non-blocking case.  The return "
"status is zero if the string read matches the pattern, or if the command has "
"exited but at least one character could still be read.  If the option @t{-m} "
"is present, the return status is zero only if the pattern matches.  As of "
"this writing, a maximum of one megabyte of output can be consumed this way; "
"if a full megabyte is read without matching the pattern, the return status "
"is non-zero."
msgstr ""

#. type: table
#: zsh.texi:32043
msgid ""
"In all cases, the return status is non-zero if nothing could be read, and is "
"@t{2} if this is because the command has finished."
msgstr ""

#. type: table
#: zsh.texi:32051
msgid ""
"If the @t{-r} option is combined with the @t{-t} option, @t{zpty} tests "
"whether output is available before trying to read.  If no output is "
"available, @t{zpty} immediately returns the status @t{1}.  When used with a "
"@var{pattern}, the behaviour on a failed poll is similar to when the command "
"has exited: the return value is zero if at least one character could still "
"be read even if the pattern failed to match."
msgstr ""

#. type: item
#: zsh.texi:32052
#, no-wrap
msgid "@t{zpty} @t{-t} @var{name}"
msgstr ""

#. type: table
#: zsh.texi:32056
msgid ""
"The @t{-t} option without the @t{-r} option can be used to test whether the "
"command @var{name} is still running.  It returns a zero status if the "
"command is running and a non-zero value otherwise."
msgstr ""

#. type: item
#: zsh.texi:32057
#, no-wrap
msgid "@t{zpty} [ @t{-L} ]"
msgstr ""

#. type: table
#: zsh.texi:32061
msgid ""
"The last form, without any arguments, is used to list the commands currently "
"defined.  If the @t{-L} option is given, this is done in the form of calls "
"to the @t{zpty} builtin."
msgstr ""

#. type: Plain text
#: zsh.texi:32071
msgid "The @t{zsh/zselect} module makes available one builtin command:"
msgstr ""

#. type: findex
#: zsh.texi:32074
#, no-wrap
msgid "zselect"
msgstr ""

#. type: cindex
#: zsh.texi:32075
#, no-wrap
msgid "select, system call"
msgstr ""

#. type: cindex
#: zsh.texi:32076
#, no-wrap
msgid "file descriptors, waiting for"
msgstr ""

#. type: item
#: zsh.texi:32077
#, no-wrap
msgid ""
"@t{zselect} [ @t{-rwe} ] [ @t{-t} @var{timeout} ] [ @t{-a} @var{array} ] [ "
"@t{-A} @var{assoc} ] [ @var{fd} ... ]"
msgstr ""

#. type: table
#: zsh.texi:32085
msgid ""
"The @t{zselect} builtin is a front-end to the `select' system call, which "
"blocks until a file descriptor is ready for reading or writing, or has an "
"error condition, with an optional timeout.  If this is not available on your "
"system, the command prints an error message and returns status 2 (normal "
"errors return status 1).  For more information, see your system's "
"documentation for select(3).  Note there is no connection with the shell "
"builtin of the same name."
msgstr ""

#. type: table
#: zsh.texi:32095
msgid ""
"Arguments and options may be intermingled in any order.  Non-option "
"arguments are file descriptors, which must be decimal integers.  By default, "
"file descriptors are to be tested for reading, i.e. @t{zselect} will return "
"when data is available to be read from the file descriptor, or more "
"precisely, when a read operation from the file descriptor will not block.  "
"After a @t{-r}, @t{-w} and @t{-e}, the given file descriptors are to be "
"tested for reading, writing, or error conditions.  These options and an "
"arbitrary list of file descriptors may be given in any order."
msgstr ""

#. type: table
#: zsh.texi:32103
msgid ""
"(The presence of an `error condition' is not well defined in the "
"documentation for many implementations of the select system call.  According "
"to recent versions of the POSIX specification, it is really an "
"@emph{exception} condition, of which the only standard example is "
"out-of-band data received on a socket.  So zsh users are unlikely to find "
"the @t{-e} option useful.)"
msgstr ""

#. type: table
#: zsh.texi:32111
msgid ""
"The option `@t{-t} @var{timeout}' specifies a timeout in hundredths of a "
"second.  This may be zero, in which case the file descriptors will simply be "
"polled and @t{zselect} will return immediately.  It is possible to call "
"zselect with no file descriptors and a non-zero timeout for use as a "
"finer-grained replacement for `sleep'; note, however, the return status is "
"always 1 for a timeout."
msgstr ""

#. type: table
#: zsh.texi:32118
msgid ""
"The option `@t{-a} @var{array}' indicates that @var{array} should be set to "
"indicate the file descriptor(s) which are ready.  If the option is not "
"given, the array @t{reply} will be used for this purpose.  The array will "
"contain a string similar to the arguments for @t{zselect}.  For example,"
msgstr ""

#. type: example
#: zsh.texi:32122
#, no-wrap
msgid "zselect -t 0 -r 0 -w 1\n"
msgstr ""

#. type: table
#: zsh.texi:32128
msgid ""
"might return immediately with status 0 and @t{$reply} containing `@t{-r 0 -w "
"1}' to show that both file descriptors are ready for the requested "
"operations."
msgstr ""

#. type: table
#: zsh.texi:32136
msgid ""
"The option `@t{-A} @var{assoc}' indicates that the associative array "
"@var{assoc} should be set to indicate the file descriptor(s)  which are "
"ready.  This option overrides the option @t{-a}, nor will @t{reply} be "
"modified.  The keys of @t{assoc} are the file descriptors, and the "
"corresponding values are any of the characters `@t{rwe}' to indicate the "
"condition."
msgstr ""

#. type: table
#: zsh.texi:32143
msgid ""
"The command returns status 0 if some file descriptors are ready for "
"reading.  If the operation timed out, or a timeout of 0 was given and no "
"file descriptors were ready, or there was an error, it returns status 1 and "
"the array will not be set (nor modified in any way).  If there was an error "
"in the select operation the appropriate error message is printed."
msgstr ""

#. type: cindex
#: zsh.texi:32152
#, no-wrap
msgid "builtins, utility"
msgstr ""

#. type: Plain text
#: zsh.texi:32154
msgid "The @t{zsh/zutil} module only adds some builtins:"
msgstr ""

#. type: item
#: zsh.texi:32158 zsh.texi:32224
#, no-wrap
msgid "@t{zstyle} [ @t{-L} [ @var{metapattern} [ @var{style} ] ] ]"
msgstr ""

#. type: itemx
#: zsh.texi:32159
#, no-wrap
msgid ""
"@t{zstyle} [ @t{-e} | @t{-} | @t{-}@t{-} ] @var{pattern} @var{style} "
"@var{string} ..."
msgstr ""

#. type: item
#: zsh.texi:32160 zsh.texi:32252
#, no-wrap
msgid "@t{zstyle -d} [ @var{pattern} [ @var{style} ... ] ]"
msgstr ""

#. type: item
#: zsh.texi:32161 zsh.texi:32258
#, no-wrap
msgid "@t{zstyle -g} @var{name} [ @var{pattern} [ @var{style} ] ]"
msgstr ""

#. type: itemx
#: zsh.texi:32162
#, no-wrap
msgid ""
"@t{zstyle -}@{@t{a}|@t{b}|@t{s}@} @var{context} @var{style} @var{name} [ "
"@var{sep} ]"
msgstr ""

#. type: itemx
#: zsh.texi:32163
#, no-wrap
msgid "@t{zstyle -}@{@t{T}|@t{t}@} @var{context} @var{style} [ @var{string} ... ]"
msgstr ""

#. type: item
#: zsh.texi:32164 zsh.texi:32314
#, no-wrap
msgid "@t{zstyle -m} @var{context} @var{style} @var{pattern}"
msgstr ""

#. type: table
#: zsh.texi:32171
msgid ""
"This builtin command is used to define and lookup styles.  Styles are pairs "
"of names and values, where the values consist of any number of strings.  "
"They are stored together with patterns and lookup is done by giving a "
"string, called the `@emph{context}', which is matched against the patterns.  "
"The definition stored for the most specific pattern that matches will be "
"returned."
msgstr ""

#. type: table
#: zsh.texi:32182
msgid ""
"A pattern is considered to be more specific than another if it contains more "
"components (substrings separated by colons) or if the patterns for the "
"components are more specific, where simple strings are considered to be more "
"specific than patterns and complex patterns are considered to be more "
"specific than the pattern `@t{*}'.  A `@t{*}' in the pattern will match zero "
"or more characters in the context; colons are not treated specially in this "
"regard.  If two patterns are equally specific, the tie is broken in favour "
"of the pattern that was defined first."
msgstr ""

#. type: kindex
#: zsh.texi:32185
#, no-wrap
msgid "preferred-precipitation, example style"
msgstr ""

#. type: findex
#: zsh.texi:32186
#, no-wrap
msgid "weather, example function"
msgstr ""

#. type: table
#: zsh.texi:32193
msgid ""
"For example, a fictional `@t{weather}' plugin might state in its "
"documentation that it looks up the @t{preferred-precipitation} style under "
"the "
"`@t{:weather:}@var{continent}@t{:}@var{day-of-the-week}@t{:}@var{phase-of-the-moon}' "
"context.  According to this, you might set the following in your @t{zshrc}:"
msgstr ""

#. type: example
#: zsh.texi:32198
#, no-wrap
msgid ""
"zstyle ':weather:europe:*' preferred-precipitation rain\n"
"zstyle ':weather:*:Sunday:*' preferred-precipitation snow\n"
msgstr ""

#. type: table
#: zsh.texi:32202
msgid "Then the plugin would run under the hood a command such as"
msgstr ""

#. type: example
#: zsh.texi:32206
#, no-wrap
msgid ""
"zstyle -s \":weather:$@{continent@}:$@{day_of_week@}:$@{moon_phase@}\" "
"preferred-precipitation REPLY\n"
msgstr ""

#. type: table
#: zsh.texi:32215
msgid ""
"in order to retrieve your preference into the scalar variable @t{$REPLY}.  "
"On Sundays @t{$REPLY} would be set to `@t{snow}'; in Europe it would be set "
"to `@t{rain}'; and on Sundays in Europe it would be set to `@t{snow}' again, "
"because the patterns `@t{:weather:europe:*}' and `@t{:weather:*:Sunday:*}' "
"both match the @var{context} argument to @t{zstyle -s}, are equally "
"specific, and the latter is more specific (because it has more "
"colon-separated components)."
msgstr ""

#. type: subsection
#: zsh.texi:32218 zsh.texi:36327
#, no-wrap
msgid "Usage"
msgstr ""

#. type: table
#: zsh.texi:32221
msgid "The forms that operate on patterns are the following."
msgstr ""

#. type: table
#: zsh.texi:32228
msgid ""
"Without arguments, lists style definitions.  Styles are shown in alphabetic "
"order and patterns are shown in the order @t{zstyle} will test them."
msgstr ""

#. type: table
#: zsh.texi:32239
msgid ""
"If the @t{-L} option is given, listing is done in the form of calls to "
"@t{zstyle}.  The optional first argument, @var{metapattern}, is a pattern "
"which will be matched against the string supplied as @var{pattern} when the "
"style was defined.  Note: this means, for example, `@t{zstyle -L "
"\":completion:*\"}' will match any supplied pattern beginning "
"`@t{:completion:}', not just @t{\":completion:*\"}: use "
"@t{':completion:\\*'} to match that.  The optional second argument limits "
"the output to a specific @var{style} (not a pattern).  @t{-L} is not "
"compatible with any other options."
msgstr ""

#. type: item
#: zsh.texi:32240
#, no-wrap
msgid ""
"@t{zstyle} [ @t{-} | @t{-}@t{-} | @t{-e} ] @var{pattern} @var{style} "
"@var{string} ..."
msgstr ""

#. type: table
#: zsh.texi:32251
msgid ""
"Defines the given @var{style} for the @var{pattern} with the @var{string}s "
"as the value.  If the @t{-e} option is given, the @var{string}s will be "
"concatenated (separated by spaces) and the resulting string will be "
"evaluated (in the same way as it is done by the @t{eval} builtin command) "
"when the style is looked up.  In this case the parameter `@t{reply}' must be "
"assigned to set the strings returned after the evaluation.  Before "
"evaluating the value, @t{reply} is unset, and if it is still unset after the "
"evaluation, the style is treated as if it were not set."
msgstr ""

#. type: table
#: zsh.texi:32257
msgid ""
"Delete style definitions. Without arguments all definitions are deleted, "
"with a @var{pattern} all definitions for that pattern are deleted and if any "
"@var{style}s are given, then only those styles are deleted for the "
"@var{pattern}."
msgstr ""

#. type: table
#: zsh.texi:32265
msgid ""
"Retrieve a style definition. The @var{name} is used as the name of an array "
"in which the results are stored. Without any further arguments, all patterns "
"defined are returned. With a @var{pattern} the styles defined for that "
"pattern are returned and with both a @var{pattern} and a @var{style}, the "
"value strings of that combination is returned."
msgstr ""

#. type: table
#: zsh.texi:32270
msgid "The other forms can be used to look up or test styles for a given context."
msgstr ""

#. type: item
#: zsh.texi:32273
#, no-wrap
msgid "@t{zstyle -s} @var{context} @var{style} @var{name} [ @var{sep} ]"
msgstr ""

#. type: table
#: zsh.texi:32277
msgid ""
"The parameter @var{name} is set to the value of the style interpreted as a "
"string.  If the value contains several strings they are concatenated with "
"spaces (or with the @var{sep} string if that is given) between them."
msgstr ""

#. type: table
#: zsh.texi:32280 zsh.texi:32297
msgid "Return @t{0} if the style is set, @t{1} otherwise."
msgstr ""

#. type: item
#: zsh.texi:32281
#, no-wrap
msgid "@t{zstyle -b} @var{context} @var{style} @var{name}"
msgstr ""

#. type: table
#: zsh.texi:32286
msgid ""
"The value is stored in @var{name} as a boolean, i.e. as the string `@t{yes}' "
"if the value has only one string and that string is equal to one of "
"`@t{yes}', `@t{true}', `@t{on}', or `@t{1}'. If the value is any other "
"string or has more than one string, the parameter is set to `@t{no}'."
msgstr ""

#. type: table
#: zsh.texi:32289
msgid "Return @t{0} if @var{name} is set to `@t{yes}', @t{1} otherwise."
msgstr ""

#. type: item
#: zsh.texi:32290
#, no-wrap
msgid "@t{zstyle -a} @var{context} @var{style} @var{name}"
msgstr ""

#. type: table
#: zsh.texi:32294
msgid ""
"The value is stored in @var{name} as an array. If @var{name} is declared as "
"an associative array, the first, third, etc. strings are used as the keys "
"and the other strings are used as the values."
msgstr ""

#. type: item
#: zsh.texi:32298
#, no-wrap
msgid "@t{zstyle -t} @var{context} @var{style} [ @var{string} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:32299
#, no-wrap
msgid "@t{zstyle -T} @var{context} @var{style} [ @var{string} ... ]"
msgstr ""

#. type: table
#: zsh.texi:32308
msgid ""
"Test the value of a style, i.e. the @t{-t} option only returns a status "
"(sets @t{$?}).  Without any @var{string} the return status is zero if the "
"style is defined for at least one matching pattern, has only one string in "
"its value, and that is equal to one of `@t{true}', `@t{yes}', `@t{on}' or "
"`@t{1}'. If any @var{string}s are given the status is zero if and only if at "
"least one of the @var{string}s is equal to at least one of the strings in "
"the value. If the style is defined but doesn't match, the return status is "
"@t{1}. If the style is not defined, the status is @t{2}."
msgstr ""

#. type: table
#: zsh.texi:32313
msgid ""
"The @t{-T} option tests the values of the style like @t{-t}, but it returns "
"status zero (rather than @t{2}) if the style is not defined for any matching "
"pattern."
msgstr ""

#. type: table
#: zsh.texi:32317
msgid ""
"Match a value. Returns status zero if the @var{pattern} matches at least one "
"of the strings in the value."
msgstr ""

#. type: item
#: zsh.texi:32321
#, no-wrap
msgid "@t{zformat -f} @var{param} @var{format} @var{spec} ..."
msgstr ""

#. type: itemx
#: zsh.texi:32322
#, no-wrap
msgid "@t{zformat -F} @var{param} @var{format} @var{spec} ..."
msgstr ""

#. type: itemx
#: zsh.texi:32323
#, no-wrap
msgid "@t{zformat -a} @var{array} @var{sep} @var{spec} ..."
msgstr ""

#. type: table
#: zsh.texi:32342
msgid ""
"This builtin provides different forms of formatting. The first form is "
"selected with the @t{-f} option. In this case the @var{format} string will "
"be modified by replacing sequences starting with a percent sign in it with "
"strings from the @var{spec}s.  Each @var{spec} should be of the form "
"`@var{char}@t{:}@var{string}' which will cause every appearance of the "
"sequence `@t{%}@var{char}' in @var{format} to be replaced by the "
"@var{string}.  The `@t{%}' sequence may also contain optional minimum and "
"maximum field width specifications between the `@t{%}' and the `@var{char}' "
"in the form `@t{%}@var{min}@t{.}@var{max}@t{c}', i.e. the minimum field "
"width is given first and if the maximum field width is used, it has to be "
"preceded by a dot.  Specifying a minimum field width makes the result be "
"padded with spaces to the right if the @var{string} is shorter than the "
"requested width.  Padding to the left can be achieved by giving a negative "
"minimum field width.  If a maximum field width is specified, the "
"@var{string} will be truncated after that many characters.  After all "
"`@t{%}' sequences for the given @var{spec}s have been processed, the "
"resulting string is stored in the parameter @var{param}."
msgstr ""

#. type: table
#: zsh.texi:32360
msgid ""
"The @t{%}-escapes also understand ternary expressions in the form used by "
"prompts.  The @t{%} is followed by a `@t{(}' and then an ordinary format "
"specifier character as described above.  There may be a set of digits either "
"before or after the `@t{(}'; these specify a test number, which defaults to "
"zero.  Negative numbers are also allowed.  An arbitrary delimiter character "
"follows the format specifier, which is followed by a piece of `true' text, "
"the delimiter character again, a piece of `false' text, and a closing "
"parenthesis.  The complete expression (without the digits) thus looks like "
"`@t{%(}@var{X}@t{.}@var{text1}@t{.}@var{text2}@t{)}', except that the "
"`@t{.}' character is arbitrary.  The value given for the format specifier in "
"the @var{char}@t{:}@var{string} expressions is evaluated as a mathematical "
"expression, and compared with the test number.  If they are the same, "
"@var{text1} is output, else @var{text2} is output.  A parenthesis may be "
"escaped in @var{text2} as @t{%)}.  Either of @var{text1} or @var{text2} may "
"contain nested @t{%}-escapes."
msgstr ""

#. type: example
#: zsh.texi:32367
#, no-wrap
msgid "zformat -f REPLY \"The answer is '%3(c.yes.no)'.\" c:3\n"
msgstr ""

#. type: table
#: zsh.texi:32373
msgid ""
"outputs \"The answer is 'yes'.\" to @t{REPLY} since the value for the format "
"specifier @t{c} is 3, agreeing with the digit argument to the ternary "
"expression."
msgstr ""

#. type: table
#: zsh.texi:32380
msgid ""
"With @t{-F} instead of @t{-f}, ternary expressions choose between the `true' "
"or `false' text on the basis of whether the format specifier is present and "
"non-empty.  A test number indicates a minimum width for the value given in "
"the format specifier. Negative numbers reverse this, so the test is for "
"whether the value exceeds a maximum width."
msgstr ""

#. type: table
#: zsh.texi:32395
msgid ""
"The form, using the @t{-a} option, can be used for aligning strings.  Here, "
"the @var{spec}s are of the form `@var{left}@t{:}@var{right}' where "
"`@var{left}' and `@var{right}' are arbitrary strings.  These strings are "
"modified by replacing the colons by the @var{sep} string and padding the "
"@var{left} strings with spaces to the right so that the @var{sep} strings in "
"the result (and hence the @var{right} strings after them) are all aligned if "
"the strings are printed below each other.  All strings without a colon are "
"left unchanged and all strings with an empty @var{right} string have the "
"trailing colon removed.  In both cases the lengths of the strings are not "
"used to determine how the other strings are to be aligned.  A colon in the "
"@var{left} string can be escaped with a backslash.  The resulting strings "
"are stored in the @var{array}."
msgstr ""

#. type: table
#: zsh.texi:32399
msgid "This implements some internals of the @t{_regex_arguments} function."
msgstr ""

#. type: item
#: zsh.texi:32401
#, no-wrap
msgid ""
"@t{zparseopts} [ @t{-D} @t{-E} @t{-F} @t{-K} @t{-M} ] [ @t{-a} @var{array} ] "
"[ @t{-A} @var{assoc} ] [ @t{-} ] @var{spec} ..."
msgstr ""

#. type: table
#: zsh.texi:32409
msgid ""
"This builtin simplifies the parsing of options in positional parameters, "
"i.e. the set of arguments given by @t{$*}.  Each @var{spec} describes one "
"option and must be of the form `@var{opt}[@t{=}@var{array}]'.  If an option "
"described by @var{opt} is found in the positional parameters it is copied "
"into the @var{array} specified with the @t{-a} option; if the optional "
"`@t{=}@var{array}' is given, it is instead copied into that array, which "
"should be declared as a normal array and never as an associative array."
msgstr ""

#. type: table
#: zsh.texi:32413
msgid ""
"Note that it is an error to give any @var{spec} without an "
"`@t{=}@var{array}' unless one of the @t{-a} or @t{-A} options is used."
msgstr ""

#. type: table
#: zsh.texi:32419
msgid ""
"Unless the @t{-E} option is given, parsing stops at the first string that "
"isn't described by one of the @var{spec}s.  Even with @t{-E}, parsing always "
"stops at a positional parameter equal to `@t{-}' or `@t{-}@t{-}'. See also "
"@t{-F}."
msgstr ""

#. type: table
#: zsh.texi:32424
msgid ""
"The @var{opt} description must be one of the following.  Any of the special "
"characters can appear in the option name provided it is preceded by a "
"backslash."
msgstr ""

#. type: var{#1}
#: zsh.texi:32427
#, no-wrap
msgid "name"
msgstr ""

#. type: itemx
#: zsh.texi:32428
#, no-wrap
msgid "@var{name}@t{+}"
msgstr ""

#. type: table
#: zsh.texi:32433
msgid ""
"The @var{name} is the name of the option without the leading `@t{-}'.  To "
"specify a GNU-style long option, one of the usual two leading `@t{-}' must "
"be included in @var{name}; for example, a `@t{-}@t{-file}' option is "
"represented by a @var{name} of `@t{-file}'."
msgstr ""

#. type: table
#: zsh.texi:32438
msgid ""
"If a `@t{+}' appears after @var{name}, the option is appended to @var{array} "
"each time it is found in the positional parameters; without the `@t{+}' only "
"the @emph{last} occurrence of the option is preserved."
msgstr ""

#. type: table
#: zsh.texi:32443
msgid ""
"If one of these forms is used, the option takes no argument, so parsing "
"stops if the next positional parameter does not also begin with `@t{-}' "
"(unless the @t{-E} option is used)."
msgstr ""

#. type: item
#: zsh.texi:32444
#, no-wrap
msgid "@var{name}@t{:}"
msgstr ""

#. type: itemx
#: zsh.texi:32445
#, no-wrap
msgid "@var{name}@t{:-}"
msgstr ""

#. type: itemx
#: zsh.texi:32446
#, no-wrap
msgid "@var{name}@t{::}"
msgstr ""

#. type: table
#: zsh.texi:32450
msgid ""
"If one or two colons are given, the option takes an argument; with one "
"colon, the argument is mandatory and with two colons it is optional.  The "
"argument is appended to the @var{array} after the option itself."
msgstr ""

#. type: table
#: zsh.texi:32456
msgid ""
"An optional argument is put into the same array element as the option name "
"(note that this makes empty strings as arguments indistinguishable).  A "
"mandatory argument is added as a separate element unless the `@t{:-}' form "
"is used, in which case the argument is put into the same element."
msgstr ""

#. type: table
#: zsh.texi:32460
msgid ""
"A `@t{+}' as described above may appear between the @var{name} and the first "
"colon."
msgstr ""

#. type: table
#: zsh.texi:32470
msgid ""
"In all cases, option-arguments must appear either immediately following the "
"option in the same positional parameter or in the next one. Even an optional "
"argument may appear in the next parameter, unless it begins with a `@t{-}'.  "
"There is no special handling of `@t{=}' as with GNU-style argument parsers; "
"given the @var{spec} `@t{-foo:}', the positional parameter "
"`@t{-}@t{-foo=bar}' is parsed as `@t{-}@t{-foo}' with an argument of "
"`@t{=bar}'."
msgstr ""

#. type: table
#: zsh.texi:32478
msgid ""
"When the names of two options that take no arguments overlap, the longest "
"one wins, so that parsing for the @var{spec}s `@t{-foo -foobar}' (for "
"example) is unambiguous. However, due to the aforementioned handling of "
"option-arguments, ambiguities may arise when at least one overlapping "
"@var{spec} takes an argument, as in `@t{-foo: -foobar}'. In that case, the "
"last matching @var{spec} wins."
msgstr ""

#. type: table
#: zsh.texi:32484
msgid ""
"The options of @t{zparseopts} itself cannot be stacked because, for example, "
"the stack `@t{-DEK}' is indistinguishable from a @var{spec} for the "
"GNU-style long option `@t{-}@t{-DEK}'.  The options of @t{zparseopts} itself "
"are:"
msgstr ""

#. type: item
#: zsh.texi:32487
#, no-wrap
msgid "@t{-a} @var{array}"
msgstr ""

#. type: table
#: zsh.texi:32490
msgid ""
"As described above, this names the default array in which to store the "
"recognised options."
msgstr ""

#. type: item
#: zsh.texi:32491
#, no-wrap
msgid "@t{-A} @var{assoc}"
msgstr ""

#. type: table
#: zsh.texi:32495
msgid ""
"If this is given, the options and their values are also put into an "
"associative array with the option names as keys and the arguments (if any)  "
"as the values."
msgstr ""

#. type: table
#: zsh.texi:32502
msgid ""
"If this option is given, all options found are removed from the positional "
"parameters of the calling shell or shell function, up to but not including "
"any not described by the @var{spec}s.  If the first such parameter is "
"`@t{-}' or `@t{-}@t{-}', it is removed as well.  This is similar to using "
"the @t{shift} builtin."
msgstr ""

#. type: table
#: zsh.texi:32511
msgid ""
"This changes the parsing rules to @emph{not} stop at the first string that "
"isn't described by one of the @var{spec}s.  It can be used to test for or "
"(if used together with @t{-D}) extract options and their arguments, ignoring "
"all other options and arguments that may be in the positional parameters.  "
"As indicated above, parsing still stops at the first `@t{-}' or `@t{-}@t{-}' "
"not described by a @var{spec}, but it is not removed when used with @t{-D}."
msgstr ""

#. type: table
#: zsh.texi:32518
msgid ""
"If this option is given, @t{zparseopts} immediately stops at the first "
"option-like parameter not described by one of the @var{spec}s, prints an "
"error message, and returns status 1.  Removal (@t{-D}) and extraction "
"(@t{-E}) are not performed, and option arrays are not updated.  This "
"provides basic validation for the given options."
msgstr ""

#. type: table
#: zsh.texi:32523
msgid ""
"Note that the appearance in the positional parameters of an option without "
"its required argument always aborts parsing and returns an error as "
"described above regardless of whether this option is used."
msgstr ""

#. type: table
#: zsh.texi:32531
msgid ""
"With this option, the arrays specified with the @t{-a} option and with the "
"`@t{=}@var{array}' forms are kept unchanged when none of the @var{spec}s for "
"them is used.  Otherwise the entire array is replaced when any of the "
"@var{spec}s is used.  Individual elements of associative arrays specified "
"with the @t{-A} option are preserved by @t{-K}.  This allows assignment of "
"default values to arrays before calling @t{zparseopts}."
msgstr ""

#. type: table
#: zsh.texi:32540
msgid ""
"This changes the assignment rules to implement a map among equivalent option "
"names.  If any @var{spec} uses the `@t{=}@var{array}' form, the string "
"@var{array} is interpreted as the name of another @var{spec}, which is used "
"to choose where to store the values.  If no other @var{spec} is found, the "
"values are stored as usual.  This changes only the way the values are "
"stored, not the way @t{$*} is parsed, so results may be unpredictable if the "
"`@var{name}@t{+}' specifier is used inconsistently."
msgstr ""

#. type: example
#: zsh.texi:32550
#, no-wrap
msgid ""
"set -- -a -bx -c y -cz baz -cend\n"
"zparseopts a=foo b:=bar c+:=bar\n"
msgstr ""

#. type: table
#: zsh.texi:32554 zsh.texi:32575
msgid "will have the effect of"
msgstr ""

#. type: example
#: zsh.texi:32559
#, no-wrap
msgid ""
"foo=(-a)\n"
"bar=(-b x -c y -c z)\n"
msgstr ""

#. type: table
#: zsh.texi:32563
msgid "The arguments from `@t{baz}' on will not be used."
msgstr ""

#. type: table
#: zsh.texi:32566
msgid "As an example for the @t{-E} option, consider:"
msgstr ""

#. type: example
#: zsh.texi:32571
#, no-wrap
msgid ""
"set -- -a x -b y -c z arg1 arg2\n"
"zparseopts -E -D b:=bar\n"
msgstr ""

#. type: example
#: zsh.texi:32580
#, no-wrap
msgid ""
"bar=(-b y)\n"
"set -- -a x -c z arg1 arg2\n"
msgstr ""

#. type: table
#: zsh.texi:32585
msgid ""
"I.e., the option @t{-b} and its arguments are taken from the positional "
"parameters and put into the array @t{bar}."
msgstr ""

#. type: table
#: zsh.texi:32588
msgid "The @t{-M} option can be used like this:"
msgstr ""

#. type: example
#: zsh.texi:32593
#, no-wrap
msgid ""
"set -- -a -bx -c y -cz baz -cend\n"
"zparseopts -A bar -M a=foo b+: c:=b\n"
msgstr ""

#. type: table
#: zsh.texi:32597
msgid "to have the effect of"
msgstr ""

#. type: example
#: zsh.texi:32602
#, no-wrap
msgid ""
"foo=(-a)\n"
"bar=(-a @value{dsq} -b xyz)\n"
msgstr ""

#. type: cindex
#: zsh.texi:32613
#, no-wrap
msgid "calendar function system"
msgstr ""

#. type: cindex
#: zsh.texi:32614
#, no-wrap
msgid "zsh/datetime, function system based on"
msgstr ""

#. type: Plain text
#: zsh.texi:32625
msgid ""
"The shell is supplied with a series of functions to replace and enhance the "
"traditional Unix @t{calendar} programme, which warns the user of imminent or "
"future events, details of which are stored in a text file (typically "
"@t{calendar} in the user's home directory).  The version provided here "
"includes a mechanism for alerting the user when an event is due."
msgstr ""

#. type: Plain text
#: zsh.texi:32630
msgid ""
"In addition functions @t{age}, @t{before} and @t{after} are provided that "
"can be used in a glob qualifier; they allow files to be selected based on "
"their modification times."
msgstr ""

#. type: Plain text
#: zsh.texi:32635
msgid ""
"The format of the @t{calendar} file and the dates used there in and in the "
"@t{age} function are described first, then the functions that can be called "
"to examine and modify the @t{calendar} file."
msgstr ""

#. type: Plain text
#: zsh.texi:32641
msgid ""
"The functions here depend on the availability of the @t{zsh/datetime} module "
"which is usually installed with the shell.  The library function "
"@t{strptime()} must be available; it is present on most recent operating "
"systems."
msgstr ""

#. type: node
#: zsh.texi:32652 zsh.texi:33013
#, no-wrap
msgid "Calendar File and Date Formats"
msgstr ""

#. type: node
#: zsh.texi:32652 zsh.texi:33013 zsh.texi:33496
#, no-wrap
msgid "Calendar System User Functions"
msgstr ""

#. type: section
#: zsh.texi:32654
#, no-wrap
msgid "File and Date Formats"
msgstr ""

#. type: subsection
#: zsh.texi:32659
#, no-wrap
msgid "Calendar File Format"
msgstr ""

#. type: Plain text
#: zsh.texi:32668
msgid ""
"The calendar file is by default @t{~/calendar}.  This can be configured by "
"the @t{calendar-file} style, see @ref{Calendar Styles}.  The basic format "
"consists of a series of separate lines, with no indentation, each including "
"a date and time specification followed by a description of the event."
msgstr ""

#. type: Plain text
#: zsh.texi:32675
msgid ""
"Various enhancements to this format are supported, based on the syntax of "
"Emacs calendar mode.  An indented line indicates a continuation line that "
"continues the description of the event from the preceding line (note the "
"date may not be continued in this way).  An initial ampersand (@t{&}) is "
"ignored for compatibility."
msgstr ""

#. type: Plain text
#: zsh.texi:32682
msgid ""
"An indented line on which the first non-whitespace character is @t{#} is not "
"displayed with the calendar entry, but is still scanned for information.  "
"This can be used to hide information useful to the calendar system but not "
"to the user, such as the unique identifier used by @t{calendar_add}."
msgstr ""

#. type: Plain text
#: zsh.texi:32686
msgid ""
"The Emacs extension that a date with no description may refer to a number of "
"succeeding events at different times is not supported."
msgstr ""

#. type: Plain text
#: zsh.texi:32692
msgid ""
"Unless the @t{done-file} style has been altered, any events which have been "
"processed are appended to the file with the same name as the calendar file "
"with the suffix @t{.done}, hence @t{~/calendar.done} by default."
msgstr ""

#. type: Plain text
#: zsh.texi:32695
msgid "An example is shown below."
msgstr ""

#. type: subsection
#: zsh.texi:32698
#, no-wrap
msgid "Date Format"
msgstr ""

#. type: Plain text
#: zsh.texi:32711
msgid ""
"The format of the date and time is designed to allow flexibility without "
"admitting ambiguity.  (The words `date' and `time' are both used in the "
"documentation below; except where specifically noted this implies a string "
"that may include both a date and a time specification.)  Note that there is "
"no localization support; month and day names must be in English and "
"separator characters are fixed.  Matching is case insensitive, and only the "
"first three letters of the names are significant, although as a special case "
"a form beginning \"month\" does not match \"Monday\".  Furthermore, time "
"zones are not handled; all times are assumed to be local."
msgstr ""

#. type: Plain text
#: zsh.texi:32716
msgid ""
"It is recommended that, rather than exploring the intricacies of the system, "
"users find a date format that is natural to them and stick to it.  This will "
"avoid unexpected effects.  Various key facts should be noted."
msgstr ""

#. type: itemize
#: zsh.texi:32726
msgid ""
"In particular, note the confusion between "
"@var{month}@t{/}@var{day}@t{/}@var{year} and "
"@var{day}@t{/}@var{month}@t{/}@var{year} when the month is numeric; these "
"formats should be avoided if at all possible.  Many alternatives are "
"available."
msgstr ""

#. type: itemize
#: zsh.texi:32729
msgid ""
"The year must be given in full to avoid confusion, and only years from 1900 "
"to 2099 inclusive are matched."
msgstr ""

#. type: Plain text
#: zsh.texi:32738
msgid ""
"The following give some obvious examples; users finding here a format they "
"like and not subject to vagaries of style may skip the full description.  As "
"dates and times are matched separately (even though the time may be embedded "
"in the date), any date format may be mixed with any format for the time of "
"day provide the separators are clear (whitespace, colons, commas)."
msgstr ""

#. type: example
#: zsh.texi:32749
#, no-wrap
msgid ""
"2007/04/03 13:13\n"
"2007/04/03:13:13\n"
"2007/04/03 1:13 pm\n"
"3rd April 2007, 13:13\n"
"April 3rd 2007 1:13 p.m.\n"
"Apr 3, 2007 13:13\n"
"Tue Apr 03 13:13:00 2007\n"
"13:13 2007/apr/3\n"
msgstr ""

#. type: Plain text
#: zsh.texi:32753
msgid "More detailed rules follow."
msgstr ""

#. type: Plain text
#: zsh.texi:32758
msgid ""
"Times are parsed and extracted before dates.  They must use colons to "
"separate hours and minutes, though a dot is allowed before seconds if they "
"are present.  This limits time formats to the following:"
msgstr ""

#. type: itemize
#: zsh.texi:32764
msgid ""
"@var{HH}@t{:}@var{MM}[@t{:}@var{SS}[@t{.}@var{FFFFF}]] "
"[@t{am}|@t{pm}|@t{a.m.}|@t{p.m.}]"
msgstr ""

#. type: itemize
#: zsh.texi:32766
msgid ""
"@var{HH}@t{:}@var{MM}@t{.}@var{SS}[@t{.}@var{FFFFF}] "
"[@t{am}|@t{pm}|@t{a.m.}|@t{p.m.}]"
msgstr ""

#. type: Plain text
#: zsh.texi:32776
msgid ""
"Here, square brackets indicate optional elements, possibly with "
"alternatives.  Fractions of a second are recognised but ignored.  For "
"absolute times (the normal format require by the @t{calendar} file and the "
"@t{age}, @t{before} and @t{after} functions) a date is mandatory but a time "
"of day is not; the time returned is at the start of the date.  One variation "
"is allowed: if @t{a.m.} or @t{p.m.} or one of their variants is present, an "
"hour without a minute is allowed, e.g. @t{3 p.m.}."
msgstr ""

#. type: Plain text
#: zsh.texi:32782
msgid ""
"Time zones are not handled, though if one is matched following a time "
"specification it will be removed to allow a surrounding date to be parsed.  "
"This only happens if the format of the timezone is not too unusual.  The "
"following are examples of forms that are understood:"
msgstr ""

#. type: example
#: zsh.texi:32789
#, no-wrap
msgid ""
"+0100\n"
"GMT\n"
"GMT-7\n"
"CET+1CDT\n"
msgstr ""

#. type: Plain text
#: zsh.texi:32794
msgid ""
"Any part of the timezone that is not numeric must have exactly three capital "
"letters in the name."
msgstr ""

#. type: Plain text
#: zsh.texi:32804
msgid ""
"Dates suffer from the ambiguity between @var{DD}@t{/}@var{MM}@t{/}@var{YYYY} "
"and @var{MM}@t{/}@var{DD}@t{/}@var{YYYY}.  It is recommended this form is "
"avoided with purely numeric dates, but use of ordinals, eg. @t{3rd/04/2007}, "
"will resolve the ambiguity as the ordinal is always parsed as the day of the "
"month.  Years must be four digits (and the first two must be @t{19} or "
"@t{20}); @t{03/04/08} is not recognised.  Other numbers may have leading "
"zeroes, but they are not required.  The following are handled:"
msgstr ""

#. type: itemize
#: zsh.texi:32810
msgid "@var{YYYY}@t{/}@var{MM}@t{/}@var{DD}"
msgstr ""

#. type: itemize
#: zsh.texi:32812
msgid "@var{YYYY}@t{-}@var{MM}@t{-}@var{DD}"
msgstr ""

#. type: itemize
#: zsh.texi:32814
msgid "@var{YYYY}@t{/}@var{MNM}@t{/}@var{DD}"
msgstr ""

#. type: itemize
#: zsh.texi:32816
msgid "@var{YYYY}@t{-}@var{MNM}@t{-}@var{DD}"
msgstr ""

#. type: itemize
#: zsh.texi:32818
msgid "@var{DD}[@t{th}|@t{st}|@t{rd}] @var{MNM}[@t{,}] [ @var{YYYY} ]"
msgstr ""

#. type: itemize
#: zsh.texi:32820
msgid "@var{MNM} @var{DD}[@t{th}|@t{st}|@t{rd}][@t{,}] [ @var{YYYY} ]"
msgstr ""

#. type: itemize
#: zsh.texi:32822
msgid "@var{DD}[@t{th}|@t{st}|@t{rd}]@t{/}@var{MM}[@t{,}] @var{YYYY}"
msgstr ""

#. type: itemize
#: zsh.texi:32824
msgid "@var{DD}[@t{th}|@t{st}|@t{rd}]@t{/}@var{MM}@t{/}@var{YYYY}"
msgstr ""

#. type: itemize
#: zsh.texi:32826
msgid "@var{MM}@t{/}@var{DD}[@t{th}|@t{st}|@t{rd}][@t{,}] @var{YYYY}"
msgstr ""

#. type: itemize
#: zsh.texi:32828
msgid "@var{MM}@t{/}@var{DD}[@t{th}|@t{st}|@t{rd}]@t{/}@var{YYYY}"
msgstr ""

#. type: Plain text
#: zsh.texi:32835
msgid ""
"Here, @var{MNM} is at least the first three letters of a month name, matched "
"case-insensitively.  The remainder of the month name may appear but its "
"contents are irrelevant, so janissary, febrile, martial, apricot, maybe, "
"junta, etc. are happily handled."
msgstr ""

#. type: Plain text
#: zsh.texi:32842
msgid ""
"Where the year is shown as optional, the current year is assumed.  There are "
"only two such cases, the form @t{Jun 20} or @t{14 September} (the only two "
"commonly occurring forms, apart from a \"the\" in some forms of English, "
"which isn't currently supported).  Such dates will of course become "
"ambiguous in the future, so should ideally be avoided."
msgstr ""

#. type: Plain text
#: zsh.texi:32852
msgid ""
"Times may follow dates with a colon, e.g. @t{1965/07/12:09:45}; this is in "
"order to provide a format with no whitespace.  A comma and whitespace are "
"allowed, e.g. @t{1965/07/12, 09:45}.  Currently the order of these "
"separators is not checked, so illogical formats such as @t{1965/07/12, : "
",09:45} will also be matched.  For simplicity such variations are not shown "
"in the list above.  Otherwise, a time is only recognised as being associated "
"with a date if there is only whitespace in between, or if the time was "
"embedded in the date."
msgstr ""

#. type: Plain text
#: zsh.texi:32865
msgid ""
"Days of the week are not normally scanned, but will be ignored if they occur "
"at the start of the date pattern only.  However, in contexts where it is "
"useful to specify dates relative to today, days of the week with no other "
"date specification may be given.  The day is assumed to be either today or "
"within the past week.  Likewise, the words @t{yesterday}, @t{today} and "
"@t{tomorrow} are handled.  All matches are case-insensitive.  Hence if today "
"is Monday, then @t{Sunday} is equivalent to @t{yesterday}, @t{Monday} is "
"equivalent to @t{today}, but @t{Tuesday} gives a date six days ago.  This is "
"not generally useful within the calendar file.  Dates in this format may be "
"combined with a time specification; for example @t{Tomorrow, 8 p.m.}."
msgstr ""

#. type: Plain text
#: zsh.texi:32868
msgid "For example, the standard date format:"
msgstr ""

#. type: example
#: zsh.texi:32872
#, no-wrap
msgid "Fri Aug 18 17:00:48 BST 2006\n"
msgstr ""

#. type: Plain text
#: zsh.texi:32877
msgid ""
"is handled by matching @var{HH}@t{:}@var{MM}@t{:}@var{SS} and removing it "
"together with the matched (but unused) time zone.  This leaves the "
"following:"
msgstr ""

#. type: example
#: zsh.texi:32881
#, no-wrap
msgid "Fri Aug 18 2006\n"
msgstr ""

#. type: Plain text
#: zsh.texi:32885
msgid "@t{Fri} is ignored and the rest is matched according to the standard rules."
msgstr ""

#. type: subsection
#: zsh.texi:32888
#, no-wrap
msgid "Relative Time Format"
msgstr ""

#. type: Plain text
#: zsh.texi:32896
msgid ""
"In certain places relative times are handled.  Here, a date is not allowed; "
"instead a combination of various supported periods are allowed, together "
"with an optional time.  The periods must be in order from most to least "
"significant."
msgstr ""

#. type: Plain text
#: zsh.texi:32902
msgid ""
"In some cases, a more accurate calculation is possible when there is an "
"anchor date: offsets of months or years pick the correct day, rather than "
"being rounded, and it is possible to pick a particular day in a month as "
"`(1st Friday)', etc., as described in more detail below."
msgstr ""

#. type: Plain text
#: zsh.texi:32914
msgid ""
"Anchors are available in the following cases.  If one or two times are "
"passed to the function @t{calendar}, the start time acts an anchor for the "
"end time when the end time is relative (even if the start time is "
"implicit).  When examining calendar files, the scheduled event being "
"examined anchors the warning time when it is given explicitly by means of "
"the @t{WARN} keyword; likewise, the scheduled event anchors a repetition "
"period when given by the @t{RPT} keyword, so that specifications such as "
"@t{RPT 2 months, 3rd Thursday} are handled properly.  Finally, the @t{-R} "
"argument to @t{calendar_scandate} directly provides an anchor for relative "
"calculations."
msgstr ""

#. type: Plain text
#: zsh.texi:32917
msgid "The periods handled, with possible abbreviations are:"
msgstr ""

#. type: item
#: zsh.texi:32920
#, no-wrap
msgid "Years"
msgstr ""

#. type: table
#: zsh.texi:32923
msgid ""
"@t{years}, @t{yrs}, @t{ys}, @t{year}, @t{yr}, @t{y}, @t{yearly}.  A year is "
"365.25 days unless there is an anchor."
msgstr ""

#. type: item
#: zsh.texi:32924
#, no-wrap
msgid "Months"
msgstr ""

#. type: table
#: zsh.texi:32929
msgid ""
"@t{months}, @t{mons}, @t{mnths}, @t{mths}, @t{month}, @t{mon}, @t{mnth}, "
"@t{mth}, @t{monthly}.  Note that @t{m}, @t{ms}, @t{mn}, @t{mns} are "
"ambiguous and are @emph{not} handled.  A month is a period of 30 days rather "
"than a calendar month unless there is an anchor."
msgstr ""

#. type: item
#: zsh.texi:32930
#, no-wrap
msgid "Weeks"
msgstr ""

#. type: table
#: zsh.texi:32932
msgid "@t{weeks}, @t{wks}, @t{ws}, @t{week}, @t{wk}, @t{w}, @t{weekly}"
msgstr ""

#. type: item
#: zsh.texi:32933
#, no-wrap
msgid "Days"
msgstr ""

#. type: table
#: zsh.texi:32935
msgid "@t{days}, @t{dys}, @t{ds}, @t{day}, @t{dy}, @t{d}, @t{daily}"
msgstr ""

#. type: item
#: zsh.texi:32936
#, no-wrap
msgid "Hours"
msgstr ""

#. type: table
#: zsh.texi:32938
msgid "@t{hours}, @t{hrs}, @t{hs}, @t{hour}, @t{hr}, @t{h}, @t{hourly}"
msgstr ""

#. type: item
#: zsh.texi:32939
#, no-wrap
msgid "Minutes"
msgstr ""

#. type: table
#: zsh.texi:32942
msgid ""
"@t{minutes}, @t{mins}, @t{minute}, @t{min}, but @emph{not} @t{m}, @t{ms}, "
"@t{mn} or @t{mns}"
msgstr ""

#. type: item
#: zsh.texi:32943
#, no-wrap
msgid "Seconds"
msgstr ""

#. type: table
#: zsh.texi:32945
msgid "@t{seconds}, @t{secs}, @t{ss}, @t{second}, @t{sec}, @t{s}"
msgstr ""

#. type: Plain text
#: zsh.texi:32951
msgid ""
"Spaces between the numbers are optional, but are required between items, "
"although a comma may be used (with or without spaces)."
msgstr ""

#. type: Plain text
#: zsh.texi:32958
msgid ""
"The forms @t{yearly} to @t{hourly} allow the number to be omitted; it is "
"assumed to be 1.  For example, @t{1 d} and @t{daily} are equivalent.  Note "
"that using those forms with plurals is confusing; @t{2 yearly} is the same "
"as @t{2 years}, @emph{not} twice yearly, so it is recommended they only be "
"used without numbers."
msgstr ""

#. type: Plain text
#: zsh.texi:32971
msgid ""
"When an anchor time is present, there is an extension to handle regular "
"events in the form of the @var{n}th @var{some}day of the month.  Such a "
"specification must occur immediately after any year and month specification, "
"but before any time of day, and must be in the form "
"@var{n}(@t{th}|@t{st}|@t{rd}) @var{day}, for example @t{1st Tuesday} or "
"@t{3rd Monday}.  As in other places, days are matched case insensitively, "
"must be in English, and only the first three letters are significant except "
"that a form beginning `month' does not match `Monday'.  No attempt is made "
"to sanitize the resulting date; attempts to squeeze too many occurrences "
"into a month will push the day into the next month (but in the obvious "
"fashion, retaining the correct day of the week)."
msgstr ""

#. type: Plain text
#: zsh.texi:32974
msgid "Here are some examples:"
msgstr ""

#. type: example
#: zsh.texi:32981
#, no-wrap
msgid ""
"30 years 3 months 4 days 3:42:41\n"
"14 days 5 hours\n"
"Monthly, 3rd Thursday\n"
"4d,10hr\n"
msgstr ""

#. type: Plain text
#: zsh.texi:32991
msgid ""
"Here is an example calendar file.  It uses a consistent date format, as "
"recommended above."
msgstr ""

#. type: example
#: zsh.texi:33001
#, no-wrap
msgid ""
"Feb 1, 2006 14:30 Pointless bureaucratic meeting\n"
"Mar 27, 2006 11:00 Mutual recrimination and finger pointing\n"
"  Bring water pistol and waterproofs\n"
"Mar 31, 2006 14:00 Very serious managerial pontification\n"
"  # UID 12C7878A9A50\n"
"Apr 10, 2006 13:30 Even more pointless blame assignment exercise WARN 30 "
"mins\n"
"May 18, 2006 16:00 Regular moaning session RPT monthly, 3rd Thursday\n"
msgstr ""

#. type: Plain text
#: zsh.texi:33011
msgid ""
"The second entry has a continuation line.  The third entry has a "
"continuation line that will not be shown when the entry is displayed, but "
"the unique identifier will be used by the @t{calendar_add} function when "
"updating the event.  The fourth entry will produce a warning 30 minutes "
"before the event (to allow you to equip yourself appropriately).  The fifth "
"entry repeats after a month on the 3rd Thursday, i.e. June 15, 2006, at the "
"same time."
msgstr ""

#. type: node
#: zsh.texi:33013 zsh.texi:33496 zsh.texi:33569
#, no-wrap
msgid "Calendar Styles"
msgstr ""

#. type: section
#: zsh.texi:33015
#, no-wrap
msgid "User Functions"
msgstr ""

#. type: Plain text
#: zsh.texi:33023
msgid ""
"This section describes functions that are designed to be called directly by "
"the user.  The first part describes those functions associated with the "
"user's calendar; the second part describes the use in glob qualifiers."
msgstr ""

#. type: subsection
#: zsh.texi:33026
#, no-wrap
msgid "Calendar system functions"
msgstr ""

#. type: findex
#: zsh.texi:33031
#, no-wrap
msgid "calendar"
msgstr ""

#. type: item
#: zsh.texi:33033
#, no-wrap
msgid ""
"@t{calendar }[ @t{-abdDsv} ] [ @t{-C} @var{calfile} ] [ @t{-n} @var{num} ] [ "
"@t{-S} @var{showprog} ]"
msgstr ""

#. type: itemx
#: zsh.texi:33034
#, no-wrap
msgid "@t{@ @ @ @ @ @ @ @ @ }[ [ @var{start} ] @var{end} ]"
msgstr ""

#. type: itemx
#: zsh.texi:33035
#, no-wrap
msgid ""
"@t{calendar -r} [ @t{-abdDrsv} ] [ @t{-C} @var{calfile} ] [ @t{-n} @var{num} "
"] [ @t{-S} @var{showprog} ]"
msgstr ""

#. type: itemx
#: zsh.texi:33036
#, no-wrap
msgid "@t{@ @ @ @ @ @ @ @ @ }[ @var{start} ]"
msgstr ""

#. type: table
#: zsh.texi:33038
msgid "Show events in the calendar."
msgstr ""

#. type: table
#: zsh.texi:33044
msgid ""
"With no arguments, show events from the start of today until the end of the "
"next working day after today.  In other words, if today is Friday, Saturday, "
"or Sunday, show up to the end of the following Monday, otherwise show today "
"and tomorrow."
msgstr ""

#. type: table
#: zsh.texi:33051
msgid ""
"If @var{end} is given, show events from the start of today up to the time "
"and date given, which is in the format described in the previous section.  "
"Note that if this is a date the time is assumed to be midnight at the start "
"of the date, so that effectively this shows all events before the given "
"date."
msgstr ""

#. type: table
#: zsh.texi:33057
msgid ""
"@var{end} may start with a @t{+}, in which case the remainder of the "
"specification is a relative time format as described in the previous section "
"indicating the range of time from the start time that is to be included."
msgstr ""

#. type: table
#: zsh.texi:33061
msgid ""
"If @var{start} is also given, show events starting from that time and date.  "
"The word @t{now} can be used to indicate the current time."
msgstr ""

#. type: table
#: zsh.texi:33065
msgid ""
"To implement an alert when events are due, include @t{calendar -s} in your "
"@t{~/.zshrc} file."
msgstr ""

#. type: table
#: zsh.texi:33074
msgid "Show all items in the calendar, regardless of the @t{start} and @t{end}."
msgstr ""

#. type: table
#: zsh.texi:33078
msgid ""
"Brief: don't display continuation lines (i.e. indented lines following the "
"line with the date/time), just the first line."
msgstr ""

#. type: item
#: zsh.texi:33079
#, no-wrap
msgid "@t{-B} @var{lines}"
msgstr ""

#. type: table
#: zsh.texi:33082
msgid ""
"Brief: display at most the first @var{lines} lines of the calendar entry.  "
"`@t{-B 1}' is equivalent to `@t{-b}'."
msgstr ""

#. type: item
#: zsh.texi:33083
#, no-wrap
msgid "@t{-C} @var{calfile}"
msgstr ""

#. type: table
#: zsh.texi:33086
msgid ""
"Explicitly specify a calendar file instead of the value of the "
"@t{calendar-file} style or the default @t{~/calendar}."
msgstr ""

#. type: table
#: zsh.texi:33092
msgid ""
"Move any events that have passed from the calendar file to the \"done\" "
"file, as given by the @t{done-file} style or the default which is the "
"calendar file with @t{.done} appended.  This option is implied by the @t{-s} "
"option."
msgstr ""

#. type: table
#: zsh.texi:33095
msgid "Turns off the option @t{-d}, even if the @t{-s} option is also present."
msgstr ""

#. type: item
#: zsh.texi:33096
#, no-wrap
msgid "@t{-n} @var{num}, @t{-}@var{num}"
msgstr ""

#. type: table
#: zsh.texi:33099
msgid ""
"Show at least @var{num} events, if present in the calendar file, regardless "
"of the @t{start} and @t{end}."
msgstr ""

#. type: table
#: zsh.texi:33104
msgid ""
"Show all the remaining options in the calendar, ignoring the given @var{end} "
"time.  The @var{start} time is respected; any argument given is treated as a "
"@var{start} time."
msgstr ""

#. type: table
#: zsh.texi:33110
msgid ""
"Use the shell's @t{sched} command to schedule a timed event that will warn "
"the user when an event is due.  Note that the @t{sched} command only runs if "
"the shell is at an interactive prompt; a foreground task blocks the "
"scheduled task from running until it is finished."
msgstr ""

#. type: table
#: zsh.texi:33115
msgid ""
"The timed event usually runs the programme @t{calendar_show} to show the "
"event, as described in @ref{Calendar Utility Functions}."
msgstr ""

#. type: table
#: zsh.texi:33122
msgid ""
"By default, a warning of the event is shown five minutes before it is due.  "
"The warning period can be configured by the style @t{warn-time} or for a "
"single calendar entry by including @t{WARN} @var{reltime} in the first line "
"of the entry, where @var{reltime} is one of the usual relative time formats."
msgstr ""

#. type: table
#: zsh.texi:33131
msgid ""
"A repeated event may be indicated by including @t{RPT} @var{reldate} in the "
"first line of the entry.  After the scheduled event has been displayed it "
"will be re-entered into the calendar file at a time @var{reldate} after the "
"existing event.  Note that this is currently the only use made of the repeat "
"count, so that it is not possible to query the schedule for a recurrence of "
"an event in the calendar until the previous event has passed."
msgstr ""

#. type: table
#: zsh.texi:33146
msgid ""
"If @t{RPT} is used, it is also possible to specify that certain recurrences "
"of an event are rescheduled or cancelled.  This is done with the "
"@t{OCCURRENCE} keyword, followed by whitespace and the date and time of the "
"occurrence in the regular sequence, followed by whitespace and either the "
"date and time of the rescheduled event or the exact string @t{CANCELLED}.  "
"In this case the date and time must be in exactly the \"date with local "
"time\" format used by the @t{text/calendar} MIME type (RFC 2445), "
"@var{<YYYY><MM><DD>}@t{T}@var{<hh><mm><ss>} (note the presence of the "
"literal character @t{T}).  The first word (the regular recurrence) may be "
"something other than a proper date/time to indicate that the event is "
"additional to the normal sequence; a convention that retains the formatting "
"appearance is @t{XXXXXXXXTXXXXXX}."
msgstr ""

#. type: table
#: zsh.texi:33154
msgid ""
"Furthermore, it is useful to record the next regular recurrence (as then the "
"displayed date may be for a rescheduled event so cannot be used for "
"calculating the regular sequence).  This is specified by @t{RECURRENCE} and "
"a time or date in the same format.  @t{calendar_add} adds such an indication "
"when it encounters a recurring event that does not include one, based on the "
"headline date/time."
msgstr ""

#. type: table
#: zsh.texi:33159
msgid ""
"If @t{calendar_add} is used to update occurrences the @t{UID} keyword "
"described there should be present in both the existing entry and the added "
"occurrence in order to identify recurring event sequences."
msgstr ""

#. type: example
#: zsh.texi:33169
#, no-wrap
msgid ""
"Thu May 6, 2010 11:00 Informal chat RPT 1 week\n"
"  # RECURRENCE 20100506T110000\n"
"  # OCCURRENCE 20100513T110000 20100513T120000\n"
"  # OCCURRENCE 20100520T110000 CANCELLED\n"
msgstr ""

#. type: table
#: zsh.texi:33182
msgid ""
"The event that occurs at 11:00 on 13th May 2010 is rescheduled an hour "
"later.  The event that occurs a week later is cancelled.  The occurrences "
"are given on a continuation line starting with a @t{#} character so will not "
"usually be displayed as part of the event.  As elsewhere, no account of time "
"zones is taken with the times. After the next event occurs the headline "
"date/time will be `@t{Thu May 13, 2010 12:00}' while the @t{RECURRENCE} "
"date/time will be `@t{20100513T110000}' (note that cancelled and moved "
"events are not taken account of in the @t{RECURRENCE}, which records what "
"the next regular recurrence is, but they are accounted for in the headline "
"date/time)."
msgstr ""

#. type: table
#: zsh.texi:33188
msgid ""
"It is safe to run @t{calendar -s} to reschedule an existing event (if the "
"calendar file has changed, for example), and also to have it running in "
"multiples instances of the shell since the calendar file is locked when in "
"use."
msgstr ""

#. type: table
#: zsh.texi:33192
msgid ""
"By default, expired events are moved to the \"done\" file; see the @t{-d} "
"option.  Use @t{-D} to prevent this."
msgstr ""

#. type: item
#: zsh.texi:33193
#, no-wrap
msgid "@t{-S} @var{showprog}"
msgstr ""

#. type: table
#: zsh.texi:33196
msgid ""
"Explicitly specify a programme to be used for showing events instead of the "
"value of the @t{show-prog} style or the default @t{calendar_show}."
msgstr ""

#. type: table
#: zsh.texi:33201
msgid ""
"Verbose: show more information about stages of processing.  This is useful "
"for confirming that the function has successfully parsed the dates in the "
"calendar file."
msgstr ""

#. type: findex
#: zsh.texi:33204
#, no-wrap
msgid "calendar_add"
msgstr ""

#. type: item
#: zsh.texi:33205
#, no-wrap
msgid "@t{calendar_add} [ @t{-BL} ] @var{event} ..."
msgstr ""

#. type: table
#: zsh.texi:33213
msgid ""
"Adds a single event to the calendar in the appropriate location.  The event "
"can contain multiple lines, as described in @ref{Calendar File and Date "
"Formats}.  Using this function ensures that the calendar file is sorted in "
"date and time order.  It also makes special arrangements for locking the "
"file while it is altered.  The old calendar is left in a file with the "
"suffix @t{.old}."
msgstr ""

#. type: table
#: zsh.texi:33220
msgid ""
"The option @t{-B} indicates that backing up the calendar file will be "
"handled by the caller and should not be performed by @t{calendar_add}.  The "
"option @t{-L} indicates that @t{calendar_add} does not need to lock the "
"calendar file as it is already locked.  These options will not usually be "
"needed by users."
msgstr ""

#. type: table
#: zsh.texi:33225
msgid ""
"If the style @t{reformat-date} is true, the date and time of the new entry "
"will be rewritten into the standard date format: see the descriptions of "
"this style and the style @t{date-format}."
msgstr ""

#. type: table
#: zsh.texi:33234
msgid ""
"The function can use a unique identifier stored with each event to ensure "
"that updates to existing events are treated correctly.  The entry should "
"contain the word @t{UID}, followed by whitespace, followed by a word "
"consisting entirely of hexadecimal digits of arbitrary length (all digits "
"are significant, including leading zeroes).  As the UID is not directly "
"useful to the user, it is convenient to hide it on an indented continuation "
"line starting with a @t{#}, for example:"
msgstr ""

#. type: example
#: zsh.texi:33239
#, no-wrap
msgid ""
"Aug 31, 2007 09:30  Celebrate the end of the holidays\n"
"  # UID 045B78A0\n"
msgstr ""

#. type: table
#: zsh.texi:33243
msgid "The second line will not be shown by the @t{calendar} function."
msgstr ""

#. type: table
#: zsh.texi:33250
msgid ""
"It is possible to specify the @t{RPT} keyword followed by @t{CANCELLED} "
"instead of a relative time.  This causes any matched event or series of "
"events to be cancelled (the original event does not have to be marked as "
"recurring in order to be cancelled by this method).  A @t{UID} is required "
"in order to match an existing event in the calendar."
msgstr ""

#. type: table
#: zsh.texi:33263
msgid ""
"@t{calendar_add} will attempt to manage recurrences and occurrences of "
"repeating events as described for event scheduling by @t{calendar -s} "
"above.  To reschedule or cancel a single event @t{calendar_add} should be "
"called with an entry that includes the correct @t{UID} but does @emph{not} "
"include the @t{RPT} keyword as this is taken to mean the entry applies to a "
"series of repeating events and hence replaces all existing information.  "
"Each rescheduled or cancelled occurrence must have an @t{OCCURRENCE} keyword "
"in the entry passed to @t{calendar_add} which will be merged into the "
"calendar file.  Any existing reference to the occurrence is replaced.  An "
"occurrence that does not refer to a valid existing event is added as a "
"one-off occurrence to the same calendar entry."
msgstr ""

#. type: t{#1}
#: zsh.texi:33264 zsh.texi:33265
#, no-wrap
msgid "calendar_edit"
msgstr ""

#. type: table
#: zsh.texi:33270
msgid ""
"This calls the user's editor to edit the calendar file.  If there are "
"arguments, they are taken as the editor to use (the file name is appended to "
"the commands); otherwise, the editor is given by the variable @t{VISUAL}, if "
"set, else the variable @t{EDITOR}."
msgstr ""

#. type: table
#: zsh.texi:33274
msgid ""
"If the calendar scheduler was running, then after editing the file "
"@t{calendar -s} is called to update it."
msgstr ""

#. type: table
#: zsh.texi:33281
msgid ""
"This function locks out the calendar system during the edit.  Hence it "
"should be used to edit the calendar file if there is any possibility of a "
"calendar event occurring meanwhile.  Note this can lead to another shell "
"with calendar functions enabled hanging waiting for a lock, so it is "
"necessary to quit the editor as soon as possible."
msgstr ""

#. type: findex
#: zsh.texi:33282
#, no-wrap
msgid "calendar_parse"
msgstr ""

#. type: item
#: zsh.texi:33283
#, no-wrap
msgid "@t{calendar_parse} @var{calendar-entry}"
msgstr ""

#. type: table
#: zsh.texi:33291
msgid ""
"This is the internal function that analyses the parts of a calendar entry, "
"which is passed as the only argument.  The function returns status 1 if the "
"argument could not be parsed as a calendar entry and status 2 if the wrong "
"number of arguments were passed; it also sets the parameter @t{reply} to an "
"empty associative array.  Otherwise, it returns status 0 and sets elements "
"of the associative array @t{reply} as follows:"
msgstr ""

#. type: table
#: zsh.texi:33297
msgid "The time as a string of digits in the same units as @t{$EPOCHSECONDS}"
msgstr ""

#. type: t{#1}
#: zsh.texi:33297
#, no-wrap
msgid "schedtime"
msgstr ""

#. type: table
#: zsh.texi:33302
msgid ""
"The regularly scheduled time.  This may differ from the actual event time "
"@t{time} if this is a recurring event and the next occurrence has been "
"rescheduled.  Then @t{time} gives the actual time and @t{schedtime} the time "
"of the regular recurrence before modification."
msgstr ""

#. type: t{#1}
#: zsh.texi:33302
#, no-wrap
msgid "text1"
msgstr ""

#. type: table
#: zsh.texi:33305
msgid ""
"The text from the line not including the date and time of the event, but "
"including any @t{WARN} or @t{RPT} keywords and values."
msgstr ""

#. type: t{#1}
#: zsh.texi:33305
#, no-wrap
msgid "warntime"
msgstr ""

#. type: table
#: zsh.texi:33311
msgid ""
"Any warning time given by the @t{WARN} keyword as a string of digits "
"containing the time at which to warn in the same units as "
"@t{$EPOCHSECONDS}.  (Note this is an absolute time, not the relative time "
"passed down.)  Not set no @t{WARN} keyword and value were matched."
msgstr ""

#. type: t{#1}
#: zsh.texi:33311
#, no-wrap
msgid "warnstr"
msgstr ""

#. type: table
#: zsh.texi:33313
msgid "The raw string matched after the @t{WARN} keyword, else unset."
msgstr ""

#. type: t{#1}
#: zsh.texi:33313
#, no-wrap
msgid "rpttime"
msgstr ""

#. type: table
#: zsh.texi:33318
msgid ""
"Any recurrence time given by the @t{RPT} keyword as a string of digits "
"containing the time of the recurrence in the same units as "
"@t{$EPOCHSECONDS}.  (Note this is an absolute time.)  Not set if no @t{RPT} "
"keyword and value were matched."
msgstr ""

#. type: t{#1}
#: zsh.texi:33318
#, no-wrap
msgid "schedrpttime"
msgstr ""

#. type: table
#: zsh.texi:33323
msgid ""
"The next regularly scheduled occurrence of a recurring event before "
"modification.  This may differ from @t{rpttime}, which is the actual time of "
"the event that may have been rescheduled from the regular time."
msgstr ""

#. type: t{#1}
#: zsh.texi:33323
#, no-wrap
msgid "rptstr"
msgstr ""

#. type: table
#: zsh.texi:33325
msgid "The raw string matched after the @t{RPT} keyword, else unset."
msgstr ""

#. type: t{#1}
#: zsh.texi:33325
#, no-wrap
msgid "text2"
msgstr ""

#. type: table
#: zsh.texi:33328
msgid ""
"The text from the line after removal of the date and any keywords and "
"values."
msgstr ""

#. type: findex
#: zsh.texi:33332
#, no-wrap
msgid "calendar_showdate"
msgstr ""

#. type: item
#: zsh.texi:33333
#, no-wrap
msgid "@t{calendar_showdate} [ @t{-r} ] [ @t{-f} @var{fmt} ] @var{date-spec} ..."
msgstr ""

#. type: table
#: zsh.texi:33341
msgid ""
"The given @var{date-spec} is interpreted and the corresponding date and time "
"printed.  If the initial @var{date-spec} begins with a @t{+} or @t{-} it is "
"treated as relative to the current time; @var{date-spec}s after the first "
"are treated as relative to the date calculated so far and a leading @t{+} is "
"optional in that case.  This allows one to use the system as a date "
"calculator.  For example, @t{calendar_showdate '+1 month, 1st Friday'} shows "
"the date of the first Friday of next month."
msgstr ""

#. type: table
#: zsh.texi:33345
msgid ""
"With the option @t{-r} nothing is printed but the value of the date and time "
"in seconds since the epoch is stored in the parameter @t{REPLY}."
msgstr ""

#. type: table
#: zsh.texi:33349
msgid ""
"With the option @t{-f} @var{fmt} the given date/time conversion format is "
"passed to @t{strftime}; see notes on the @t{date-format} style below."
msgstr ""

#. type: table
#: zsh.texi:33354
msgid ""
"In order to avoid ambiguity with negative relative date specifications, "
"options must occur in separate words; in other words, @t{-r} and @t{-f} "
"should not be combined in the same word."
msgstr ""

#. type: t{#1}
#: zsh.texi:33355 zsh.texi:33356
#, no-wrap
msgid "calendar_sort"
msgstr ""

#. type: table
#: zsh.texi:33359
msgid ""
"Sorts the calendar file into date and time order.  The old calendar is left "
"in a file with the suffix @t{.old}."
msgstr ""

#. type: subsection
#: zsh.texi:33364
#, no-wrap
msgid "Glob qualifiers"
msgstr ""

#. type: findex
#: zsh.texi:33369 zsh.texi:33370
#, no-wrap
msgid "age"
msgstr ""

#. type: table
#: zsh.texi:33375
msgid ""
"The function @t{age} can be autoloaded and use separately from the calendar "
"system, although it uses the function @t{calendar_scandate} for date "
"formatting.  It requires the @t{zsh/stat} builtin, but uses only the builtin "
"@t{zstat}."
msgstr ""

#. type: table
#: zsh.texi:33381
msgid ""
"@t{age} selects files having a given modification time for use as a glob "
"qualifier.  The format of the date is the same as that understood by the "
"calendar system, described in @ref{Calendar File and Date Formats}."
msgstr ""

#. type: table
#: zsh.texi:33385
msgid ""
"The function can take one or two arguments, which can be supplied either "
"directly as command or arguments, or separately as shell parameters."
msgstr ""

#. type: example
#: zsh.texi:33389
#, no-wrap
msgid "print *(e:age 2006/10/04 2006/10/09:)\n"
msgstr ""

#. type: table
#: zsh.texi:33395
msgid ""
"The example above matches all files modified between the start of those "
"dates.  The second argument may alternatively be a relative time introduced "
"by a @t{+}:"
msgstr ""

#. type: example
#: zsh.texi:33399
#, no-wrap
msgid "print *(e:age 2006/10/04 +5d:)\n"
msgstr ""

#. type: table
#: zsh.texi:33403
msgid "The example above is equivalent to the previous example."
msgstr ""

#. type: table
#: zsh.texi:33408
msgid ""
"In addition to the special use of days of the week, @t{today} and "
"@t{yesterday}, times with no date may be specified; these apply to today.  "
"Obviously such uses become problematic around midnight."
msgstr ""

#. type: example
#: zsh.texi:33412
#, no-wrap
msgid "print *(e-age 12:00 13:30-)\n"
msgstr ""

#. type: table
#: zsh.texi:33416
msgid "The example above shows files modified between 12:00 and 13:00 today."
msgstr ""

#. type: example
#: zsh.texi:33420
#, no-wrap
msgid "print *(e:age 2006/10/04:)\n"
msgstr ""

#. type: table
#: zsh.texi:33426
msgid ""
"The example above matches all files modified on that date.  If the second "
"argument is omitted it is taken to be exactly 24 hours after the first "
"argument (even if the first argument contains a time)."
msgstr ""

#. type: example
#: zsh.texi:33430
#, no-wrap
msgid "print *(e-age 2006/10/04:10:15 2006/10/04:10:45-)\n"
msgstr ""

#. type: table
#: zsh.texi:33437
msgid ""
"The example above supplies times.  Note that whitespace within the time and "
"date specification must be quoted to ensure @t{age} receives the correct "
"arguments, hence the use of the additional colon to separate the date and "
"time."
msgstr ""

#. type: example
#: zsh.texi:33443
#, no-wrap
msgid ""
"AGEREF=2006/10/04:10:15\n"
"AGEREF2=2006/10/04:10:45\n"
"print *(+age)\n"
msgstr ""

#. type: table
#: zsh.texi:33451
msgid ""
"This shows the same example before using another form of argument passing.  "
"The dates and times in the parameters @t{AGEREF} and @t{AGEREF2} stay in "
"effect until unset, but will be overridden if any argument is passed as an "
"explicit argument to age.  Any explicit argument causes both parameters to "
"be ignored."
msgstr ""

#. type: table
#: zsh.texi:33456
msgid ""
"Instead of an explicit date and time, it's possible to use the modification "
"time of a file as the date and time for either argument by introducing the "
"file name with a colon:"
msgstr ""

#. type: example
#: zsh.texi:33460
#, no-wrap
msgid "print *(e-age :file1-)\n"
msgstr ""

#. type: table
#: zsh.texi:33465
msgid ""
"matches all files created on the same day (24 hours starting from midnight) "
"as @t{file1}."
msgstr ""

#. type: example
#: zsh.texi:33469
#, no-wrap
msgid "print *(e-age :file1 :file2-)\n"
msgstr ""

#. type: table
#: zsh.texi:33474
msgid ""
"matches all files modified no earlier than @t{file1} and no later than "
"@t{file2}; precision here is to the nearest second."
msgstr ""

#. type: findex
#: zsh.texi:33475 zsh.texi:33477
#, no-wrap
msgid "after"
msgstr ""

#. type: findex
#: zsh.texi:33476 zsh.texi:33478
#, no-wrap
msgid "before"
msgstr ""

#. type: table
#: zsh.texi:33485
msgid ""
"The functions @t{after} and @t{before} are simpler versions of @t{age} that "
"take just one argument.  The argument is parsed similarly to an argument of "
"@t{age}; if it is not given the variable @t{AGEREF} is consulted.  As the "
"names of the functions suggest, a file matches if its modification time is "
"after or before the time and date specified.  If a time only is given the "
"date is today."
msgstr ""

#. type: table
#: zsh.texi:33488
msgid "The two following examples are therefore equivalent:"
msgstr ""

#. type: example
#: zsh.texi:33491
#, no-wrap
msgid ""
"print *(e-after 12:00-)\n"
"print *(e-after today:12:00-)\n"
msgstr ""

#. type: node
#: zsh.texi:33496 zsh.texi:33569 zsh.texi:33688
#, no-wrap
msgid "Calendar Utility Functions"
msgstr ""

#. type: subsection
#: zsh.texi:33498 zsh.texi:39605 zsh.texi:41236
#, no-wrap
msgid "Styles"
msgstr ""

#. type: Plain text
#: zsh.texi:33505
msgid ""
"The zsh style mechanism using the @t{zstyle} command is describe in @ref{The "
"zsh/zutil Module}.  This is the same mechanism used in the completion "
"system."
msgstr ""

#. type: Plain text
#: zsh.texi:33509
msgid ""
"The styles below are all examined in the context "
"@t{:datetime:}@var{function}@t{:}, for example @t{:datetime:calendar:}."
msgstr ""

#. type: t{#1}
#: zsh.texi:33512 zsh.texi:33513
#, no-wrap
msgid "calendar-file"
msgstr ""

#. type: table
#: zsh.texi:33515
msgid "The location of the main calendar.  The default is @t{~/calendar}."
msgstr ""

#. type: t{#1}
#: zsh.texi:33516 zsh.texi:33517
#, no-wrap
msgid "date-format"
msgstr ""

#. type: table
#: zsh.texi:33523
msgid ""
"A @t{strftime} format string (see strftime(3)) with the zsh extensions "
"providing various numbers with no leading zero or space if the number is a "
"single digit as described for the @t{%D@{}@var{string}@t{@}} prompt format "
"in @ref{Prompt Expansion}."
msgstr ""

#. type: table
#: zsh.texi:33528
msgid ""
"This is used for outputting dates in @t{calendar}, both to support the "
"@t{-v} option and when adding recurring events back to the calendar file, "
"and in @t{calendar_showdate} as the final output format."
msgstr ""

#. type: table
#: zsh.texi:33533
msgid ""
"If the style is not set, the default used is similar the standard system "
"format as output by the @t{date} command (also known as `ctime format'): "
"`@t{%a %b %d %H:%M:%S %Z %Y}'."
msgstr ""

#. type: t{#1}
#: zsh.texi:33534 zsh.texi:33535
#, no-wrap
msgid "done-file"
msgstr ""

#. type: table
#: zsh.texi:33540
msgid ""
"The location of the file to which events which have passed are appended.  "
"The default is the calendar file location with the suffix @t{.done}.  The "
"style may be set to an empty string in which case a \"done\" file will not "
"be maintained."
msgstr ""

#. type: t{#1}
#: zsh.texi:33541 zsh.texi:33542
#, no-wrap
msgid "reformat-date"
msgstr ""

#. type: table
#: zsh.texi:33548
msgid ""
"Boolean, used by @t{calendar_add}.  If it is true, the date and time of new "
"entries added to the calendar will be reformatted to the format given by the "
"style @t{date-format} or its default.  Only the date and time of the event "
"itself is reformatted; any subsidiary dates and times such as those "
"associated with repeat and warning times are left alone."
msgstr ""

#. type: t{#1}
#: zsh.texi:33549 zsh.texi:33550
#, no-wrap
msgid "show-prog"
msgstr ""

#. type: table
#: zsh.texi:33556
msgid ""
"The programme run by @t{calendar} for showing events.  It will be passed the "
"start time and stop time of the events requested in seconds since the epoch "
"followed by the event text.  Note that @t{calendar -s} uses a start time and "
"stop time equal to one another to indicate alerts for specific events."
msgstr ""

#. type: table
#: zsh.texi:33559
msgid "The default is the function @t{calendar_show}."
msgstr ""

#. type: t{#1}
#: zsh.texi:33560 zsh.texi:33561
#, no-wrap
msgid "warn-time"
msgstr ""

#. type: table
#: zsh.texi:33565
msgid ""
"The time before an event at which a warning will be displayed, if the first "
"line of the event does not include the text @t{EVENT} @var{reltime}.  The "
"default is 5 minutes."
msgstr ""

#. type: section
#: zsh.texi:33571
#, no-wrap
msgid "Utility functions"
msgstr ""

#. type: t{#1}
#: zsh.texi:33576 zsh.texi:33577
#, no-wrap
msgid "calendar_lockfiles"
msgstr ""

#. type: table
#: zsh.texi:33586
msgid ""
"Attempt to lock the files given in the argument.  To prevent problems with "
"network file locking this is done in an ad hoc fashion by attempting to "
"create a symbolic link to the file with the name @var{file}@t{.lockfile}.  "
"No other system level functions are used for locking, i.e. the file can be "
"accessed and modified by any utility that does not use this mechanism.  In "
"particular, the user is not prevented from editing the calendar file at the "
"same time unless @t{calendar_edit} is used."
msgstr ""

#. type: table
#: zsh.texi:33592
msgid ""
"Three attempts are made to lock the file before giving up.  If the module "
"@t{zsh/zselect} is available, the times of the attempts are jittered so that "
"multiple instances of the calling function are unlikely to retry at the same "
"time."
msgstr ""

#. type: table
#: zsh.texi:33596
msgid ""
"The files locked are appended to the array @t{lockfiles}, which should be "
"local to the caller."
msgstr ""

#. type: table
#: zsh.texi:33599
msgid ""
"If all files were successfully locked, status zero is returned, else status "
"one."
msgstr ""

#. type: table
#: zsh.texi:33603
msgid ""
"This function may be used as a general file locking function, although this "
"will only work if only this mechanism is used to lock files."
msgstr ""

#. type: t{#1}
#: zsh.texi:33604 zsh.texi:33605
#, no-wrap
msgid "calendar_read"
msgstr ""

#. type: table
#: zsh.texi:33611
msgid ""
"This is a backend used by various other functions to parse the calendar "
"file, which is passed as the only argument.  The array @t{calendar_entries} "
"is set to the list of events in the file; no pruning is done except that "
"ampersands are removed from the start of the line.  Each entry may contain "
"multiple lines."
msgstr ""

#. type: t{#1}
#: zsh.texi:33612 zsh.texi:33613
#, no-wrap
msgid "calendar_scandate"
msgstr ""

#. type: table
#: zsh.texi:33621
msgid ""
"This is a generic function to parse dates and times that may be used "
"separately from the calendar system.  The argument is a date or time "
"specification as described in @ref{Calendar File and Date Formats}.  The "
"parameter @t{REPLY} is set to the number of seconds since the epoch "
"corresponding to that date or time.  By default, the date and time may occur "
"anywhere within the given argument."
msgstr ""

#. type: table
#: zsh.texi:33625
msgid "Returns status zero if the date and time were successfully parsed, else one."
msgstr ""

#. type: table
#: zsh.texi:33632
msgid ""
"The date and time are anchored to the start of the argument; they will not "
"be matched if there is preceding text."
msgstr ""

#. type: table
#: zsh.texi:33636
msgid ""
"The date and time are anchored to both the start and end of the argument; "
"they will not be matched if the is any other text in the argument."
msgstr ""

#. type: table
#: zsh.texi:33639
msgid "Enable additional debugging output."
msgstr ""

#. type: table
#: zsh.texi:33643
msgid ""
"Minus.  When @t{-R} @var{anchor_time} is also given the relative time is "
"calculated backwards from @var{anchor_time}."
msgstr ""

#. type: table
#: zsh.texi:33646
msgid "The argument passed is to be parsed as a relative time."
msgstr ""

#. type: item
#: zsh.texi:33647
#, no-wrap
msgid "@t{-R} @var{anchor_time}"
msgstr ""

#. type: table
#: zsh.texi:33657
msgid ""
"The argument passed is to be parsed as a relative time.  The time is "
"relative to @var{anchor_time}, a time in seconds since the epoch, and the "
"returned value is the absolute time corresponding to advancing "
"@var{anchor_time} by the relative time given.  This allows lengths of months "
"to be correctly taken into account.  If the final day does not exist in the "
"given month, the last day of the final month is given.  For example, if the "
"anchor time is during 31st January 2007 and the relative time is 1 month, "
"the final time is the same time of day during 28th February 2007."
msgstr ""

#. type: table
#: zsh.texi:33662
msgid ""
"In addition to setting @t{REPLY}, set @t{REPLY2} to the remainder of the "
"argument after the date and time have been stripped.  This is empty if the "
"option @t{-A} was given."
msgstr ""

#. type: table
#: zsh.texi:33667
msgid ""
"Allow a time with no date specification.  The date is assumed to be today.  "
"The behaviour is unspecified if the iron tongue of midnight is tolling "
"twelve."
msgstr ""

#. type: t{#1}
#: zsh.texi:33670 zsh.texi:33671
#, no-wrap
msgid "calendar_show"
msgstr ""

#. type: table
#: zsh.texi:33674
msgid ""
"The function used by default to display events.  It accepts a start time and "
"end time for events, both in epoch seconds, and an event description."
msgstr ""

#. type: table
#: zsh.texi:33679
msgid ""
"The event is always printed to standard output.  If the command line editor "
"is active (which will usually be the case) the command line will be "
"redisplayed after the output."
msgstr ""

#. type: table
#: zsh.texi:33684
msgid ""
"If the parameter @t{DISPLAY} is set and the start and end times are the same "
"(indicating a scheduled event), the function uses the command @t{xmessage} "
"to display a window with the event details."
msgstr ""

#. type: section
#: zsh.texi:33690
#, no-wrap
msgid "Bugs"
msgstr ""

#. type: Plain text
#: zsh.texi:33698
msgid ""
"As the system is based entirely on shell functions (with a little support "
"from the @t{zsh/datetime} module) the mechanisms used are not as robust as "
"those provided by a dedicated calendar utility.  Consequently the user "
"should not rely on the shell for vital alerts."
msgstr ""

#. type: Plain text
#: zsh.texi:33701
msgid "There is no @t{calendar_delete} function."
msgstr ""

#. type: Plain text
#: zsh.texi:33705
msgid ""
"There is no localization support for dates and times, nor any support for "
"the use of time zones."
msgstr ""

#. type: Plain text
#: zsh.texi:33709
msgid ""
"Relative periods of months and years do not take into account the variable "
"number of days."
msgstr ""

#. type: Plain text
#: zsh.texi:33714
msgid ""
"The @t{calendar_show} function is currently hardwired to use @t{xmessage} "
"for displaying alerts on X Window System displays.  This should be "
"configurable and ideally integrate better with the desktop."
msgstr ""

#. type: Plain text
#: zsh.texi:33721
msgid ""
"@t{calendar_lockfiles} hangs the shell while waiting for a lock on a file.  "
"If called from a scheduled task, it should instead reschedule the event that "
"caused it."
msgstr ""

#. type: cindex
#: zsh.texi:33725
#, no-wrap
msgid "TCP function system"
msgstr ""

#. type: cindex
#: zsh.texi:33726
#, no-wrap
msgid "ztcp, function system based on"
msgstr ""

#. type: Plain text
#: zsh.texi:33742
msgid ""
"A module @t{zsh/net/tcp} is provided to provide network I/O over TCP/IP from "
"within the shell; see its description in @ref{Zsh Modules}.  This manual "
"page describes a function suite based on the module.  If the module is "
"installed, the functions are usually installed at the same time, in which "
"case they will be available for autoloading in the default function search "
"path.  In addition to the @t{zsh/net/tcp} module, the @t{zsh/zselect} module "
"is used to implement timeouts on read operations.  For troubleshooting tips, "
"consult the corresponding advice for the @t{zftp} functions described in "
"@ref{Zftp Function System}."
msgstr ""

#. type: Plain text
#: zsh.texi:33752
msgid ""
"There are functions corresponding to the basic I/O operations open, close, "
"read and send, named @t{tcp_open} etc., as well as a function @t{tcp_expect} "
"for pattern match analysis of data read as input.  The system makes it easy "
"to receive data from and send data to multiple named sessions at once.  In "
"addition, it can be linked with the shell's line editor in such a way that "
"input data is automatically shown at the terminal.  Other facilities "
"available including logging, filtering and configurable output prompts."
msgstr ""

#. type: Plain text
#: zsh.texi:33758
msgid ""
"To use the system where it is available, it should be enough to `@t{autoload "
"-U tcp_open}' and run @t{tcp_open} as documented below to start a session.  "
"The @t{tcp_open} function will autoload the remaining functions."
msgstr ""

#. type: node
#: zsh.texi:33768 zsh.texi:34402
#, no-wrap
msgid "TCP Functions"
msgstr ""

#. type: node
#: zsh.texi:33768 zsh.texi:34402 zsh.texi:34617
#, no-wrap
msgid "TCP Parameters"
msgstr ""

#. type: section
#: zsh.texi:33770
#, no-wrap
msgid "TCP User Functions"
msgstr ""

#. type: subsection
#: zsh.texi:33775
#, no-wrap
msgid "Basic I/O"
msgstr ""

#. type: findex
#: zsh.texi:33780
#, no-wrap
msgid "tcp_open"
msgstr ""

#. type: item
#: zsh.texi:33781
#, no-wrap
msgid "@t{tcp_open} [ @t{-qz} ] @var{host port} [ @var{sess} ]"
msgstr ""

#. type: itemx
#: zsh.texi:33782
#, no-wrap
msgid ""
"@t{tcp_open} [ @t{-qz} ] [ @t{-s} @var{sess} | @t{-l} @var{sess}[@t{,}...] ] "
"..."
msgstr ""

#. type: itemx
#: zsh.texi:33783
#, no-wrap
msgid ""
"@t{tcp_open} [ @t{-qz} ] [ @t{-a} @var{fd} | @t{-f} @var{fd} ] [ @var{sess} "
"]"
msgstr ""

#. type: table
#: zsh.texi:33787
msgid ""
"Open a new session.  In the first and simplest form, open a TCP connection "
"to host @var{host} at port @var{port}; numeric and symbolic forms are "
"understood for both."
msgstr ""

#. type: table
#: zsh.texi:33796
msgid ""
"If @var{sess} is given, this becomes the name of the session which can be "
"used to refer to multiple different TCP connections.  If @var{sess} is not "
"given, the function will invent a numeric name value (note this is "
"@emph{not} the same as the file descriptor to which the session is "
"attached).  It is recommended that session names not include `funny' "
"characters, where funny characters are not well-defined but certainly do not "
"include alphanumerics or underscores, and certainly do include whitespace."
msgstr ""

#. type: table
#: zsh.texi:33808
msgid ""
"In the second case, one or more sessions to be opened are given by name.  A "
"single session name is given after @t{-s} and a comma-separated list after "
"@t{-l}; both options may be repeated as many times as necessary.  A failure "
"to open any session causes @t{tcp_open} to abort.  The host and port are "
"read from the file @t{.ztcp_sessions} in the same directory as the user's "
"zsh initialisation files, i.e. usually the home directory, but @t{$ZDOTDIR} "
"if that is set.  The file consists of lines each giving a session name and "
"the corresponding host and port, in that order (note the session name comes "
"first, not last), separated by whitespace."
msgstr ""

#. type: table
#: zsh.texi:33820
msgid ""
"The third form allows passive and fake TCP connections.  If the option "
"@t{-a} is used, its argument is a file descriptor open for listening for "
"connections.  No function front-end is provided to open such a file "
"descriptor, but a call to `@t{ztcp -l} @var{port}' will create one with the "
"file descriptor stored in the parameter @t{$REPLY}.  The listening port can "
"be closed with `@t{ztcp -c} @var{fd}'.  A call to `@t{tcp_open -a} @var{fd}' "
"will block until a remote TCP connection is made to @var{port} on the local "
"machine.  At this point, a session is created in the usual way and is "
"largely indistinguishable from an active connection created with one of the "
"first two forms."
msgstr ""

#. type: table
#: zsh.texi:33828
msgid ""
"If the option @t{-f} is used, its argument is a file descriptor which is "
"used directly as if it were a TCP session.  How well the remainder of the "
"TCP function system copes with this depends on what actually underlies this "
"file descriptor.  A regular file is likely to be unusable; a FIFO (pipe) of "
"some sort will work better, but note that it is not a good idea for two "
"different sessions to attempt to read from the same FIFO at once."
msgstr ""

#. type: table
#: zsh.texi:33833
msgid ""
"If the option @t{-q} is given with any of the three forms, @t{tcp_open} will "
"not print informational messages, although it will in any case exit with an "
"appropriate status."
msgstr ""

#. type: table
#: zsh.texi:33847
msgid ""
"If the line editor (zle) is in use, which is typically the case if the shell "
"is interactive, @t{tcp_open} installs a handler inside zle which will check "
"for new data at the same time as it checks for keyboard input.  This is "
"convenient as the shell consumes no CPU time while waiting; the test is "
"performed by the operating system.  Giving the option @t{-z} to any of the "
"forms of @t{tcp_open} prevents the handler from being installed, so data "
"must be read explicitly.  Note, however, this is not necessary for executing "
"complete sets of send and read commands from a function, as zle is not "
"active at this point.  Generally speaking, the handler is only active when "
"the shell is waiting for input at a command prompt or in the @t{vared} "
"builtin.  The option has no effect if zle is not active; `@t{[[ -o zle]]}' "
"will test for this."
msgstr ""

#. type: table
#: zsh.texi:33853
msgid ""
"The first session to be opened becomes the current session and subsequent "
"calls to @t{tcp_open} do not change it.  The current session is stored in "
"the parameter @t{$TCP_SESS}; see below for more detail about the parameters "
"used by the system."
msgstr ""

#. type: table
#: zsh.texi:33857
msgid ""
"The function @t{tcp_on_open}, if defined, is called when a session is "
"opened.  See the description below."
msgstr ""

#. type: findex
#: zsh.texi:33858
#, no-wrap
msgid "tcp_close"
msgstr ""

#. type: item
#: zsh.texi:33859
#, no-wrap
msgid ""
"@t{tcp_close} [ @t{-qn} ] [ @t{-a} | @t{-l} @var{sess}[@t{,}...] | "
"@var{sess} ... ]"
msgstr ""

#. type: table
#: zsh.texi:33864
msgid ""
"Close the named sessions, or the current session if none is given, or all "
"open sessions if @t{-a} is given.  The options @t{-l} and @t{-s} are both "
"handled for consistency with @t{tcp_open}, although the latter is redundant."
msgstr ""

#. type: table
#: zsh.texi:33868
msgid ""
"If the session being closed is the current one, @t{$TCP_SESS} is unset, "
"leaving no current session, even if there are other sessions still open."
msgstr ""

#. type: table
#: zsh.texi:33876
msgid ""
"If the session was opened with @t{tcp_open -f}, the file descriptor is "
"closed so long as it is in the range 0 to 9 accessible directly from the "
"command line.  If the option @t{-n} is given, no attempt will be made to "
"close file descriptors in this case.  The @t{-n} option is not used for "
"genuine @t{ztcp} session; the file descriptors are always closed with the "
"session."
msgstr ""

#. type: table
#: zsh.texi:33879
msgid "If the option @t{-q} is given, no informational messages will be printed."
msgstr ""

#. type: findex
#: zsh.texi:33880
#, no-wrap
msgid "tcp_read"
msgstr ""

#. type: item
#: zsh.texi:33882
#, no-wrap
msgid "@t{tcp_read }[ @t{-bdq} ] [ @t{-t} @var{TO} ] [ @t{-T} @var{TO} ]"
msgstr ""

#. type: itemx
#: zsh.texi:33883
#, no-wrap
msgid ""
"@t{@ @ @ @ @ @ @ @ @ }[ @t{-a} | @t{-u} @var{fd}[@t{,}...] | @t{-l} "
"@var{sess}[@t{,}...] | @t{-s} @var{sess} ... ]"
msgstr ""

#. type: table
#: zsh.texi:33891
msgid ""
"Perform a read operation on the current session, or on a list of sessions if "
"any are given with @t{-u}, @t{-l} or @t{-s}, or all open sessions if the "
"option @t{-a} is given.  Any of the @t{-u}, @t{-l} or @t{-s} options may be "
"repeated or mixed together.  The @t{-u} option specifies a file descriptor "
"directly (only those managed by this system are useful), the other two "
"specify sessions as described for @t{tcp_open} above."
msgstr ""

#. type: table
#: zsh.texi:33903
msgid ""
"The function checks for new data available on all the sessions listed.  "
"Unless the @t{-b} option is given, it will not block waiting for new data.  "
"Any one line of data from any of the available sessions will be read, stored "
"in the parameter @t{$TCP_LINE}, and displayed to standard output unless "
"@t{$TCP_SILENT} contains a non-empty string.  When printed to standard "
"output the string @t{$TCP_PROMPT} will be shown at the start of the line; "
"the default form for this includes the name of the session being read.  See "
"below for more information on these parameters.  In this mode, @t{tcp_read} "
"can be called repeatedly until it returns status 2 which indicates all "
"pending input from all specified sessions has been handled."
msgstr ""

#. type: table
#: zsh.texi:33908
msgid ""
"With the option @t{-b}, equivalent to an infinite timeout, the function will "
"block until a line is available to read from one of the specified sessions.  "
"However, only a single line is returned."
msgstr ""

#. type: table
#: zsh.texi:33915
msgid ""
"The option @t{-d} indicates that all pending input should be drained.  In "
"this case @t{tcp_read} may process multiple lines in the manner given above; "
"only the last is stored in @t{$TCP_LINE}, but the complete set is stored in "
"the array @t{$tcp_lines}.  This is cleared at the start of each call to "
"@t{tcp_read}."
msgstr ""

#. type: table
#: zsh.texi:33923
msgid ""
"The options @t{-t} and @t{-T} specify a timeout in seconds, which may be a "
"floating point number for increased accuracy.  With @t{-t} the timeout is "
"applied before each line read.  With @t{-T}, the timeout applies to the "
"overall operation, possibly including multiple read operations if the option "
"@t{-d} is present; without this option, there is no distinction between "
"@t{-t} and @t{-T}."
msgstr ""

#. type: table
#: zsh.texi:33927
msgid ""
"The function does not print informational messages, but if the option @t{-q} "
"is given, no error message is printed for a non-existent session."
msgstr ""

#. type: table
#: zsh.texi:33931
msgid ""
"A return status of 2 indicates a timeout or no data to read.  Any other "
"non-zero return status indicates some error condition."
msgstr ""

#. type: table
#: zsh.texi:33934
msgid "See @t{tcp_log} for how to control where data is sent by @t{tcp_read}."
msgstr ""

#. type: findex
#: zsh.texi:33935
#, no-wrap
msgid "tcp_send"
msgstr ""

#. type: item
#: zsh.texi:33936
#, no-wrap
msgid ""
"@t{tcp_send} [ @t{-cnq} ] [ @t{-s} @var{sess} | @t{-l} @var{sess}[@t{,}...] "
"] @var{data} ..."
msgstr ""

#. type: itemx
#: zsh.texi:33937
#, no-wrap
msgid "@t{tcp_send} [ @t{-cnq} ] @t{-a} @var{data} ..."
msgstr ""

#. type: table
#: zsh.texi:33942
msgid ""
"Send the supplied data strings to all the specified sessions in turn.  The "
"underlying operation differs little from a `@t{print -r}' to the session's "
"file descriptor, although it attempts to prevent the shell from dying owing "
"to a @t{SIGPIPE} caused by an attempt to write to a defunct session."
msgstr ""

#. type: table
#: zsh.texi:33948
msgid ""
"The option @t{-c} causes @t{tcp_send} to behave like @t{cat}.  It reads "
"lines from standard input until end of input and sends them in turn to the "
"specified session(s) exactly as if they were given as @var{data} arguments "
"to individual @t{tcp_send} commands."
msgstr ""

#. type: table
#: zsh.texi:33952
msgid ""
"The option @t{-n} prevents @t{tcp_send} from putting a newline at the end of "
"the data strings."
msgstr ""

#. type: table
#: zsh.texi:33955
msgid "The remaining options all behave as for @t{tcp_read}."
msgstr ""

#. type: table
#: zsh.texi:33959
msgid ""
"The data arguments are not further processed once they have been passed to "
"@t{tcp_send}; they are simply passed down to @t{print -r}."
msgstr ""

#. type: table
#: zsh.texi:33965
msgid ""
"If the parameter @t{$TCP_OUTPUT} is a non-empty string and logging is "
"enabled then the data sent to each session will be echoed to the log file(s) "
"with @t{$TCP_OUTPUT} in front where appropriate, much in the manner of "
"@t{$TCP_PROMPT}."
msgstr ""

#. type: subsection
#: zsh.texi:33970
#, no-wrap
msgid "Session Management"
msgstr ""

#. type: findex
#: zsh.texi:33975
#, no-wrap
msgid "tcp_alias"
msgstr ""

#. type: item
#: zsh.texi:33976
#, no-wrap
msgid "@t{tcp_alias} [ @t{-q} ] @var{alias}@t{=}@var{sess} ..."
msgstr ""

#. type: itemx
#: zsh.texi:33977
#, no-wrap
msgid "@t{tcp_alias} [ @t{-q} ] [ @var{alias} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:33978
#, no-wrap
msgid "@t{tcp_alias} @t{-d} [ @t{-q} ] @var{alias} ..."
msgstr ""

#. type: table
#: zsh.texi:33980
msgid "This function is not particularly well tested."
msgstr ""

#. type: table
#: zsh.texi:33985
msgid ""
"The first form creates an alias for a session name; @var{alias} can then be "
"used to refer to the existing session @var{sess}.  As many aliases may be "
"listed as required."
msgstr ""

#. type: table
#: zsh.texi:33988
msgid "The second form lists any aliases specified, or all aliases if none."
msgstr ""

#. type: table
#: zsh.texi:33992
msgid ""
"The third form deletes all the aliases listed.  The underlying sessions are "
"not affected."
msgstr ""

#. type: table
#: zsh.texi:33996
msgid ""
"The option @t{-q} suppresses an inconsistently chosen subset of error "
"messages."
msgstr ""

#. type: findex
#: zsh.texi:33997
#, no-wrap
msgid "tcp_log"
msgstr ""

#. type: item
#: zsh.texi:33998
#, no-wrap
msgid "@t{tcp_log} [ @t{-asc} ] [ @t{-n} | @t{-N} ] [ @var{logfile} ]"
msgstr ""

#. type: table
#: zsh.texi:34003
msgid ""
"With an argument @var{logfile}, all future input from @t{tcp_read} will be "
"logged to the named file.  Unless @t{-a} (append) is given, this file will "
"first be truncated or created empty.  With no arguments, show the current "
"status of logging."
msgstr ""

#. type: table
#: zsh.texi:34011
msgid ""
"With the option @t{-s}, per-session logging is enabled.  Input from "
"@t{tcp_read} is output to the file @var{logfile}@t{.}@var{sess}.  As the "
"session is automatically discriminated by the filename, the contents are raw "
"(no @t{$TCP_PROMPT}).  The option @t{-a} applies as above.  Per-session "
"logging and logging of all data in one file are not mutually exclusive."
msgstr ""

#. type: table
#: zsh.texi:34014
msgid "The option @t{-c} closes all logging, both complete and per-session logs."
msgstr ""

#. type: table
#: zsh.texi:34019
msgid ""
"The options @t{-n} and @t{-N} respectively turn off or restore output of "
"data read by @t{tcp_read} to standard output; hence `@t{tcp_log -cn}' turns "
"off all output by @t{tcp_read}."
msgstr ""

#. type: table
#: zsh.texi:34023
msgid ""
"The function is purely a convenient front end to setting the parameters "
"@t{$TCP_LOG}, @t{$TCP_LOG_SESS}, @t{$TCP_SILENT}, which are described below."
msgstr ""

#. type: findex
#: zsh.texi:34024
#, no-wrap
msgid "tcp_rename"
msgstr ""

#. type: item
#: zsh.texi:34025
#, no-wrap
msgid "@t{tcp_rename} @var{old} @var{new}"
msgstr ""

#. type: table
#: zsh.texi:34027
msgid ""
"Rename session @var{old} to session @var{new}.  The old name becomes "
"invalid."
msgstr ""

#. type: findex
#: zsh.texi:34028
#, no-wrap
msgid "tcp_sess"
msgstr ""

#. type: item
#: zsh.texi:34029
#, no-wrap
msgid "@t{tcp_sess} [ @var{sess} [ @var{command} [ @var{arg} ... ] ] ]"
msgstr ""

#. type: table
#: zsh.texi:34034
msgid ""
"With no arguments, list all the open sessions and associated file "
"descriptors.  The current session is marked with a star.  For use in "
"functions, direct access to the parameters @t{$tcp_by_name}, @t{$tcp_by_fd} "
"and @t{$TCP_SESS} is probably more convenient; see below."
msgstr ""

#. type: table
#: zsh.texi:34038
msgid ""
"With a @var{sess} argument, set the current session to @var{sess}.  This is "
"equivalent to changing @t{$TCP_SESS} directly."
msgstr ""

#. type: table
#: zsh.texi:34045
msgid ""
"With additional arguments, temporarily set the current session while "
"executing `@var{command} @var{arg} ...'.  @var{command} is re-evaluated so "
"as to expand aliases etc., but the remaining @var{arg}s are passed through "
"as that appear to @t{tcp_sess}.  The original session is restored when "
"@t{tcp_sess} exits."
msgstr ""

#. type: subsection
#: zsh.texi:34050
#, no-wrap
msgid "Advanced I/O"
msgstr ""

#. type: findex
#: zsh.texi:34055
#, no-wrap
msgid "tcp_command"
msgstr ""

#. type: item
#: zsh.texi:34056
#, no-wrap
msgid "@t{tcp_command} @var{send-option} ... @var{send-argument} ..."
msgstr ""

#. type: table
#: zsh.texi:34062
msgid ""
"This is a convenient front-end to @t{tcp_send}.  All arguments are passed to "
"@t{tcp_send}, then the function pauses waiting for data.  While data is "
"arriving at least every @t{$TCP_TIMEOUT} (default 0.3) seconds, data is "
"handled and printed out according to the current settings.  Status 0 is "
"always returned."
msgstr ""

#. type: table
#: zsh.texi:34068
msgid ""
"This is generally only useful for interactive use, to prevent the display "
"becoming fragmented by output returned from the connection.  Within a "
"programme or function it is generally better to handle reading data by a "
"more explicit method."
msgstr ""

#. type: findex
#: zsh.texi:34069
#, no-wrap
msgid "tcp_expect"
msgstr ""

#. type: item
#: zsh.texi:34071
#, no-wrap
msgid ""
"@t{tcp_expect }[ @t{-q} ] [ @t{-p} @var{var} | @t{-P} @var{var} ] [ @t{-t} "
"@var{TO} | @t{-T} @var{TO} ]"
msgstr ""

#. type: itemx
#: zsh.texi:34072
#, no-wrap
msgid ""
"@t{@ @ @ @ @ @ @ @ @ @ @ }[ @t{-a} | @t{-s} @var{sess} | @t{-l} "
"@var{sess}[@t{,}...] ] @var{pattern} ..."
msgstr ""

#. type: table
#: zsh.texi:34078
msgid ""
"Wait for input matching any of the given @var{pattern}s from any of the "
"specified sessions.  Input is ignored until an input line matches one of the "
"given patterns; at this point status zero is returned, the matching line is "
"stored in @t{$TCP_LINE}, and the full set of lines read during the call to "
"@t{tcp_expect} is stored in the array @t{$tcp_expect_lines}."
msgstr ""

#. type: table
#: zsh.texi:34083
msgid ""
"Sessions are specified in the same way as @t{tcp_read}: the default is to "
"use the current session, otherwise the sessions specified by @t{-a}, @t{-s}, "
"or @t{-l} are used."
msgstr ""

#. type: table
#: zsh.texi:34093
msgid ""
"Each @var{pattern} is a standard zsh extended-globbing pattern; note that it "
"needs to be quoted to avoid it being expanded immediately by filename "
"generation.  It must match the full line, so to match a substring there must "
"be a `@t{*}' at the start and end.  The line matched against includes the "
"@t{$TCP_PROMPT} added by @t{tcp_read}.  It is possible to include the "
"globbing flags `@t{#b}' or `@t{#m}' in the patterns to make backreferences "
"available in the parameters @t{$MATCH}, @t{$match}, etc., as described in "
"the base zsh documentation on pattern matching."
msgstr ""

#. type: table
#: zsh.texi:34101
msgid ""
"Unlike @t{tcp_read}, the default behaviour of @t{tcp_expect} is to block "
"indefinitely until the required input is found.  This can be modified by "
"specifying a timeout with @t{-t} or @t{-T}; these function as in "
"@t{tcp_read}, specifying a per-read or overall timeout, respectively, in "
"seconds, as an integer or floating-point number.  As @t{tcp_read}, the "
"function returns status 2 if a timeout occurs."
msgstr ""

#. type: table
#: zsh.texi:34110
msgid ""
"The function returns as soon as any one of the patterns given match.  If the "
"caller needs to know which of the patterns matched, the option @t{-p} "
"@var{var} can be used; on return, @t{$var} is set to the number of the "
"pattern using ordinary zsh indexing, i.e. the first is 1, and so on.  Note "
"the absence of a `@t{$}' in front of @var{var}.  To avoid clashes, the "
"parameter cannot begin with `@t{_expect}'.  The index -1 is used if there is "
"a timeout and 0 if there is no match."
msgstr ""

#. type: table
#: zsh.texi:34119
msgid ""
"The option @t{-P} @var{var} works similarly to @t{-p}, but instead of "
"numerical indexes the regular arguments must begin with a prefix followed by "
"a colon: that prefix is then used as a tag to which @var{var} is set when "
"the argument matches.  The tag @t{timeout} is used if there is a timeout and "
"the empty string if there is no match.  Note it is acceptable for different "
"arguments to start with the same prefix if the matches do not need to be "
"distinguished."
msgstr ""

#. type: table
#: zsh.texi:34122
msgid "The option @t{-q} is passed directly down to @t{tcp_read}."
msgstr ""

#. type: table
#: zsh.texi:34129
msgid ""
"As all input is done via @t{tcp_read}, all the usual rules about output of "
"lines read apply.  One exception is that the parameter @t{$tcp_lines} will "
"only reflect the line actually matched by @t{tcp_expect}; use "
"@t{$tcp_expect_lines} for the full set of lines read during the function "
"call."
msgstr ""

#. type: t{#1}
#: zsh.texi:34130 zsh.texi:34131
#, no-wrap
msgid "tcp_proxy"
msgstr ""

#. type: table
#: zsh.texi:34136
msgid ""
"This is a simple-minded function to accept a TCP connection and execute a "
"command with I/O redirected to the connection.  Extreme caution should be "
"taken as there is no security whatsoever and this can leave your computer "
"open to the world.  Ideally, it should only be used behind a firewall."
msgstr ""

#. type: table
#: zsh.texi:34139
msgid "The first argument is a TCP port on which the function will listen."
msgstr ""

#. type: table
#: zsh.texi:34147
msgid ""
"The remaining arguments give a command and its arguments to execute with "
"standard input, standard output and standard error redirected to the file "
"descriptor on which the TCP session has been accepted.  If no command is "
"given, a new zsh is started.  This gives everyone on your network direct "
"access to your account, which in many cases will be a bad thing."
msgstr ""

#. type: table
#: zsh.texi:34151
msgid ""
"The command is run in the background, so @t{tcp_proxy} can then accept new "
"connections.  It continues to accept new connections until interrupted."
msgstr ""

#. type: findex
#: zsh.texi:34152
#, no-wrap
msgid "tcp_spam"
msgstr ""

#. type: item
#: zsh.texi:34153
#, no-wrap
msgid ""
"@t{tcp_spam} [ @t{-ertv} ] [ @t{-a} | @t{-s} @var{sess} | @t{-l} "
"@var{sess}[@t{,}...] ] @var{cmd} [ @var{arg} ... ]"
msgstr ""

#. type: table
#: zsh.texi:34157
msgid ""
"Execute `@var{cmd} [ @var{arg} ... ]' for each session in turn.  Note this "
"executes the command and arguments; it does not send the command line as "
"data unless the @t{-t} (transmit) option is given."
msgstr ""

#. type: table
#: zsh.texi:34165
msgid ""
"The sessions may be selected explicitly with the standard @t{-a}, @t{-s} or "
"@t{-l} options, or may be chosen implicitly.  If none of the three options "
"is given the rules are: first, if the array @t{$tcp_spam_list} is set, this "
"is taken as the list of sessions, otherwise all sessions are taken.  Second, "
"any sessions given in the array @t{$tcp_no_spam_list} are removed from the "
"list of sessions."
msgstr ""

#. type: table
#: zsh.texi:34171
msgid ""
"Normally, any sessions added by the `@t{-a}' flag or when all sessions are "
"chosen implicitly are spammed in alphabetic order; sessions given by the "
"@t{$tcp_spam_list} array or on the command line are spammed in the order "
"given.  The @t{-r} flag reverses the order however it was arrived it."
msgstr ""

#. type: table
#: zsh.texi:34177
msgid ""
"The @t{-v} flag specifies that a @t{$TCP_PROMPT} will be output before each "
"session.  This is output after any modification to @t{TCP_SESS} by the "
"user-defined @t{tcp_on_spam} function described below.  (Obviously that "
"function is able to generate its own output.)"
msgstr ""

#. type: table
#: zsh.texi:34181
msgid ""
"If the option @t{-e} is present, the line given as `@var{cmd} [ @var{arg} "
"... ]' is executed using @t{eval}, otherwise it is executed without any "
"further processing."
msgstr ""

#. type: t{#1}
#: zsh.texi:34182 zsh.texi:34183
#, no-wrap
msgid "tcp_talk"
msgstr ""

#. type: table
#: zsh.texi:34186
msgid ""
"This is a fairly simple-minded attempt to force input to the line editor to "
"go straight to the default @t{TCP_SESS}."
msgstr ""

#. type: table
#: zsh.texi:34194
msgid ""
"An escape string, @t{$TCP_TALK_ESCAPE}, default `@t{:}', is used to allow "
"access to normal shell operation.  If it is on its own at the start of the "
"line, or followed only by whitespace, the line editor returns to normal "
"operation.  Otherwise, the string and any following whitespace are skipped "
"and the remainder of the line executed as shell input without any change of "
"the line editor's operating mode."
msgstr ""

#. type: table
#: zsh.texi:34201
msgid ""
"The current implementation is somewhat deficient in terms of use of the "
"command history.  For this reason, many users will prefer to use some form "
"of alternative approach for sending data easily to the current session.  One "
"simple approach is to alias some special character (such as `@t{%}') to "
"`@t{tcp_command -}@t{-}'."
msgstr ""

#. type: t{#1}
#: zsh.texi:34202 zsh.texi:34203
#, no-wrap
msgid "tcp_wait"
msgstr ""

#. type: table
#: zsh.texi:34209
msgid ""
"The sole argument is an integer or floating point number which gives the "
"seconds to delay.  The shell will do nothing for that period except wait for "
"input on all TCP sessions by calling @t{tcp_read -a}.  This is similar to "
"the interactive behaviour at the command prompt when zle handlers are "
"installed."
msgstr ""

#. type: subsection
#: zsh.texi:34214
#, no-wrap
msgid "`One-shot' file transfer"
msgstr ""

#. type: item
#: zsh.texi:34217
#, no-wrap
msgid "@t{tcp_point} @var{port}"
msgstr ""

#. type: itemx
#: zsh.texi:34218
#, no-wrap
msgid "@t{tcp_shoot} @var{host} @var{port}"
msgstr ""

#. type: table
#: zsh.texi:34226
msgid ""
"This pair of functions provide a simple way to transfer a file between two "
"hosts within the shell.  Note, however, that bulk data transfer is currently "
"done using @t{cat}.  @t{tcp_point} reads any data arriving at @var{port} and "
"sends it to standard output; @t{tcp_shoot} connects to @var{port} on "
"@var{host} and sends its standard input.  Any unused @var{port} may be used; "
"the standard mechanism for picking a port is to think of a random four-digit "
"number above 1024 until one works."
msgstr ""

#. type: table
#: zsh.texi:34230
msgid ""
"To transfer a file from host @t{woodcock} to host @t{springes}, on "
"@t{springes}:"
msgstr ""

#. type: example
#: zsh.texi:34234
#, no-wrap
msgid "tcp_point 8091 >output_file\n"
msgstr ""

#. type: table
#: zsh.texi:34238
msgid "and on @t{woodcock}:"
msgstr ""

#. type: example
#: zsh.texi:34242
#, no-wrap
msgid "tcp_shoot springes 8091 <input_file\n"
msgstr ""

#. type: table
#: zsh.texi:34247
msgid ""
"As these two functions do not require @t{tcp_open} to set up a TCP "
"connection first, they may need to be autoloaded separately."
msgstr ""

#. type: section
#: zsh.texi:34252
#, no-wrap
msgid "TCP User-defined Functions"
msgstr ""

#. type: Plain text
#: zsh.texi:34261
msgid ""
"Certain functions, if defined by the user, will be called by the function "
"system in certain contexts.  This facility depends on the module "
"@t{zsh/parameter}, which is usually available in interactive shells as the "
"completion system depends on it.  None of the functions need be defined; "
"they simply provide convenient hooks when necessary."
msgstr ""

#. type: Plain text
#: zsh.texi:34265
msgid ""
"Typically, these are called after the requested action has been taken, so "
"that the various parameters will reflect the new state."
msgstr ""

#. type: findex
#: zsh.texi:34268
#, no-wrap
msgid "tcp_on_alias"
msgstr ""

#. type: item
#: zsh.texi:34269
#, no-wrap
msgid "@t{tcp_on_alias} @var{alias} @var{fd}"
msgstr ""

#. type: table
#: zsh.texi:34272
msgid ""
"When an alias is defined, this function will be called with two arguments: "
"the name of the alias, and the file descriptor of the corresponding session."
msgstr ""

#. type: findex
#: zsh.texi:34273
#, no-wrap
msgid "tcp_on_awol"
msgstr ""

#. type: item
#: zsh.texi:34274
#, no-wrap
msgid "@t{tcp_on_awol} @var{sess} @var{fd}"
msgstr ""

#. type: table
#: zsh.texi:34285
msgid ""
"If the function @t{tcp_fd_handler} is handling input from the line editor "
"and detects that the file descriptor is no longer reusable, by default it "
"removes it from the list of file descriptors handled by this method and "
"prints a message.  If the function @t{tcp_on_awol} is defined it is called "
"immediately before this point.  It may return status 100, which indicates "
"that the normal handling should still be performed; any other return status "
"indicates that no further action should be taken and the @t{tcp_fd_handler} "
"should return immediately with the given status.  Typically the action of "
"@t{tcp_on_awol} will be to close the session."
msgstr ""

#. type: table
#: zsh.texi:34290
msgid ""
"The variable @t{TCP_INVALIDATE_ZLE} will be a non-empty string if it is "
"necessary to invalidate the line editor display using `@t{zle -I}' before "
"printing output from the function."
msgstr ""

#. type: table
#: zsh.texi:34294
msgid ""
"(`AWOL' is military jargon for `absent without leave' or some variation.  It "
"has no pre-existing technical meaning known to the author.)"
msgstr ""

#. type: findex
#: zsh.texi:34295
#, no-wrap
msgid "tcp_on_close"
msgstr ""

#. type: item
#: zsh.texi:34296
#, no-wrap
msgid "@t{tcp_on_close} @var{sess} @var{fd}"
msgstr ""

#. type: table
#: zsh.texi:34300
msgid ""
"This is called with the name of a session being closed and the file "
"descriptor which corresponded to that session.  Both will be invalid by the "
"time the function is called."
msgstr ""

#. type: findex
#: zsh.texi:34301
#, no-wrap
msgid "tcp_on_open"
msgstr ""

#. type: item
#: zsh.texi:34302
#, no-wrap
msgid "@t{tcp_on_open} @var{sess} @var{fd}"
msgstr ""

#. type: table
#: zsh.texi:34308
msgid ""
"This is called after a new session has been defined with the session name "
"and file descriptor as arguments.  If it returns a non-zero status, opening "
"the session is assumed to fail and the session is closed again; however, "
"@t{tcp_open} will continue to attempt to open any remaining sessions given "
"on the command line."
msgstr ""

#. type: findex
#: zsh.texi:34309
#, no-wrap
msgid "tcp_on_rename"
msgstr ""

#. type: item
#: zsh.texi:34310
#, no-wrap
msgid "@t{tcp_on_rename} @var{oldsess} @var{fd} @var{newsess}"
msgstr ""

#. type: table
#: zsh.texi:34313
msgid ""
"This is called after a session has been renamed with the three arguments old "
"session name, file descriptor, new session name."
msgstr ""

#. type: findex
#: zsh.texi:34314
#, no-wrap
msgid "tcp_on_spam"
msgstr ""

#. type: item
#: zsh.texi:34315
#, no-wrap
msgid "@t{tcp_on_spam} @var{sess} @var{command ...}"
msgstr ""

#. type: table
#: zsh.texi:34320
msgid ""
"This is called once for each session spammed, just @emph{before} a command "
"is executed for a session by @t{tcp_spam}.  The arguments are the session "
"name followed by the command list to be executed.  If @t{tcp_spam} was "
"called with the option @t{-t}, the first command will be @t{tcp_send}."
msgstr ""

#. type: table
#: zsh.texi:34327
msgid ""
"This function is called after @t{$TCP_SESS} is set to reflect the session to "
"be spammed, but before any use of it is made.  Hence it is possible to alter "
"the value of @t{$TCP_SESS} within this function.  For example, the session "
"arguments to @t{tcp_spam} could include extra information to be stripped off "
"and processed in @t{tcp_on_spam}."
msgstr ""

#. type: table
#: zsh.texi:34332
msgid ""
"If the function sets the parameter @t{$REPLY} to `@t{done}', the command "
"line is not executed; in addition, no prompt is printed for the @t{-v} "
"option to @t{tcp_spam}."
msgstr ""

#. type: findex
#: zsh.texi:34333
#, no-wrap
msgid "tcp_on_unalias"
msgstr ""

#. type: item
#: zsh.texi:34334
#, no-wrap
msgid "@t{tcp_on_unalias} @var{alias} @var{fd}"
msgstr ""

#. type: table
#: zsh.texi:34337
msgid ""
"This is called with the name of an alias and the corresponding session's "
"file descriptor after an alias has been deleted."
msgstr ""

#. type: section
#: zsh.texi:34342
#, no-wrap
msgid "TCP Utility Functions"
msgstr ""

#. type: Plain text
#: zsh.texi:34348
msgid ""
"The following functions are used by the TCP function system but will rarely "
"if ever need to be called directly."
msgstr ""

#. type: t{#1}
#: zsh.texi:34351 zsh.texi:34352
#, no-wrap
msgid "tcp_fd_handler"
msgstr ""

#. type: table
#: zsh.texi:34358
msgid ""
"This is the function installed by @t{tcp_open} for handling input from "
"within the line editor, if that is required.  It is in the format documented "
"for the builtin `@t{zle -F}' in @ref{Zle Builtins} ."
msgstr ""

#. type: table
#: zsh.texi:34364
msgid ""
"While active, the function sets the parameter @t{TCP_HANDLER_ACTIVE} to 1.  "
"This allows shell code called internally (for example, by setting "
"@t{tcp_on_read}) to tell if is being called when the shell is otherwise idle "
"at the editor prompt."
msgstr ""

#. type: findex
#: zsh.texi:34365
#, no-wrap
msgid "tcp_output"
msgstr ""

#. type: item
#: zsh.texi:34366
#, no-wrap
msgid ""
"@t{tcp_output} [ @t{-q} ] @t{-P} @var{prompt} @t{-F} @var{fd} @t{-S} "
"@var{sess}"
msgstr ""

#. type: table
#: zsh.texi:34370
msgid ""
"This function is used for both logging and handling output to standard "
"output, from within @t{tcp_read} and (if @t{$TCP_OUTPUT} is set)  "
"@t{tcp_send}."
msgstr ""

#. type: table
#: zsh.texi:34374
msgid ""
"The @var{prompt} to use is specified by @t{-P}; the default is the empty "
"string.  It can contain:"
msgstr ""

#. type: table
#: zsh.texi:34379
msgid ""
"Expands to 1 if the session is the current session, otherwise 0.  Used with "
"ternary expressions such as `@t{%(c.-.+)}' to output `@t{+}' for the current "
"session and `@t{-}' otherwise."
msgstr ""

#. type: table
#: zsh.texi:34382
msgid "Replaced by the session's file descriptor."
msgstr ""

#. type: table
#: zsh.texi:34385
msgid "Replaced by the session name."
msgstr ""

#. type: table
#: zsh.texi:34388
msgid "Replaced by a single `@t{%}'."
msgstr ""

#. type: table
#: zsh.texi:34394
msgid ""
"The option @t{-q} suppresses output to standard output, but not to any log "
"files which are configured."
msgstr ""

#. type: table
#: zsh.texi:34398
msgid ""
"The @t{-S} and @t{-F} options are used to pass in the session name and file "
"descriptor for possible replacement in the prompt."
msgstr ""

#. type: node
#: zsh.texi:34402 zsh.texi:34617 zsh.texi:34619 zsh.texi:34674
#, no-wrap
msgid "TCP Examples"
msgstr ""

#. type: section
#: zsh.texi:34404
#, no-wrap
msgid "TCP User Parameters"
msgstr ""

#. type: Plain text
#: zsh.texi:34414
msgid ""
"Parameters follow the usual convention that uppercase is used for scalars "
"and integers, while lowercase is used for normal and associative array.  It "
"is always safe for user code to read these parameters.  Some parameters may "
"also be set; these are noted explicitly.  Others are included in this group "
"as they are set by the function system for the user's benefit, i.e. setting "
"them is typically not useful but is benign."
msgstr ""

#. type: Plain text
#: zsh.texi:34423
msgid ""
"It is often also useful to make settable parameters local to a function.  "
"For example, `@t{local TCP_SILENT=1}' specifies that data read during the "
"function call will not be printed to standard output, regardless of the "
"setting outside the function.  Likewise, `@t{local TCP_SESS=}@var{sess}' "
"sets a session for the duration of a function, and `@t{local TCP_PROMPT=}' "
"specifies that no prompt is used for input during the function."
msgstr ""

#. type: t{#1}
#: zsh.texi:34426 zsh.texi:34427
#, no-wrap
msgid "tcp_expect_lines"
msgstr ""

#. type: table
#: zsh.texi:34430
msgid ""
"Array.  The set of lines read during the last call to @t{tcp_expect}, "
"including the last (@t{$TCP_LINE})."
msgstr ""

#. type: t{#1}
#: zsh.texi:34431 zsh.texi:34432
#, no-wrap
msgid "tcp_filter"
msgstr ""

#. type: table
#: zsh.texi:34437
msgid ""
"Array. May be set directly.  A set of extended globbing patterns which, if "
"matched in @t{tcp_output}, will cause the line not to be printed to standard "
"output.  The patterns should be defined as described for the arguments to "
"@t{tcp_expect}.  Output of line to log files is not affected."
msgstr ""

#. type: t{#1}
#: zsh.texi:34438 zsh.texi:34439
#, no-wrap
msgid "TCP_HANDLER_ACTIVE"
msgstr ""

#. type: table
#: zsh.texi:34443
msgid ""
"Scalar.  Set to 1 within @t{tcp_fd_handler} to indicate to functions called "
"recursively that they have been called during an editor session.  Otherwise "
"unset."
msgstr ""

#. type: t{#1}
#: zsh.texi:34444 zsh.texi:34445
#, no-wrap
msgid "TCP_LINE"
msgstr ""

#. type: table
#: zsh.texi:34447
msgid "The last line read by @t{tcp_read}, and hence also @t{tcp_expect}."
msgstr ""

#. type: t{#1}
#: zsh.texi:34448 zsh.texi:34449
#, no-wrap
msgid "TCP_LINE_FD"
msgstr ""

#. type: table
#: zsh.texi:34452
msgid ""
"The file descriptor from which @t{$TCP_LINE} was read.  "
"@t{$@{tcp_by_fd[$TCP_LINE_FD]@}} will give the corresponding session name."
msgstr ""

#. type: t{#1}
#: zsh.texi:34453 zsh.texi:34454
#, no-wrap
msgid "tcp_lines"
msgstr ""

#. type: table
#: zsh.texi:34457
msgid ""
"Array. The set of lines read during the last call to @t{tcp_read}, including "
"the last (@t{$TCP_LINE})."
msgstr ""

#. type: t{#1}
#: zsh.texi:34458 zsh.texi:34459
#, no-wrap
msgid "TCP_LOG"
msgstr ""

#. type: table
#: zsh.texi:34464
msgid ""
"May be set directly, although it is also controlled by @t{tcp_log}.  The "
"name of a file to which output from all sessions will be sent.  The output "
"is proceeded by the usual @t{$TCP_PROMPT}.  If it is not an absolute path "
"name, it will follow the user's current directory."
msgstr ""

#. type: t{#1}
#: zsh.texi:34465 zsh.texi:34466
#, no-wrap
msgid "TCP_LOG_SESS"
msgstr ""

#. type: table
#: zsh.texi:34472
msgid ""
"May be set directly, although it is also controlled by @t{tcp_log}.  The "
"prefix for a set of files to which output from each session separately will "
"be sent; the full filename is @t{$@{TCP_LOG_SESS@}.}@var{sess}.  Output to "
"each file is raw; no prompt is added.  If it is not an absolute path name, "
"it will follow the user's current directory."
msgstr ""

#. type: t{#1}
#: zsh.texi:34473 zsh.texi:34474
#, no-wrap
msgid "tcp_no_spam_list"
msgstr ""

#. type: table
#: zsh.texi:34476
msgid "Array.  May be set directly.  See @t{tcp_spam} for how this is used."
msgstr ""

#. type: t{#1}
#: zsh.texi:34477 zsh.texi:34478
#, no-wrap
msgid "TCP_OUTPUT"
msgstr ""

#. type: table
#: zsh.texi:34484
msgid ""
"May be set directly.  If a non-empty string, any data sent to a session by "
"@t{tcp_send} will be logged.  This parameter gives the prompt to be used in "
"a file specified by @t{$TCP_LOG} but not in a file generated from "
"@t{$TCP_LOG_SESS}.  The prompt string has the same format as @t{TCP_PROMPT} "
"and the same rules for its use apply."
msgstr ""

#. type: t{#1}
#: zsh.texi:34485 zsh.texi:34486
#, no-wrap
msgid "TCP_PROMPT"
msgstr ""

#. type: table
#: zsh.texi:34496
msgid ""
"May be set directly.  Used as the prefix for data read by @t{tcp_read} which "
"is printed to standard output or to the log file given by @t{$TCP_LOG}, if "
"any.  Any `@t{%s}', `@t{%f}' or `@t{%%}' occurring in the string will be "
"replaced by the name of the session, the session's underlying file "
"descriptor, or a single `@t{%}', respectively.  The expression `@t{%c}' "
"expands to 1 if the session being read is the current session, else 0; this "
"is most useful in ternary expressions such as `@t{%(c.-.+)}' which outputs "
"`@t{+}' if the session is the current one, else `@t{-}'."
msgstr ""

#. type: table
#: zsh.texi:34501
msgid ""
"If the prompt starts with @t{%P}, this is stripped and the complete result "
"of the previous stage is passed through standard prompt @t{%}-style "
"formatting before being output."
msgstr ""

#. type: t{#1}
#: zsh.texi:34502 zsh.texi:34503
#, no-wrap
msgid "TCP_READ_DEBUG"
msgstr ""

#. type: table
#: zsh.texi:34506
msgid ""
"May be set directly.  If this has non-zero length, @t{tcp_read} will give "
"some limited diagnostics about data being read."
msgstr ""

#. type: t{#1}
#: zsh.texi:34507 zsh.texi:34508
#, no-wrap
msgid "TCP_SECONDS_START"
msgstr ""

#. type: table
#: zsh.texi:34510
msgid "This value is created and initialised to zero by tcp_open."
msgstr ""

#. type: table
#: zsh.texi:34521
msgid ""
"The functions @t{tcp_read} and @t{tcp_expect} use the shell's @t{SECONDS} "
"parameter for their own timing purposes.  If that parameter is not of "
"floating point type on entry to one of the functions, it will create a local "
"parameter @t{SECONDS} which is floating point and set the parameter "
"@t{TCP_SECONDS_START} to the previous value of @t{$SECONDS}.  If the "
"parameter is already floating point, it is used without a local copy being "
"created and @t{TCP_SECONDS_START} is not set.  As the global value is zero, "
"the shell elapsed time is guaranteed to be the sum of @t{$SECONDS} and "
"@t{$TCP_SECONDS_START}."
msgstr ""

#. type: table
#: zsh.texi:34526
msgid ""
"This can be avoided by setting @t{SECONDS} globally to a floating point "
"value using `@t{typeset -F SECONDS}'; then the TCP functions will never make "
"a local copy and never set @t{TCP_SECONDS_START} to a non-zero value."
msgstr ""

#. type: t{#1}
#: zsh.texi:34527 zsh.texi:34528
#, no-wrap
msgid "TCP_SESS"
msgstr ""

#. type: table
#: zsh.texi:34531
msgid ""
"May be set directly.  The current session; must refer to one of the sessions "
"established by @t{tcp_open}."
msgstr ""

#. type: t{#1}
#: zsh.texi:34532 zsh.texi:34533
#, no-wrap
msgid "TCP_SILENT"
msgstr ""

#. type: table
#: zsh.texi:34537
msgid ""
"May be set directly, although it is also controlled by @t{tcp_log}.  If of "
"non-zero length, data read by @t{tcp_read} will not be written to standard "
"output, though may still be written to a log file."
msgstr ""

#. type: t{#1}
#: zsh.texi:34538 zsh.texi:34539
#, no-wrap
msgid "tcp_spam_list"
msgstr ""

#. type: table
#: zsh.texi:34542
msgid ""
"Array.  May be set directly.  See the description of the function "
"@t{tcp_spam} for how this is used."
msgstr ""

#. type: t{#1}
#: zsh.texi:34543 zsh.texi:34544
#, no-wrap
msgid "TCP_TALK_ESCAPE"
msgstr ""

#. type: table
#: zsh.texi:34547
msgid ""
"May be set directly.  See the description of the function @t{tcp_talk} for "
"how this is used."
msgstr ""

#. type: t{#1}
#: zsh.texi:34548 zsh.texi:34549
#, no-wrap
msgid "TCP_TIMEOUT"
msgstr ""

#. type: table
#: zsh.texi:34552
msgid ""
"May be set directly.  Currently this is only used by the function "
"@t{tcp_command}, see above."
msgstr ""

#. type: section
#: zsh.texi:34557
#, no-wrap
msgid "TCP User-defined Parameters"
msgstr ""

#. type: Plain text
#: zsh.texi:34563
msgid ""
"The following parameters are not set by the function system, but have a "
"special effect if set by the user."
msgstr ""

#. type: t{#1}
#: zsh.texi:34566 zsh.texi:34567
#, no-wrap
msgid "tcp_on_read"
msgstr ""

#. type: table
#: zsh.texi:34576
msgid ""
"This should be an associative array; if it is not, the behaviour is "
"undefined.  Each key is the name of a shell function or other command, and "
"the corresponding value is a shell pattern (using @t{EXTENDED_GLOB}).  Every "
"line read from a TCP session directly or indirectly using @t{tcp_read} "
"(which includes lines read by @t{tcp_expect}) is compared against the "
"pattern.  If the line matches, the command given in the key is called with "
"two arguments: the name of the session from which the line was read, and the "
"line itself."
msgstr ""

#. type: table
#: zsh.texi:34584
msgid ""
"If any function called to handle a line returns a non-zero status, the line "
"is not output.  Thus a @t{tcp_on_read} handler containing only the "
"instruction `@t{return 1}' can be used to suppress output of particular "
"lines (see, however, @t{tcp_filter} above).  However, the line is still "
"stored in @t{TCP_LINE} and @t{tcp_lines}; this occurs after all "
"@t{tcp_on_read} processing."
msgstr ""

#. type: section
#: zsh.texi:34589
#, no-wrap
msgid "TCP Utility Parameters"
msgstr ""

#. type: Plain text
#: zsh.texi:34595
msgid ""
"These parameters are controlled by the function system; they may be read "
"directly, but should not usually be set by user code."
msgstr ""

#. type: t{#1}
#: zsh.texi:34598 zsh.texi:34599
#, no-wrap
msgid "tcp_aliases"
msgstr ""

#. type: table
#: zsh.texi:34603
msgid ""
"Associative array.  The keys are the names of sessions established with "
"@t{tcp_open}; each value is a space-separated list of aliases which refer to "
"that session."
msgstr ""

#. type: t{#1}
#: zsh.texi:34604 zsh.texi:34605
#, no-wrap
msgid "tcp_by_fd"
msgstr ""

#. type: table
#: zsh.texi:34608
msgid ""
"Associative array.  The keys are session file descriptors; each value is the "
"name of that session."
msgstr ""

#. type: t{#1}
#: zsh.texi:34609 zsh.texi:34610
#, no-wrap
msgid "tcp_by_name"
msgstr ""

#. type: table
#: zsh.texi:34613
msgid ""
"Associative array.  The keys are the names of sessions; each value is the "
"file descriptor associated with that session."
msgstr ""

#. type: Plain text
#: zsh.texi:34624
msgid "Here is a trivial example using a remote calculator."
msgstr ""

#. type: Plain text
#: zsh.texi:34628
msgid ""
"To create a calculator server on port 7337 (see the @t{dc} manual page for "
"quite how infuriating the underlying command is):"
msgstr ""

#. type: example
#: zsh.texi:34632
#, no-wrap
msgid "tcp_proxy 7337 dc\n"
msgstr ""

#. type: Plain text
#: zsh.texi:34636
msgid "To connect to this from the same host with a session also named `@t{dc}':"
msgstr ""

#. type: example
#: zsh.texi:34640
#, no-wrap
msgid "tcp_open localhost 7337 dc\n"
msgstr ""

#. type: Plain text
#: zsh.texi:34645
msgid ""
"To send a command to the remote session and wait a short while for output "
"(assuming @t{dc} is the current session):"
msgstr ""

#. type: example
#: zsh.texi:34649
#, no-wrap
msgid "tcp_command 2 4 + p\n"
msgstr ""

#. type: Plain text
#: zsh.texi:34653
msgid "To close the session:"
msgstr ""

#. type: example
#: zsh.texi:34657
#, no-wrap
msgid "tcp_close\n"
msgstr ""

#. type: Plain text
#: zsh.texi:34663
msgid ""
"The @t{tcp_proxy} needs to be killed to be stopped.  Note this will not "
"usually kill any connections which have already been accepted, and also that "
"the port is not immediately available for reuse."
msgstr ""

#. type: Plain text
#: zsh.texi:34667
msgid ""
"The following chunk of code puts a list of sessions into an xterm header, "
"with the current session followed by a star."
msgstr ""

#. type: example
#: zsh.texi:34671
#, no-wrap
msgid ""
"print -n \"\\033]2;TCP:\" $@{(k)tcp_by_name:/$TCP_SESS/$TCP_SESS\\*@} "
"\"\\a\"\n"
msgstr ""

#. type: Plain text
#: zsh.texi:34683
msgid ""
"The function @t{tcp_read} uses the shell's normal @t{read} builtin.  As this "
"reads a complete line at once, data arriving without a terminating newline "
"can cause the function to block indefinitely."
msgstr ""

#. type: Plain text
#: zsh.texi:34690
msgid ""
"Though the function suite works well for interactive use and for data "
"arriving in small amounts, the performance when large amounts of data are "
"being exchanged is likely to be extremely poor."
msgstr ""

#. type: cindex
#: zsh.texi:34694
#, no-wrap
msgid "zftp function system"
msgstr ""

#. type: cindex
#: zsh.texi:34695
#, no-wrap
msgid "FTP, functions for using shell as client"
msgstr ""

#. type: Plain text
#: zsh.texi:34709
msgid ""
"This describes the set of shell functions supplied with the source "
"distribution as an interface to the @t{zftp} builtin command, allowing you "
"to perform FTP operations from the shell command line or within functions or "
"scripts.  The interface is similar to a traditional FTP client (e.g. the "
"@t{ftp} command itself, see ftp(1)), but as it is entirely done within the "
"shell all the familiar completion, editing and globbing features, and so on, "
"are present, and macros are particularly simple to write as they are just "
"ordinary shell functions."
msgstr ""

#. type: Plain text
#: zsh.texi:34720
msgid ""
"The prerequisite is that the @t{zftp} command, as described in @ref{The "
"zsh/zftp Module} , must be available in the version of @t{zsh} installed at "
"your site.  If the shell is configured to load new commands at run time, it "
"probably is: typing `@t{zmodload zsh/zftp}' will make sure (if that runs "
"silently, it has worked).  If this is not the case, it is possible @t{zftp} "
"was linked into the shell anyway: to test this, type `@t{which zftp}' and if "
"@t{zftp} is available you will get the message `@t{zftp: shell built-in "
"command}'."
msgstr ""

#. type: Plain text
#: zsh.texi:34727
msgid ""
"Commands given directly with @t{zftp} builtin may be interspersed between "
"the functions in this suite; in a few cases, using @t{zftp} directly may "
"cause some of the status information stored in shell parameters to become "
"invalid.  Note in particular the description of the variables "
"@t{$ZFTP_TMOUT}, @t{$ZFTP_PREFS} and @t{$ZFTP_VERBOSE} for @t{zftp}."
msgstr ""

#. type: subsection
#: zsh.texi:34736 zsh.texi:34738 zsh.texi:34768 zsh.texi:35961 zsh.texi:37913
#, no-wrap
msgid "Installation"
msgstr ""

#. type: node
#: zsh.texi:34736 zsh.texi:34768 zsh.texi:35266
#, no-wrap
msgid "Zftp Functions"
msgstr ""

#. type: Plain text
#: zsh.texi:34752
msgid ""
"You should make sure all the functions from the @t{Functions/Zftp} directory "
"of the source distribution are available; they all begin with the two "
"letters `@t{zf}'.  They may already have been installed on your system; "
"otherwise, you will need to find them and copy them.  The directory should "
"appear as one of the elements of the @t{$fpath} array (this should already "
"be the case if they were installed), and at least the function @t{zfinit} "
"should be autoloaded; it will autoload the rest.  Finally, to initialize the "
"use of the system you need to call the @t{zfinit} function.  The following "
"code in your @t{.zshrc} will arrange for this; assume the functions are "
"stored in the directory @t{~/myfns}:"
msgstr ""

#. type: example
#: zsh.texi:34758
#, no-wrap
msgid ""
"fpath=(~/myfns $fpath)\n"
"autoload -U zfinit\n"
"zfinit\n"
msgstr ""

#. type: Plain text
#: zsh.texi:34766
msgid ""
"Note that @t{zfinit} assumes you are using the @t{zmodload} method to load "
"the @t{zftp} command.  If it is already built into the shell, change "
"@t{zfinit} to @t{zfinit -n}.  It is helpful (though not essential) if the "
"call to @t{zfinit} appears after any code to initialize the new completion "
"system, else unnecessary @t{compctl} commands will be given."
msgstr ""

#. type: Plain text
#: zsh.texi:34779
msgid ""
"The sequence of operations in performing a file transfer is essentially the "
"same as that in a standard FTP client.  Note that, due to a quirk of the "
"shell's @t{getopts} builtin, for those functions that handle options you "
"must use `@t{-}@t{-}' rather than `@t{-}' to ensure the remaining arguments "
"are treated literally (a single `@t{-}' is treated as an argument)."
msgstr ""

#. type: subsection
#: zsh.texi:34782
#, no-wrap
msgid "Opening a connection"
msgstr ""

#. type: findex
#: zsh.texi:34785
#, no-wrap
msgid "zfparams"
msgstr ""

#. type: item
#: zsh.texi:34786
#, no-wrap
msgid "@t{zfparams} [ @var{host} [ @var{user} [ @var{password} ... ] ] ]"
msgstr ""

#. type: table
#: zsh.texi:34795
msgid ""
"Set or show the parameters for a future @t{zfopen} with no arguments.  If no "
"arguments are given, the current parameters are displayed (the password will "
"be shown as a line of asterisks).  If a @var{host} is given, and either the "
"@var{user} or @var{password} is not, they will be prompted for; also, any "
"parameter given as `@t{?}' will be prompted for, and if the `@t{?}' is "
"followed by a string, that will be used as the prompt.  As @t{zfopen} calls "
"@t{zfparams} to store the parameters, this usually need not be called "
"directly."
msgstr ""

#. type: table
#: zsh.texi:34800
msgid ""
"A single argument `@t{-}' will delete the stored parameters.  This will also "
"cause the memory of the last directory (and so on) on the other host to be "
"deleted."
msgstr ""

#. type: findex
#: zsh.texi:34801
#, no-wrap
msgid "zfopen"
msgstr ""

#. type: item
#: zsh.texi:34802
#, no-wrap
msgid ""
"@t{zfopen} [ @t{-1} ] [ @var{host} [ @var{user} [ @var{password} [ "
"@var{account} ] ] ] ]"
msgstr ""

#. type: table
#: zsh.texi:34808
msgid ""
"If @var{host} is present, open a connection to that host under username "
"@var{user} with password @var{password} (and, on the rare occasions when it "
"is necessary, account @var{account}).  If a necessary parameter is missing "
"or given as `@t{?}' it will be prompted for.  If @var{host} is not present, "
"use a previously stored set of parameters."
msgstr ""

#. type: table
#: zsh.texi:34814
msgid ""
"If the command was successful, and the terminal is compatible with @t{xterm} "
"or is @t{sun-cmd}, a summary will appear in the title bar, giving the local "
"@t{host:directory} and the remote @t{host:directory}; this is handled by the "
"function @t{zftp_chpwd}, described below."
msgstr ""

#. type: table
#: zsh.texi:34823
msgid ""
"Normally, the @var{host}, @var{user} and @var{password} are internally "
"recorded for later re-opening, either by a @t{zfopen} with no arguments, or "
"automatically (see below).  With the option `@t{-1}', no information is "
"stored.  Also, if an open command with arguments failed, the parameters will "
"not be retained (and any previous parameters will also be deleted).  A "
"@t{zfopen} on its own, or a @t{zfopen -1}, never alters the stored "
"parameters."
msgstr ""

#. type: table
#: zsh.texi:34832
msgid ""
"Both @t{zfopen} and @t{zfanon} (but not @t{zfparams}) understand URLs of the "
"form @t{ftp://}@var{host}/@var{path...} as meaning to connect to the "
"@var{host}, then change directory to @var{path} (which must be a directory, "
"not a file).  The `@t{ftp://}' can be omitted; the trailing `@t{/}' is "
"enough to trigger recognition of the @var{path}.  Note prefixes other than "
"`@t{ftp:}' are not recognized, and that all characters after the first slash "
"beyond @var{host} are significant in @var{path}."
msgstr ""

#. type: findex
#: zsh.texi:34833
#, no-wrap
msgid "zfanon"
msgstr ""

#. type: item
#: zsh.texi:34834
#, no-wrap
msgid "@t{zfanon} [ @t{-1} ] @var{host}"
msgstr ""

#. type: table
#: zsh.texi:34840
msgid ""
"Open a connection @var{host} for anonymous FTP.  The username used is "
"`@t{anonymous}'.  The password (which will be reported the first time) is "
"generated as @var{user}@t{@@}@var{host}; this is then stored in the shell "
"parameter @t{$EMAIL_ADDR} which can alternatively be set manually to a "
"suitable string."
msgstr ""

#. type: subsection
#: zsh.texi:34845
#, no-wrap
msgid "Directory management"
msgstr ""

#. type: findex
#: zsh.texi:34848
#, no-wrap
msgid "zfcd"
msgstr ""

#. type: item
#: zsh.texi:34849
#, no-wrap
msgid "@t{zfcd} [ @var{dir} ]"
msgstr ""

#. type: t{#1}
#: zsh.texi:34850
#, no-wrap
msgid "zfcd -"
msgstr ""

#. type: itemx
#: zsh.texi:34851
#, no-wrap
msgid "@t{zfcd} @var{old} @var{new}"
msgstr ""

#. type: table
#: zsh.texi:34854
msgid ""
"Change the current directory on the remote server: this is implemented to "
"have many of the features of the shell builtin @t{cd}."
msgstr ""

#. type: table
#: zsh.texi:34860
msgid ""
"In the first form with @var{dir} present, change to the directory "
"@var{dir}.  The command `@t{zfcd ..}' is treated specially, so is guaranteed "
"to work on non-UNIX servers (note this is handled internally by @t{zftp}).  "
"If @var{dir} is omitted, has the effect of `@t{zfcd ~}'."
msgstr ""

#. type: table
#: zsh.texi:34863
msgid "The second form changes to the directory previously current."
msgstr ""

#. type: table
#: zsh.texi:34868
msgid ""
"The third form attempts to change the current directory by replacing the "
"first occurrence of the string @var{old} with the string @var{new} in the "
"current directory."
msgstr ""

#. type: table
#: zsh.texi:34881
msgid ""
"Note that in this command, and indeed anywhere a remote filename is "
"expected, the string which on the local host corresponds to `@t{~}' is "
"converted back to a `@t{~}' before being passed to the remote machine.  This "
"is convenient because of the way expansion is performed on the command line "
"before @t{zfcd} receives a string.  For example, suppose the command is "
"`@t{zfcd ~/foo}'.  The shell will expand this to a full path such as "
"`@t{zfcd /home/user2/pws/foo}'.  At this stage, @t{zfcd} recognises the "
"initial path as corresponding to `@t{~}' and will send the directory to the "
"remote host as @t{~/foo}, so that the `@t{~}' will be expanded by the server "
"to the correct remote host directory.  Other named directories of the form "
"`@t{~name}' are not treated in this fashion."
msgstr ""

#. type: t{#1}
#: zsh.texi:34882 zsh.texi:34883
#, no-wrap
msgid "zfhere"
msgstr ""

#. type: table
#: zsh.texi:34888
msgid ""
"Change directory on the remote server to the one corresponding to the "
"current local directory, with special handling of `@t{~}' as in @t{zfcd}.  "
"For example, if the current local directory is @t{~/foo/bar}, then "
"@t{zfhere} performs the effect of `@t{zfcd ~/foo/bar}'."
msgstr ""

#. type: findex
#: zsh.texi:34889
#, no-wrap
msgid "zfdir"
msgstr ""

#. type: item
#: zsh.texi:34890
#, no-wrap
msgid "@t{zfdir} [ @t{-rfd} ] [ @t{-} ] [ @var{dir-options} ] [ @var{dir} ]"
msgstr ""

#. type: table
#: zsh.texi:34897
msgid ""
"Produce a long directory listing.  The arguments @var{dir-options} and "
"@var{dir} are passed directly to the server and their effect is "
"implementation dependent, but specifying a particular remote directory "
"@var{dir} is usually possible.  The output is passed through a pager given "
"by the environment variable @t{$PAGER}, or `@t{more}' if that is not set."
msgstr ""

#. type: table
#: zsh.texi:34911
msgid ""
"The directory is usually cached for re-use.  In fact, two caches are "
"maintained.  One is for use when there is no @var{dir-options} or @var{dir}, "
"i.e. a full listing of the current remote directory; it is flushed when the "
"current remote directory changes.  The other is kept for repeated use of "
"@t{zfdir} with the same arguments; for example, repeated use of `@t{zfdir "
"/pub/gnu}' will only require the directory to be retrieved on the first "
"call.  Alternatively, this cache can be re-viewed with the @t{-r} option.  "
"As relative directories will confuse @t{zfdir}, the @t{-f} option can be "
"used to force the cache to be flushed before the directory is listed.  The "
"option @t{-d} will delete both caches without showing a directory listing; "
"it will also delete the cache of file names in the current remote directory, "
"if any."
msgstr ""

#. type: findex
#: zsh.texi:34912
#, no-wrap
msgid "zfls"
msgstr ""

#. type: item
#: zsh.texi:34913
#, no-wrap
msgid "@t{zfls} [ @var{ls-options} ] [ @var{dir} ]"
msgstr ""

#. type: table
#: zsh.texi:34917
msgid ""
"List files on the remote server.  With no arguments, this will produce a "
"simple list of file names for the current remote directory.  Any arguments "
"are passed directly to the server.  No pager and no caching is used."
msgstr ""

#. type: subsection
#: zsh.texi:34922
#, no-wrap
msgid "Status commands"
msgstr ""

#. type: findex
#: zsh.texi:34925
#, no-wrap
msgid "zftype"
msgstr ""

#. type: item
#: zsh.texi:34926
#, no-wrap
msgid "@t{zftype} [ @var{type} ]"
msgstr ""

#. type: table
#: zsh.texi:34931
msgid ""
"With no arguments, show the type of data to be transferred, usually ASCII or "
"binary.  With an argument, change the type: the types `@t{A}' or `@t{ASCII}' "
"for ASCII data and `@t{B}' or `@t{BINARY}', `@t{I}' or `@t{IMAGE}' for "
"binary data are understood case-insensitively."
msgstr ""

#. type: findex
#: zsh.texi:34932
#, no-wrap
msgid "zfstat"
msgstr ""

#. type: item
#: zsh.texi:34933
#, no-wrap
msgid "@t{zfstat} [ @t{-v} ]"
msgstr ""

#. type: table
#: zsh.texi:34938
msgid ""
"Show the status of the current or last connection, as well as the status of "
"some of @t{zftp}'s status variables.  With the @t{-v} option, a more verbose "
"listing is produced by querying the server for its version of events, too."
msgstr ""

#. type: subsection
#: zsh.texi:34943
#, no-wrap
msgid "Retrieving files"
msgstr ""

#. type: Plain text
#: zsh.texi:34950
msgid ""
"The commands for retrieving files all take at least two options. @t{-G} "
"suppresses remote filename expansion which would otherwise be performed (see "
"below for a more detailed description of that).  @t{-t} attempts to set the "
"modification time of the local file to that of the remote file: see the "
"description of the function @t{zfrtime} below for more information."
msgstr ""

#. type: findex
#: zsh.texi:34953
#, no-wrap
msgid "zfget"
msgstr ""

#. type: item
#: zsh.texi:34954
#, no-wrap
msgid "@t{zfget} [ @t{-Gtc} ] @var{file1} ..."
msgstr ""

#. type: table
#: zsh.texi:34961
msgid ""
"Retrieve all the listed files @var{file1} ... one at a time from the remote "
"server.  If a file contains a `@t{/}', the full name is passed to the remote "
"server, but the file is stored locally under the name given by the part "
"after the final `@t{/}'.  The option @t{-c} (cat) forces all files to be "
"sent as a single stream to standard output; in this case the @t{-t} option "
"has no effect."
msgstr ""

#. type: findex
#: zsh.texi:34962
#, no-wrap
msgid "zfuget"
msgstr ""

#. type: item
#: zsh.texi:34963
#, no-wrap
msgid "@t{zfuget} [ @t{-Gvst} ] @var{file1} ..."
msgstr ""

#. type: table
#: zsh.texi:34972
msgid ""
"As @t{zfget}, but only retrieve files where the version on the remote server "
"is newer (has a later modification time), or where the local file does not "
"exist.  If the remote file is older but the files have different sizes, or "
"if the sizes are the same but the remote file is newer, the user will "
"usually be queried.  With the option @t{-s}, the command runs silently and "
"will always retrieve the file in either of those two cases.  With the option "
"@t{-v}, the command prints more information about the files while it is "
"working out whether or not to transfer them."
msgstr ""

#. type: findex
#: zsh.texi:34973
#, no-wrap
msgid "zfcget"
msgstr ""

#. type: item
#: zsh.texi:34974
#, no-wrap
msgid "@t{zfcget} [ @t{-Gt} ] @var{file1} ..."
msgstr ""

#. type: table
#: zsh.texi:34979
msgid ""
"As @t{zfget}, but if any of the local files exists, and is shorter than the "
"corresponding remote file, the command assumes that it is the result of a "
"partially completed transfer and attempts to transfer the rest of the file.  "
"This is useful on a poor connection which keeps failing."
msgstr ""

#. type: table
#: zsh.texi:34983
msgid ""
"Note that this requires a commonly implemented, but non-standard, version of "
"the FTP protocol, so is not guaranteed to work on all servers."
msgstr ""

#. type: findex
#: zsh.texi:34984
#, no-wrap
msgid "zfgcp"
msgstr ""

#. type: item
#: zsh.texi:34985
#, no-wrap
msgid "@t{zfgcp} [ @t{-Gt} ] @var{remote-file} @var{local-file}"
msgstr ""

#. type: itemx
#: zsh.texi:34986
#, no-wrap
msgid "@t{zfgcp} [ @t{-Gt} ] @var{rfile1} ... @var{ldir}"
msgstr ""

#. type: table
#: zsh.texi:34989
msgid ""
"This retrieves files from the remote server with arguments behaving "
"similarly to the @t{cp} command."
msgstr ""

#. type: table
#: zsh.texi:34993
msgid ""
"In the first form, copy @var{remote-file} from the server to the local file "
"@var{local-file}."
msgstr ""

#. type: table
#: zsh.texi:34998
msgid ""
"In the second form, copy all the remote files @var{rfile1} ... into the "
"local directory @var{ldir} retaining the same basenames.  This assumes UNIX "
"directory semantics."
msgstr ""

#. type: subsection
#: zsh.texi:35003
#, no-wrap
msgid "Sending files"
msgstr ""

#. type: findex
#: zsh.texi:35006
#, no-wrap
msgid "zfput"
msgstr ""

#. type: item
#: zsh.texi:35007
#, no-wrap
msgid "@t{zfput} [ @t{-r} ] @var{file1} ..."
msgstr ""

#. type: table
#: zsh.texi:35011
msgid ""
"Send all the @var{file1} ... given separately to the remote server.  If a "
"filename contains a `@t{/}', the full filename is used locally to find the "
"file, but only the basename is used for the remote file name."
msgstr ""

#. type: table
#: zsh.texi:35017
msgid ""
"With the option @t{-r}, if any of the @var{files} are directories they are "
"sent recursively with all their subdirectories, including files beginning "
"with `@t{.}'.  This requires that the remote machine understand UNIX file "
"semantics, since `@t{/}' is used as a directory separator."
msgstr ""

#. type: findex
#: zsh.texi:35018
#, no-wrap
msgid "zfuput"
msgstr ""

#. type: item
#: zsh.texi:35019
#, no-wrap
msgid "@t{zfuput} [ @t{-vs} ] @var{file1} ..."
msgstr ""

#. type: table
#: zsh.texi:35023
msgid ""
"As @t{zfput}, but only send files which are newer than their remote "
"equivalents, or if the remote file does not exist.  The logic is the same as "
"for @t{zfuget}, but reversed between local and remote files."
msgstr ""

#. type: findex
#: zsh.texi:35024
#, no-wrap
msgid "zfcput"
msgstr ""

#. type: item
#: zsh.texi:35025
#, no-wrap
msgid "@t{zfcput} @var{file1} ..."
msgstr ""

#. type: table
#: zsh.texi:35031
msgid ""
"As @t{zfput}, but if any remote file already exists and is shorter than the "
"local equivalent, assume it is the result of an incomplete transfer and send "
"the rest of the file to append to the existing part.  As the FTP append "
"command is part of the standard set, this is in principle more likely to "
"work than @t{zfcget}."
msgstr ""

#. type: findex
#: zsh.texi:35032
#, no-wrap
msgid "zfpcp"
msgstr ""

#. type: item
#: zsh.texi:35033
#, no-wrap
msgid "@t{zfpcp} @var{local-file} @var{remote-file}"
msgstr ""

#. type: itemx
#: zsh.texi:35034
#, no-wrap
msgid "@t{zfpcp} @var{lfile1} ... @var{rdir}"
msgstr ""

#. type: table
#: zsh.texi:35037
msgid ""
"This sends files to the remote server with arguments behaving similarly to "
"the @t{cp} command."
msgstr ""

#. type: table
#: zsh.texi:35041
msgid ""
"With two arguments, copy @var{local-file} to the server as "
"@var{remote-file}."
msgstr ""

#. type: table
#: zsh.texi:35046
msgid ""
"With more than two arguments, copy all the local files @var{lfile1} ... into "
"the existing remote directory @var{rdir} retaining the same basenames.  This "
"assumes UNIX directory semantics."
msgstr ""

#. type: table
#: zsh.texi:35057
msgid ""
"A problem arises if you attempt to use @t{zfpcp} @var{lfile1} @var{rdir}, "
"i.e. the second form of copying but with two arguments, as the command has "
"no simple way of knowing if @var{rdir} corresponds to a directory or a "
"filename.  It attempts to resolve this in various ways.  First, if the "
"@var{rdir} argument is `@t{.}' or `@t{..}' or ends in a slash, it is assumed "
"to be a directory.  Secondly, if the operation of copying to a remote file "
"in the first form failed, and the remote server sends back the expected "
"failure code 553 and a reply including the string `@t{Is a directory}', then "
"@t{zfpcp} will retry using the second form."
msgstr ""

#. type: subsection
#: zsh.texi:35062
#, no-wrap
msgid "Closing the connection"
msgstr ""

#. type: t{#1}
#: zsh.texi:35065 zsh.texi:35066
#, no-wrap
msgid "zfclose"
msgstr ""

#. type: table
#: zsh.texi:35068
msgid "Close the connection."
msgstr ""

#. type: subsection
#: zsh.texi:35073
#, no-wrap
msgid "Session management"
msgstr ""

#. type: findex
#: zsh.texi:35076
#, no-wrap
msgid "zfsession"
msgstr ""

#. type: item
#: zsh.texi:35077
#, no-wrap
msgid "@t{zfsession} [ @t{-lvod} ] [ @var{sessname} ]"
msgstr ""

#. type: table
#: zsh.texi:35086
msgid ""
"Allows you to manage multiple FTP sessions at once.  By default, connections "
"take place in a session called `@t{default}'; by giving the command "
"`@t{zfsession} @var{sessname}' you can change to a new or existing session "
"with a name of your choice.  The new session remembers its own connection, "
"as well as associated shell parameters, and also the host/user parameters "
"set by @t{zfparams}.  Hence you can have different sessions set up to "
"connect to different hosts, each remembering the appropriate host, user and "
"password."
msgstr ""

#. type: table
#: zsh.texi:35093
msgid ""
"With no arguments, @t{zfsession} prints the name of the current session; "
"with the option @t{-l} it lists all sessions which currently exist, and with "
"the option @t{-v} it gives a verbose list showing the host and directory for "
"each session, where the current session is marked with an asterisk.  With "
"@t{-o}, it will switch to the most recent previous session."
msgstr ""

#. type: table
#: zsh.texi:35100
msgid ""
"With @t{-d}, the given session (or else the current one) is removed; "
"everything to do with it is completely forgotten.  If it was the only "
"session, a new session called `@t{default}' is created and made current.  It "
"is safest not to delete sessions while background commands using @t{zftp} "
"are active."
msgstr ""

#. type: findex
#: zsh.texi:35101
#, no-wrap
msgid "zftransfer"
msgstr ""

#. type: item
#: zsh.texi:35102
#, no-wrap
msgid "@t{zftransfer} @var{sess1}@t{:}@var{file1} @var{sess2}@t{:}@var{file2}"
msgstr ""

#. type: table
#: zsh.texi:35112
msgid ""
"Transfer files between two sessions; no local copy is made.  The file is "
"read from the session @var{sess1} as @var{file1} and written to session "
"@var{sess2} as file @var{file2}; @var{file1} and @var{file2} may be relative "
"to the current directories of the session.  Either @var{sess1} or "
"@var{sess2} may be omitted (though the colon should be retained if there is "
"a possibility of a colon appearing in the file name) and defaults to the "
"current session; @var{file2} may be omitted or may end with a slash, in "
"which case the basename of @var{file1} will be added.  The sessions "
"@var{sess1} and @var{sess2} must be distinct."
msgstr ""

#. type: table
#: zsh.texi:35117
msgid ""
"The operation is performed using pipes, so it is required that the "
"connections still be valid in a subshell, which is not the case under "
"versions of some operating systems, presumably due to a system bug."
msgstr ""

#. type: subsection
#: zsh.texi:35122
#, no-wrap
msgid "Bookmarks"
msgstr ""

#. type: Plain text
#: zsh.texi:35130
msgid ""
"The two functions @t{zfmark} and @t{zfgoto} allow you to `bookmark' the "
"present location (host, user and directory) of the current FTP connection "
"for later use.  The file to be used for storing and retrieving bookmarks is "
"given by the parameter @t{$ZFTP_BMFILE}; if not set when one of the two "
"functions is called, it will be set to the file @t{.zfbkmarks} in the "
"directory where your zsh startup files live (usually @t{~})."
msgstr ""

#. type: findex
#: zsh.texi:35133
#, no-wrap
msgid "zfmark"
msgstr ""

#. type: item
#: zsh.texi:35134
#, no-wrap
msgid "@t{zfmark} [ @var{bookmark} ]"
msgstr ""

#. type: table
#: zsh.texi:35140
msgid ""
"If given an argument, mark the current host, user and directory under the "
"name @var{bookmark} for later use by @t{zfgoto}.  If there is no connection "
"open, use the values for the last connection immediately before it was "
"closed; it is an error if there was none.  Any existing bookmark under the "
"same name will be silently replaced."
msgstr ""

#. type: table
#: zsh.texi:35146
msgid ""
"If not given an argument, list the existing bookmarks and the points to "
"which they refer in the form @var{user}@t{@@}@var{host}@t{:}@var{directory}; "
"this is the format in which they are stored, and the file may be edited "
"directly."
msgstr ""

#. type: findex
#: zsh.texi:35147
#, no-wrap
msgid "zfgoto"
msgstr ""

#. type: item
#: zsh.texi:35148
#, no-wrap
msgid "@t{zfgoto} [ @t{-n} ] @var{bookmark}"
msgstr ""

#. type: table
#: zsh.texi:35155
msgid ""
"Return to the location given by @var{bookmark}, as previously set by "
"@t{zfmark}.  If the location has user `@t{ftp}' or `@t{anonymous}', open the "
"connection with @t{zfanon}, so that no password is required.  If the user "
"and host parameters match those stored for the current session, if any, "
"those will be used, and again no password is required.  Otherwise a password "
"will be prompted for."
msgstr ""

#. type: table
#: zsh.texi:35162
msgid ""
"With the option @t{-n}, the bookmark is taken to be a nickname stored by the "
"@t{ncftp} program in its bookmark file, which is assumed to be "
"@t{~/.ncftp/bookmarks}.  The function works identically in other ways.  Note "
"that there is no mechanism for adding or modifying @t{ncftp} bookmarks from "
"the zftp functions."
msgstr ""

#. type: subsection
#: zsh.texi:35167
#, no-wrap
msgid "Other functions"
msgstr ""

#. type: Plain text
#: zsh.texi:35172
msgid ""
"Mostly, these functions will not be called directly (apart from @t{zfinit}), "
"but are described here for completeness.  You may wish to alter "
"@t{zftp_chpwd} and @t{zftp_progress}, in particular."
msgstr ""

#. type: findex
#: zsh.texi:35175
#, no-wrap
msgid "zfinit"
msgstr ""

#. type: item
#: zsh.texi:35176
#, no-wrap
msgid "@t{zfinit} [ @t{-n} ]"
msgstr ""

#. type: table
#: zsh.texi:35180
msgid ""
"As described above, this is used to initialize the zftp function system.  "
"The @t{-n} option should be used if the zftp command is already built into "
"the shell."
msgstr ""

#. type: findex
#: zsh.texi:35181
#, no-wrap
msgid "zfautocheck"
msgstr ""

#. type: item
#: zsh.texi:35182
#, no-wrap
msgid "@t{zfautocheck} [ @t{-dn} ]"
msgstr ""

#. type: table
#: zsh.texi:35191
msgid ""
"This function is called to implement automatic reopening behaviour, as "
"described in more detail below.  The options must appear in the first "
"argument; @t{-n} prevents the command from changing to the old directory, "
"while @t{-d} prevents it from setting the variable @t{do_close}, which it "
"otherwise does as a flag for automatically closing the connection after a "
"transfer.  The host and directory for the last session are stored in the "
"variable @t{$zflastsession}, but the internal host/user/password parameters "
"must also be correctly set."
msgstr ""

#. type: findex
#: zsh.texi:35192
#, no-wrap
msgid "zfcd_match"
msgstr ""

#. type: t{#1}
#: zsh.texi:35193
#, no-wrap
msgid "zfcd_match @var{prefix} @var{suffix}"
msgstr ""

#. type: table
#: zsh.texi:35200
msgid ""
"This performs matching for completion of remote directory names.  If the "
"remote server is UNIX, it will attempt to persuade the server to list the "
"remote directory with subdirectories marked, which usually works but is not "
"guaranteed.  On other hosts it simply calls @t{zfget_match} and hence "
"completes all files, not just directories.  On some systems, directories may "
"not even look like filenames."
msgstr ""

#. type: findex
#: zsh.texi:35201
#, no-wrap
msgid "zfget_match"
msgstr ""

#. type: t{#1}
#: zsh.texi:35202
#, no-wrap
msgid "zfget_match @var{prefix} @var{suffix}"
msgstr ""

#. type: table
#: zsh.texi:35208
msgid ""
"This performs matching for completion of remote filenames.  It caches files "
"for the current directory (only) in the shell parameter @t{$zftp_fcache}.  "
"It is in the form to be called by the @t{-K} option of @t{compctl}, but also "
"works when called from a widget-style completion function with @var{prefix} "
"and @var{suffix} set appropriately."
msgstr ""

#. type: findex
#: zsh.texi:35209
#, no-wrap
msgid "zfrglob"
msgstr ""

#. type: t{#1}
#: zsh.texi:35210
#, no-wrap
msgid "zfrglob @var{varname}"
msgstr ""

#. type: table
#: zsh.texi:35215
msgid ""
"Perform remote globbing, as describes in more detail below.  @var{varname} "
"is the name of a variable containing the pattern to be expanded; if there "
"were any matches, the same variable will be set to the expanded set of "
"filenames on return."
msgstr ""

#. type: findex
#: zsh.texi:35216
#, no-wrap
msgid "zfrtime"
msgstr ""

#. type: item
#: zsh.texi:35217
#, no-wrap
msgid "@t{zfrtime} @var{lfile} @var{rfile} [ @var{time} ]"
msgstr ""

#. type: table
#: zsh.texi:35223
msgid ""
"Set the local file @var{lfile} to have the same modification time as the "
"remote file @var{rfile}, or the explicit time @var{time} in FTP format "
"@t{CCYYMMDDhhmmSS} for the GMT timezone.  This uses the shell's "
"@t{zsh/datetime} module to perform the conversion from GMT to local time."
msgstr ""

#. type: findex
#: zsh.texi:35224
#, no-wrap
msgid "zftp_chpwd, supplied version"
msgstr ""

#. type: table
#: zsh.texi:35232
msgid ""
"This function is called every time a connection is opened, or closed, or the "
"remote directory changes.  This version alters the title bar of an "
"@t{xterm}-compatible or @t{sun-cmd} terminal emulator to reflect the local "
"and remote hostnames and current directories.  It works best when combined "
"with the function @t{chpwd}.  In particular, a function of the form"
msgstr ""

#. type: example
#: zsh.texi:35242
#, no-wrap
msgid ""
"chpwd() @{\n"
"  if [[ -n $ZFTP_USER ]]; then\n"
"    zftp_chpwd\n"
"  else\n"
"    # usual chpwd e.g put host:directory in title bar\n"
"  fi\n"
"@}\n"
msgstr ""

#. type: table
#: zsh.texi:35246
msgid "fits in well."
msgstr ""

#. type: findex
#: zsh.texi:35247
#, no-wrap
msgid "zftp_progress, supplied version"
msgstr ""

#. type: table
#: zsh.texi:35257
msgid ""
"This function shows the status of the transfer.  It will not write anything "
"unless the output is going to a terminal; however, if you transfer files in "
"the background, you should turn off progress reports by hand using "
"`@t{zstyle ':zftp:*' progress none}'.  Note also that if you alter it, any "
"output @emph{must} be to standard error, as standard output may be a file "
"being received.  The form of the progress meter, or whether it is used at "
"all, can be configured without altering the function, as described in the "
"next section."
msgstr ""

#. type: t{#1}
#: zsh.texi:35258 zsh.texi:35259
#, no-wrap
msgid "zffcache"
msgstr ""

#. type: table
#: zsh.texi:35262
msgid ""
"This is used to implement caching of files in the current directory for each "
"session separately.  It is used by @t{zfget_match} and @t{zfrglob}."
msgstr ""

#. type: subsection
#: zsh.texi:35273 zsh.texi:36068 zsh.texi:36348 zsh.texi:36668
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: cindex
#: zsh.texi:35275
#, no-wrap
msgid "zftp function system, configuration"
msgstr ""

#. type: cindex
#: zsh.texi:35276
#, no-wrap
msgid "zftp function system, styles"
msgstr ""

#. type: cindex
#: zsh.texi:35277
#, no-wrap
msgid "styles in zftp functions"
msgstr ""

#. type: Plain text
#: zsh.texi:35296
msgid ""
"Various styles are available using the standard shell style mechanism, "
"described in @ref{The zsh/zutil Module}. Briefly, the command `@t{zstyle "
"':zftp:*'} @var{style} @var{value} ...'.  defines the @var{style} to have "
"value @var{value}; more than one value may be given, although that is not "
"useful in the cases described here.  These values will then be used "
"throughout the zftp function system.  For more precise control, the first "
"argument, which gives a pattern that matches @emph{contexts} in which the "
"style applies, can be modified to include a particular function, as for "
"example `@t{:zftp:zfget}': the style will then have the given value only in "
"the @t{zfget} function, and will override styles set under `@t{:zftp:*}'.  "
"Note that only the top level function name, as called by the user, is used; "
"calling of lower level functions is transparent to the user.  Hence "
"modifications to the title bar in @t{zftp_chpwd} use the contexts "
"@t{:zftp:zfopen}, @t{:zftp:zfcd}, etc., depending where it was called from.  "
"The following styles are understood:"
msgstr ""

#. type: kindex
#: zsh.texi:35299
#, no-wrap
msgid "progress, zftp style"
msgstr ""

#. type: t{#1}
#: zsh.texi:35300
#, no-wrap
msgid "progress"
msgstr ""

#. type: table
#: zsh.texi:35310
msgid ""
"Controls the way that @t{zftp_progress} reports on the progress of a "
"transfer.  If empty, unset, or `@t{none}', no progress report is made; if "
"`@t{bar}' a growing bar of inverse video is shown; if `@t{percent}' (or any "
"other string, though this may change in future), the percentage of the file "
"transferred is shown.  The bar meter requires that the width of the terminal "
"be available via the @t{$COLUMNS} parameter (normally this is set "
"automatically).  If the size of the file being transferred is not available, "
"@t{bar} and @t{percent} meters will simply show the number of bytes "
"transferred so far."
msgstr ""

#. type: table
#: zsh.texi:35314
msgid ""
"When @t{zfinit} is run, if this style is not defined for the context "
"@t{:zftp:*}, it will be set to `bar'."
msgstr ""

#. type: kindex
#: zsh.texi:35315
#, no-wrap
msgid "update, zftp style"
msgstr ""

#. type: t{#1}
#: zsh.texi:35316
#, no-wrap
msgid "update"
msgstr ""

#. type: table
#: zsh.texi:35320
msgid ""
"Specifies the minimum time interval between updates of the progress meter in "
"seconds.  No update is made unless new data has been received, so the actual "
"time interval is limited only by @t{$ZFTP_TIMEOUT}."
msgstr ""

#. type: table
#: zsh.texi:35323 zsh.texi:35337
msgid "As described for @t{progress}, @t{zfinit} will force this to default to 1."
msgstr ""

#. type: kindex
#: zsh.texi:35324
#, no-wrap
msgid "remote-glob, zftp style"
msgstr ""

#. type: t{#1}
#: zsh.texi:35325
#, no-wrap
msgid "remote-glob"
msgstr ""

#. type: table
#: zsh.texi:35328
msgid ""
"If set to `@t{1}', `@t{yes}' or `@t{true}', filename generation (globbing) "
"is performed on the remote machine instead of by zsh itself; see below."
msgstr ""

#. type: kindex
#: zsh.texi:35329
#, no-wrap
msgid "titlebar, zftp style"
msgstr ""

#. type: t{#1}
#: zsh.texi:35330
#, no-wrap
msgid "titlebar"
msgstr ""

#. type: table
#: zsh.texi:35334
msgid ""
"If set to `@t{1}', `@t{yes}' or `@t{true}', @t{zftp_chpwd} will put the "
"remote host and remote directory into the titlebar of terminal emulators "
"such as xterm or sun-cmd that allow this."
msgstr ""

#. type: kindex
#: zsh.texi:35338
#, no-wrap
msgid "chpwd, zftp style"
msgstr ""

#. type: table
#: zsh.texi:35344
msgid ""
"If set to `@t{1}' `@t{yes}' or `@t{true}', @t{zftp_chpwd} will call the "
"function @t{chpwd} when a connection is closed.  This is useful if the "
"remote host details were put into the terminal title bar by @t{zftp_chpwd} "
"and your usual @t{chpwd} also modifies the title bar."
msgstr ""

#. type: table
#: zsh.texi:35349
msgid ""
"When @t{zfinit} is run, it will determine whether @t{chpwd} exists and if so "
"it will set the default value for the style to 1 if none exists already."
msgstr ""

#. type: Plain text
#: zsh.texi:35356
msgid ""
"Note that there is also an associative array @t{zfconfig} which contains "
"values used by the function system.  This should not be modified or "
"overwritten."
msgstr ""

#. type: subsection
#: zsh.texi:35359
#, no-wrap
msgid "Remote globbing"
msgstr ""

#. type: cindex
#: zsh.texi:35361
#, no-wrap
msgid "zftp function system, remote globbing"
msgstr ""

#. type: Plain text
#: zsh.texi:35377
msgid ""
"The commands for retrieving files usually perform filename generation "
"(globbing) on their arguments; this can be turned off by passing the option "
"@t{-G} to each of the commands.  Normally this operates by retrieving a "
"complete list of files for the directory in question, then matching these "
"locally against the pattern supplied.  This has the advantage that the full "
"range of zsh patterns (respecting the setting of the option "
"@t{EXTENDED_GLOB}) can be used.  However, it means that the directory part "
"of a filename will not be expanded and must be given exactly.  If the remote "
"server does not support the UNIX directory semantics, directory handling is "
"problematic and it is recommended that globbing only be used within the "
"current directory.  The list of files in the current directory, if "
"retrieved, will be cached, so that subsequent globs in the same directory "
"without an intervening @t{zfcd} are much faster."
msgstr ""

#. type: Plain text
#: zsh.texi:35385
msgid ""
"If the @t{remote-glob} style (see above) is set, globbing is instead "
"performed on the remote host: the server is asked for a list of matching "
"files.  This is highly dependent on how the server is implemented, though "
"typically UNIX servers will provide support for basic glob patterns.  This "
"may in some cases be faster, as it avoids retrieving the entire list of "
"directory contents."
msgstr ""

#. type: subsection
#: zsh.texi:35388
#, no-wrap
msgid "Automatic and temporary reopening"
msgstr ""

#. type: cindex
#: zsh.texi:35390
#, no-wrap
msgid "zftp function system, automatic reopening"
msgstr ""

#. type: Plain text
#: zsh.texi:35398
msgid ""
"As described for the @t{zfopen} command, a subsequent @t{zfopen} with no "
"parameters will reopen the connection to the last host (this includes "
"connections made with the @t{zfanon} command).  Opened in this fashion, the "
"connection starts in the default remote directory and will remain open until "
"explicitly closed."
msgstr ""

#. type: Plain text
#: zsh.texi:35408
msgid ""
"Automatic re-opening is also available.  If a connection is not currently "
"open and a command requiring a connection is given, the last connection is "
"implicitly reopened.  In this case the directory which was current when the "
"connection was closed again becomes the current directory (unless, of "
"course, the command given changes it).  Automatic reopening will also take "
"place if the connection was close by the remote server for whatever reason "
"(e.g. a timeout).  It is not available if the @t{-1} option to @t{zfopen} or "
"@t{zfanon} was used."
msgstr ""

#. type: Plain text
#: zsh.texi:35417
msgid ""
"Furthermore, if the command issued is a file transfer, the connection will "
"be closed after the transfer is finished, hence providing a one-shot mode "
"for transfers.  This does not apply to directory changing or listing "
"commands; for example a @t{zfdir} may reopen a connection but will leave it "
"open.  Also, automatic closure will only ever happen in the same command as "
"automatic opening, i.e a @t{zfdir} directly followed by a @t{zfget} will "
"never close the connection automatically."
msgstr ""

#. type: Plain text
#: zsh.texi:35421
msgid ""
"Information about the previous connection is given by the @t{zfstat} "
"function.  So, for example, if that reports:"
msgstr ""

#. type: example
#: zsh.texi:35427
#, no-wrap
msgid ""
"Session:        default\n"
"Not connected.\n"
"Last session:   ftp.bar.com:/pub/textfiles\n"
msgstr ""

#. type: Plain text
#: zsh.texi:35434
msgid ""
"then the command @t{zfget file.txt} will attempt to reopen a connection to "
"@t{ftp.bar.com}, retrieve the file @t{/pub/textfiles/file.txt}, and "
"immediately close the connection again.  On the other hand, @t{zfcd ..} will "
"open the connection in the directory @t{/pub} and leave it open."
msgstr ""

#. type: Plain text
#: zsh.texi:35439
msgid ""
"Note that all the above is local to each session; if you return to a "
"previous session, the connection for that session is the one which will be "
"reopened."
msgstr ""

#. type: Plain text
#: zsh.texi:35454
msgid ""
"Completion of local and remote files, directories, sessions and bookmarks is "
"supported.  The older, @t{compctl}-style completion is defined when "
"@t{zfinit} is called; support for the new widget-based completion system is "
"provided in the function @t{Completion/Zsh/Command/_zftp}, which should be "
"installed with the other functions of the completion system and hence should "
"automatically be available."
msgstr ""

#. type: cindex
#: zsh.texi:35458
#, no-wrap
msgid "user contributions"
msgstr ""

#. type: Plain text
#: zsh.texi:35469
msgid ""
"The Zsh source distribution includes a number of items contributed by the "
"user community.  These are not inherently a part of the shell, and some may "
"not be available in every zsh installation.  The most significant of these "
"are documented here.  For documentation on other contributed items such as "
"shell functions, look for comments in the function source files."
msgstr ""

#. type: node
#: zsh.texi:35486 zsh.texi:35932 zsh.texi:36273
#, no-wrap
msgid "Recent Directories"
msgstr ""

#. type: subsection
#: zsh.texi:35493
#, no-wrap
msgid "Accessing On-Line Help"
msgstr ""

#. type: cindex
#: zsh.texi:35495
#, no-wrap
msgid "helpfiles utility"
msgstr ""

#. type: Plain text
#: zsh.texi:35505
msgid ""
"The key sequence @t{ESC h} is normally bound by ZLE to execute the "
"@t{run-help} widget (see @ref{Zsh Line Editor}).  This invokes the "
"@t{run-help} command with the command word from the current input line as "
"its argument.  By default, @t{run-help} is an alias for the @t{man} command, "
"so this often fails when the command word is a shell builtin or a "
"user-defined function.  By redefining the @t{run-help} alias, one can "
"improve the on-line help provided by the shell."
msgstr ""

#. type: Plain text
#: zsh.texi:35513
msgid ""
"The @t{helpfiles} utility, found in the @t{Util} directory of the "
"distribution, is a Perl program that can be used to process the zsh manual "
"to produce a separate help file for each shell builtin and for many other "
"shell features as well.  The autoloadable @t{run-help} function, found in "
"@t{Functions/Misc}, searches for these helpfiles and performs several other "
"tests to produce the most complete help possible for the command."
msgstr ""

#. type: Plain text
#: zsh.texi:35517
msgid ""
"Help files are installed by default to a subdirectory of @t{/usr/share/zsh} "
"or @t{/usr/local/share/zsh}."
msgstr ""

#. type: Plain text
#: zsh.texi:35523
msgid ""
"To create your own help files with @t{helpfiles}, choose or create a "
"directory where the individual command help files will reside.  For example, "
"you might choose @t{~/zsh_help}.  If you unpacked the zsh distribution in "
"your home directory, you would use the commands:"
msgstr ""

#. type: example
#: zsh.texi:35528
#, no-wrap
msgid ""
"mkdir ~/zsh_help\n"
"perl ~/zsh-5.9/Util/helpfiles ~/zsh_help\n"
msgstr ""

#. type: vindex
#: zsh.texi:35531
#, no-wrap
msgid "HELPDIR"
msgstr ""

#. type: Plain text
#: zsh.texi:35536
msgid ""
"The @t{HELPDIR} parameter tells @t{run-help} where to look for the help "
"files. When unset, it uses the default installation path.  To use your own "
"set of help files, set this to the appropriate path in one of your startup "
"files:"
msgstr ""

#. type: example
#: zsh.texi:35540
#, no-wrap
msgid "HELPDIR=~/zsh_help\n"
msgstr ""

#. type: findex
#: zsh.texi:35543
#, no-wrap
msgid "run-help, use of"
msgstr ""

#. type: Plain text
#: zsh.texi:35546
msgid ""
"To use the @t{run-help} function, you need to add lines something like the "
"following to your @t{.zshrc} or equivalent startup file:"
msgstr ""

#. type: example
#: zsh.texi:35551
#, no-wrap
msgid ""
"unalias run-help\n"
"autoload run-help\n"
msgstr ""

#. type: Plain text
#: zsh.texi:35559
msgid ""
"Note that in order for `@t{autoload run-help}' to work, the @t{run-help} "
"file must be in one of the directories named in your @t{fpath} array (see "
"@ref{Parameters Used By The Shell}).  This should already be the case if you "
"have a standard zsh installation; if it is not, copy "
"@t{Functions/Misc/run-help} to an appropriate directory."
msgstr ""

#. type: subsection
#: zsh.texi:35562
#, no-wrap
msgid "Recompiling Functions"
msgstr ""

#. type: cindex
#: zsh.texi:35564
#, no-wrap
msgid "functions, recompiling"
msgstr ""

#. type: cindex
#: zsh.texi:35565
#, no-wrap
msgid "zrecompile utility"
msgstr ""

#. type: Plain text
#: zsh.texi:35576
msgid ""
"If you frequently edit your zsh functions, or periodically update your zsh "
"installation to track the latest developments, you may find that function "
"digests compiled with the @t{zcompile} builtin are frequently out of date "
"with respect to the function source files.  This is not usually a problem, "
"because zsh always looks for the newest file when loading a function, but it "
"may cause slower shell startup and function loading.  Also, if a digest file "
"is explicitly used as an element of @t{fpath}, zsh won't check whether any "
"of its source files has changed."
msgstr ""

#. type: Plain text
#: zsh.texi:35580
msgid ""
"The @t{zrecompile} autoloadable function, found in @t{Functions/Misc}, can "
"be used to keep function digests up to date."
msgstr ""

#. type: t{#1}
#: zsh.texi:35583 zsh.texi:41208
#, no-wrap
msgid "zrecompile"
msgstr ""

#. type: item
#: zsh.texi:35584
#, no-wrap
msgid "@t{zrecompile} [ @t{-qt} ] [ @var{name} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:35585
#, no-wrap
msgid "@t{zrecompile} [ @t{-qt} ] @t{-p} @var{arg} ... [ @t{-}@t{-} @var{arg} ... ]"
msgstr ""

#. type: table
#: zsh.texi:35590
msgid ""
"This tries to find @t{*.zwc} files and automatically re-compile them if at "
"least one of the original files is newer than the compiled file.  This works "
"only if the names stored in the compiled files are full paths or are "
"relative to the directory that contains the @t{.zwc} file."
msgstr ""

#. type: table
#: zsh.texi:35596
msgid ""
"In the first form, each @var{name} is the name of a compiled file or a "
"directory containing @t{*.zwc} files that should be checked.  If no "
"arguments are given, the directories and @t{*.zwc} files in @t{fpath} are "
"used."
msgstr ""

#. type: table
#: zsh.texi:35602
msgid ""
"When @t{-t} is given, no compilation is performed, but a return status of "
"zero (true) is set if there are files that need to be re-compiled and "
"non-zero (false) otherwise.  The @t{-q} option quiets the chatty output that "
"describes what @t{zrecompile} is doing."
msgstr ""

#. type: table
#: zsh.texi:35607
msgid ""
"Without the @t{-t} option, the return status is zero if all files that "
"needed re-compilation could be compiled and non-zero if compilation for at "
"least one of the files failed."
msgstr ""

#. type: table
#: zsh.texi:35612
msgid ""
"If the @t{-p} option is given, the @var{arg}s are interpreted as one or more "
"sets of arguments for @t{zcompile}, separated by `@t{-}@t{-}'.  For example:"
msgstr ""

#. type: example
#: zsh.texi:35619
#, no-wrap
msgid ""
"zrecompile -p \\ \n"
"           -R ~/.zshrc -- \\ \n"
"           -M ~/.zcompdump -- \\ \n"
"           ~/zsh/comp.zwc ~/zsh/Completion/*/_*\n"
msgstr ""

#. type: table
#: zsh.texi:35628
msgid ""
"This compiles @t{~/.zshrc} into @t{~/.zshrc.zwc} if that doesn't exist or if "
"it is older than @t{~/.zshrc}. The compiled file will be marked for reading "
"instead of mapping. The same is done for @t{~/.zcompdump} and "
"@t{~/.zcompdump.zwc}, but this compiled file is marked for mapping. The last "
"line re-creates the file @t{~/zsh/comp.zwc} if any of the files matching the "
"given pattern is newer than it."
msgstr ""

#. type: table
#: zsh.texi:35632
msgid ""
"Without the @t{-p} option, @t{zrecompile} does not create function digests "
"that do not already exist, nor does it add new functions to the digest."
msgstr ""

#. type: Plain text
#: zsh.texi:35639
msgid ""
"The following shell loop is an example of a method for creating function "
"digests for all functions in your @t{fpath}, assuming that you have write "
"permission to the directories:"
msgstr ""

#. type: example
#: zsh.texi:35657
#, no-wrap
msgid ""
"for ((i=1; i <= $#fpath; ++i)); do\n"
"  dir=$fpath[i]\n"
"  zwc=$@{dir:t@}.zwc\n"
"  if [[ $dir == (.|..) || $dir == (.|..)/* ]]; then\n"
"    continue\n"
"  fi\n"
"  files=($dir/*(N-.))\n"
"  if [[ -w $dir:h && -n $files ]]; then\n"
"    files=($@{$@{(M)files%/*/*@}#/@})\n"
"    if ( cd $dir:h &&\n"
"         zrecompile -p -U -z $zwc $files ); then\n"
"      fpath[i]=$fpath[i].zwc\n"
"    fi\n"
"  fi\n"
"done\n"
msgstr ""

#. type: Plain text
#: zsh.texi:35663
msgid ""
"The @t{-U} and @t{-z} options are appropriate for functions in the default "
"zsh installation @t{fpath}; you may need to use different options for your "
"personal function directories."
msgstr ""

#. type: Plain text
#: zsh.texi:35668
msgid ""
"Once the digests have been created and your @t{fpath} modified to refer to "
"them, you can keep them up to date by running @t{zrecompile} with no "
"arguments."
msgstr ""

#. type: subsection
#: zsh.texi:35671
#, no-wrap
msgid "Keyboard Definition"
msgstr ""

#. type: cindex
#: zsh.texi:35673
#, no-wrap
msgid "keyboard definition"
msgstr ""

#. type: t{#1}
#: zsh.texi:35676 zsh.texi:41092
#, no-wrap
msgid "zkbd"
msgstr ""

#. type: Plain text
#: zsh.texi:35682
msgid ""
"The large number of possible combinations of keyboards, workstations, "
"terminals, emulators, and window systems makes it impossible for zsh to have "
"built-in key bindings for every situation.  The @t{zkbd} utility, found in "
"@t{Functions/Misc}, can help you quickly create key bindings for your "
"configuration."
msgstr ""

#. type: Plain text
#: zsh.texi:35685
msgid "Run @t{zkbd} either as an autoloaded function, or as a shell script:"
msgstr ""

#. type: example
#: zsh.texi:35689
#, no-wrap
msgid "zsh -f ~/zsh-5.9/Functions/Misc/zkbd\n"
msgstr ""

#. type: Plain text
#: zsh.texi:35697
msgid ""
"When you run @t{zkbd}, it first asks you to enter your terminal type; if the "
"default it offers is correct, just press return.  It then asks you to press "
"a number of different keys to determine characteristics of your keyboard and "
"terminal; @t{zkbd} warns you if it finds anything out of the ordinary, such "
"as a Delete key that sends neither @t{^H} nor @t{^?}."
msgstr ""

#. type: Plain text
#: zsh.texi:35704
msgid ""
"The keystrokes read by @t{zkbd} are recorded as a definition for an "
"associative array named @t{key}, written to a file in the subdirectory "
"@t{.zkbd} within either your @t{HOME} or @t{ZDOTDIR} directory.  The name of "
"the file is composed from the @t{TERM}, @t{VENDOR} and @t{OSTYPE} "
"parameters, joined by hyphens."
msgstr ""

#. type: Plain text
#: zsh.texi:35709
msgid ""
"You may read this file into your @t{.zshrc} or another startup file with the "
"`@t{source}' or `@t{.}' commands, then reference the @t{key} parameter in "
"bindkey commands, like this:"
msgstr ""

#. type: example
#: zsh.texi:35716
#, no-wrap
msgid ""
"source $@{ZDOTDIR:-$HOME@}/.zkbd/$TERM-$VENDOR-$OSTYPE\n"
"[[ -n $@{key[Left]@} ]] && bindkey \"$@{key[Left]@}\" backward-char\n"
"[[ -n $@{key[Right]@} ]] && bindkey \"$@{key[Right]@}\" forward-char\n"
"# etc.\n"
msgstr ""

#. type: Plain text
#: zsh.texi:35724
msgid ""
"Note that in order for `@t{autoload zkbd}' to work, the @t{zkdb} file must "
"be in one of the directories named in your @t{fpath} array (see "
"@ref{Parameters Used By The Shell}).  This should already be the case if you "
"have a standard zsh installation; if it is not, copy @t{Functions/Misc/zkbd} "
"to an appropriate directory."
msgstr ""

#. type: subsection
#: zsh.texi:35727
#, no-wrap
msgid "Dumping Shell State"
msgstr ""

#. type: cindex
#: zsh.texi:35729
#, no-wrap
msgid "reporter utility"
msgstr ""

#. type: Plain text
#: zsh.texi:35738
msgid ""
"Occasionally you may encounter what appears to be a bug in the shell, "
"particularly if you are using a beta version of zsh or a development "
"release.  Usually it is sufficient to send a description of the problem to "
"one of the zsh mailing lists (see @ref{Mailing Lists}), but sometimes one of "
"the zsh developers will need to recreate your environment in order to track "
"the problem down."
msgstr ""

#. type: Plain text
#: zsh.texi:35746
msgid ""
"The script named @t{reporter}, found in the @t{Util} directory of the "
"distribution, is provided for this purpose.  (It is also possible to "
"@t{autoload reporter}, but @t{reporter} is not installed in @t{fpath} by "
"default.)  This script outputs a detailed dump of the shell state, in the "
"form of another script that can be read with `@t{zsh -f}' to recreate that "
"state."
msgstr ""

#. type: Plain text
#: zsh.texi:35750
msgid ""
"To use @t{reporter}, read the script into your shell with the `@t{.}' "
"command and redirect the output into a file:"
msgstr ""

#. type: example
#: zsh.texi:35754
#, no-wrap
msgid ". ~/zsh-5.9/Util/reporter > zsh.report\n"
msgstr ""

#. type: Plain text
#: zsh.texi:35761
msgid ""
"You should check the @t{zsh.report} file for any sensitive information such "
"as passwords and delete them by hand before sending the script to the "
"developers.  Also, as the output can be voluminous, it's best to wait for "
"the developers to ask for this information before sending it."
msgstr ""

#. type: Plain text
#: zsh.texi:35771
msgid ""
"You can also use @t{reporter} to dump only a subset of the shell state.  "
"This is sometimes useful for creating startup files for the first time.  "
"Most of the output from reporter is far more detailed than usually is "
"necessary for a startup file, but the @t{aliases}, @t{options}, and "
"@t{zstyles} states may be useful because they include only changes from the "
"defaults.  The @t{bindings} state may be useful if you have created any of "
"your own keymaps, because @t{reporter} arranges to dump the keymap creation "
"commands as well as the bindings for every keymap."
msgstr ""

#. type: Plain text
#: zsh.texi:35779
msgid ""
"As is usual with automated tools, if you create a startup file with "
"@t{reporter}, you should edit the results to remove unnecessary commands.  "
"Note that if you're using the new completion system, you should @emph{not} "
"dump the @t{functions} state to your startup files with @t{reporter}; use "
"the @t{compdump} function instead (see @ref{Completion System})."
msgstr ""

#. type: item
#: zsh.texi:35782
#, no-wrap
msgid "@t{reporter} [ @var{state} ... ]"
msgstr ""

#. type: findex
#: zsh.texi:35783
#, no-wrap
msgid "reporter"
msgstr ""

#. type: table
#: zsh.texi:35786
msgid ""
"Print to standard output the indicated subset of the current shell state.  "
"The @var{state} arguments may be one or more of:"
msgstr ""

#. type: t{#1}
#: zsh.texi:35789
#, no-wrap
msgid "all"
msgstr ""

#. type: table
#: zsh.texi:35791
msgid "Output everything listed below."
msgstr ""

#. type: table
#: zsh.texi:35793
msgid "Output alias definitions."
msgstr ""

#. type: t{#1}
#: zsh.texi:35793
#, no-wrap
msgid "bindings"
msgstr ""

#. type: table
#: zsh.texi:35795
msgid "Output ZLE key maps and bindings."
msgstr ""

#. type: t{#1}
#: zsh.texi:35795
#, no-wrap
msgid "completion"
msgstr ""

#. type: table
#: zsh.texi:35798
msgid ""
"Output old-style @t{compctl} commands.  New completion is covered by "
"@t{functions} and @t{zstyles}."
msgstr ""

#. type: table
#: zsh.texi:35800
msgid "Output autoloads and function definitions."
msgstr ""

#. type: table
#: zsh.texi:35802
msgid "Output @t{limit} commands."
msgstr ""

#. type: table
#: zsh.texi:35804
msgid "Output @t{setopt} commands."
msgstr ""

#. type: table
#: zsh.texi:35806
msgid "Same as @t{zstyles}."
msgstr ""

#. type: table
#: zsh.texi:35809
msgid ""
"Output shell parameter assignments, plus @t{export} commands for any "
"environment variables."
msgstr ""

#. type: t{#1}
#: zsh.texi:35809
#, no-wrap
msgid "zstyles"
msgstr ""

#. type: table
#: zsh.texi:35811
msgid "Output @t{zstyle} commands."
msgstr ""

#. type: table
#: zsh.texi:35815
msgid "If the @var{state} is omitted, @t{all} is assumed."
msgstr ""

#. type: table
#: zsh.texi:35821
msgid ""
"With the exception of `@t{all}', every @var{state} can be abbreviated by any "
"prefix, even a single letter; thus @t{a} is the same as @t{aliases}, @t{z} "
"is the same as @t{zstyles}, etc."
msgstr ""

#. type: subsection
#: zsh.texi:35825
#, no-wrap
msgid "Manipulating Hook Functions"
msgstr ""

#. type: cindex
#: zsh.texi:35827
#, no-wrap
msgid "hook function utility"
msgstr ""

#. type: findex
#: zsh.texi:35831
#, no-wrap
msgid "add-zsh-hook"
msgstr ""

#. type: item
#: zsh.texi:35832
#, no-wrap
msgid "@t{add-zsh-hook} [ @t{-L} | @t{-dD} ] [ @t{-Uzk} ] @var{hook} @var{function}"
msgstr ""

#. type: table
#: zsh.texi:35840
msgid ""
"Several functions are special to the shell, as described in the section "
"Special Functions, @ref{Functions}, in that they are automatically called at "
"specific points during shell execution.  Each has an associated array "
"consisting of names of functions to be called at the same point; these are "
"so-called `hook functions'.  The shell function @t{add-zsh-hook} provides a "
"simple way of adding or removing functions from the array."
msgstr ""

#. type: table
#: zsh.texi:35847
msgid ""
"@var{hook} is one of @t{chpwd}, @t{periodic}, @t{precmd}, @t{preexec}, "
"@t{zshaddhistory}, @t{zshexit}, or @t{zsh_directory_name}, the special "
"functions in question.  Note that @t{zsh_directory_name} is called in a "
"different way from the other functions, but may still be manipulated as a "
"hook."
msgstr ""

#. type: table
#: zsh.texi:35853
msgid ""
"@var{function} is name of an ordinary shell function.  If no options are "
"given this will be added to the array of functions to be executed in the "
"given context.  Functions are invoked in the order they were added."
msgstr ""

#. type: table
#: zsh.texi:35857
msgid ""
"If the option @t{-L} is given, the current values for the hook arrays are "
"listed with @t{typeset}."
msgstr ""

#. type: table
#: zsh.texi:35861
msgid ""
"If the option @t{-d} is given, the @var{function} is removed from the array "
"of functions to be executed."
msgstr ""

#. type: table
#: zsh.texi:35866
msgid ""
"If the option @t{-D} is given, the @var{function} is treated as a pattern "
"and any matching names of functions are removed from the array of functions "
"to be executed."
msgstr ""

#. type: table
#: zsh.texi:35871
msgid ""
"The options @t{-U}, @t{-z} and @t{-k} are passed as arguments to "
"@t{autoload} for @var{function}.  For functions contributed with zsh, the "
"options @t{-Uz} are appropriate."
msgstr ""

#. type: findex
#: zsh.texi:35872
#, no-wrap
msgid "add-zle-hook-widget"
msgstr ""

#. type: item
#: zsh.texi:35873
#, no-wrap
msgid ""
"@t{add-zle-hook-widget} [ @t{-L} | @t{-dD} ] [ @t{-Uzk} ] @var{hook} "
"@var{widgetname}"
msgstr ""

#. type: table
#: zsh.texi:35881
msgid ""
"Several widget names are special to the line editor, as described in the "
"section Special Widgets, @ref{Zle Widgets}, in that they are automatically "
"called at specific points during editing.  Unlike function hooks, these do "
"not use a predefined array of other names to call at the same point; the "
"shell function @t{add-zle-hook-widget} maintains a similar array and "
"arranges for the special widget to invoke those additional widgets."
msgstr ""

#. type: table
#: zsh.texi:35888
msgid ""
"@var{hook} is one of @t{isearch-exit}, @t{isearch-update}, "
"@t{line-pre-redraw}, @t{line-init}, @t{line-finish}, @t{history-line-set}, "
"or @t{keymap-select}, corresponding to each of the special widgets "
"@t{zle-isearch-exit}, etc.  The special widget names are also accepted as "
"the @var{hook} argument."
msgstr ""

#. type: table
#: zsh.texi:35893
msgid ""
"@var{widgetname} is the name of a ZLE widget.  If no options are given this "
"is added to the array of widgets to be invoked in the given hook context.  "
"Widgets are invoked in the order they were added, with"
msgstr ""

#. type: example
#: zsh.texi:35895
#, no-wrap
msgid "@t{zle }@var{widgetname}@t{ -Nw -f \"nolast\" -- \"$@@\"}\n"
msgstr ""

#. type: vindex
#: zsh.texi:35898
#, no-wrap
msgid "WIDGET, in hooks"
msgstr ""

#. type: table
#: zsh.texi:35902
msgid ""
"Note that this means that the `@t{WIDGET}' special parameter tracks the "
"@var{widgetname} when the widget function is called, rather than tracking "
"the name of the corresponding special hook widget."
msgstr ""

#. type: table
#: zsh.texi:35906
msgid ""
"If the option @t{-d} is given, the @var{widgetname} is removed from the "
"array of widgets to be executed."
msgstr ""

#. type: table
#: zsh.texi:35910
msgid ""
"If the option @t{-D} is given, the @var{widgetname} is treated as a pattern "
"and any matching names of widgets are removed from the array."
msgstr ""

#. type: table
#: zsh.texi:35919
msgid ""
"If @var{widgetname} does not name an existing widget when added to the "
"array, it is assumed that a shell function also named @var{widgetname} is "
"meant to provide the implementation of the widget.  This name is therefore "
"marked for autoloading, and the options @t{-U}, @t{-z} and @t{-k} are passed "
"as arguments to @t{autoload} as with @t{add-zsh-hook}.  The widget is also "
"created with `@t{zle -N }@var{widgetname}' to cause the corresponding "
"function to be loaded the first time the hook is called."
msgstr ""

#. type: table
#: zsh.texi:35928
msgid ""
"The arrays of @var{widgetname} are currently maintained in @t{zstyle} "
"contexts, one for each @var{hook} context, with a style of `@t{widgets}'.  "
"If the @t{-L} option is given, this set of styles is listed with `@t{zstyle "
"-L}'.  This implementation may change, and the special widgets that refer to "
"the styles are created only if @t{add-zle-hook-widget} is called to add at "
"least one widget, so if this function is used for any hooks, then all hooks "
"should be managed only via this function."
msgstr ""

#. type: node
#: zsh.texi:35932 zsh.texi:36273 zsh.texi:36505
#, no-wrap
msgid "Other Directory Functions"
msgstr ""

#. type: cindex
#: zsh.texi:35933
#, no-wrap
msgid "recent directories, maintaining list of"
msgstr ""

#. type: cindex
#: zsh.texi:35934
#, no-wrap
msgid "directories, maintaining list of recent"
msgstr ""

#. type: findex
#: zsh.texi:35935
#, no-wrap
msgid "cdr"
msgstr ""

#. type: findex
#: zsh.texi:35936
#, no-wrap
msgid "_cdr"
msgstr ""

#. type: findex
#: zsh.texi:35937
#, no-wrap
msgid "chpwd_recent_add"
msgstr ""

#. type: findex
#: zsh.texi:35938
#, no-wrap
msgid "chpwd_recent_dirs"
msgstr ""

#. type: findex
#: zsh.texi:35939
#, no-wrap
msgid "chpwd_recent_filehandler"
msgstr ""

#. type: section
#: zsh.texi:35941
#, no-wrap
msgid "Remembering Recent Directories"
msgstr ""

#. type: Plain text
#: zsh.texi:35953
msgid ""
"The function @t{cdr} allows you to change the working directory to a "
"previous working directory from a list maintained automatically.  It is "
"similar in concept to the directory stack controlled by the @t{pushd}, "
"@t{popd} and @t{dirs} builtins, but is more configurable, and as it stores "
"all entries in files it is maintained across sessions and (by default)  "
"between terminal emulators in the current session.  Duplicates are "
"automatically removed, so that the list reflects the single most recent use "
"of each directory."
msgstr ""

#. type: Plain text
#: zsh.texi:35958
msgid ""
"Note that the @t{pushd} directory stack is not actually modified or used by "
"@t{cdr} unless you configure it to do so as described in the configuration "
"section below."
msgstr ""

#. type: Plain text
#: zsh.texi:35968
msgid ""
"The system works by means of a hook function that is called every time the "
"directory changes.  To install the system, autoload the required functions "
"and use the @t{add-zsh-hook} function described above:"
msgstr ""

#. type: example
#: zsh.texi:35973
#, no-wrap
msgid ""
"autoload -Uz chpwd_recent_dirs cdr add-zsh-hook\n"
"add-zsh-hook chpwd chpwd_recent_dirs\n"
msgstr ""

#. type: Plain text
#: zsh.texi:35979
msgid ""
"Now every time you change directly interactively, no matter which command "
"you use, the directory to which you change will be remembered in "
"most-recent-first order."
msgstr ""

#. type: subsection
#: zsh.texi:35982
#, no-wrap
msgid "Use"
msgstr ""

#. type: Plain text
#: zsh.texi:35987
msgid "All direct user interaction is via the @t{cdr} function."
msgstr ""

#. type: Plain text
#: zsh.texi:35996
msgid ""
"The argument to cdr is a number @var{N} corresponding to the @var{N}th most "
"recently changed-to directory.  1 is the immediately preceding directory; "
"the current directory is remembered but is not offered as a destination.  "
"Note that if you have multiple windows open 1 may refer to a directory "
"changed to in another window; you can avoid this by having per-terminal "
"files for storing directory as described for the @t{recent-dirs-file} style "
"below."
msgstr ""

#. type: Plain text
#: zsh.texi:36002
msgid ""
"If you set the @t{recent-dirs-default} style described below @t{cdr} will "
"behave the same as @t{cd} if given a non-numeric argument, or more than one "
"argument.  The recent directory list is updated just the same however you "
"change directory."
msgstr ""

#. type: Plain text
#: zsh.texi:36006
msgid ""
"If the argument is omitted, 1 is assumed.  This is similar to @t{pushd}'s "
"behaviour of swapping the two most recent directories on the stack."
msgstr ""

#. type: Plain text
#: zsh.texi:36010
msgid ""
"Completion for the argument to @t{cdr} is available if compinit has been "
"run; menu selection is recommended, using:"
msgstr ""

#. type: example
#: zsh.texi:36014
#, no-wrap
msgid "zstyle ':completion:*:*:cdr:*:*' menu selection\n"
msgstr ""

#. type: Plain text
#: zsh.texi:36021
msgid ""
"to allow you to cycle through recent directories; the order is preserved, so "
"the first choice is the most recent directory before the current one.  The "
"verbose style is also recommended to ensure the directory is shown; this "
"style is on by default so no action is required unless you have changed it."
msgstr ""

#. type: Plain text
#: zsh.texi:36029
msgid "The behaviour of @t{cdr} may be modified by the following options."
msgstr ""

#. type: table
#: zsh.texi:36038
msgid ""
"lists the numbers and the corresponding directories in abbreviated form "
"(i.e. with @t{~} substitution reapplied), one per line.  The directories "
"here are not quoted (this would only be an issue if a directory name "
"contained a newline).  This is used by the completion system."
msgstr ""

#. type: table
#: zsh.texi:36042
msgid ""
"sets the variable @t{reply} to the current set of directories.  Nothing is "
"printed and the directory is not changed."
msgstr ""

#. type: table
#: zsh.texi:36050
msgid ""
"allows you to edit the list of directories, one per line.  The list can be "
"edited to any extent you like; no sanity checking is performed.  Completion "
"is available.  No quoting is necessary (except for newlines, where I have in "
"any case no sympathy); directories are in unabbreviated form and contain an "
"absolute path, i.e. they start with @t{/}.  Usually the first entry should "
"be left as the current directory."
msgstr ""

#. type: item
#: zsh.texi:36051
#, no-wrap
msgid "@t{-p '}@var{pattern}@t{'}"
msgstr ""

#. type: table
#: zsh.texi:36058
msgid ""
"Prunes any items in the directory list that match the given extended glob "
"pattern; the pattern needs to be quoted from immediate expansion on the "
"command line.  The pattern is matched against each completely expanded file "
"name in the list; the full string must match, so wildcards at the end "
"(e.g. @t{'*removeme*'}) are needed to remove entries with a given substring."
msgstr ""

#. type: table
#: zsh.texi:36063
msgid ""
"If output is to a terminal, then the function will print the new list after "
"pruning and prompt for confirmation by the user.  This output and "
"confirmation step can be skipped by using @t{-P} instead of @t{-p}."
msgstr ""

#. type: Plain text
#: zsh.texi:36077
msgid ""
"Configuration is by means of the styles mechanism that should be familiar "
"from completion; if not, see the description of the @t{zstyle} command in "
"@ref{The zsh/zutil Module}.  The context for setting styles should be "
"@t{':chpwd:*'} in case the meaning of the context is extended in future, for "
"example:"
msgstr ""

#. type: example
#: zsh.texi:36081
#, no-wrap
msgid "zstyle ':chpwd:*' recent-dirs-max 0\n"
msgstr ""

#. type: Plain text
#: zsh.texi:36086
msgid ""
"sets the value of the @t{recent-dirs-max} style to 0.  In practice the style "
"name is specific enough that a context of '*' should be fine."
msgstr ""

#. type: Plain text
#: zsh.texi:36092
msgid ""
"An exception is @t{recent-dirs-insert}, which is used exclusively by the "
"completion system and so has the usual completion system context "
"(@t{':completion:*'} if nothing more specific is needed), though again "
"@t{'*'} should be fine in practice."
msgstr ""

#. type: t{#1}
#: zsh.texi:36095
#, no-wrap
msgid "recent-dirs-default"
msgstr ""

#. type: table
#: zsh.texi:36102
msgid ""
"If true, and the command is expecting a recent directory index, and either "
"there is more than one argument or the argument is not an integer, then fall "
"through to \"cd\".  This allows the lazy to use only one command for "
"directory changing.  Completion recognises this, too; see recent-dirs-insert "
"for how to control completion when this option is in use."
msgstr ""

#. type: t{#1}
#: zsh.texi:36103
#, no-wrap
msgid "recent-dirs-file"
msgstr ""

#. type: table
#: zsh.texi:36110
msgid ""
"The file where the list of directories is saved.  The default is "
"@t{$@{ZDOTDIR:-$HOME@}/.chpwd-recent-dirs}, i.e. this is in your home "
"directory unless you have set the variable @t{ZDOTDIR} to point somewhere "
"else.  Directory names are saved in @t{$'}@var{...}@t{'} quoted form, so "
"each line in the file can be supplied directly to the shell as an argument."
msgstr ""

#. type: table
#: zsh.texi:36122
msgid ""
"The value of this style may be an array.  In this case, the first file in "
"the list will always be used for saving directories while any other files "
"are left untouched.  When reading the recent directory list, if there are "
"fewer than the maximum number of entries in the first file, the contents of "
"later files in the array will be appended with duplicates removed from the "
"list shown.  The contents of the two files are not sorted together, i.e. all "
"the entries in the first file are shown first.  The special value @t{+} can "
"appear in the list to indicate the default file should be read at that "
"point.  This allows effects like the following:"
msgstr ""

#. type: example
#: zsh.texi:36127
#, no-wrap
msgid ""
"zstyle ':chpwd:*' recent-dirs-file \\ \n"
"~/.chpwd-recent-dirs-$@{TTY##*/@} +\n"
msgstr ""

#. type: table
#: zsh.texi:36133
msgid ""
"Recent directories are read from a file numbered according to the terminal.  "
"If there are insufficient entries the list is supplemented from the default "
"file."
msgstr ""

#. type: table
#: zsh.texi:36137
msgid ""
"It is possible to use @t{zstyle -e} to make the directory configurable at "
"run time:"
msgstr ""

#. type: example
#: zsh.texi:36148
#, no-wrap
msgid ""
"zstyle -e ':chpwd:*' recent-dirs-file pick-recent-dirs-file\n"
"pick-recent-dirs-file() @{\n"
"  if [[ $PWD = ~/text/writing(|/*) ]]; then\n"
"    reply=(~/.chpwd-recent-dirs-writing)\n"
"  else\n"
"    reply=(+)\n"
"  fi\n"
"@}\n"
msgstr ""

#. type: table
#: zsh.texi:36154
msgid ""
"In this example, if the current directory is @t{~/text/writing} or a "
"directory under it, then use a special file for saving recent directories, "
"else use the default."
msgstr ""

#. type: t{#1}
#: zsh.texi:36155
#, no-wrap
msgid "recent-dirs-insert"
msgstr ""

#. type: table
#: zsh.texi:36165
msgid ""
"Used by completion.  If @t{recent-dirs-default} is true, then setting this "
"to @t{true} causes the actual directory, rather than its index, to be "
"inserted on the command line; this has the same effect as using the "
"corresponding index, but makes the history clearer and the line easier to "
"edit.  With this setting, if part of an argument was already typed, normal "
"directory completion rather than recent directory completion is done; this "
"is because recent directory completion is expected to be done by cycling "
"through entries menu fashion."
msgstr ""

#. type: table
#: zsh.texi:36170
msgid ""
"If the value of the style is @t{always}, then only recent directories will "
"be completed; in that case, use the @t{cd} command when you want to complete "
"other directories."
msgstr ""

#. type: table
#: zsh.texi:36175
msgid ""
"If the value is @t{fallback}, recent directories will be tried first, then "
"normal directory completion is performed if recent directory completion "
"failed to find a match."
msgstr ""

#. type: table
#: zsh.texi:36181
msgid ""
"Finally, if the value is @t{both} then both sets of completions are "
"presented; the usual tag mechanism can be used to distinguish results, with "
"recent directories tagged as @t{recent-dirs}.  Note that the recent "
"directories inserted are abbreviated with directory names where appropriate."
msgstr ""

#. type: t{#1}
#: zsh.texi:36182
#, no-wrap
msgid "recent-dirs-max"
msgstr ""

#. type: table
#: zsh.texi:36188
msgid ""
"The maximum number of directories to save to the file.  If this is zero or "
"negative there is no maximum.  The default is 20.  Note this includes the "
"current directory, which isn't offered, so the highest number of directories "
"you will be offered is one less than the maximum."
msgstr ""

#. type: t{#1}
#: zsh.texi:36189
#, no-wrap
msgid "recent-dirs-prune"
msgstr ""

#. type: table
#: zsh.texi:36192
msgid ""
"This style is an array determining what directories should (or should not) "
"be added to the recent list.  Elements of the array can include:"
msgstr ""

#. type: table
#: zsh.texi:36204
msgid ""
"Prune parents (more accurately, ancestors) from the recent list.  If "
"present, changing directly down by any number of directories causes the "
"current directory to be overwritten.  For example, changing from ~pws to "
"~pws/some/other/dir causes ~pws not to be left on the recent directory "
"stack.  This only applies to direct changes to descendant directories; "
"earlier directories on the list are not pruned.  For example, changing from "
"~pws/yet/another to ~pws/some/other/dir does not cause ~pws to be pruned."
msgstr ""

#. type: item
#: zsh.texi:36205
#, no-wrap
msgid "@t{pattern:}@var{pattern}"
msgstr ""

#. type: table
#: zsh.texi:36212
msgid ""
"Gives a zsh pattern for directories that should not be added to the recent "
"list (if not already there).  This element can be repeated to add different "
"patterns.  For example, @t{'pattern:/tmp(|/*)'} stops @t{/tmp} or its "
"descendants from being added.  The @t{EXTENDED_GLOB} option is always turned "
"on for these patterns."
msgstr ""

#. type: t{#1}
#: zsh.texi:36215
#, no-wrap
msgid "recent-dirs-pushd"
msgstr ""

#. type: table
#: zsh.texi:36221
msgid ""
"If set to true, @t{cdr} will use @t{pushd} instead of @t{cd} to change the "
"directory, so the directory is saved on the directory stack.  As the "
"directory stack is completely separate from the list of files saved by the "
"mechanism used in this file there is no obvious reason to do this."
msgstr ""

#. type: subsection
#: zsh.texi:36226
#, no-wrap
msgid "Use with dynamic directory naming"
msgstr ""

#. type: Plain text
#: zsh.texi:36233
msgid ""
"It is possible to refer to recent directories using the dynamic directory "
"name syntax by using the supplied function @t{zsh_directory_name_cdr} a "
"hook:"
msgstr ""

#. type: example
#: zsh.texi:36238
#, no-wrap
msgid ""
"autoload -Uz add-zsh-hook\n"
"add-zsh-hook -Uz zsh_directory_name zsh_directory_name_cdr\n"
msgstr ""

#. type: Plain text
#: zsh.texi:36244
msgid ""
"When this is done, @t{~[1]} will refer to the most recent directory other "
"than $PWD, and so on.  Completion after @t{~[}@var{...} also works."
msgstr ""

#. type: subsection
#: zsh.texi:36247
#, no-wrap
msgid "Details of directory handling"
msgstr ""

#. type: Plain text
#: zsh.texi:36253
msgid ""
"This section is for the curious or confused; most users will not need to "
"know this information."
msgstr ""

#. type: Plain text
#: zsh.texi:36262
msgid ""
"Recent directories are saved to a file immediately and hence are preserved "
"across sessions.  Note currently no file locking is applied: the list is "
"updated immediately on interactive commands and nowhere else (unlike "
"history), and it is assumed you are only going to change directory in one "
"window at once.  This is not safe on shared accounts, but in any case the "
"system has limited utility when someone else is changing to a different set "
"of directories behind your back."
msgstr ""

#. type: Plain text
#: zsh.texi:36271
msgid ""
"To make this a little safer, only directory changes instituted from the "
"command line, either directly or indirectly through shell function calls "
"(but not through subshells, evals, traps, completion functions and the like) "
"are saved.  Shell functions should use @t{cd -q} or @t{pushd -q} to avoid "
"side effects if the change to the directory is to be invisible at the "
"command line.  See the contents of the function @t{chpwd_recent_dirs} for "
"more details."
msgstr ""

#. type: node
#: zsh.texi:36273 zsh.texi:36505 zsh.texi:36581 zsh.texi:36666 zsh.texi:37170
#: zsh.texi:37193 zsh.texi:37314 zsh.texi:37375 zsh.texi:37398 zsh.texi:37715
#: zsh.texi:37906
#, no-wrap
msgid "Version Control Information"
msgstr ""

#. type: cindex
#: zsh.texi:36274
#, no-wrap
msgid "directories, named, dynamic, helper function"
msgstr ""

#. type: cindex
#: zsh.texi:36275
#, no-wrap
msgid "dynamic directory naming, helper function"
msgstr ""

#. type: cindex
#: zsh.texi:36276
#, no-wrap
msgid "named directories, dynamic, helper function"
msgstr ""

#. type: findex
#: zsh.texi:36277
#, no-wrap
msgid "zsh_directory_name_generic"
msgstr ""

#. type: section
#: zsh.texi:36279
#, no-wrap
msgid "Abbreviated dynamic references to directories"
msgstr ""

#. type: Plain text
#: zsh.texi:36288
msgid ""
"The dynamic directory naming system is described in the subsection "
"@emph{Dynamic named directories} of @ref{Filename Expansion}.  In this, a "
"reference to @t{~[}@var{...}@t{]} is expanded by a function found by the "
"hooks mechanism."
msgstr ""

#. type: Plain text
#: zsh.texi:36295
msgid ""
"The contributed function @t{zsh_directory_name_generic} provides a system "
"allowing the user to refer to directories with only a limited amount of new "
"code.  It supports all three of the standard interfaces for directory "
"naming: converting from a name to a directory, converting in the reverse "
"direction to find a short name, and completion of names."
msgstr ""

#. type: Plain text
#: zsh.texi:36300
msgid ""
"The main feature of this function is a path-like syntax, combining "
"abbreviations at multiple levels separated by \":\".  As an example, "
"~[g:p:s] might specify:"
msgstr ""

#. type: table
#: zsh.texi:36305
msgid ""
"The top level directory for your git area.  This first component has to "
"match, or the function will return indicating another directory name hook "
"function should be tried."
msgstr ""

#. type: table
#: zsh.texi:36308
msgid "The name of a project within your git area."
msgstr ""

#. type: table
#: zsh.texi:36311
msgid "The source area within that project."
msgstr ""

#. type: Plain text
#: zsh.texi:36316
msgid ""
"This allows you to collapse references to long hierarchies to a very compact "
"form, particularly if the hierarchies are similar across different areas of "
"the disk."
msgstr ""

#. type: Plain text
#: zsh.texi:36324
msgid ""
"Name components may be completed: if a description is shown at the top of "
"the list of completions, it includes the path to which previous components "
"expand, while the description for an individual completion shows the path "
"segment it would add.  No additional configuration is needed for this as the "
"completion system is aware of the dynamic directory name mechanism."
msgstr ""

#. type: Plain text
#: zsh.texi:36336
msgid ""
"To use the function, first define a wrapper function for your specific "
"case.  We'll assume it's to be autoloaded.  This can have any name but we'll "
"refer to it as zdn_mywrapper.  This wrapper function will define various "
"variables and then call this function with the same arguments that the "
"wrapper function gets.  This configuration is described below."
msgstr ""

#. type: Plain text
#: zsh.texi:36339
msgid "Then arrange for the wrapper to be run as a zsh_directory_name hook:"
msgstr ""

#. type: example
#: zsh.texi:36344
#, no-wrap
msgid ""
"autoload -Uz add-zsh-hook zsh_directory_name_generic zdn_mywrapper\n"
"add-zsh-hook -U zsh_directory_name zdn_mywrapper\n"
msgstr ""

#. type: Plain text
#: zsh.texi:36357
msgid ""
"The wrapper function should define a local associative array zdn_top.  "
"Alternatively, this can be set with a style called @t{mapping}.  The context "
"for the style is @t{:zdn:}@var{wrapper-name} where @var{wrapper-name} is the "
"function calling zsh_directory_name_generic; for example:"
msgstr ""

#. type: example
#: zsh.texi:36361
#, no-wrap
msgid "zstyle :zdn:zdn_mywrapper: mapping zdn_mywrapper_top\n"
msgstr ""

#. type: Plain text
#: zsh.texi:36376
msgid ""
"The keys in this associative array correspond to the first component of the "
"name.  The values are matching directories.  They may have an optional "
"suffix with a slash followed by a colon and the name of a variable in the "
"same format to give the next component.  (The slash before the colon is to "
"disambiguate the case where a colon is needed in the path for a drive.  "
"There is otherwise no syntax for escaping this, so path components whose "
"names start with a colon are not supported.)  A special component "
"@t{:default:} specifies a variable in the form @t{/:}@var{var} (the path "
"section is ignored and so is usually empty)  that will be used for the next "
"component if no variable is given for the path.  Variables referred to "
"within @t{zdn_top} have the same format as @t{zdn_top} itself, but contain "
"relative paths."
msgstr ""

#. type: example
#: zsh.texi:36388
#, no-wrap
msgid ""
"local -A zdn_top=(\n"
"  g   ~/git\n"
"  ga  ~/alternate/git\n"
"  gs  /scratch/$USER/git/:second2\n"
"  :default: /:second1\n"
")\n"
msgstr ""

#. type: Plain text
#: zsh.texi:36397
msgid ""
"This specifies the behaviour of a directory referred to as @t{~[g:...]} or "
"@t{~[ga:...]} or @t{~[gs:...]}.  Later path components are optional; in that "
"case @t{~[g]} expands to @t{~/git}, and so on.  @t{gs} expands to "
"@t{/scratch/$USER/git} and uses the associative array @t{second2} to match "
"the second component; @t{g} and @t{ga} use the associative array @t{second1} "
"to match the second component."
msgstr ""

#. type: Plain text
#: zsh.texi:36405
msgid ""
"When expanding a name to a directory, if the first component is not @t{g} or "
"@t{ga} or @t{gs}, it is not an error; the function simply returns 1 so that "
"a later hook function can be tried.  However, matching the first component "
"commits the function, so if a later component does not match, an error is "
"printed (though this still does not stop later hooks from being executed)."
msgstr ""

#. type: Plain text
#: zsh.texi:36409
msgid ""
"For components after the first, a relative path is expected, but note that "
"multiple levels may still appear.  Here is an example of @t{second1}:"
msgstr ""

#. type: example
#: zsh.texi:36417
#, no-wrap
msgid ""
"local -A second1=(\n"
"  p   myproject\n"
"  s   somproject\n"
"  os  otherproject/subproject/:third\n"
")\n"
msgstr ""

#. type: Plain text
#: zsh.texi:36427
msgid ""
"The path as found from @t{zdn_top} is extended with the matching directory, "
"so @t{~[g:p]} becomes @t{~/git/myproject}.  The slash between is added "
"automatically (it's not possible to have a later component modify the name "
"of a directory already matched).  Only @t{os} specifies a variable for a "
"third component, and there's no @t{:default:}, so it's an error to use a "
"name like @t{~[g:p:x]} or @t{~[ga:s:y]} because there's nowhere to look up "
"the @t{x} or @t{y}."
msgstr ""

#. type: Plain text
#: zsh.texi:36434
msgid ""
"The associative arrays need to be visible within this function; the generic "
"function therefore uses internal variable names beginning @t{_zdn_} in order "
"to avoid clashes.  Note that the variable @t{reply} needs to be passed back "
"to the shell, so should not be local in the calling function."
msgstr ""

#. type: Plain text
#: zsh.texi:36440
msgid ""
"The function does not test whether directories assembled by component "
"actually exist; this allows the system to work across automounted file "
"systems.  The error from the command trying to use a non-existent directory "
"should be sufficient to indicate the problem."
msgstr ""

#. type: subsection
#: zsh.texi:36443
#, no-wrap
msgid "Complete example"
msgstr ""

#. type: Plain text
#: zsh.texi:36451
msgid ""
"Here is a full fictitious but usable autoloadable definition of the example "
"function defined by the code above.  So @t{~[gs:p:s]} expands to "
"@t{/scratch/$USER/git/myscratchproject/top/srcdir} (with @t{$USER} also "
"expanded)."
msgstr ""

#. type: example
#: zsh.texi:36460
#, no-wrap
msgid ""
"local -A zdn_top=(\n"
"  g   ~/git\n"
"  ga  ~/alternate/git\n"
"  gs  /scratch/$USER/git/:second2\n"
"  :default: /:second1\n"
")\n"
"\n"
msgstr ""

#. type: example
#: zsh.texi:36466
#, no-wrap
msgid ""
"local -A second1=(\n"
"  p   myproject\n"
"  s   somproject\n"
"  os  otherproject/subproject/:third\n"
")\n"
"\n"
msgstr ""

#. type: example
#: zsh.texi:36471
#, no-wrap
msgid ""
"local -A second2=(\n"
"  p   myscratchproject\n"
"  s   somescratchproject\n"
")\n"
"\n"
msgstr ""

#. type: example
#: zsh.texi:36476
#, no-wrap
msgid ""
"local -A third=(\n"
"  s   top/srcdir\n"
"  d   top/documentation\n"
")\n"
"\n"
msgstr ""

#. type: example
#: zsh.texi:36480
#, no-wrap
msgid ""
"# autoload not needed if you did this at initialisation...\n"
"autoload -Uz zsh_directory_name_generic\n"
"zsh_directory_name_generic \"$@@\n"
msgstr ""

#. type: Plain text
#: zsh.texi:36486
msgid ""
"It is also possible to use global associative arrays, suitably named, and "
"set the style for the context of your wrapper function to refer to this.  "
"Then your set up code would contain the following:"
msgstr ""

#. type: example
#: zsh.texi:36494
#, no-wrap
msgid ""
"typeset -A zdn_mywrapper_top=(...)\n"
"# ... and so on for other associative arrays ...\n"
"zstyle ':zdn:zdn_mywrapper:' mapping zdn_mywrapper_top\n"
"autoload -Uz add-zsh-hook zsh_directory_name_generic zdn_mywrapper\n"
"add-zsh-hook -U zsh_directory_name zdn_mywrapper\n"
msgstr ""

#. type: Plain text
#: zsh.texi:36498
msgid "and the function @t{zdn_mywrapper} would contain only the following:"
msgstr ""

#. type: example
#: zsh.texi:36502
#, no-wrap
msgid "zsh_directory_name_generic \"$@@\"\n"
msgstr ""

#. type: node
#: zsh.texi:36505 zsh.texi:37906 zsh.texi:37908 zsh.texi:38080
#, no-wrap
msgid "Prompt Themes"
msgstr ""

#. type: section
#: zsh.texi:36507
#, no-wrap
msgid "Gathering information from version control systems"
msgstr ""

#. type: cindex
#: zsh.texi:36509
#, no-wrap
msgid "version control utility"
msgstr ""

#. type: Plain text
#: zsh.texi:36516
msgid ""
"In a lot of cases, it is nice to automatically retrieve information from "
"version control systems (VCSs), such as subversion, CVS or git, to be able "
"to provide it to the user; possibly in the user's prompt. So that you can "
"instantly tell which branch you are currently on, for example."
msgstr ""

#. type: Plain text
#: zsh.texi:36519
msgid "In order to do that, you may use the @t{vcs_info} function."
msgstr ""

#. type: Plain text
#: zsh.texi:36523
msgid ""
"The following VCSs are supported, showing the abbreviated name by which they "
"are referred to within the system:"
msgstr ""

#. type: item
#: zsh.texi:36524
#, no-wrap
msgid "Bazaar (@t{bzr})"
msgstr ""

#. type: t{#1}
#: zsh.texi:36526
msgid "@uref{https://bazaar.canonical.com/}"
msgstr ""

#. type: item
#: zsh.texi:36526
#, no-wrap
msgid "Codeville (@t{cdv})"
msgstr ""

#. type: t{#1}
#: zsh.texi:36528
msgid "@uref{http://freecode.com/projects/codeville/}"
msgstr ""

#. type: item
#: zsh.texi:36528
#, no-wrap
msgid "Concurrent Versioning System (@t{cvs})"
msgstr ""

#. type: t{#1}
#: zsh.texi:36530
msgid "@uref{https://www.nongnu.org/cvs/}"
msgstr ""

#. type: item
#: zsh.texi:36530
#, no-wrap
msgid "Darcs (@t{darcs})"
msgstr ""

#. type: t{#1}
#: zsh.texi:36532
msgid "@uref{http://darcs.net/}"
msgstr ""

#. type: item
#: zsh.texi:36532
#, no-wrap
msgid "Fossil (@t{fossil})"
msgstr ""

#. type: t{#1}
#: zsh.texi:36534
msgid "@uref{https://fossil-scm.org/}"
msgstr ""

#. type: item
#: zsh.texi:36534
#, no-wrap
msgid "Git (@t{git})"
msgstr ""

#. type: t{#1}
#: zsh.texi:36536
msgid "@uref{https://git-scm.com/}"
msgstr ""

#. type: item
#: zsh.texi:36536
#, no-wrap
msgid "GNU arch (@t{tla})"
msgstr ""

#. type: t{#1}
#: zsh.texi:36538
msgid "@uref{https://www.gnu.org/software/gnu-arch/}"
msgstr ""

#. type: item
#: zsh.texi:36538
#, no-wrap
msgid "Mercurial (@t{hg})"
msgstr ""

#. type: t{#1}
#: zsh.texi:36540
msgid "@uref{https://www.mercurial-scm.org/}"
msgstr ""

#. type: item
#: zsh.texi:36540
#, no-wrap
msgid "Monotone (@t{mtn})"
msgstr ""

#. type: t{#1}
#: zsh.texi:36542
msgid "@uref{https://monotone.ca/}"
msgstr ""

#. type: item
#: zsh.texi:36542
#, no-wrap
msgid "Perforce (@t{p4})"
msgstr ""

#. type: t{#1}
#: zsh.texi:36544
msgid "@uref{https://www.perforce.com/}"
msgstr ""

#. type: item
#: zsh.texi:36544
#, no-wrap
msgid "Subversion (@t{svn})"
msgstr ""

#. type: t{#1}
#: zsh.texi:36546
msgid "@uref{https://subversion.apache.org/}"
msgstr ""

#. type: item
#: zsh.texi:36546
#, no-wrap
msgid "SVK (@t{svk})"
msgstr ""

#. type: t{#1}
#: zsh.texi:36548
msgid "@uref{https://svk.bestpractical.com/}"
msgstr ""

#. type: Plain text
#: zsh.texi:36555
msgid ""
"There is also support for the patch management system @t{quilt} "
"(@t{@uref{https://savannah.nongnu.org/projects/quilt}}). See @ref{vcs_info "
"Quilt Support} below for details."
msgstr ""

#. type: Plain text
#: zsh.texi:36558
msgid "To load @t{vcs_info}:"
msgstr ""

#. type: example
#: zsh.texi:36562
#, no-wrap
msgid "autoload -Uz vcs_info\n"
msgstr ""

#. type: Plain text
#: zsh.texi:36567
msgid ""
"It can be used in any existing prompt, because it does not require any "
"specific @t{$psvar} entries to be available."
msgstr ""

#. type: menuentry
#: zsh.texi:36578
msgid "vcs_info Quickstart::"
msgstr ""

#. type: menuentry
#: zsh.texi:36578
msgid "vcs_info Configuration::"
msgstr ""

#. type: menuentry
#: zsh.texi:36578
msgid "vcs_info Oddities::"
msgstr ""

#. type: menuentry
#: zsh.texi:36578
msgid "vcs_info Quilt Support::"
msgstr ""

#. type: menuentry
#: zsh.texi:36578
msgid "vcs_info API::"
msgstr ""

#. type: menuentry
#: zsh.texi:36578
msgid "vcs_info Variables::"
msgstr ""

#. type: menuentry
#: zsh.texi:36578
msgid "vcs_info Hooks::"
msgstr ""

#. type: node
#: zsh.texi:36578 zsh.texi:37398 zsh.texi:37715
#, no-wrap
msgid "vcs_info Examples"
msgstr ""

#. type: node
#: zsh.texi:36581 zsh.texi:36666
#, no-wrap
msgid "vcs_info Quickstart"
msgstr ""

#. type: node
#: zsh.texi:36581 zsh.texi:36666 zsh.texi:37170
#, no-wrap
msgid "vcs_info Configuration"
msgstr ""

#. type: subsection
#: zsh.texi:36583
#, no-wrap
msgid "Quickstart"
msgstr ""

#. type: Plain text
#: zsh.texi:36589
msgid ""
"To get this feature working quickly (including colors), you can do the "
"following (assuming, you loaded @t{vcs_info} properly - see above):"
msgstr ""

#. type: example
#: zsh.texi:36599
#, no-wrap
msgid ""
"zstyle ':vcs_info:*' actionformats \\ \n"
"    "
"'%F@{5@}(%f%s%F@{5@})%F@{3@}-%F@{5@}[%F@{2@}%b%F@{3@}|%F@{1@}%a%F@{5@}]%f "
"'\n"
"zstyle ':vcs_info:*' formats       \\ \n"
"    '%F@{5@}(%f%s%F@{5@})%F@{3@}-%F@{5@}[%F@{2@}%b%F@{5@}]%f '\n"
"zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F@{1@}:%F@{3@}%r'\n"
"precmd () @{ vcs_info @}\n"
"PS1='%F@{5@}[%F@{2@}%n%F@{5@}] %F@{3@}%3~ $@{vcs_info_msg_0_@}%f%# '\n"
msgstr ""

#. type: Plain text
#: zsh.texi:36605
msgid ""
"Obviously, the last two lines are there for demonstration. You need to call "
"@t{vcs_info} from your @t{precmd} function. Once that is done you need a "
"@emph{single quoted} @t{'$@{vcs_info_msg_0_@}'} in your prompt."
msgstr ""

#. type: Plain text
#: zsh.texi:36609
msgid ""
"To be able to use @t{'$@{vcs_info_msg_0_@}'} directly in your prompt like "
"this, you will need to have the @t{PROMPT_SUBST} option enabled."
msgstr ""

#. type: Plain text
#: zsh.texi:36612
msgid "Now call the @t{vcs_info_printsys} utility from the command line:"
msgstr ""

#. type: example
#: zsh.texi:36638
#, no-wrap
msgid ""
"% vcs_info_printsys\n"
"## list of supported version control backends:\n"
"## disabled systems are prefixed by a hash sign (#)\n"
"bzr\n"
"cdv\n"
"cvs\n"
"darcs\n"
"fossil\n"
"git\n"
"hg\n"
"mtn\n"
"p4\n"
"svk\n"
"svn\n"
"tla\n"
"## flavours (cannot be used in the enable or disable styles; they\n"
"## are enabled and disabled with their master [git-svn -> git])\n"
"## they *can* be used in contexts: ':vcs_info:git-svn:*'.\n"
"git-p4\n"
"git-svn\n"
"hg-git\n"
"hg-hgsubversion\n"
"hg-hgsvn\n"
msgstr ""

#. type: Plain text
#: zsh.texi:36644
msgid ""
"You may not want all of these because there is no point in running the code "
"to detect systems you do not use.  So there is a way to disable some "
"backends altogether:"
msgstr ""

#. type: example
#: zsh.texi:36648
#, no-wrap
msgid "zstyle ':vcs_info:*' disable bzr cdv darcs mtn svk tla\n"
msgstr ""

#. type: Plain text
#: zsh.texi:36652
msgid "You may also pick a few from that list and enable only those:"
msgstr ""

#. type: example
#: zsh.texi:36656
#, no-wrap
msgid "zstyle ':vcs_info:*' enable git cvs svn\n"
msgstr ""

#. type: Plain text
#: zsh.texi:36664
msgid ""
"If you rerun @t{vcs_info_printsys} after one of these commands, you will see "
"the backends listed in the @t{disable} style (or backends not in the "
"@t{enable} style - if you used that) marked as disabled by a hash sign.  "
"That means the detection of these systems is skipped @emph{completely}. No "
"wasted time there."
msgstr ""

#. type: node
#: zsh.texi:36666 zsh.texi:37170 zsh.texi:37193
#, no-wrap
msgid "vcs_info Oddities"
msgstr ""

#. type: Plain text
#: zsh.texi:36673
msgid "The @t{vcs_info} feature can be configured via @t{zstyle}."
msgstr ""

#. type: Plain text
#: zsh.texi:36676
msgid "First, the context in which we are working:"
msgstr ""

#. type: example
#: zsh.texi:36678
#, no-wrap
msgid ":vcs_info:@var{vcs-string}:@var{user-context}:@var{repo-root-name}\n"
msgstr ""

#. type: var{#1}
#: zsh.texi:36682
#, no-wrap
msgid "vcs-string"
msgstr ""

#. type: table
#: zsh.texi:36690
msgid ""
"is one of: @t{git}, @t{git-svn}, @t{git-p4}, @t{hg}, @t{hg-git}, "
"@t{hg-hgsubversion}, @t{hg-hgsvn}, @t{darcs}, @t{bzr}, @t{cdv}, @t{mtn}, "
"@t{svn}, @t{cvs}, @t{svk}, @t{tla}, @t{p4} or @t{fossil}.  This is followed "
"by `@t{.quilt-}@var{quilt-mode}' in Quilt mode (see @ref{vcs_info Quilt "
"Support} for details)  and by `@t{+}@var{hook-name}' while hooks are active "
"(see @ref{vcs_info Hooks} for details)."
msgstr ""

#. type: table
#: zsh.texi:36695
msgid ""
"Currently, hooks in quilt mode don't add the `@t{.quilt-}@var{quilt-mode}' "
"information.  This may change in the future."
msgstr ""

#. type: var{#1}
#: zsh.texi:36696
#, no-wrap
msgid "user-context"
msgstr ""

#. type: table
#: zsh.texi:36700
msgid ""
"is a freely configurable string, assignable by the user as the first "
"argument to @t{vcs_info} (see its description below)."
msgstr ""

#. type: var{#1}
#: zsh.texi:36701
#, no-wrap
msgid "repo-root-name"
msgstr ""

#. type: table
#: zsh.texi:36706
msgid ""
"is the name of a repository in which you want a style to match. So, if you "
"want a setting specific to @t{/usr/src/zsh}, with that being a CVS checkout, "
"you can set @var{repo-root-name} to @t{zsh} to make it so."
msgstr ""

#. type: Plain text
#: zsh.texi:36716
msgid ""
"There are three special values for @var{vcs-string}: The first is named "
"@t{-init-}, that is in effect as long as there was no decision what VCS "
"backend to use. The second is @t{-preinit-}; it is used @emph{before} "
"@t{vcs_info} is run, when initializing the data exporting variables. The "
"third special value is @t{formats} and is used by the @t{vcs_info_lastmsg} "
"for looking up its styles."
msgstr ""

#. type: Plain text
#: zsh.texi:36724
msgid ""
"The initial value of @var{repo-root-name} is @t{-all-} and it is replaced "
"with the actual name, as soon as it is known. Only use this part of the "
"context for defining the @t{formats}, @t{actionformats} or @t{branchformat} "
"styles, as it is guaranteed that @var{repo-root-name} is set up correctly "
"for these only. For all other styles, just use @t{'*'} instead."
msgstr ""

#. type: Plain text
#: zsh.texi:36727
msgid "There are two pre-defined values for @var{user-context}:"
msgstr ""

#. type: table
#: zsh.texi:36730
msgid "the one used if none is specified"
msgstr ""

#. type: table
#: zsh.texi:36732
msgid "used by vcs_info_lastmsg to lookup its styles"
msgstr ""

#. type: Plain text
#: zsh.texi:36737
msgid ""
"You can of course use @t{':vcs_info:*'} to match all VCSs in all "
"user-contexts at once."
msgstr ""

#. type: Plain text
#: zsh.texi:36740
msgid "This is a description of all styles that are looked up."
msgstr ""

#. type: t{#1}
#: zsh.texi:36743 zsh.texi:36744 zsh.texi:36994
#, no-wrap
msgid "formats"
msgstr ""

#. type: table
#: zsh.texi:36747
msgid ""
"A list of formats, used when actionformats is not used (which is most of the "
"time)."
msgstr ""

#. type: t{#1}
#: zsh.texi:36748 zsh.texi:36749 zsh.texi:36996
#, no-wrap
msgid "actionformats"
msgstr ""

#. type: table
#: zsh.texi:36753
msgid ""
"A list of formats, used if there is a special action going on in your "
"current repository; like an interactive rebase or a merge conflict."
msgstr ""

#. type: t{#1}
#: zsh.texi:36754 zsh.texi:36755 zsh.texi:36998
#, no-wrap
msgid "branchformat"
msgstr ""

#. type: table
#: zsh.texi:36759
msgid ""
"Some backends replace @t{%b} in the formats and actionformats styles above, "
"not only by a branch name but also by a revision number. This style lets you "
"modify how that string should look."
msgstr ""

#. type: t{#1}
#: zsh.texi:36760 zsh.texi:36761 zsh.texi:37000
#, no-wrap
msgid "nvcsformats"
msgstr ""

#. type: table
#: zsh.texi:36767
msgid ""
"These \"formats\" are set when we didn't detect a version control system for "
"the current directory or @t{vcs_info} was disabled. This is useful if you "
"want @t{vcs_info} to completely take over the generation of your prompt. You "
"would do something like @t{PS1='$@{vcs_info_msg_0_@}'} to accomplish that."
msgstr ""

#. type: t{#1}
#: zsh.texi:36768 zsh.texi:36769 zsh.texi:37002
#, no-wrap
msgid "hgrevformat"
msgstr ""

#. type: table
#: zsh.texi:36777
msgid ""
"@t{hg} uses both a hash and a revision number to reference a specific "
"changeset in a repository. With this style you can format the revision "
"string (see @t{branchformat}) to include either or both. It's only useful "
"when @t{get-revision} is true. Note, the full 40-character revision id is "
"not available (except when using the @t{use-simple} option) because "
"executing hg more than once per prompt is too slow; you may customize this "
"behavior using hooks."
msgstr ""

#. type: t{#1}
#: zsh.texi:36778 zsh.texi:36779 zsh.texi:37004
#, no-wrap
msgid "max-exports"
msgstr ""

#. type: table
#: zsh.texi:36782
msgid ""
"Defines the maximum number of @t{vcs_info_msg_*_} variables @t{vcs_info} "
"will set."
msgstr ""

#. type: table
#: zsh.texi:36790
msgid ""
"A list of backends you want to use. Checked in the @t{-init-} context. If "
"this list contains an item called @t{NONE} no backend is used at all and "
"@t{vcs_info} will do nothing. If this list contains @t{ALL}, @t{vcs_info} "
"will use all known backends. Only with @t{ALL} in @t{enable} will the "
"@t{disable} style have any effect. @t{ALL} and @t{NONE} are case "
"insensitive."
msgstr ""

#. type: table
#: zsh.texi:36796
msgid ""
"A list of VCSs you don't want @t{vcs_info} to test for repositories (checked "
"in the @t{-init-} context, too). Only used if @t{enable} contains @t{ALL}."
msgstr ""

#. type: t{#1}
#: zsh.texi:36797 zsh.texi:36798 zsh.texi:37010
#, no-wrap
msgid "disable-patterns"
msgstr ""

#. type: table
#: zsh.texi:36802
msgid ""
"A list of patterns that are checked against @t{$PWD}. If a pattern matches, "
"@t{vcs_info} will be disabled. This style is checked in the "
"@t{:vcs_info:-init-:*:-all-} context."
msgstr ""

#. type: table
#: zsh.texi:36806
msgid ""
"Say, @t{~/.zsh} is a directory under version control, in which you do not "
"want @t{vcs_info} to be active, do:"
msgstr ""

#. type: example
#: zsh.texi:36808
#, no-wrap
msgid "zstyle ':vcs_info:*' disable-patterns \"$@{(b)HOME@}/.zsh(|/*)\"\n"
msgstr ""

#. type: t{#1}
#: zsh.texi:36810 zsh.texi:36811 zsh.texi:37038
#, no-wrap
msgid "use-quilt"
msgstr ""

#. type: table
#: zsh.texi:36814
msgid ""
"If enabled, the @t{quilt} support code is active in `addon' mode.  See "
"@ref{vcs_info Quilt Support} for details."
msgstr ""

#. type: t{#1}
#: zsh.texi:36815 zsh.texi:36816 zsh.texi:37040
#, no-wrap
msgid "quilt-standalone"
msgstr ""

#. type: table
#: zsh.texi:36819
msgid ""
"If enabled, `standalone' mode detection is attempted if no VCS is active in "
"a given directory. See @ref{vcs_info Quilt Support} for details."
msgstr ""

#. type: t{#1}
#: zsh.texi:36820 zsh.texi:36821 zsh.texi:37042
#, no-wrap
msgid "quilt-patch-dir"
msgstr ""

#. type: table
#: zsh.texi:36824
msgid ""
"Overwrite the value of the @t{$QUILT_PATCHES} environment variable. See "
"@ref{vcs_info Quilt Support} for details."
msgstr ""

#. type: t{#1}
#: zsh.texi:36825 zsh.texi:36826 zsh.texi:37044
#, no-wrap
msgid "quiltcommand"
msgstr ""

#. type: table
#: zsh.texi:36829
msgid ""
"When @t{quilt} itself is called in quilt support, the value of this style is "
"used as the command name."
msgstr ""

#. type: t{#1}
#: zsh.texi:36830 zsh.texi:36831 zsh.texi:37012
#, no-wrap
msgid "check-for-changes"
msgstr ""

#. type: table
#: zsh.texi:36837
msgid ""
"If enabled, this style causes the @t{%c} and @t{%u} format escapes to show "
"when the working directory has uncommitted changes. The strings displayed by "
"these escapes can be controlled via the @t{stagedstr} and @t{unstagedstr} "
"styles. The only backends that currently support this option are @t{git}, "
"@t{hg}, and @t{bzr} (the latter two only support unstaged)."
msgstr ""

#. type: table
#: zsh.texi:36842
msgid ""
"For this style to be evaluated with the @t{hg} backend, the @t{get-revision} "
"style needs to be set and the @t{use-simple} style needs to be unset. The "
"latter is the default; the former is not."
msgstr ""

#. type: table
#: zsh.texi:36846
msgid ""
"With the @t{bzr} backend, @emph{lightweight checkouts} only honor this style "
"if the @t{use-server} style is set."
msgstr ""

#. type: table
#: zsh.texi:36851
msgid ""
"Note, the actions taken if this style is enabled are potentially expensive "
"(read: they may be slow, depending on how big the current repository is).  "
"Therefore, it is disabled by default."
msgstr ""

#. type: t{#1}
#: zsh.texi:36852 zsh.texi:36853 zsh.texi:37014
#, no-wrap
msgid "check-for-staged-changes"
msgstr ""

#. type: table
#: zsh.texi:36858
msgid ""
"This style is like @t{check-for-changes}, but it never checks the worktree "
"files, only the metadata in the @t{.$@{vcs@}} dir.  Therefore, this style "
"initializes only the @t{%c} escape (with @t{stagedstr}) but not the @t{%u} "
"escape.  This style is faster than @t{check-for-changes}."
msgstr ""

#. type: table
#: zsh.texi:36862
msgid ""
"In the @t{git} backend, this style checks for changes in the index.  Other "
"backends do not currently implement this style."
msgstr ""

#. type: table
#: zsh.texi:36865
msgid "This style is disabled by default."
msgstr ""

#. type: t{#1}
#: zsh.texi:36866 zsh.texi:36867 zsh.texi:37016
#, no-wrap
msgid "stagedstr"
msgstr ""

#. type: table
#: zsh.texi:36870
msgid ""
"This string will be used in the @t{%c} escape if there are staged changes in "
"the repository."
msgstr ""

#. type: t{#1}
#: zsh.texi:36871 zsh.texi:36872 zsh.texi:37018
#, no-wrap
msgid "unstagedstr"
msgstr ""

#. type: table
#: zsh.texi:36875
msgid ""
"This string will be used in the @t{%u} escape if there are unstaged changes "
"in the repository."
msgstr ""

#. type: table
#: zsh.texi:36881
msgid ""
"This style causes @t{vcs_info} to use the supplied string as the command to "
"use as the VCS's binary. Note, that setting this in '@t{:vcs_info:*}' is not "
"a good idea."
msgstr ""

#. type: table
#: zsh.texi:36886
msgid ""
"If the value of this style is empty (which is the default), the used binary "
"name is the name of the backend in use (e.g. @t{svn} is used in an @t{svn} "
"repository)."
msgstr ""

#. type: table
#: zsh.texi:36890
msgid ""
"The @t{repo-root-name} part in the context is always the default @t{-all-} "
"when this style is looked up."
msgstr ""

#. type: table
#: zsh.texi:36896
msgid ""
"For example, this style can be used to use binaries from non-default "
"installation directories. Assume, @t{git} is installed in /usr/bin but your "
"sysadmin installed a newer version in /usr/local/bin. Instead of changing "
"the order of your @t{$PATH} parameter, you can do this:"
msgstr ""

#. type: example
#: zsh.texi:36898
#, no-wrap
msgid "zstyle ':vcs_info:git:*:-all-' command /usr/local/bin/git\n"
msgstr ""

#. type: t{#1}
#: zsh.texi:36900 zsh.texi:36901 zsh.texi:37022
#, no-wrap
msgid "use-server"
msgstr ""

#. type: table
#: zsh.texi:36914
msgid ""
"This is used by the Perforce backend (@t{p4}) to decide if it should contact "
"the Perforce server to find out if a directory is managed by Perforce.  This "
"is the only reliable way of doing this, but runs the risk of a delay if the "
"server name cannot be found.  If the server (more specifically, the "
"@var{host}@t{:}@var{port} pair describing the server) cannot be contacted, "
"its name is put into the associative array @t{vcs_info_p4_dead_servers} and "
"is not contacted again during the session until it is removed by hand.  If "
"you do not set this style, the @t{p4} backend is only usable if you have set "
"the environment variable @t{P4CONFIG} to a file name and have corresponding "
"files in the root directories of each Perforce client.  See comments in the "
"function @t{VCS_INFO_detect_p4} for more detail."
msgstr ""

#. type: table
#: zsh.texi:36918
msgid ""
"The Bazaar backend (@t{bzr}) uses this to permit contacting the server about "
"lightweight checkouts, see the @t{check-for-changes} style."
msgstr ""

#. type: t{#1}
#: zsh.texi:36919 zsh.texi:36920 zsh.texi:37024
#, no-wrap
msgid "use-simple"
msgstr ""

#. type: table
#: zsh.texi:36928
msgid ""
"If there are two different ways of gathering information, you can select the "
"simpler one by setting this style to true; the default is to use the "
"not-that-simple code, which is potentially a lot slower but might be more "
"accurate in all possible cases. This style is used by the @t{bzr}, @t{hg}, "
"and @t{git} backends. In the case of @t{hg} it will invoke the external "
"hexdump program to parse the binary dirstate cache file; this method will "
"not return the local revision number."
msgstr ""

#. type: t{#1}
#: zsh.texi:36929 zsh.texi:36930 zsh.texi:37026
#, no-wrap
msgid "get-revision"
msgstr ""

#. type: table
#: zsh.texi:36937
msgid ""
"If set to true, vcs_info goes the extra mile to figure out the revision of a "
"repository's work tree (currently for the @t{git} and @t{hg} backends, where "
"this kind of information is not always vital). For @t{git}, the hash value "
"of the currently checked out commit is available via the @t{%i} "
"expansion. With @t{hg}, the local revision number and the corresponding "
"global hash are available via @t{%i}."
msgstr ""

#. type: t{#1}
#: zsh.texi:36938 zsh.texi:36939 zsh.texi:37028
#, no-wrap
msgid "get-mq"
msgstr ""

#. type: table
#: zsh.texi:36942
msgid ""
"If set to true, the @t{hg} backend will look for a Mercurial Queue (@t{mq})  "
"patch directory. Information will be available via the `@t{%m}' replacement."
msgstr ""

#. type: t{#1}
#: zsh.texi:36943 zsh.texi:36944 zsh.texi:37030
#, no-wrap
msgid "get-bookmarks"
msgstr ""

#. type: table
#: zsh.texi:36947
msgid ""
"If set to true, the @t{hg} backend will try to get a list of current "
"bookmarks. They will be available via the `@t{%m}' replacement."
msgstr ""

#. type: table
#: zsh.texi:36952
msgid ""
"The default is to generate a comma-separated list of all bookmark names that "
"refer to the currently checked out revision.  If a bookmark is active, its "
"name is suffixed an asterisk and placed first in the list."
msgstr ""

#. type: t{#1}
#: zsh.texi:36953 zsh.texi:36954 zsh.texi:37032
#, no-wrap
msgid "use-prompt-escapes"
msgstr ""

#. type: table
#: zsh.texi:36958
msgid ""
"Determines if we assume that the assembled string from @t{vcs_info} includes "
"prompt escapes. (Used by @t{vcs_info_lastmsg}.)"
msgstr ""

#. type: t{#1}
#: zsh.texi:36959 zsh.texi:36960 zsh.texi:37034
#, no-wrap
msgid "debug"
msgstr ""

#. type: table
#: zsh.texi:36963
msgid ""
"Enable debugging output to track possible problems. Currently this style is "
"only used by @t{vcs_info}'s hooks system."
msgstr ""

#. type: t{#1}
#: zsh.texi:36964 zsh.texi:36965 zsh.texi:37036
#, no-wrap
msgid "hooks"
msgstr ""

#. type: table
#: zsh.texi:36968
msgid ""
"A list style that defines hook-function names. See @ref{vcs_info Hooks} "
"below for details."
msgstr ""

#. type: t{#1}
#: zsh.texi:36969 zsh.texi:36971 zsh.texi:37046
#, no-wrap
msgid "patch-format"
msgstr ""

#. type: t{#1}
#: zsh.texi:36970 zsh.texi:36972 zsh.texi:37048
#, no-wrap
msgid "nopatch-format"
msgstr ""

#. type: table
#: zsh.texi:36978
msgid ""
"This pair of styles format the patch information used by the @t{%m} expando "
"in formats and actionformats for the @t{git} and @t{hg} backends.  The value "
"is subject to certain @t{%}-expansions described below.  The expanded value "
"is made available in the global @t{backend_misc} array as "
"@t{$@{backend_misc[patches]@}} (also if a @t{set-patch-format} hook is "
"used)."
msgstr ""

#. type: t{#1}
#: zsh.texi:36979 zsh.texi:36980 zsh.texi:37050
#, no-wrap
msgid "get-unapplied"
msgstr ""

#. type: table
#: zsh.texi:36983
msgid ""
"This boolean style controls whether a backend should attempt to gather a "
"list of unapplied patches (for example with Mercurial Queue patches)."
msgstr ""

#. type: table
#: zsh.texi:36986
msgid "Used by the @t{quilt}, @t{hg}, and @t{git} backends."
msgstr ""

#. type: Plain text
#: zsh.texi:36991
msgid "The default values for these styles in all contexts are:"
msgstr ""

#. type: table
#: zsh.texi:36996
msgid "\" (%s)-[%b]%u%c-\""
msgstr ""

#. type: table
#: zsh.texi:36998
msgid "\" (%s)-[%b|%a]%u%c-\""
msgstr ""

#. type: table
#: zsh.texi:37000
msgid "\"%b:%r\" (for bzr, svn, svk and hg)"
msgstr ""

#. type: table
#: zsh.texi:37002
msgid "\"\""
msgstr ""

#. type: table
#: zsh.texi:37004
msgid "\"%r:%h\""
msgstr ""

#. type: table
#: zsh.texi:37008
msgid "ALL"
msgstr ""

#. type: table
#: zsh.texi:37010 zsh.texi:37012 zsh.texi:37038
msgid "(empty list)"
msgstr ""

#. type: table
#: zsh.texi:37018
msgid "(string: \"S\")"
msgstr ""

#. type: table
#: zsh.texi:37020
msgid "(string: \"U\")"
msgstr ""

#. type: table
#: zsh.texi:37022
msgid "(empty string)"
msgstr ""

#. type: table
#: zsh.texi:37044
msgid "empty - use @t{$QUILT_PATCHES}"
msgstr ""

#. type: table
#: zsh.texi:37046
msgid "quilt"
msgstr ""

#. type: var{#1}
#: zsh.texi:37048 zsh.texi:37050
msgid "backend dependent"
msgstr ""

#. type: Plain text
#: zsh.texi:37057
msgid ""
"In normal @t{formats} and @t{actionformats} the following replacements are "
"done:"
msgstr ""

#. type: table
#: zsh.texi:37062
msgid "The VCS in use (git, hg, svn, etc.)."
msgstr ""

#. type: table
#: zsh.texi:37064
msgid "Information about the current branch."
msgstr ""

#. type: table
#: zsh.texi:37067
msgid ""
"An identifier that describes the action. Only makes sense in "
"@t{actionformats}."
msgstr ""

#. type: table
#: zsh.texi:37070
msgid ""
"The current revision number or identifier. For @t{hg} the @t{hgrevformat} "
"style may be used to customize the output."
msgstr ""

#. type: table
#: zsh.texi:37073
msgid ""
"The string from the @t{stagedstr} style if there are staged changes in the "
"repository."
msgstr ""

#. type: t{#1}
#: zsh.texi:37073 zsh.texi:37151 zsh.texi:39753
#, no-wrap
msgid "%u"
msgstr ""

#. type: table
#: zsh.texi:37076
msgid ""
"The string from the @t{unstagedstr} style if there are unstaged changes in "
"the repository."
msgstr ""

#. type: table
#: zsh.texi:37078
msgid "The base directory of the repository."
msgstr ""

#. type: table
#: zsh.texi:37081
msgid "The repository name. If @t{%R} is @t{/foo/bar/repoXY}, @t{%r} is @t{repoXY}."
msgstr ""

#. type: table
#: zsh.texi:37084
msgid ""
"A subdirectory within a repository. If @t{$PWD} is "
"@t{/foo/bar/repoXY/beer/tasty}, @t{%S} is @t{beer/tasty}."
msgstr ""

#. type: table
#: zsh.texi:37089
msgid ""
"A \"misc\" replacement. It is at the discretion of the backend to decide "
"what this replacement expands to."
msgstr ""

#. type: table
#: zsh.texi:37097
msgid ""
"The @t{hg} and @t{git} backends use this expando to display patch "
"information.  @t{hg} sources patch information from the @t{mq} extensions; "
"@t{git} from in-progress @t{rebase} and @t{cherry-pick} operations and from "
"the @t{stgit} extension.  The @t{patch-format} and @t{nopatch-format} styles "
"control the generated string.  The former is used when at least one patch "
"from the patch queue has been applied, and the latter otherwise."
msgstr ""

#. type: table
#: zsh.texi:37104
msgid ""
"The @t{hg} backend displays bookmark information in this expando (in "
"addition to @t{mq} information).  See the @t{get-mq} and @t{get-bookmarks} "
"styles.  Both of these styles may be enabled at the same time.  If both are "
"enabled, both resulting strings will be shown separated by a semicolon (that "
"cannot currently be customized)."
msgstr ""

#. type: table
#: zsh.texi:37108
msgid ""
"The @t{quilt} `standalone' backend sets this expando to the same value as "
"the @t{%Q} expando."
msgstr ""

#. type: t{#1}
#: zsh.texi:37109
#, no-wrap
msgid "%Q"
msgstr ""

#. type: table
#: zsh.texi:37114
msgid ""
"Quilt series information.  When quilt is used (either in `addon' mode or as "
"a `standalone' backend), this expando is set to the quilt series' "
"@t{patch-format} string.  The @t{set-patch-format} hook and "
"@t{nopatch-format} style are honoured."
msgstr ""

#. type: table
#: zsh.texi:37117
msgid "See @ref{vcs_info Quilt Support} below for details."
msgstr ""

#. type: Plain text
#: zsh.texi:37122
msgid "In @t{branchformat} these replacements are done:"
msgstr ""

#. type: table
#: zsh.texi:37128
msgid "The branch name. For @t{hg}, the branch name can include a topic name."
msgstr ""

#. type: table
#: zsh.texi:37131
msgid "The current revision number or the @t{hgrevformat} style for @t{hg}."
msgstr ""

#. type: Plain text
#: zsh.texi:37135
msgid "In @t{hgrevformat} these replacements are done:"
msgstr ""

#. type: table
#: zsh.texi:37140
msgid "The current local revision number."
msgstr ""

#. type: table
#: zsh.texi:37142
msgid "The current global revision identifier."
msgstr ""

#. type: Plain text
#: zsh.texi:37146
msgid "In @t{patch-format} and @t{nopatch-format} these replacements are done:"
msgstr ""

#. type: t{#1}
#: zsh.texi:37149
#, no-wrap
msgid "%p"
msgstr ""

#. type: table
#: zsh.texi:37151
msgid ""
"The name of the top-most applied patch; may be overridden by the "
"@t{applied-string} hook."
msgstr ""

#. type: table
#: zsh.texi:37153
msgid ""
"The number of unapplied patches; may be overridden by the "
"@t{unapplied-string} hook."
msgstr ""

#. type: table
#: zsh.texi:37155
msgid "The number of applied patches."
msgstr ""

#. type: table
#: zsh.texi:37157
msgid "The number of unapplied patches."
msgstr ""

#. type: table
#: zsh.texi:37159
msgid "The number of all patches (@t{%a = %n + %c})."
msgstr ""

#. type: t{#1}
#: zsh.texi:37159
#, no-wrap
msgid "%g"
msgstr ""

#. type: table
#: zsh.texi:37161
msgid "The names of active @t{mq} guards (@t{hg} backend)."
msgstr ""

#. type: table
#: zsh.texi:37163
msgid "The number of active @t{mq} guards (@t{hg} backend)."
msgstr ""

#. type: Plain text
#: zsh.texi:37168
msgid ""
"Not all VCS backends have to support all replacements. For @t{nvcsformats} "
"no replacements are performed at all, it is just a string."
msgstr ""

#. type: node
#: zsh.texi:37170 zsh.texi:37193 zsh.texi:37314
#, no-wrap
msgid "vcs_info Quilt Support"
msgstr ""

#. type: subsection
#: zsh.texi:37172
#, no-wrap
msgid "Oddities"
msgstr ""

#. type: Plain text
#: zsh.texi:37183
msgid ""
"If you want to use the @t{%b} (bold off) prompt expansion in @t{formats}, "
"which expands @t{%b} itself, use @t{%%b}. That will cause the @t{vcs_info} "
"expansion to replace @t{%%b} with @t{%b}, so that zsh's prompt expansion "
"mechanism can handle it. Similarly, to hand down @t{%b} from "
"@t{branchformat}, use @t{%%%%b}. Sorry for this inconvenience, but it cannot "
"be easily avoided. Luckily we do not clash with a lot of prompt expansions "
"and this only needs to be done for those."
msgstr ""

#. type: Plain text
#: zsh.texi:37191
msgid ""
"When one of the @t{gen-applied-string}, @t{gen-unapplied-string}, and "
"@t{set-patch-format} hooks is defined, applying @t{%}-escaping "
"(`@t{foo=$@{foo//'%'/%%@}}') to the interpolated values for use in the "
"prompt is the responsibility of those hooks (jointly); when neither of those "
"hooks is defined, @t{vcs_info} handles escaping by itself.  We regret this "
"coupling, but it was required for backwards compatibility."
msgstr ""

#. type: node
#: zsh.texi:37193 zsh.texi:37314 zsh.texi:37375
#, no-wrap
msgid "vcs_info API"
msgstr ""

#. type: subsection
#: zsh.texi:37195
#, no-wrap
msgid "Quilt Support"
msgstr ""

#. type: Plain text
#: zsh.texi:37206
msgid ""
"@cite{Quilt} is not a version control system, therefore this is not "
"implemented as a backend. It can help keeping track of a series of "
"patches. People use it to keep a set of changes they want to use on top of "
"software packages (which is tightly integrated into the package build "
"process - the Debian project does this for a large number of "
"packages). Quilt can also help individual developers keep track of their own "
"patches on top of real version control systems."
msgstr ""

#. type: Plain text
#: zsh.texi:37211
msgid ""
"The @t{vcs_info} integration tries to support both ways of using quilt by "
"having two slightly different modes of operation: `addon' mode and "
"`standalone' mode)."
msgstr ""

#. type: Plain text
#: zsh.texi:37215
msgid ""
"Quilt integration is off by default; to enable it, set the @t{use-quilt} "
"style, and add @t{%Q} to your @t{formats} or @t{actionformats} style:"
msgstr ""

#. type: example
#: zsh.texi:37217
#, no-wrap
msgid "zstyle ':vcs_info:*' use-quilt true\n"
msgstr ""

#. type: Plain text
#: zsh.texi:37224
msgid ""
"Styles looked up from the Quilt support code include "
"`@t{.quilt-}@var{quilt-mode}' in the @var{vcs-string} part of the context, "
"where @var{quilt-mode} is either @t{addon} or @t{standalone}.  Example: "
"@t{:vcs_info:git.quilt-addon:default:}@var{repo-root-name}."
msgstr ""

#. type: Plain text
#: zsh.texi:37234
msgid ""
"For `addon' mode to become active @t{vcs_info} must have already detected a "
"real version control system controlling the directory. If that is the case, "
"a directory that holds quilt's patches needs to be found. That directory is "
"configurable via the `@t{QUILT_PATCHES}' environment variable. If that "
"variable exists its value is used, otherwise the value `@t{patches}' is "
"assumed. The value from @t{$QUILT_PATCHES} can be overwritten using the "
"`@t{quilt-patch-dir}' style. (Note: you can use @t{vcs_info} to keep the "
"value of @t{$QUILT_PATCHES} correct all the time via the @t{post-quilt} "
"hook)."
msgstr ""

#. type: Plain text
#: zsh.texi:37241
msgid ""
"When the directory in question is found, quilt is assumed to be active. To "
"gather more information, @t{vcs_info} looks for a directory called `.pc'; "
"Quilt uses that directory to track its current state. If this directory does "
"not exist we know that quilt has not done anything to the working directory "
"(read: no patches have been applied yet)."
msgstr ""

#. type: Plain text
#: zsh.texi:37246
msgid ""
"If patches are applied, @t{vcs_info} will try to find out which. If you want "
"to know which patches of a series are not yet applied, you need to activate "
"the @t{get-unapplied} style in the appropriate context."
msgstr ""

#. type: Plain text
#: zsh.texi:37256
msgid ""
"@t{vcs_info} allows for very detailed control over how the gathered "
"information is presented (see @ref{vcs_info Configuration} and @ref{vcs_info "
"Hooks}), all of which are documented below. Note there are a number of other "
"patch tracking systems that work on top of a certain version control system "
"(like @t{stgit} for @cite{git}, or @t{mq} for @cite{hg}); the configuration "
"for systems like that are generally configured the same way as the "
"@cite{quilt} support."
msgstr ""

#. type: Plain text
#: zsh.texi:37261
msgid ""
"If the @cite{quilt} support is working in `addon' mode, the produced string "
"is available as a simple format replacement (@t{%Q} to be precise), which "
"can be used in @t{formats} and @t{actionformats}; see below for details)."
msgstr ""

#. type: Plain text
#: zsh.texi:37272
msgid ""
"If, on the other hand, the support code is working in `standalone' mode, "
"@t{vcs_info} will pretend as if @t{quilt} were an actual version control "
"system. That means that the version control system identifier (which "
"otherwise would be something like `svn' or `cvs') will be set to "
"`@t{-quilt-}'. This has implications on the used style context where this "
"identifier is the second element. @t{vcs_info} will have filled in a proper "
"value for the \"repository's\" root directory and the string containing the "
"information about quilt's state will be available as the `misc' replacement "
"(and @t{%Q} for compatibility with `addon' mode)."
msgstr ""

#. type: Plain text
#: zsh.texi:37281
msgid ""
"What is left to discuss is how `standalone' mode is detected. The detection "
"itself is a series of searches for directories. You can have this detection "
"enabled all the time in every directory that is not otherwise under version "
"control. If you know there is only a limited set of trees where you would "
"like @t{vcs_info} to try and look for Quilt in `standalone' mode to minimise "
"the amount of searching on every call to @t{vcs_info}, there are a number of "
"ways to do that:"
msgstr ""

#. type: Plain text
#: zsh.texi:37287
msgid ""
"Essentially, `standalone' mode detection is controlled by a style called "
"`@t{quilt-standalone}'. It is a string style and its value can have "
"different effects. The simplest values are: `@t{always}' to run detection "
"every time @t{vcs_info} is run, and `@t{never}' to turn the detection off "
"entirely."
msgstr ""

#. type: Plain text
#: zsh.texi:37293
msgid ""
"If the value of @t{quilt-standalone} is something else, it is interpreted "
"differently. If the value is the name of a scalar variable the value of that "
"variable is checked and that value is used in the same `always'/`never' way "
"as described above."
msgstr ""

#. type: Plain text
#: zsh.texi:37297
msgid ""
"If the value of @t{quilt-standalone} is an array, the elements of that array "
"are used as directory names under which you want the detection to be active."
msgstr ""

#. type: Plain text
#: zsh.texi:37302
msgid ""
"If @t{quilt-standalone} is an associative array, the keys are taken as "
"directory names under which you want the detection to be active, but only if "
"the corresponding value is the string `@t{true}'."
msgstr ""

#. type: Plain text
#: zsh.texi:37308
msgid ""
"Last, but not least, if the value of @t{quilt-standalone} is the name of a "
"function, the function is called without arguments and the return value "
"decides whether detection should be active. A `0' return value is true; a "
"non-zero return value is interpreted as false."
msgstr ""

#. type: Plain text
#: zsh.texi:37312
msgid ""
"Note, if there is both a function and a variable by the name of "
"@t{quilt-standalone}, the function will take precedence."
msgstr ""

#. type: node
#: zsh.texi:37314 zsh.texi:37375 zsh.texi:37398
#, no-wrap
msgid "vcs_info Variables"
msgstr ""

#. type: subsection
#: zsh.texi:37316
#, no-wrap
msgid "Function Descriptions (Public API)"
msgstr ""

#. type: findex
#: zsh.texi:37321
#, no-wrap
msgid "vcs_info"
msgstr ""

#. type: item
#: zsh.texi:37322
#, no-wrap
msgid "@t{vcs_info} [@var{user-context}]"
msgstr ""

#. type: table
#: zsh.texi:37330
msgid ""
"The main function, that runs all backends and assembles all data into "
"@t{$@{vcs_info_msg_*_@}}. This is the function you want to call from "
"@t{precmd} if you want to include up-to-date information in your prompt (see "
"@ref{vcs_info Variables} below).  If an argument is given, that string will "
"be used instead of @t{default} in the @var{user-context} field of the style "
"context."
msgstr ""

#. type: t{#1}
#: zsh.texi:37331 zsh.texi:37332
#, no-wrap
msgid "vcs_info_hookadd"
msgstr ""

#. type: table
#: zsh.texi:37338
msgid ""
"Statically registers a number of functions to a given hook. The hook needs "
"to be given as the first argument; what follows is a list of hook-function "
"names to register to the hook. The `@t{+vi-}' prefix needs to be left out "
"here. See @ref{vcs_info Hooks} below for details."
msgstr ""

#. type: t{#1}
#: zsh.texi:37339 zsh.texi:37340
#, no-wrap
msgid "vcs_info_hookdel"
msgstr ""

#. type: table
#: zsh.texi:37349
msgid ""
"Remove hook-functions from a given hook. The hook needs to be given as the "
"first non-option argument; what follows is a list of hook-function names to "
"un-register from the hook. If `@t{-a}' is used as the first argument, "
"@t{all} occurrences of the functions are unregistered. Otherwise only the "
"last occurrence is removed (if a function was registered to a hook more than "
"once). The `@t{+vi-}' prefix needs to be left out here.  See @ref{vcs_info "
"Hooks} below for details."
msgstr ""

#. type: t{#1}
#: zsh.texi:37350 zsh.texi:37351
#, no-wrap
msgid "vcs_info_lastmsg"
msgstr ""

#. type: table
#: zsh.texi:37356
msgid ""
"Outputs the current values of @t{$@{vcs_info_msg_*_@}}.  Takes into account "
"the value of the @t{use-prompt-escapes} style in "
"@t{':vcs_info:formats:command:-all-'}. It also only prints @t{max-exports} "
"values."
msgstr ""

#. type: findex
#: zsh.texi:37357
#, no-wrap
msgid "vcs_info_printsys"
msgstr ""

#. type: item
#: zsh.texi:37358
#, no-wrap
msgid "@t{vcs_info_printsys} [@var{user-context}]"
msgstr ""

#. type: table
#: zsh.texi:37362
msgid ""
"Prints a list of all supported version control systems. Useful to find out "
"possible contexts (and which of them are enabled) or values for the "
"@t{disable} style."
msgstr ""

#. type: t{#1}
#: zsh.texi:37363 zsh.texi:37364
#, no-wrap
msgid "vcs_info_setsys"
msgstr ""

#. type: table
#: zsh.texi:37368
msgid ""
"Initializes @t{vcs_info}'s internal list of available backends. With this "
"function, you can add support for new VCSs without restarting the shell."
msgstr ""

#. type: Plain text
#: zsh.texi:37373
msgid "All functions named @t{VCS_INFO_*} are for internal use only."
msgstr ""

#. type: node
#: zsh.texi:37375 zsh.texi:37398 zsh.texi:37715
#, no-wrap
msgid "vcs_info Hooks"
msgstr ""

#. type: subsection
#: zsh.texi:37377
#, no-wrap
msgid "Variable Description"
msgstr ""

#. type: item
#: zsh.texi:37382
#, no-wrap
msgid "@t{$@{vcs_info_msg_}@var{N}@t{_@}} (Note the trailing underscore)"
msgstr ""

#. type: table
#: zsh.texi:37391
msgid ""
"Where @var{N} is an integer, e.g., @t{vcs_info_msg_0_}. These variables are "
"the storage for the informational message the last @t{vcs_info} call has "
"assembled. These are strongly connected to the @t{formats}, "
"@t{actionformats} and @t{nvcsformats} styles described above. Those styles "
"are lists. The first member of that list gets expanded into "
"@t{$@{vcs_info_msg_0_@}}, the second into @t{$@{vcs_info_msg_1_@}} and the "
"Nth into @t{$@{vcs_info_msg_N-1_@}}. (See the @t{max-exports} style above.)"
msgstr ""

#. type: Plain text
#: zsh.texi:37396
msgid "All variables named @t{VCS_INFO_*} are for internal use only."
msgstr ""

#. type: subsection
#: zsh.texi:37400
#, no-wrap
msgid "Hooks in vcs_info"
msgstr ""

#. type: Plain text
#: zsh.texi:37407
msgid ""
"Hooks are places in @t{vcs_info} where you can run your own code. That code "
"can communicate with the code that called it and through that, change the "
"system's behaviour."
msgstr ""

#. type: Plain text
#: zsh.texi:37410
msgid "For configuration, hooks change the style context:"
msgstr ""

#. type: example
#: zsh.texi:37412
#, no-wrap
msgid ":vcs_info:@var{vcs-string}+@var{hook-name}:@var{user-context}:@var{repo-root-name}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:37417
msgid ""
"To register functions to a hook, you need to list them in the @t{hooks} "
"style in the appropriate context."
msgstr ""

#. type: example
#: zsh.texi:37422
#, no-wrap
msgid "zstyle ':vcs_info:*+foo:*' hooks bar baz\n"
msgstr ""

#. type: Plain text
#: zsh.texi:37429
msgid ""
"This registers functions to the hook `foo' for all backends. In order to "
"avoid namespace problems, all registered function names are prepended by a "
"`@t{+vi-}', so the actual functions called for the `foo' hook are "
"`@t{+vi-bar}' and `@t{+vi-baz}'."
msgstr ""

#. type: Plain text
#: zsh.texi:37435
msgid ""
"If you would like to register a function to a hook regardless of the current "
"context, you may use the @t{vcs_info_hookadd} function. To remove a function "
"that was added like that, the @t{vcs_info_hookdel} function can be used."
msgstr ""

#. type: Plain text
#: zsh.texi:37440
msgid ""
"If something seems weird, you can enable the `debug' boolean style in the "
"proper context and the hook-calling code will print what it tried to execute "
"and whether the function in question existed."
msgstr ""

#. type: Plain text
#: zsh.texi:37447
msgid ""
"When you register more than one function to a hook, all functions are "
"executed one after another until one function returns non-zero or until all "
"functions have been called. Context-sensitive hook functions are executed "
"@t{before} statically registered ones (the ones added by "
"@t{vcs_info_hookadd})."
msgstr ""

#. type: Plain text
#: zsh.texi:37451
msgid ""
"You may pass data between functions via an associative array, "
"@t{user_data}.  For example:"
msgstr ""

#. type: example
#: zsh.texi:37459
#, no-wrap
msgid ""
"+vi-git-myfirsthook()@{\n"
"    user_data[myval]=$myval\n"
"@}\n"
"+vi-git-mysecondhook()@{\n"
"    # do something with $@{user_data[myval]@}\n"
"@}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:37463
msgid "There are a number of variables that are special in hook contexts:"
msgstr ""

#. type: t{#1}
#: zsh.texi:37466
#, no-wrap
msgid "ret"
msgstr ""

#. type: table
#: zsh.texi:37471
msgid ""
"The return value that the hooks system will return to the caller. The "
"default is an integer `zero'. If and how a changed @t{ret} value changes the "
"execution of the caller depends on the specific hook. See the hook "
"documentation below for details."
msgstr ""

#. type: t{#1}
#: zsh.texi:37472
#, no-wrap
msgid "hook_com"
msgstr ""

#. type: table
#: zsh.texi:37475
msgid ""
"An associated array which is used for bidirectional communication from the "
"caller to hook functions. The used keys depend on the specific hook."
msgstr ""

#. type: table
#: zsh.texi:37479
msgid ""
"The active context of the hook. Functions that wish to change this variable "
"should make it local scope first."
msgstr ""

#. type: t{#1}
#: zsh.texi:37480
#, no-wrap
msgid "vcs"
msgstr ""

#. type: table
#: zsh.texi:37483
msgid ""
"The current VCS after it was detected. The same values as in the "
"enable/disable style are used. Available in all hooks except @t{start-up}."
msgstr ""

#. type: Plain text
#: zsh.texi:37488
msgid "Finally, the full list of currently available hooks:"
msgstr ""

#. type: t{#1}
#: zsh.texi:37491
#, no-wrap
msgid "start-up"
msgstr ""

#. type: table
#: zsh.texi:37497
msgid ""
"Called after starting @t{vcs_info} but before the VCS in this directory is "
"determined. It can be used to deactivate @t{vcs_info} temporarily if "
"necessary. When @t{ret} is set to @t{1}, @t{vcs_info} aborts and does "
"nothing; when set to @t{2}, @t{vcs_info} sets up everything as if no version "
"control were active and exits."
msgstr ""

#. type: t{#1}
#: zsh.texi:37498
#, no-wrap
msgid "pre-get-data"
msgstr ""

#. type: table
#: zsh.texi:37500
msgid "Same as @t{start-up} but after the VCS was detected."
msgstr ""

#. type: t{#1}
#: zsh.texi:37501
#, no-wrap
msgid "gen-hg-bookmark-string"
msgstr ""

#. type: table
#: zsh.texi:37504
msgid ""
"Called in the Mercurial backend when a bookmark string is generated; the "
"@t{get-revision} and @t{get-bookmarks} styles must be true."
msgstr ""

#. type: table
#: zsh.texi:37508
msgid ""
"This hook gets the names of the Mercurial bookmarks that @t{vcs_info} "
"collected from `hg'."
msgstr ""

#. type: table
#: zsh.texi:37512
msgid ""
"If a bookmark is active, the key @t{$@{hook_com[hg-active-bookmark]@}} is "
"set to its name.  The key is otherwise unset."
msgstr ""

#. type: table
#: zsh.texi:37518
msgid ""
"When setting @t{ret} to non-zero, the string in "
"@t{$@{hook_com[hg-bookmark-string]@}} will be used in the @t{%m} escape in "
"@t{formats} and @t{actionformats} and will be available in the global "
"@t{backend_misc} array as @t{$@{backend_misc[bookmarks]@}}."
msgstr ""

#. type: t{#1}
#: zsh.texi:37519
#, no-wrap
msgid "gen-applied-string"
msgstr ""

#. type: table
#: zsh.texi:37524
msgid ""
"Called in the @t{git} (with @t{stgit} or during rebase or merge), and @t{hg} "
"(with @t{mq}) backends and in @t{quilt} support when the @t{applied-string} "
"is generated; the @t{use-quilt} zstyle must be true for @t{quilt} (the "
"@t{mq} and @t{stgit} backends are active by default)."
msgstr ""

#. type: table
#: zsh.texi:37529
msgid ""
"The arguments to this hook describe applied patches in the opposite order, "
"which means that the first argument is the top-most patch and so forth."
msgstr ""

#. type: table
#: zsh.texi:37537
msgid ""
"When the patches' log messages can be extracted, those are embedded within "
"each argument after a space, so each argument is of the form "
"`@var{patch-name} @var{first line of the log message}', where "
"@var{patch-name} contains no whitespace. The @t{mq} backend passes arguments "
"of the form `@var{patch name}', with possible embedded spaces, but without "
"extracting the patch's log message."
msgstr ""

#. type: table
#: zsh.texi:37545
msgid ""
"When setting @t{ret} to non-zero, the string in "
"@t{$@{hook_com[applied-string]@}} will be available as @t{%p} in the "
"@t{patch-format} and @t{nopatch-format} styles.  This hook is, in concert "
"with @t{set-patch-format}, responsible for @t{%}-escaping that value for use "
"in the prompt.  (See @ref{vcs_info Oddities}.)"
msgstr ""

#. type: table
#: zsh.texi:37550 zsh.texi:37576 zsh.texi:37677
msgid ""
"The @t{quilt} backend passes to this hook the inputs "
"@t{$@{hook_com[quilt-patches-dir]@}} and, if it has been determined, "
"@t{$@{hook_com[quilt-pc-dir]@}}."
msgstr ""

#. type: t{#1}
#: zsh.texi:37551
#, no-wrap
msgid "gen-unapplied-string"
msgstr ""

#. type: table
#: zsh.texi:37555
msgid ""
"Called in the @t{git} (with @t{stgit} or during rebase), and @t{hg} (with "
"@t{mq}) backend and in @t{quilt} support when the @t{unapplied-string} is "
"generated; the @t{get-unapplied} style must be true."
msgstr ""

#. type: table
#: zsh.texi:37560
msgid ""
"This hook gets the names of all unapplied patches which @t{vcs_info} in "
"order, which means that the first argument is the patch next-in-line to be "
"applied and so forth."
msgstr ""

#. type: table
#: zsh.texi:37563
msgid "The format of each argument is as for @t{gen-applied-string}, above."
msgstr ""

#. type: table
#: zsh.texi:37571
msgid ""
"When setting @t{ret} to non-zero, the string in "
"@t{$@{hook_com[unapplied-string]@}} will be available as @t{%u} in the "
"@t{patch-format} and @t{nopatch-format} styles.  This hook is, in concert "
"with @t{set-patch-format}, responsible for @t{%}-escaping that value for use "
"in the prompt.  (See @ref{vcs_info Oddities}.)"
msgstr ""

#. type: t{#1}
#: zsh.texi:37577
#, no-wrap
msgid "gen-mqguards-string"
msgstr ""

#. type: table
#: zsh.texi:37580
msgid ""
"Called in the @t{hg} backend when @t{guards-string} is generated; the "
"@t{get-mq} style must be true (default)."
msgstr ""

#. type: table
#: zsh.texi:37583
msgid "This hook gets the names of any active @t{mq} guards."
msgstr ""

#. type: table
#: zsh.texi:37588
msgid ""
"When setting @t{ret} to non-zero, the string in "
"@t{$@{hook_com[guards-string]@}} will be used in the @t{%g} escape in the "
"@t{patch-format} and @t{nopatch-format} styles."
msgstr ""

#. type: t{#1}
#: zsh.texi:37589
#, no-wrap
msgid "no-vcs"
msgstr ""

#. type: table
#: zsh.texi:37591
msgid "This hooks is called when no version control system was detected."
msgstr ""

#. type: table
#: zsh.texi:37594
msgid "The `@t{hook_com}' parameter is not used."
msgstr ""

#. type: t{#1}
#: zsh.texi:37595
#, no-wrap
msgid "post-backend"
msgstr ""

#. type: table
#: zsh.texi:37597
msgid "Called as soon as the backend has finished collecting information."
msgstr ""

#. type: table
#: zsh.texi:37600
msgid "The `@t{hook_com}' keys available are as for the @t{set-message} hook."
msgstr ""

#. type: t{#1}
#: zsh.texi:37601
#, no-wrap
msgid "post-quilt"
msgstr ""

#. type: table
#: zsh.texi:37607
msgid ""
"Called after the @t{quilt} support is done. The following information is "
"passed as arguments to the hook: 1. the quilt-support mode (`addon' or "
"`standalone'); 2. the directory that contains the patch series; 3. the "
"directory that holds quilt's status information (the `.pc' directory) or the "
"string @t{\"-nopc-\"} if that directory wasn't found."
msgstr ""

#. type: table
#: zsh.texi:37610
msgid "The `hook_com' parameter is not used."
msgstr ""

#. type: t{#1}
#: zsh.texi:37611
#, no-wrap
msgid "set-branch-format"
msgstr ""

#. type: table
#: zsh.texi:37614
msgid ""
"Called before `@t{branchformat}' is set. The only argument to the hook is "
"the format that is configured at this point."
msgstr ""

#. type: table
#: zsh.texi:37619
msgid ""
"The `@t{hook_com}' keys considered are `@t{branch}' and `@t{revision}'.  "
"They are set to the values figured out so far by @t{vcs_info} and any change "
"will be used directly when the actual replacement is done."
msgstr ""

#. type: table
#: zsh.texi:37624
msgid ""
"If @t{ret} is set to non-zero, the string in "
"@t{$@{hook_com[branch-replace]@}} will be used unchanged as the `@t{%b}' "
"replacement in the variables set by @t{vcs_info}."
msgstr ""

#. type: t{#1}
#: zsh.texi:37625
#, no-wrap
msgid "set-hgrev-format"
msgstr ""

#. type: table
#: zsh.texi:37628
msgid ""
"Called before a `@t{hgrevformat}' is set. The only argument to the hook is "
"the format that is configured at this point."
msgstr ""

#. type: table
#: zsh.texi:37633
msgid ""
"The `@t{hook_com}' keys considered are `@t{hash}' and `@t{localrev}'.  They "
"are set to the values figured out so far by @t{vcs_info} and any change will "
"be used directly when the actual replacement is done."
msgstr ""

#. type: table
#: zsh.texi:37638
msgid ""
"If @t{ret} is set to non-zero, the string in @t{$@{hook_com[rev-replace]@}} "
"will be used unchanged as the `@t{%i}' replacement in the variables set by "
"@t{vcs_info}."
msgstr ""

#. type: t{#1}
#: zsh.texi:37639
#, no-wrap
msgid "pre-addon-quilt"
msgstr ""

#. type: table
#: zsh.texi:37643
msgid ""
"This hook is used when @t{vcs_info}'s quilt functionality is active in "
"\"addon\" mode (quilt used on top of a real version control system). It is "
"activated right before any quilt specific action is taken."
msgstr ""

#. type: table
#: zsh.texi:37647
msgid ""
"Setting the `@t{ret}' variable in this hook to a non-zero value avoids any "
"quilt specific actions from being run at all."
msgstr ""

#. type: t{#1}
#: zsh.texi:37648
#, no-wrap
msgid "set-patch-format"
msgstr ""

#. type: table
#: zsh.texi:37652
msgid ""
"This hook is used to control some of the possible expansions in "
"@t{patch-format} and @t{nopatch-format} styles with patch queue systems such "
"as quilt, mqueue and the like."
msgstr ""

#. type: table
#: zsh.texi:37655
msgid "This hook is used in the @t{git}, @t{hg} and @t{quilt} backends."
msgstr ""

#. type: table
#: zsh.texi:37661
msgid ""
"The hook allows the control of the @t{%p} (@t{$@{hook_com[applied]@}}) and "
"@t{%u} (@t{$@{hook_com[unapplied]@}}) expansion in all backends that use the "
"hook. With the mercurial backend, the @t{%g} (@t{$@{hook_com[guards]@}}) "
"expansion is controllable in addition to that."
msgstr ""

#. type: table
#: zsh.texi:37666
msgid ""
"If @t{ret} is set to non-zero, the string in "
"@t{$@{hook_com[patch-replace]@}} will be used unchanged instead of an "
"expanded format from @t{patch-format} or @t{nopatch-format}."
msgstr ""

#. type: table
#: zsh.texi:37672
msgid ""
"This hook is, in concert with the @t{gen-applied-string} or "
"@t{gen-unapplied-string} hooks if they are defined, responsible for "
"@t{%}-escaping the final @t{patch-format} value for use in the prompt.  (See "
"@ref{vcs_info Oddities}.)"
msgstr ""

#. type: t{#1}
#: zsh.texi:37678
#, no-wrap
msgid "set-message"
msgstr ""

#. type: table
#: zsh.texi:37683
msgid ""
"Called each time before a `@t{vcs_info_msg_}@var{N}@t{_}' message is set.  "
"It takes two arguments; the first being the `@var{N}' in the message "
"variable name, the second is the currently configured @t{formats} or "
"@t{actionformats}."
msgstr ""

#. type: table
#: zsh.texi:37692
msgid ""
"There are a number of `@t{hook_com}' keys, that are used here: `@t{action}', "
"`@t{branch}', `@t{base}', `@t{base-name}', `@t{subdir}', `@t{staged}', "
"`@t{unstaged}', `@t{revision}', `@t{misc}', `@t{vcs}' and one `@t{miscN}' "
"entry for each backend-specific data field (@t{N} starting at zero). They "
"are set to the values figured out so far by @t{vcs_info} and any change will "
"be used directly when the actual replacement is done."
msgstr ""

#. type: table
#: zsh.texi:37700
msgid ""
"Since this hook is triggered multiple times (once for each configured "
"@t{formats} or @t{actionformats}), each of the `@t{hook_com}' keys mentioned "
"above (except for the @t{miscN} entries) has an `@t{_orig}' counterpart, so "
"even if you changed a value to your liking you can still get the original "
"value in the next run. Changing the `@t{_orig}' values is probably not a "
"good idea."
msgstr ""

#. type: table
#: zsh.texi:37705
msgid ""
"If @t{ret} is set to non-zero, the string in @t{$@{hook_com[message]@}} will "
"be used unchanged as the message by @t{vcs_info}."
msgstr ""

#. type: Plain text
#: zsh.texi:37713
msgid ""
"If all of this sounds rather confusing, take a look at @ref{vcs_info "
"Examples} and also in the @t{Misc/vcs_info-examples} file in the Zsh "
"source.  They contain some explanatory code."
msgstr ""

#. type: Plain text
#: zsh.texi:37722
msgid "Don't use @t{vcs_info} at all (even though it's in your prompt):"
msgstr ""

#. type: example
#: zsh.texi:37724
#, no-wrap
msgid "zstyle ':vcs_info:*' enable NONE\n"
msgstr ""

#. type: Plain text
#: zsh.texi:37728
msgid "Disable the backends for @t{bzr} and @t{svk}:"
msgstr ""

#. type: example
#: zsh.texi:37730
#, no-wrap
msgid "zstyle ':vcs_info:*' disable bzr svk\n"
msgstr ""

#. type: Plain text
#: zsh.texi:37734
msgid "Disable everything @emph{but} @t{bzr} and @t{svk}:"
msgstr ""

#. type: example
#: zsh.texi:37736
#, no-wrap
msgid "zstyle ':vcs_info:*' enable bzr svk\n"
msgstr ""

#. type: Plain text
#: zsh.texi:37740
msgid "Provide a special formats for @t{git}:"
msgstr ""

#. type: example
#: zsh.texi:37743
#, no-wrap
msgid ""
"zstyle ':vcs_info:git:*' formats       ' GIT, BABY! [%b]'\n"
"zstyle ':vcs_info:git:*' actionformats ' GIT ACTION! [%b|%a]'\n"
msgstr ""

#. type: Plain text
#: zsh.texi:37755
msgid ""
"All @t{%x} expansion in all sorts of formats (@t{formats}, "
"@t{actionformats}, @t{branchformat}, you name it) are done using the "
"`@t{zformat}' builtin from the `@t{zsh/zutil}' module. That means you can do "
"everything with these @t{%x} items what zformat supports. In particular, if "
"you want something that is really long to have a fixed width, like a hash in "
"a mercurial branchformat, you can do this: @t{%12.12i}. That'll shrink the "
"40 character hash to its 12 leading characters. The form is actually "
"`@t{%}@var{min}@t{.}@var{max}@t{x}'. More is possible.  See @ref{The "
"zsh/zutil Module} for details."
msgstr ""

#. type: Plain text
#: zsh.texi:37758
msgid "Use the quicker @t{bzr} backend"
msgstr ""

#. type: example
#: zsh.texi:37760
#, no-wrap
msgid "zstyle ':vcs_info:bzr:*' use-simple true\n"
msgstr ""

#. type: Plain text
#: zsh.texi:37764
msgid ""
"If you do use @t{use-simple}, please report if it does "
"`the-right-thing[tm]'."
msgstr ""

#. type: Plain text
#: zsh.texi:37767
msgid "Display the revision number in yellow for @t{bzr} and @t{svn}:"
msgstr ""

#. type: example
#: zsh.texi:37770
#, no-wrap
msgid ""
"zstyle ':vcs_info:(svn|bzr):*' \\ \n"
"       branchformat '%b%%F@{yellow@}:%r'\n"
msgstr ""

#. type: Plain text
#: zsh.texi:37775
msgid "The doubled percent sign is explained in @ref{vcs_info Oddities}."
msgstr ""

#. type: Plain text
#: zsh.texi:37778
msgid "Alternatively, one can use the raw colour codes directly:"
msgstr ""

#. type: example
#: zsh.texi:37783
#, no-wrap
msgid ""
"zstyle ':vcs_info:(svn|bzr):*' \\ \n"
"       branchformat '%b%@{'$@{fg[yellow]@}'%@}:%r'\n"
msgstr ""

#. type: Plain text
#: zsh.texi:37789
msgid ""
"Normally when a variable is interpolated into a format string, the variable "
"needs to be @t{%}-escaped. In this example we skipped that because we assume "
"the value of @t{$@{fg[yellow]@}} doesn't contain any @t{%} signs."
msgstr ""

#. type: Plain text
#: zsh.texi:37793
msgid ""
"Make sure you enclose the color codes in @t{%@{}@var{...}@t{%@}} if you want "
"to use the string provided by @t{vcs_info} in prompts."
msgstr ""

#. type: Plain text
#: zsh.texi:37796
msgid "Here is how to print the VCS information as a command (not in a prompt):"
msgstr ""

#. type: example
#: zsh.texi:37798
#, no-wrap
msgid "vcsi() @{ vcs_info interactive; vcs_info_lastmsg @}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:37803
msgid ""
"This way, you can even define different formats for output via "
"@t{vcs_info_lastmsg} in the '@t{:vcs_info:*:interactive:*}' namespace."
msgstr ""

#. type: Plain text
#: zsh.texi:37808
msgid ""
"Now as promised, some code that uses hooks: say, you'd like to replace the "
"string `svn' by `subversion' in @t{vcs_info}'s @t{%s} @t{formats} "
"replacement."
msgstr ""

#. type: Plain text
#: zsh.texi:37812
msgid ""
"First, we will tell @t{vcs_info} to call a function when populating the "
"message variables with the gathered information:"
msgstr ""

#. type: example
#: zsh.texi:37814
#, no-wrap
msgid "zstyle ':vcs_info:*+set-message:*' hooks svn2subversion\n"
msgstr ""

#. type: Plain text
#: zsh.texi:37820
msgid ""
"Nothing happens. Which is reasonable, since we didn't define the actual "
"function yet. To see what the hooks subsystem is trying to do, enable the "
"`@t{debug}' style:"
msgstr ""

#. type: example
#: zsh.texi:37822
#, no-wrap
msgid "zstyle ':vcs_info:*+*:*' debug true\n"
msgstr ""

#. type: Plain text
#: zsh.texi:37829
msgid ""
"That should give you an idea what is going on. Specifically, the function "
"that we are looking for is `@t{+vi-svn2subversion}'. Note, the `@t{+vi-}' "
"prefix. So, everything is in order, just as documented. When you are done "
"checking out the debugging output, disable it again:"
msgstr ""

#. type: example
#: zsh.texi:37831
#, no-wrap
msgid "zstyle ':vcs_info:*+*:*' debug false\n"
msgstr ""

#. type: Plain text
#: zsh.texi:37835
msgid "Now, let's define the function:"
msgstr ""

#. type: example
#: zsh.texi:37840
#, no-wrap
msgid ""
"function +vi-svn2subversion() @{\n"
"    [[ $@{hook_com[vcs_orig]@} == svn ]] && hook_com[vcs]=subversion\n"
"@}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:37847
msgid ""
"Simple enough. And it could have even been simpler, if only we had "
"registered our function in a less generic context. If we do it only in the "
"`@t{svn}' backend's context, we don't need to test which the active backend "
"is:"
msgstr ""

#. type: example
#: zsh.texi:37849
#, no-wrap
msgid "zstyle ':vcs_info:svn+set-message:*' hooks svn2subversion\n"
msgstr ""

#. type: example
#: zsh.texi:37855
#, no-wrap
msgid ""
"function +vi-svn2subversion() @{\n"
"    hook_com[vcs]=subversion\n"
"@}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:37860
msgid ""
"And finally a little more elaborate example, that uses a hook to create a "
"customised bookmark string for the @t{hg} backend."
msgstr ""

#. type: Plain text
#: zsh.texi:37863
msgid "Again, we start off by registering a function:"
msgstr ""

#. type: example
#: zsh.texi:37865
#, no-wrap
msgid "zstyle ':vcs_info:hg+gen-hg-bookmark-string:*' hooks hgbookmarks\n"
msgstr ""

#. type: Plain text
#: zsh.texi:37869
msgid "And then we define the `@t{+vi-hgbookmarks}' function:"
msgstr ""

#. type: example
#: zsh.texi:37895
#, no-wrap
msgid ""
"function +vi-hgbookmarks() @{\n"
"    # The default is to connect all bookmark names by\n"
"    # commas. This mixes things up a little.\n"
"    # Imagine, there's one type of bookmarks that is\n"
"    # special to you. Say, because it's *your* work.\n"
"    # Those bookmarks look always like this: \"sh/*\"\n"
"    # (because your initials are sh, for example).\n"
"    # This makes the bookmarks string use only those\n"
"    # bookmarks. If there's more than one, it\n"
"    # concatenates them using commas.\n"
"    # The bookmarks returned by `hg' are available in\n"
"    # the function's positional parameters.\n"
"    local s=\"$@{(Mj:,:)@@:#sh/*@}\"\n"
"    # Now, the communication with the code that calls\n"
"    # the hook functions is done via the hook_com[]\n"
"    # hash. The key at which the `gen-hg-bookmark-string'\n"
"    # hook looks is `hg-bookmark-string'. So:\n"
"    hook_com[hg-bookmark-string]=$s\n"
"    # And to signal that we want to use the string we\n"
"    # just generated, set the special variable `ret' to\n"
"    # something other than the default zero:\n"
"    ret=1\n"
"    return 0\n"
"@}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:37901
msgid ""
"Some longer examples and code snippets which might be useful are available "
"in the examples file located at Misc/vcs_info-examples in the Zsh source "
"directory."
msgstr ""

#. type: Plain text
#: zsh.texi:37904
msgid "This concludes our guided tour through zsh's @t{vcs_info}."
msgstr ""

#. type: node
#: zsh.texi:37906 zsh.texi:38080 zsh.texi:38082 zsh.texi:39808
#, no-wrap
msgid "ZLE Functions"
msgstr ""

#. type: Plain text
#: zsh.texi:37930
msgid ""
"You should make sure all the functions from the @t{Functions/Prompts} "
"directory of the source distribution are available; they all begin with the "
"string `@t{prompt_}' except for the special function `@t{promptinit}'.  You "
"also need the `@t{colors}' and `@t{add-zsh-hook}' functions from "
"@t{Functions/Misc}.  All these functions may already be installed on your "
"system; if not, you will need to find them and copy them.  The directory "
"should appear as one of the elements of the @t{fpath} array (this should "
"already be the case if they were installed), and at least the function "
"@t{promptinit} should be autoloaded; it will autoload the rest.  Finally, to "
"initialize the use of the system you need to call the @t{promptinit} "
"function.  The following code in your @t{.zshrc} will arrange for this; "
"assume the functions are stored in the directory @t{~/myfns}:"
msgstr ""

#. type: example
#: zsh.texi:37936
#, no-wrap
msgid ""
"fpath=(~/myfns $fpath)\n"
"autoload -U promptinit\n"
"promptinit\n"
msgstr ""

#. type: subsection
#: zsh.texi:37940
#, no-wrap
msgid "Theme Selection"
msgstr ""

#. type: Plain text
#: zsh.texi:37947
msgid ""
"Use the @t{prompt} command to select your preferred theme.  This command may "
"be added to your @t{.zshrc} following the call to @t{promptinit} in order to "
"start zsh with a theme already selected."
msgstr ""

#. type: item
#: zsh.texi:37950
#, no-wrap
msgid "@t{prompt} [ @t{-c} | @t{-l} ]"
msgstr ""

#. type: itemx
#: zsh.texi:37951
#, no-wrap
msgid "@t{prompt} [ @t{-p} | @t{-h} ] [ @var{theme} ... ]"
msgstr ""

#. type: itemx
#: zsh.texi:37952
#, no-wrap
msgid "@t{prompt} [ @t{-s} ] @var{theme} [ @var{arg} ... ]"
msgstr ""

#. type: table
#: zsh.texi:37958
msgid ""
"Set or examine the prompt theme.  With no options and a @var{theme} "
"argument, the theme with that name is set as the current theme.  The "
"available themes are determined at run time; use the @t{-l} option to see a "
"list.  The special @var{theme} `@t{random}' selects at random one of the "
"available themes and sets your prompt to that."
msgstr ""

#. type: table
#: zsh.texi:37963
msgid ""
"In some cases the @var{theme} may be modified by one or more arguments, "
"which should be given after the theme name.  See the help for each theme for "
"descriptions of these arguments."
msgstr ""

#. type: table
#: zsh.texi:37966
msgid "Options are:"
msgstr ""

#. type: table
#: zsh.texi:37971
msgid "Show the currently selected theme and its parameters, if any."
msgstr ""

#. type: table
#: zsh.texi:37973
msgid "List all available prompt themes."
msgstr ""

#. type: table
#: zsh.texi:37976
msgid ""
"Preview the theme named by @var{theme}, or all themes if no @var{theme} is "
"given."
msgstr ""

#. type: table
#: zsh.texi:37979
msgid ""
"Show help for the theme named by @var{theme}, or for the @t{prompt} function "
"if no @var{theme} is given."
msgstr ""

#. type: table
#: zsh.texi:37981
msgid "Set @var{theme} as the current theme and save state."
msgstr ""

#. type: item
#: zsh.texi:37983
#, no-wrap
msgid "@t{prompt_}@var{theme}@t{_setup}"
msgstr ""

#. type: table
#: zsh.texi:37989
msgid ""
"Each available @var{theme} has a setup function which is called by the "
"@t{prompt} function to install that theme.  This function may define other "
"functions as necessary to maintain the prompt, including functions used to "
"preview the prompt or provide help for its use.  You should not normally "
"call a theme's setup function directly."
msgstr ""

#. type: subsection
#: zsh.texi:37994
#, no-wrap
msgid "Utility Themes"
msgstr ""

#. type: t{#1}
#: zsh.texi:37999
#, no-wrap
msgid "prompt off"
msgstr ""

#. type: table
#: zsh.texi:38002
msgid ""
"The theme `@t{off}' sets all the prompt variables to minimal values with no "
"special effects."
msgstr ""

#. type: t{#1}
#: zsh.texi:38003
#, no-wrap
msgid "prompt default"
msgstr ""

#. type: table
#: zsh.texi:38006
msgid ""
"The theme `@t{default}' sets all prompt variables to the same state as if an "
"interactive zsh was started with no initialization files."
msgstr ""

#. type: t{#1}
#: zsh.texi:38007
#, no-wrap
msgid "prompt restore"
msgstr ""

#. type: table
#: zsh.texi:38011
msgid ""
"The special theme `@t{restore}' erases all theme settings and sets prompt "
"variables to their state before the first time the `@t{prompt}' function was "
"run, provided each theme has properly defined its cleanup (see below)."
msgstr ""

#. type: table
#: zsh.texi:38015
msgid ""
"Note that you can undo `@t{prompt off}' and `@t{prompt default}' with "
"`@t{prompt restore}', but a second restore does not undo the first."
msgstr ""

#. type: subsection
#: zsh.texi:38020
#, no-wrap
msgid "Writing Themes"
msgstr ""

#. type: Plain text
#: zsh.texi:38030
msgid ""
"The first step for adding your own theme is to choose a name for it, and "
"create a file `@t{prompt_@var{name}_setup}' in a directory in your "
"@t{fpath}, such as @t{~/myfns} in the example above.  The file should at "
"minimum contain assignments for the prompt variables that your theme wishes "
"to modify.  By convention, themes use @t{PS1}, @t{PS2}, @t{RPS1}, etc., "
"rather than the longer @t{PROMPT} and @t{RPROMPT}."
msgstr ""

#. type: Plain text
#: zsh.texi:38036
msgid ""
"The file is autoloaded as a function in the current shell context, so it may "
"contain any necessary commands to customize your theme, including defining "
"additional functions.  To make some complex tasks easier, your setup "
"function may also do any of the following:"
msgstr ""

#. type: item
#: zsh.texi:38039
#, no-wrap
msgid "Assign @t{prompt_opts}"
msgstr ""

#. type: table
#: zsh.texi:38045
msgid ""
"The array @t{prompt_opts} may be assigned any of @t{\"bang\"}, @t{\"cr\"}, "
"@t{\"percent\"}, @t{\"sp\"}, and/or @t{\"subst\"} as values.  The "
"corresponding setopts (@t{promptbang}, etc.) are turned on, all other "
"prompt-related options are turned off.  The @t{prompt_opts} array preserves "
"setopts even beyond the scope of @t{localoptions}, should your function need "
"that."
msgstr ""

#. type: item
#: zsh.texi:38046
#, no-wrap
msgid "Modify hooks"
msgstr ""

#. type: table
#: zsh.texi:38051
msgid ""
"Use of @t{add-zsh-hook} and @t{add-zle-hook-widget} is recommended (see the "
"@cite{Manipulating Hook Functions} section above).  All hooks that follow "
"the naming pattern @t{prompt_}@var{theme}@t{_}@var{hook} are automatically "
"removed when the prompt theme changes or is disabled."
msgstr ""

#. type: item
#: zsh.texi:38052
#, no-wrap
msgid "Declare cleanup"
msgstr ""

#. type: table
#: zsh.texi:38055
msgid ""
"If your function makes any other changes that should be undone when the "
"theme is disabled, your setup function may call"
msgstr ""

#. type: example
#: zsh.texi:38059
#, no-wrap
msgid "prompt_cleanup @var{command}\n"
msgstr ""

#. type: table
#: zsh.texi:38065
msgid ""
"where @var{command} should be suitably quoted.  If your theme is ever "
"disabled or replaced by another, @var{command} is executed with @t{eval}.  "
"You may declare more than one such cleanup hook."
msgstr ""

#. type: item
#: zsh.texi:38066
#, no-wrap
msgid "Define preview"
msgstr ""

#. type: table
#: zsh.texi:38071
msgid ""
"Define or autoload a function @t{prompt_}@var{name}@t{_preview} to display a "
"simulated version of your prompt.  A simple default previewer is defined by "
"@t{promptinit} for themes that do not define their own.  This preview "
"function is called by `@t{prompt -p}'."
msgstr ""

#. type: item
#: zsh.texi:38072
#, no-wrap
msgid "Provide help"
msgstr ""

#. type: table
#: zsh.texi:38076
msgid ""
"Define or autoload a function @t{prompt_}@var{name}@t{_help} to display "
"documentation or help text for your theme.  This help function is called by "
"`@t{prompt -h}'."
msgstr ""

#. type: node
#: zsh.texi:38080 zsh.texi:39808 zsh.texi:39810 zsh.texi:39908
#, no-wrap
msgid "Exception Handling"
msgstr ""

#. type: subsection
#: zsh.texi:38087
#, no-wrap
msgid "Widgets"
msgstr ""

#. type: Plain text
#: zsh.texi:38094
msgid ""
"These functions all implement user-defined ZLE widgets (see @ref{Zsh Line "
"Editor}) which can be bound to keystrokes in interactive shells.  To use "
"them, your @t{.zshrc} should contain lines of the form"
msgstr ""

#. type: example
#: zsh.texi:38099
#, no-wrap
msgid ""
"autoload @var{function}\n"
"zle -N @var{function}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:38104
msgid ""
"followed by an appropriate @t{bindkey} command to associate the function "
"with a key sequence.  Suggested bindings are described below."
msgstr ""

#. type: item
#: zsh.texi:38107
#, no-wrap
msgid "bash-style word functions"
msgstr ""

#. type: table
#: zsh.texi:38112
msgid ""
"If you are looking for functions to implement moving over and editing words "
"in the manner of bash, where only alphanumeric characters are considered "
"word characters, you can use the functions described in the next section.  "
"The following is sufficient:"
msgstr ""

#. type: example
#: zsh.texi:38117
#, no-wrap
msgid ""
"autoload -U select-word-style\n"
"select-word-style bash\n"
msgstr ""

#. type: tindex
#: zsh.texi:38121
#, no-wrap
msgid "forward-word-match"
msgstr ""

#. type: tindex
#: zsh.texi:38122
#, no-wrap
msgid "backward-word-match"
msgstr ""

#. type: tindex
#: zsh.texi:38123
#, no-wrap
msgid "kill-word-match"
msgstr ""

#. type: tindex
#: zsh.texi:38124
#, no-wrap
msgid "backward-kill-word-match"
msgstr ""

#. type: tindex
#: zsh.texi:38125
#, no-wrap
msgid "transpose-words-match"
msgstr ""

#. type: tindex
#: zsh.texi:38126
#, no-wrap
msgid "capitalize-word-match"
msgstr ""

#. type: tindex
#: zsh.texi:38127
#, no-wrap
msgid "up-case-word-match"
msgstr ""

#. type: tindex
#: zsh.texi:38128
#, no-wrap
msgid "down-case-word-match"
msgstr ""

#. type: t{#1}
#: zsh.texi:38129 zsh.texi:38555 zsh.texi:38556
#, no-wrap
msgid "delete-whole-word-match"
msgstr ""

#. type: tindex
#: zsh.texi:38130
#, no-wrap
msgid "select-word-match"
msgstr ""

#. type: tindex
#: zsh.texi:38131
#, no-wrap
msgid "select-word-style"
msgstr ""

#. type: tindex
#: zsh.texi:38132
#, no-wrap
msgid "match-word-context"
msgstr ""

#. type: item
#: zsh.texi:38134
#, no-wrap
msgid "@t{forward-word-match}, @t{backward-word-match}"
msgstr ""

#. type: itemx
#: zsh.texi:38135
#, no-wrap
msgid "@t{kill-word-match}, @t{backward-kill-word-match}"
msgstr ""

#. type: itemx
#: zsh.texi:38136
#, no-wrap
msgid "@t{transpose-words-match}, @t{capitalize-word-match}"
msgstr ""

#. type: itemx
#: zsh.texi:38137
#, no-wrap
msgid "@t{up-case-word-match}, @t{down-case-word-match}"
msgstr ""

#. type: itemx
#: zsh.texi:38138
#, no-wrap
msgid "@t{delete-whole-word-match}, @t{select-word-match}"
msgstr ""

#. type: itemx
#: zsh.texi:38139
#, no-wrap
msgid "@t{select-word-style}, @t{match-word-context}, @t{match-words-by-style}"
msgstr ""

#. type: table
#: zsh.texi:38147
msgid ""
"The first eight `@t{-match}' functions are drop-in replacements for the "
"builtin widgets without the suffix.  By default they behave in a similar "
"way.  However, by the use of styles and the function @t{select-word-style}, "
"the way words are matched can be altered. @t{select-word-match} is intended "
"to be used as a text object in vi mode but with custom word styles. For "
"comparison, the widgets described in @ref{Text Objects} use fixed "
"definitions of words, compatible with the @t{vim} editor."
msgstr ""

#. type: table
#: zsh.texi:38155
msgid ""
"The simplest way of configuring the functions is to use "
"@t{select-word-style}, which can either be called as a normal function with "
"the appropriate argument, or invoked as a user-defined widget that will "
"prompt for the first character of the word style to be used.  The first time "
"it is invoked, the first eight @t{-match} functions will automatically "
"replace the builtin versions, so they do not need to be loaded explicitly."
msgstr ""

#. type: table
#: zsh.texi:38159
msgid ""
"The word styles available are as follows.  Only the first character is "
"examined."
msgstr ""

#. type: t{#1}
#: zsh.texi:38162
#, no-wrap
msgid "bash"
msgstr ""

#. type: table
#: zsh.texi:38164
msgid "Word characters are alphanumeric characters only."
msgstr ""

#. type: t{#1}
#: zsh.texi:38165 zsh.texi:38210
#, no-wrap
msgid "normal"
msgstr ""

#. type: table
#: zsh.texi:38169
msgid ""
"As in normal shell operation: word characters are alphanumeric characters "
"plus any characters present in the string given by the parameter "
"@t{$WORDCHARS}."
msgstr ""

#. type: t{#1}
#: zsh.texi:38170 zsh.texi:38222
#, no-wrap
msgid "shell"
msgstr ""

#. type: table
#: zsh.texi:38173
msgid ""
"Words are complete shell command arguments, possibly including complete "
"quoted strings, or any tokens special to the shell."
msgstr ""

#. type: t{#1}
#: zsh.texi:38174 zsh.texi:38227
#, no-wrap
msgid "whitespace"
msgstr ""

#. type: table
#: zsh.texi:38176
msgid "Words are any set of characters delimited by whitespace."
msgstr ""

#. type: table
#: zsh.texi:38179
msgid "Restore the default settings; this is usually the same as `@t{normal}'."
msgstr ""

#. type: table
#: zsh.texi:38192
msgid ""
"All but `@t{default}' can be input as an upper case character, which has the "
"same effect but with subword matching turned on.  In this case, words with "
"upper case characters are treated specially: each separate run of upper case "
"characters, or an upper case character followed by any number of other "
"characters, is considered a word.  The style @t{subword-range} can supply an "
"alternative character range to the default `@t{[:upper:]}'; the value of the "
"style is treated as the contents of a `@t{[}@var{...}@t{]}' pattern (note "
"that the outer brackets should not be supplied, only those surrounding named "
"ranges)."
msgstr ""

#. type: table
#: zsh.texi:38203
msgid ""
"More control can be obtained using the @t{zstyle} command, as described in "
"@ref{The zsh/zutil Module}.  Each style is looked up in the context "
"@t{:zle:}@var{widget} where @var{widget} is the name of the user-defined "
"widget, not the name of the function implementing it, so in the case of the "
"definitions supplied by @t{select-word-style} the appropriate contexts are "
"@t{:zle:forward-word}, and so on.  The function @t{select-word-style} itself "
"always defines styles for the context `@t{:zle:*}' which can be overridden "
"by more specific (longer) patterns as well as explicit contexts."
msgstr ""

#. type: table
#: zsh.texi:38207
msgid ""
"The style @t{word-style} specifies the rules to use.  This may have the "
"following values."
msgstr ""

#. type: table
#: zsh.texi:38213
msgid ""
"Use the standard shell rules, i.e. alphanumerics and @t{$WORDCHARS}, unless "
"overridden by the styles @t{word-chars} or @t{word-class}."
msgstr ""

#. type: t{#1}
#: zsh.texi:38214
#, no-wrap
msgid "specified"
msgstr ""

#. type: table
#: zsh.texi:38217
msgid ""
"Similar to @t{normal}, but @emph{only} the specified characters, and not "
"also alphanumerics, are considered word characters."
msgstr ""

#. type: t{#1}
#: zsh.texi:38218
#, no-wrap
msgid "unspecified"
msgstr ""

#. type: table
#: zsh.texi:38221
msgid ""
"The negation of specified.  The given characters are those which will "
"@emph{not} be considered part of a word."
msgstr ""

#. type: table
#: zsh.texi:38226
msgid ""
"Words are obtained by using the syntactic rules for generating shell command "
"arguments.  In addition, special tokens which are never command arguments "
"such as `@t{()}' are also treated as words."
msgstr ""

#. type: table
#: zsh.texi:38229
msgid "Words are whitespace-delimited strings of characters."
msgstr ""

#. type: table
#: zsh.texi:38243
msgid ""
"The first three of those rules usually use @t{$WORDCHARS}, but the value in "
"the parameter can be overridden by the style @t{word-chars}, which works in "
"exactly the same way as @t{$WORDCHARS}.  In addition, the style "
"@t{word-class} uses character class syntax to group characters and takes "
"precedence over @t{word-chars} if both are set.  The @t{word-class} style "
"does not include the surrounding brackets of the character class; for "
"example, `@t{-:[:alnum:]}' is a valid @t{word-class} to include all "
"alphanumerics plus the characters `@t{-}' and `@t{:}'.  Be careful including "
"`@t{]}', `@t{^}' and `@t{-}' as these are special inside character classes."
msgstr ""

#. type: table
#: zsh.texi:38247
msgid ""
"@t{word-style} may also have `@t{-subword}' appended to its value to turn on "
"subword matching, as described above."
msgstr ""

#. type: table
#: zsh.texi:38254
msgid ""
"The style @t{skip-chars} is mostly useful for @t{transpose-words} and "
"similar functions.  If set, it gives a count of characters starting at the "
"cursor position which will not be considered part of the word and are "
"treated as space, regardless of what they actually are.  For example, if"
msgstr ""

#. type: example
#: zsh.texi:38258
#, no-wrap
msgid "zstyle ':zle:transpose-words' skip-chars 1\n"
msgstr ""

#. type: table
#: zsh.texi:38264
msgid ""
"has been set, and @t{transpose-words-match} is called with the cursor on the "
"@var{X} of @t{foo}@var{X}@t{bar}, where @var{X} can be any character, then "
"the resulting expression is @t{bar}@var{X}@t{foo}."
msgstr ""

#. type: table
#: zsh.texi:38277
msgid ""
"Finer grained control can be obtained by setting the style @t{word-context} "
"to an array of pairs of entries.  Each pair of entries consists of a "
"@var{pattern} and a @var{subcontext}.  The shell argument the cursor is on "
"is matched against each @var{pattern} in turn until one matches; if it does, "
"the context is extended by a colon and the corresponding @var{subcontext}.  "
"Note that the test is made against the original word on the line, with no "
"stripping of quotes.  Special handling is done between words: the current "
"context is examined and if it contains the string @t{between} the word is "
"set to a single space; else if it is contains the string @t{back}, the word "
"before the cursor is considered, else the word after cursor is "
"considered. Some examples are given below."
msgstr ""

#. type: table
#: zsh.texi:38288
msgid ""
"The style @t{skip-whitespace-first} is only used with the @t{forward-word} "
"widget.  If it is set to true, then @t{forward-word} skips any "
"non-word-characters, followed by any non-word-characters: this is similar to "
"the behaviour of other word-orientated widgets, and also that used by other "
"editors, however it differs from the standard zsh behaviour.  When using "
"@t{select-word-style} the widget is set in the context @t{:zle:*} to "
"@t{true} if the word style is @t{bash} and @t{false} otherwise.  It may be "
"overridden by setting it in the more specific context "
"@t{:zle:forward-word*}."
msgstr ""

#. type: table
#: zsh.texi:38297
msgid ""
"It is possible to create widgets with specific behaviour by defining a new "
"widget implemented by the appropriate generic function, then setting a style "
"for the context of the specific widget.  For example, the following defines "
"a widget @t{backward-kill-space-word} using @t{backward-kill-word-match}, "
"the generic widget implementing @t{backward-kill-word} behaviour, and "
"ensures that the new widget always implements space-delimited behaviour."
msgstr ""

#. type: example
#: zsh.texi:38302
#, no-wrap
msgid ""
"zle -N backward-kill-space-word backward-kill-word-match\n"
"zstyle :zle:backward-kill-space-word word-style space\n"
msgstr ""

#. type: table
#: zsh.texi:38306
msgid "The widget @t{backward-kill-space-word} can now be bound to a key."
msgstr ""

#. type: table
#: zsh.texi:38310
msgid ""
"Here are some further examples of use of the styles, actually taken from the "
"simplified interface in @t{select-word-style}:"
msgstr ""

#. type: example
#: zsh.texi:38315
#, no-wrap
msgid ""
"zstyle ':zle:*' word-style standard\n"
"zstyle ':zle:*' word-chars @value{dsq}\n"
msgstr ""

#. type: table
#: zsh.texi:38321
msgid ""
"Implements bash-style word handling for all widgets, i.e. only alphanumerics "
"are word characters; equivalent to setting the parameter @t{WORDCHARS} empty "
"for the given context."
msgstr ""

#. type: example
#: zsh.texi:38325
#, no-wrap
msgid "style ':zle:*kill*' word-style space\n"
msgstr ""

#. type: table
#: zsh.texi:38330
msgid ""
"Uses space-delimited words for widgets with the word `kill' in the name.  "
"Neither of the styles @t{word-chars} nor @t{word-class} is used in this "
"case."
msgstr ""

#. type: table
#: zsh.texi:38334
msgid ""
"Here are some examples of use of the @t{word-context} style to extend the "
"context."
msgstr ""

#. type: example
#: zsh.texi:38342
#, no-wrap
msgid ""
"zstyle ':zle:*' word-context \\ \n"
"       \"*/*\" filename \"[[:space:]]\" whitespace\n"
"zstyle ':zle:transpose-words:whitespace' word-style shell\n"
"zstyle ':zle:transpose-words:filename' word-style normal\n"
"zstyle ':zle:transpose-words:filename' word-chars @value{dsq}\n"
msgstr ""

#. type: table
#: zsh.texi:38351
msgid ""
"This provides two different ways of using @t{transpose-words} depending on "
"whether the cursor is on whitespace between words or on a filename, here any "
"word containing a @t{/}.  On whitespace, complete arguments as defined by "
"standard shell rules will be transposed.  In a filename, only alphanumerics "
"will be transposed.  Elsewhere, words will be transposed using the default "
"style for @t{:zle:transpose-words}."
msgstr ""

#. type: table
#: zsh.texi:38367
msgid ""
"The word matching and all the handling of @t{zstyle} settings is actually "
"implemented by the function @t{match-words-by-style}.  This can be used to "
"create new user-defined widgets.  The calling function should set the local "
"parameter @t{curcontext} to @t{:zle:}@var{widget}, create the local "
"parameter @t{matched_words} and call @t{match-words-by-style} with no "
"arguments.  On return, @t{matched_words} will be set to an array with the "
"elements: (1) the start of the line (2) the word before the cursor (3) any "
"non-word characters between that word and the cursor (4) any non-word "
"character at the cursor position plus any remaining non-word characters "
"before the next word, including all characters specified by the "
"@t{skip-chars} style, (5) the word at or following the cursor (6) any "
"non-word characters following that word (7) the remainder of the line.  Any "
"of the elements may be an empty string; the calling function should test for "
"this to decide whether it can perform its function."
msgstr ""

#. type: table
#: zsh.texi:38379
msgid ""
"If the variable @t{matched_words} is defined by the caller to "
"@t{match-words-by-style} as an associative array (@t{local -A "
"matched_words}), then the seven values given above should be retrieved from "
"it as elements named @t{start}, @t{word-before-cursor}, "
"@t{ws-before-cursor}, @t{ws-after-cursor}, @t{word-after-cursor}, "
"@t{ws-after-word}, and @t{end}.  In addition the element @t{is-word-start} "
"is 1 if the cursor is on the start of a word or subword, or on white space "
"before it (the cases can be distinguished by testing the @t{ws-after-cursor} "
"element) and 0 otherwise.  This form is recommended for future "
"compatibility."
msgstr ""

#. type: table
#: zsh.texi:38383
msgid ""
"It is possible to pass options with arguments to @t{match-words-by-style} to "
"override the use of styles.  The options are:"
msgstr ""

#. type: var{#1}
#: zsh.texi:38386
msgid "word-style"
msgstr ""

#. type: var{#1}
#: zsh.texi:38388
msgid "skip-chars"
msgstr ""

#. type: var{#1}
#: zsh.texi:38390
msgid "word-class"
msgstr ""

#. type: var{#1}
#: zsh.texi:38392
msgid "word-chars"
msgstr ""

#. type: var{#1}
#: zsh.texi:38394
msgid "subword-range"
msgstr ""

#. type: table
#: zsh.texi:38399
msgid ""
"For example, @t{match-words-by-style -w shell -c 0} may be used to extract "
"the command argument around the cursor."
msgstr ""

#. type: table
#: zsh.texi:38404
msgid ""
"The @t{word-context} style is implemented by the function "
"@t{match-word-context}.  This should not usually need to be called directly."
msgstr ""

#. type: t{#1}
#: zsh.texi:38405 zsh.texi:38406
#, no-wrap
msgid "bracketed-paste-magic"
msgstr ""

#. type: table
#: zsh.texi:38412
msgid ""
"The @t{bracketed-paste} widget (see @ref{Miscellaneous} in @ref{Standard "
"Widgets})  inserts pasted text literally into the editor buffer rather than "
"interpret it as keystrokes.  This disables some common usages where the "
"self-insert widget is replaced in order to accomplish some extra "
"processing.  An example is the contributed @t{url-quote-magic} widget "
"described below."
msgstr ""

#. type: table
#: zsh.texi:38417
msgid ""
"The @t{bracketed-paste-magic} widget is meant to replace @t{bracketed-paste} "
"with a wrapper that re-enables these self-insert actions, and other actions "
"as selected by zstyles.  Therefore this widget is installed with"
msgstr ""

#. type: example
#: zsh.texi:38421
#, no-wrap
msgid ""
"autoload -Uz bracketed-paste-magic\n"
"zle -N bracketed-paste bracketed-paste-magic\n"
msgstr ""

#. type: table
#: zsh.texi:38426
msgid ""
"Other than enabling some widget processing, @t{bracketed-paste-magic} "
"attempts to replicate @t{bracketed-paste} as faithfully as possible."
msgstr ""

#. type: table
#: zsh.texi:38430
msgid ""
"The following zstyles may be set to control processing of pasted text.  All "
"are looked up in the context `@t{:bracketed-paste-magic}'."
msgstr ""

#. type: t{#1}
#: zsh.texi:38433
#, no-wrap
msgid "active-widgets"
msgstr ""

#. type: table
#: zsh.texi:38438
msgid ""
"A list of patterns matching widget names that should be activated during the "
"paste.  All other key sequences are processed as self-insert-unmeta.  The "
"default is `@t{self-*}' so any user-defined widgets named with that prefix "
"are active along with the builtin self-insert."
msgstr ""

#. type: table
#: zsh.texi:38444
msgid ""
"If this style is not set (explicitly deleted) or set to an empty value, no "
"widgets are active and the pasted text is inserted literally.  If the value "
"includes `@t{undefined-key}', any unknown sequences are discarded from the "
"pasted text."
msgstr ""

#. type: t{#1}
#: zsh.texi:38445
#, no-wrap
msgid "inactive-keys"
msgstr ""

#. type: table
#: zsh.texi:38449
msgid ""
"The inverse of @t{active-widgets}, a list of key sequences that always use "
"@t{self-insert-unmeta} even when bound to an active widget.  Note that this "
"is a list of literal key sequences, not patterns."
msgstr ""

#. type: t{#1}
#: zsh.texi:38450
#, no-wrap
msgid "paste-init"
msgstr ""

#. type: table
#: zsh.texi:38458
msgid ""
"A list of function names, called in widget context (but not as widgets).  "
"The functions are called in order until one of them returns a non-zero "
"status.  The parameter `@t{PASTED}' contains the initial state of the pasted "
"text.  All other ZLE parameters such as `@t{BUFFER}' have their normal "
"values and side-effects, and full history is available, so for example "
"@t{paste-init} functions may move words from @t{BUFFER} into @t{PASTED} to "
"make those words visible to the @t{active-widgets}."
msgstr ""

#. type: table
#: zsh.texi:38462
msgid ""
"A non-zero return from a @t{paste-init} function does @emph{not} prevent the "
"paste itself from proceeding."
msgstr ""

#. type: table
#: zsh.texi:38466
msgid ""
"Loading @t{bracketed-paste-magic} defines @t{backward-extend-paste}, a "
"helper function for use in @t{paste-init}."
msgstr ""

#. type: example
#: zsh.texi:38471
#, no-wrap
msgid ""
"zstyle :bracketed-paste-magic paste-init \\ \n"
"       backward-extend-paste\n"
msgstr ""

#. type: table
#: zsh.texi:38478
msgid ""
"When a paste would insert into the middle of a word or append text to a word "
"already on the line, @t{backward-extend-paste} moves the prefix from "
"@t{LBUFFER} into @t{PASTED} so that the @t{active-widgets} see the full word "
"so far.  This may be useful with @t{url-quote-magic}."
msgstr ""

#. type: t{#1}
#: zsh.texi:38479
#, no-wrap
msgid "paste-finish"
msgstr ""

#. type: table
#: zsh.texi:38484
msgid ""
"Another list of function names called in order until one returns non-zero.  "
"These functions are called @emph{after} the pasted text has been processed "
"by the @t{active-widgets}, but @emph{before} it is inserted into "
"`@t{BUFFER}'.  ZLE parameters have their normal values and side-effects."
msgstr ""

#. type: table
#: zsh.texi:38488
msgid ""
"A non-zero return from a @t{paste-finish} function does @emph{not} prevent "
"the paste itself from proceeding."
msgstr ""

#. type: table
#: zsh.texi:38492
msgid ""
"Loading @t{bracketed-paste-magic} also defines @t{quote-paste}, a helper "
"function for use in @t{paste-finish}."
msgstr ""

#. type: example
#: zsh.texi:38499
#, no-wrap
msgid ""
"zstyle :bracketed-paste-magic paste-finish \\ \n"
"       quote-paste\n"
"zstyle :bracketed-paste-magic:finish quote-style \\ \n"
"       qqq\n"
msgstr ""

#. type: table
#: zsh.texi:38505
msgid ""
"When the pasted text is inserted into @t{BUFFER}, it is quoted per the "
"@t{quote-style} value.  To forcibly turn off the built-in numeric prefix "
"quoting of @t{bracketed-paste}, use:"
msgstr ""

#. type: example
#: zsh.texi:38510
#, no-wrap
msgid ""
"zstyle :bracketed-paste-magic:finish quote-style \\ \n"
"       none\n"
msgstr ""

#. type: table
#: zsh.texi:38520
msgid ""
"@emph{Important:} During @t{active-widgets} processing of the paste (after "
"@t{paste-init} and before @t{paste-finish}), @t{BUFFER} starts empty and "
"history is restricted, so cursor motions, etc., may not pass outside of the "
"pasted content.  Text assigned to @t{BUFFER} by the active widgets is copied "
"back into @t{PASTED} before @t{paste-finish}."
msgstr ""

#. type: t{#1}
#: zsh.texi:38521 zsh.texi:38522
#, no-wrap
msgid "copy-earlier-word"
msgstr ""

#. type: table
#: zsh.texi:38528
msgid ""
"This widget works like a combination of @t{insert-last-word} and "
"@t{copy-prev-shell-word}.  Repeated invocations of the widget retrieve "
"earlier words on the relevant history line.  With a numeric argument "
"@var{N}, insert the @var{N}th word from the history line; @var{N} may be "
"negative to count from the end of the line."
msgstr ""

#. type: table
#: zsh.texi:38533
msgid ""
"If @t{insert-last-word} has been used to retrieve the last word on a "
"previous history line, repeated invocations will replace that word with "
"earlier words from the same line."
msgstr ""

#. type: table
#: zsh.texi:38539
msgid ""
"Otherwise, the widget applies to words on the line currently being edited.  "
"The @t{widget} style can be set to the name of another widget that should be "
"called to retrieve words.  This widget must accept the same three arguments "
"as @t{insert-last-word}."
msgstr ""

#. type: t{#1}
#: zsh.texi:38540 zsh.texi:38541
#, no-wrap
msgid "cycle-completion-positions"
msgstr ""

#. type: table
#: zsh.texi:38549
msgid ""
"After inserting an unambiguous string into the command line, the new "
"function based completion system may know about multiple places in this "
"string where characters are missing or differ from at least one of the "
"possible matches.  It will then place the cursor on the position it "
"considers to be the most interesting one, i.e. the one where one can "
"disambiguate between as many matches as possible with as little typing as "
"possible."
msgstr ""

#. type: table
#: zsh.texi:38554
msgid ""
"This widget allows the cursor to be easily moved to the other interesting "
"spots.  It can be invoked repeatedly to cycle between all positions reported "
"by the completion system."
msgstr ""

#. type: table
#: zsh.texi:38560
msgid ""
"This is another function which works like the @t{-match} functions described "
"immediately above, i.e. using styles to decide the word boundaries.  "
"However, it is not a replacement for any existing function."
msgstr ""

#. type: table
#: zsh.texi:38567
msgid ""
"The basic behaviour is to delete the word around the cursor.  There is no "
"numeric argument handling; only the single word around the cursor is "
"considered.  If the widget contains the string @t{kill}, the removed text "
"will be placed in the cutbuffer for future yanking.  This can be obtained by "
"defining @t{kill-whole-word-match} as follows:"
msgstr ""

#. type: example
#: zsh.texi:38571
#, no-wrap
msgid "zle -N kill-whole-word-match delete-whole-word-match\n"
msgstr ""

#. type: table
#: zsh.texi:38575
msgid "and then binding the widget @t{kill-whole-word-match}."
msgstr ""

#. type: tindex
#: zsh.texi:38576
#, no-wrap
msgid "down-line-or-beginning-search"
msgstr ""

#. type: tindex
#: zsh.texi:38577
#, no-wrap
msgid "up-line-or-beginning-search"
msgstr ""

#. type: item
#: zsh.texi:38578
#, no-wrap
msgid "@t{up-line-or-beginning-search}, @t{down-line-or-beginning-search}"
msgstr ""

#. type: table
#: zsh.texi:38586
msgid ""
"These widgets are similar to the builtin functions @t{up-line-or-search} and "
"@t{down-line-or-search}: if in a multiline buffer they move up or down "
"within the buffer, otherwise they search for a history line matching the "
"start of the current line.  In this case, however, they search for a line "
"which matches the current line up to the current cursor position, in the "
"manner of @t{history-beginning-search-backward} and @t{-forward}, rather "
"than the first word on the line."
msgstr ""

#. type: table
#: zsh.texi:38590
msgid "Edit the command line using your visual editor, as in @t{ksh}."
msgstr ""

#. type: example
#: zsh.texi:38594
#, no-wrap
msgid "bindkey -M vicmd v edit-command-line\n"
msgstr ""

#. type: table
#: zsh.texi:38600
msgid ""
"The editor to be used can also be specified using the @t{editor} style in "
"the context of the widget. It is specified as an array of command and "
"arguments:"
msgstr ""

#. type: example
#: zsh.texi:38604
#, no-wrap
msgid "zstyle :zle:edit-command-line editor gvim -f\n"
msgstr ""

#. type: t{#1}
#: zsh.texi:38606 zsh.texi:38607
#, no-wrap
msgid "expand-absolute-path"
msgstr ""

#. type: table
#: zsh.texi:38611
msgid ""
"Expand the file name under the cursor to an absolute path, resolving "
"symbolic links.  Where possible, the initial path segment is turned into a "
"named directory or reference to a user's home directory."
msgstr ""

#. type: tindex
#: zsh.texi:38612
#, no-wrap
msgid "history-beginning-search-backward-end"
msgstr ""

#. type: tindex
#: zsh.texi:38613
#, no-wrap
msgid "history-beginning-search-forward-end"
msgstr ""

#. type: t{#1}
#: zsh.texi:38614
#, no-wrap
msgid "history-search-end"
msgstr ""

#. type: table
#: zsh.texi:38623
msgid ""
"This function implements the widgets "
"@t{history-beginning-search-backward-end} and "
"@t{history-beginning-search-forward-end}.  These commands work by first "
"calling the corresponding builtin widget (see @ref{History Control}) and "
"then moving the cursor to the end of the line.  The original cursor position "
"is remembered and restored before calling the builtin widget a second time, "
"so that the same search is repeated to look farther through the history."
msgstr ""

#. type: table
#: zsh.texi:38627
msgid ""
"Although you @t{autoload} only one function, the commands to use it are "
"slightly different because it implements two widgets."
msgstr ""

#. type: example
#: zsh.texi:38636
#, no-wrap
msgid ""
"zle -N history-beginning-search-backward-end \\ \n"
"       history-search-end\n"
"zle -N history-beginning-search-forward-end \\ \n"
"       history-search-end\n"
"bindkey '\\e^P' history-beginning-search-backward-end\n"
"bindkey '\\e^N' history-beginning-search-forward-end\n"
msgstr ""

#. type: t{#1}
#: zsh.texi:38638 zsh.texi:38639
#, no-wrap
msgid "history-beginning-search-menu"
msgstr ""

#. type: table
#: zsh.texi:38647
msgid ""
"This function implements yet another form of history searching.  The text "
"before the cursor is used to select lines from the history, as for "
"@t{history-beginning-search-backward} except that all matches are shown in a "
"numbered menu.  Typing the appropriate digits inserts the full history "
"line.  Note that leading zeroes must be typed (they are only shown when "
"necessary for removing ambiguity).  The entire history is searched; there is "
"no distinction between forwards and backwards."
msgstr ""

#. type: table
#: zsh.texi:38652
msgid ""
"With a numeric argument, the search is not anchored to the start of the "
"line; the string typed by the use may appear anywhere in the line in the "
"history."
msgstr ""

#. type: table
#: zsh.texi:38659
msgid ""
"If the widget name contains `@t{-end}' the cursor is moved to the end of the "
"line inserted.  If the widget name contains `@t{-space}' any space in the "
"text typed is treated as a wildcard and can match anything (hence a leading "
"space is equivalent to giving a numeric argument).  Both forms can be "
"combined, for example:"
msgstr ""

#. type: example
#: zsh.texi:38664
#, no-wrap
msgid ""
"zle -N history-beginning-search-menu-space-end \\ \n"
"       history-beginning-search-menu\n"
msgstr ""

#. type: t{#1}
#: zsh.texi:38666 zsh.texi:38669
#, no-wrap
msgid "history-pattern-search"
msgstr ""

#. type: tindex
#: zsh.texi:38667
#, no-wrap
msgid "history-pattern-search-backward"
msgstr ""

#. type: tindex
#: zsh.texi:38668
#, no-wrap
msgid "history-pattern-search-forward"
msgstr ""

#. type: table
#: zsh.texi:38677
msgid ""
"The function @t{history-pattern-search} implements widgets which prompt for "
"a pattern with which to search the history backwards or forwards.  The "
"pattern is in the usual zsh format, however the first character may be @t{^} "
"to anchor the search to the start of the line, and the last character may be "
"@t{$} to anchor the search to the end of the line.  If the search was not "
"anchored to the end of the line the cursor is positioned just after the "
"pattern found."
msgstr ""

#. type: table
#: zsh.texi:38681
msgid ""
"The commands to create bindable widgets are similar to those in the example "
"immediately above:"
msgstr ""

#. type: example
#: zsh.texi:38687
#, no-wrap
msgid ""
"autoload -U history-pattern-search\n"
"zle -N history-pattern-search-backward history-pattern-search\n"
"zle -N history-pattern-search-forward history-pattern-search\n"
msgstr ""

#. type: t{#1}
#: zsh.texi:38689 zsh.texi:38691
#, no-wrap
msgid "incarg"
msgstr ""

#. type: vindex
#: zsh.texi:38690
#, no-wrap
msgid "incarg, use of"
msgstr ""

#. type: table
#: zsh.texi:38698
msgid ""
"Typing the keystrokes for this widget with the cursor placed on or to the "
"left of an integer causes that integer to be incremented by one.  With a "
"numeric argument, the number is incremented by the amount of the argument "
"(decremented if the numeric argument is negative).  The shell parameter "
"@t{incarg} may be set to change the default increment to something other "
"than one."
msgstr ""

#. type: example
#: zsh.texi:38702
#, no-wrap
msgid "bindkey '^X+' incarg\n"
msgstr ""

#. type: t{#1}
#: zsh.texi:38704 zsh.texi:38705
#, no-wrap
msgid "incremental-complete-word"
msgstr ""

#. type: table
#: zsh.texi:38713
msgid ""
"This allows incremental completion of a word.  After starting this command, "
"a list of completion choices can be shown after every character you type, "
"which you can delete with @t{^H} or @t{DEL}.  Pressing return accepts the "
"completion so far and returns you to normal editing (that is, the command "
"line is @emph{not} immediately executed).  You can hit @t{TAB} to do normal "
"completion, @t{^G} to abort back to the state when you started, and @t{^D} "
"to list the matches."
msgstr ""

#. type: table
#: zsh.texi:38716
msgid "This works only with the new function based completion system."
msgstr ""

#. type: example
#: zsh.texi:38720
#, no-wrap
msgid "bindkey '^Xi' incremental-complete-word\n"
msgstr ""

#. type: table
#: zsh.texi:38732
msgid ""
"This function allows you to compose characters that don't appear on the "
"keyboard to be inserted into the command line.  The command is followed by "
"two keys corresponding to ASCII characters (there is no prompt).  For "
"accented characters, the two keys are a base character followed by a code "
"for the accent, while for other special characters the two characters "
"together form a mnemonic for the character to be inserted.  The "
"two-character codes are a subset of those given by RFC 1345 (see for example "
"@t{@uref{http://www.faqs.org/rfcs/rfc1345.html}})."
msgstr ""

#. type: table
#: zsh.texi:38740
msgid ""
"The function may optionally be followed by up to two characters which "
"replace one or both of the characters read from the keyboard; if both "
"characters are supplied, no input is read.  For example, "
"@t{insert-composed-char a:} can be used within a widget to insert an a with "
"umlaut into the command line.  This has the advantages over use of a literal "
"character that it is more portable."
msgstr ""

#. type: table
#: zsh.texi:38746
msgid ""
"For best results zsh should have been built with support for multibyte "
"characters (configured with @t{--enable-multibyte}); however, the function "
"works for the limited range of characters available in single-byte character "
"sets such as ISO-8859-1."
msgstr ""

#. type: table
#: zsh.texi:38753
msgid ""
"The character is converted into the local representation and inserted into "
"the command line at the cursor position.  (The conversion is done within the "
"shell, using whatever facilities the C library provides.)  With a numeric "
"argument, the character and its code are previewed in the status line"
msgstr ""

#. type: table
#: zsh.texi:38758
msgid ""
"The function may be run outside zle in which case it prints the character "
"(together with a newline) to standard output.  Input is still read from "
"keystrokes."
msgstr ""

#. type: table
#: zsh.texi:38762
msgid ""
"See @t{insert-unicode-char} for an alternative way of inserting Unicode "
"characters using their hexadecimal character number."
msgstr ""

#. type: table
#: zsh.texi:38769
msgid ""
"The set of accented characters is reasonably complete up to Unicode "
"character U+0180, the set of special characters less so.  However, it is "
"very sporadic from that point.  Adding new characters is easy, however; see "
"the function @t{define-composed-chars}.  Please send any additions to "
"@t{zsh-workers@@zsh.org}."
msgstr ""

#. type: table
#: zsh.texi:38773
msgid ""
"The codes for the second character when used to accent the first are as "
"follows.  Note that not every character can take every accent."
msgstr ""

#. type: table
#: zsh.texi:38776
msgid "Grave."
msgstr ""

#. type: t{#1}
#: zsh.texi:38776
#, no-wrap
msgid "'"
msgstr ""

#. type: table
#: zsh.texi:38778
msgid "Acute."
msgstr ""

#. type: t{#1}
#: zsh.texi:38778
#, no-wrap
msgid ">"
msgstr ""

#. type: table
#: zsh.texi:38780
msgid "Circumflex."
msgstr ""

#. type: table
#: zsh.texi:38783
msgid ""
"Tilde.  (This is not @t{~} as RFC 1345 does not assume that character is "
"present on the keyboard.)"
msgstr ""

#. type: table
#: zsh.texi:38785
msgid "Macron.  (A horizontal bar over the base character.)"
msgstr ""

#. type: t{#1}
#: zsh.texi:38785
#, no-wrap
msgid "("
msgstr ""

#. type: table
#: zsh.texi:38787
msgid "Breve.  (A shallow dish shape over the base character.)"
msgstr ""

#. type: table
#: zsh.texi:38790
msgid ""
"Dot above the base character, or in the case of @t{i} no dot, or in the case "
"of @t{L} and @t{l} a centered dot."
msgstr ""

#. type: table
#: zsh.texi:38792
msgid "Diaeresis (Umlaut)."
msgstr ""

#. type: table
#: zsh.texi:38794
msgid "Cedilla."
msgstr ""

#. type: table
#: zsh.texi:38796
msgid "Underline, however there are currently no underlined characters."
msgstr ""

#. type: table
#: zsh.texi:38798
msgid "Stroke through the base character."
msgstr ""

#. type: t{#1}
#: zsh.texi:38798
#, no-wrap
msgid "\""
msgstr ""

#. type: table
#: zsh.texi:38800
msgid "Double acute (only supported on a few letters)."
msgstr ""

#. type: t{#1}
#: zsh.texi:38800
#, no-wrap
msgid ";"
msgstr ""

#. type: table
#: zsh.texi:38803
msgid ""
"Ogonek.  (A little forward facing hook at the bottom right of the "
"character.)"
msgstr ""

#. type: t{#1}
#: zsh.texi:38803
#, no-wrap
msgid "<"
msgstr ""

#. type: table
#: zsh.texi:38805
msgid "Caron.  (A little v over the letter.)"
msgstr ""

#. type: table
#: zsh.texi:38807
msgid "Circle over the base character."
msgstr ""

#. type: table
#: zsh.texi:38809
msgid "Hook over the base character."
msgstr ""

#. type: t{#1}
#: zsh.texi:38809
#, no-wrap
msgid "9"
msgstr ""

#. type: table
#: zsh.texi:38811
msgid "Horn over the base character."
msgstr ""

#. type: table
#: zsh.texi:38820
msgid ""
"The most common characters from the Arabic, Cyrillic, Greek and Hebrew "
"alphabets are available; consult RFC 1345 for the appropriate sequences.  In "
"addition, a set of two letter codes not in RFC 1345 are available for the "
"double-width characters corresponding to ASCII characters from @t{!} to "
"@t{~} (0x21 to 0x7e) by preceding the character with @t{^}, for example "
"@t{^A} for a double-width @t{A}."
msgstr ""

#. type: table
#: zsh.texi:38823
msgid "The following other two-character sequences are understood."
msgstr ""

#. type: item
#: zsh.texi:38826
#, no-wrap
msgid "ASCII characters"
msgstr ""

#. type: table
#: zsh.texi:38828
msgid "These are already present on most keyboards:"
msgstr ""

#. type: t{#1}
#: zsh.texi:38829
#, no-wrap
msgid "<("
msgstr ""

#. type: table
#: zsh.texi:38831
msgid "Left square bracket"
msgstr ""

#. type: t{#1}
#: zsh.texi:38831
#, no-wrap
msgid "//"
msgstr ""

#. type: table
#: zsh.texi:38833
msgid "Backslash (solidus)"
msgstr ""

#. type: t{#1}
#: zsh.texi:38833
#, no-wrap
msgid ")>"
msgstr ""

#. type: table
#: zsh.texi:38835
msgid "Right square bracket"
msgstr ""

#. type: t{#1}
#: zsh.texi:38835
#, no-wrap
msgid "(!"
msgstr ""

#. type: table
#: zsh.texi:38837
msgid "Left brace (curly bracket)"
msgstr ""

#. type: table
#: zsh.texi:38839
msgid "Vertical bar (pipe symbol)"
msgstr ""

#. type: t{#1}
#: zsh.texi:38839
#, no-wrap
msgid "!)"
msgstr ""

#. type: table
#: zsh.texi:38841
msgid "Right brace (curly bracket)"
msgstr ""

#. type: t{#1}
#: zsh.texi:38841
#, no-wrap
msgid "'?"
msgstr ""

#. type: table
#: zsh.texi:38843
msgid "Tilde"
msgstr ""

#. type: item
#: zsh.texi:38845
#, no-wrap
msgid "Special letters"
msgstr ""

#. type: table
#: zsh.texi:38847
msgid "Characters found in various variants of the Latin alphabet:"
msgstr ""

#. type: t{#1}
#: zsh.texi:38848
#, no-wrap
msgid "ss"
msgstr ""

#. type: table
#: zsh.texi:38850
msgid "Eszett (scharfes S)"
msgstr ""

#. type: item
#: zsh.texi:38850
#, no-wrap
msgid "@t{D-}, @t{d-}"
msgstr ""

#. type: table
#: zsh.texi:38852
msgid "Eth"
msgstr ""

#. type: item
#: zsh.texi:38852
#, no-wrap
msgid "@t{TH}, @t{th}"
msgstr ""

#. type: table
#: zsh.texi:38854
msgid "Thorn"
msgstr ""

#. type: t{#1}
#: zsh.texi:38854
#, no-wrap
msgid "kk"
msgstr ""

#. type: table
#: zsh.texi:38856
msgid "Kra"
msgstr ""

#. type: table
#: zsh.texi:38856 zsh.texi:38858
#, no-wrap
msgid "'n"
msgstr ""

#. type: item
#: zsh.texi:38858
#, no-wrap
msgid "@t{NG}, @t{ng}"
msgstr ""

#. type: table
#: zsh.texi:38860
msgid "Ng"
msgstr ""

#. type: item
#: zsh.texi:38860
#, no-wrap
msgid "@t{OI}, @t{oi}"
msgstr ""

#. type: table
#: zsh.texi:38862
msgid "Oi"
msgstr ""

#. type: table
#: zsh.texi:38862 zsh.texi:38864
#, no-wrap
msgid "yr"
msgstr ""

#. type: t{#1}
#: zsh.texi:38864
#, no-wrap
msgid "ED"
msgstr ""

#. type: table
#: zsh.texi:38866
msgid "ezh"
msgstr ""

#. type: item
#: zsh.texi:38868
#, no-wrap
msgid "Currency symbols"
msgstr ""

#. type: t{#1}
#: zsh.texi:38870
#, no-wrap
msgid "Ct"
msgstr ""

#. type: table
#: zsh.texi:38872
msgid "Cent"
msgstr ""

#. type: t{#1}
#: zsh.texi:38872
#, no-wrap
msgid "Pd"
msgstr ""

#. type: table
#: zsh.texi:38874
msgid "Pound sterling (also lira and others)"
msgstr ""

#. type: t{#1}
#: zsh.texi:38874
#, no-wrap
msgid "Cu"
msgstr ""

#. type: table
#: zsh.texi:38876
msgid "Currency"
msgstr ""

#. type: t{#1}
#: zsh.texi:38876
#, no-wrap
msgid "Ye"
msgstr ""

#. type: table
#: zsh.texi:38878
msgid "Yen"
msgstr ""

#. type: t{#1}
#: zsh.texi:38878
#, no-wrap
msgid "Eu"
msgstr ""

#. type: table
#: zsh.texi:38880
msgid "Euro (N.B. not in RFC 1345)"
msgstr ""

#. type: item
#: zsh.texi:38882
#, no-wrap
msgid "Punctuation characters"
msgstr ""

#. type: table
#: zsh.texi:38886
msgid ""
"References to \"right\" quotes indicate the shape (like a 9 rather than 6)  "
"rather than their grammatical use.  (For example, a \"right\" low double "
"quote is used to open quotations in German.)"
msgstr ""

#. type: t{#1}
#: zsh.texi:38887
#, no-wrap
msgid "!I"
msgstr ""

#. type: table
#: zsh.texi:38889
msgid "Inverted exclamation mark"
msgstr ""

#. type: t{#1}
#: zsh.texi:38889
#, no-wrap
msgid "BB"
msgstr ""

#. type: table
#: zsh.texi:38891
msgid "Broken vertical bar"
msgstr ""

#. type: t{#1}
#: zsh.texi:38891
#, no-wrap
msgid "SE"
msgstr ""

#. type: table
#: zsh.texi:38893
msgid "Section"
msgstr ""

#. type: t{#1}
#: zsh.texi:38893
#, no-wrap
msgid "Co"
msgstr ""

#. type: table
#: zsh.texi:38895
msgid "Copyright"
msgstr ""

#. type: table
#: zsh.texi:38897
msgid "Spanish feminine ordinal indicator"
msgstr ""

#. type: t{#1}
#: zsh.texi:38897
#, no-wrap
msgid "<<"
msgstr ""

#. type: table
#: zsh.texi:38899
msgid "Left guillemet"
msgstr ""

#. type: table
#: zsh.texi:38901
msgid "Soft hyphen"
msgstr ""

#. type: t{#1}
#: zsh.texi:38901
#, no-wrap
msgid "Rg"
msgstr ""

#. type: table
#: zsh.texi:38903
msgid "Registered trade mark"
msgstr ""

#. type: t{#1}
#: zsh.texi:38903
#, no-wrap
msgid "PI"
msgstr ""

#. type: table
#: zsh.texi:38905
msgid "Pilcrow (paragraph)"
msgstr ""

#. type: table
#: zsh.texi:38907
msgid "Spanish masculine ordinal indicator"
msgstr ""

#. type: t{#1}
#: zsh.texi:38907
#, no-wrap
msgid ">>"
msgstr ""

#. type: table
#: zsh.texi:38909
msgid "Right guillemet"
msgstr ""

#. type: t{#1}
#: zsh.texi:38909
#, no-wrap
msgid "?I"
msgstr ""

#. type: table
#: zsh.texi:38911
msgid "Inverted question mark"
msgstr ""

#. type: table
#: zsh.texi:38913
msgid "Hyphen"
msgstr ""

#. type: table
#: zsh.texi:38915
msgid "En dash"
msgstr ""

#. type: table
#: zsh.texi:38917
msgid "Em dash"
msgstr ""

#. type: table
#: zsh.texi:38919
msgid "Horizontal bar"
msgstr ""

#. type: t{#1}
#: zsh.texi:38919
#, no-wrap
msgid ":3"
msgstr ""

#. type: table
#: zsh.texi:38921
msgid "Vertical ellipsis"
msgstr ""

#. type: t{#1}
#: zsh.texi:38921
#, no-wrap
msgid ".3"
msgstr ""

#. type: table
#: zsh.texi:38923
msgid "Horizontal midline ellipsis"
msgstr ""

#. type: t{#1}
#: zsh.texi:38923
#, no-wrap
msgid "!2"
msgstr ""

#. type: table
#: zsh.texi:38925
msgid "Double vertical line"
msgstr ""

#. type: t{#1}
#: zsh.texi:38925
#, no-wrap
msgid "=2"
msgstr ""

#. type: table
#: zsh.texi:38927
msgid "Double low line"
msgstr ""

#. type: t{#1}
#: zsh.texi:38927
#, no-wrap
msgid "'6"
msgstr ""

#. type: table
#: zsh.texi:38929
msgid "Left single quote"
msgstr ""

#. type: t{#1}
#: zsh.texi:38929
#, no-wrap
msgid "'9"
msgstr ""

#. type: table
#: zsh.texi:38931
msgid "Right single quote"
msgstr ""

#. type: t{#1}
#: zsh.texi:38931
#, no-wrap
msgid ".9"
msgstr ""

#. type: table
#: zsh.texi:38933
msgid "\"Right\" low quote"
msgstr ""

#. type: t{#1}
#: zsh.texi:38933
#, no-wrap
msgid "9'"
msgstr ""

#. type: table
#: zsh.texi:38935
msgid "Reversed \"right\" quote"
msgstr ""

#. type: t{#1}
#: zsh.texi:38935
#, no-wrap
msgid "\"6"
msgstr ""

#. type: table
#: zsh.texi:38937
msgid "Left double quote"
msgstr ""

#. type: t{#1}
#: zsh.texi:38937
#, no-wrap
msgid "\"9"
msgstr ""

#. type: table
#: zsh.texi:38939
msgid "Right double quote"
msgstr ""

#. type: t{#1}
#: zsh.texi:38939
#, no-wrap
msgid ":9"
msgstr ""

#. type: table
#: zsh.texi:38941
msgid "\"Right\" low double quote"
msgstr ""

#. type: t{#1}
#: zsh.texi:38941
#, no-wrap
msgid "9\""
msgstr ""

#. type: table
#: zsh.texi:38943
msgid "Reversed \"right\" double quote"
msgstr ""

#. type: t{#1}
#: zsh.texi:38943
#, no-wrap
msgid "/-"
msgstr ""

#. type: table
#: zsh.texi:38945
msgid "Dagger"
msgstr ""

#. type: t{#1}
#: zsh.texi:38945
#, no-wrap
msgid "/="
msgstr ""

#. type: table
#: zsh.texi:38947
msgid "Double dagger"
msgstr ""

#. type: item
#: zsh.texi:38949
#, no-wrap
msgid "Mathematical symbols"
msgstr ""

#. type: t{#1}
#: zsh.texi:38951
#, no-wrap
msgid "DG"
msgstr ""

#. type: table
#: zsh.texi:38953
msgid "Degree"
msgstr ""

#. type: item
#: zsh.texi:38953
#, no-wrap
msgid "@t{-2}, @t{+-}, @t{-+}"
msgstr ""

#. type: table
#: zsh.texi:38955
msgid "- sign, +/- sign, -/+ sign"
msgstr ""

#. type: t{#1}
#: zsh.texi:38955
#, no-wrap
msgid "2S"
msgstr ""

#. type: table
#: zsh.texi:38957
msgid "Superscript 2"
msgstr ""

#. type: t{#1}
#: zsh.texi:38957
#, no-wrap
msgid "3S"
msgstr ""

#. type: table
#: zsh.texi:38959
msgid "Superscript 3"
msgstr ""

#. type: t{#1}
#: zsh.texi:38959
#, no-wrap
msgid "1S"
msgstr ""

#. type: table
#: zsh.texi:38961
msgid "Superscript 1"
msgstr ""

#. type: t{#1}
#: zsh.texi:38961
#, no-wrap
msgid "My"
msgstr ""

#. type: table
#: zsh.texi:38963
msgid "Micro"
msgstr ""

#. type: t{#1}
#: zsh.texi:38963
#, no-wrap
msgid ".M"
msgstr ""

#. type: table
#: zsh.texi:38965
msgid "Middle dot"
msgstr ""

#. type: t{#1}
#: zsh.texi:38965
#, no-wrap
msgid "14"
msgstr ""

#. type: table
#: zsh.texi:38967
msgid "Quarter"
msgstr ""

#. type: t{#1}
#: zsh.texi:38967
#, no-wrap
msgid "12"
msgstr ""

#. type: table
#: zsh.texi:38969
msgid "Half"
msgstr ""

#. type: t{#1}
#: zsh.texi:38969
#, no-wrap
msgid "34"
msgstr ""

#. type: table
#: zsh.texi:38971
msgid "Three quarters"
msgstr ""

#. type: t{#1}
#: zsh.texi:38971
#, no-wrap
msgid "*X"
msgstr ""

#. type: table
#: zsh.texi:38973
msgid "Multiplication"
msgstr ""

#. type: t{#1}
#: zsh.texi:38973
#, no-wrap
msgid "-:"
msgstr ""

#. type: table
#: zsh.texi:38975
msgid "Division"
msgstr ""

#. type: t{#1}
#: zsh.texi:38975
#, no-wrap
msgid "%0"
msgstr ""

#. type: table
#: zsh.texi:38977
msgid "Per mille"
msgstr ""

#. type: item
#: zsh.texi:38977
#, no-wrap
msgid "@t{FA}, @t{TE}, @t{/0}"
msgstr ""

#. type: table
#: zsh.texi:38979
msgid "For all, there exists, empty set"
msgstr ""

#. type: item
#: zsh.texi:38979
#, no-wrap
msgid "@t{dP}, @t{DE}, @t{NB}"
msgstr ""

#. type: table
#: zsh.texi:38982
msgid "Partial derivative, delta (increment), del (nabla)"
msgstr ""

#. type: item
#: zsh.texi:38982
#, no-wrap
msgid "@t{(-}, @t{-)}"
msgstr ""

#. type: table
#: zsh.texi:38984
msgid "Element of, contains"
msgstr ""

#. type: item
#: zsh.texi:38984
#, no-wrap
msgid "@t{*P}, @t{+Z}"
msgstr ""

#. type: table
#: zsh.texi:38986
msgid "Product, sum"
msgstr ""

#. type: item
#: zsh.texi:38986
#, no-wrap
msgid "@t{*-}, @t{Ob}, @t{Sb}"
msgstr ""

#. type: table
#: zsh.texi:38988
msgid "Asterisk, ring, bullet"
msgstr ""

#. type: item
#: zsh.texi:38988
#, no-wrap
msgid "@t{RT}, @t{0(}, @t{00}"
msgstr ""

#. type: table
#: zsh.texi:38990
msgid "Root sign, proportional to, infinity"
msgstr ""

#. type: item
#: zsh.texi:38992
#, no-wrap
msgid "Other symbols"
msgstr ""

#. type: item
#: zsh.texi:38994
#, no-wrap
msgid "@t{cS}, @t{cH}, @t{cD}, @t{cC}"
msgstr ""

#. type: table
#: zsh.texi:38997
msgid "Card suits: spades, hearts, diamonds, clubs"
msgstr ""

#. type: item
#: zsh.texi:38997
#, no-wrap
msgid "@t{Md}, @t{M8}, @t{M2}, @t{Mb}, @t{Mx}, @t{MX}"
msgstr ""

#. type: table
#: zsh.texi:39001
msgid ""
"Musical notation: crotchet (quarter note), quaver (eighth note), semiquavers "
"(sixteenth notes), flag sign, natural sign, sharp sign"
msgstr ""

#. type: item
#: zsh.texi:39001
#, no-wrap
msgid "@t{Fm}, @t{Ml}"
msgstr ""

#. type: table
#: zsh.texi:39003
msgid "Female, male"
msgstr ""

#. type: item
#: zsh.texi:39005
#, no-wrap
msgid "Accents on their own"
msgstr ""

#. type: t{#1}
#: zsh.texi:39007
#, no-wrap
msgid "'>"
msgstr ""

#. type: table
#: zsh.texi:39009
msgid "Circumflex (same as caret, @t{^})"
msgstr ""

#. type: t{#1}
#: zsh.texi:39009
#, no-wrap
msgid "'!"
msgstr ""

#. type: table
#: zsh.texi:39011
msgid "Grave (same as backtick, @t{`})"
msgstr ""

#. type: t{#1}
#: zsh.texi:39011
#, no-wrap
msgid "',"
msgstr ""

#. type: table
#: zsh.texi:39013
msgid "Cedilla"
msgstr ""

#. type: t{#1}
#: zsh.texi:39013
#, no-wrap
msgid "':"
msgstr ""

#. type: table
#: zsh.texi:39015
msgid "Diaeresis (Umlaut)"
msgstr ""

#. type: t{#1}
#: zsh.texi:39015
#, no-wrap
msgid "'m"
msgstr ""

#. type: table
#: zsh.texi:39017
msgid "Macron"
msgstr ""

#. type: t{#1}
#: zsh.texi:39017
#, no-wrap
msgid "''"
msgstr ""

#. type: table
#: zsh.texi:39019
msgid "Acute"
msgstr ""

#. type: t{#1}
#: zsh.texi:39023 zsh.texi:39024
#, no-wrap
msgid "insert-files"
msgstr ""

#. type: table
#: zsh.texi:39028
msgid ""
"This function allows you type a file pattern, and see the results of the "
"expansion at each step.  When you hit return, all expansions are inserted "
"into the command line."
msgstr ""

#. type: example
#: zsh.texi:39032
#, no-wrap
msgid "bindkey '^Xf' insert-files\n"
msgstr ""

#. type: t{#1}
#: zsh.texi:39034 zsh.texi:39035
#, no-wrap
msgid "insert-unicode-char"
msgstr ""

#. type: table
#: zsh.texi:39041
msgid ""
"When first executed, the user inputs a set of hexadecimal digits.  This is "
"terminated with another call to @t{insert-unicode-char}.  The digits are "
"then turned into the corresponding Unicode character.  For example, if the "
"widget is bound to @t{^XU}, the character sequence `@t{^XU 4 c ^XU}' inserts "
"@t{L} (Unicode U+004c)."
msgstr ""

#. type: table
#: zsh.texi:39045
msgid ""
"See @t{insert-composed-char} for a way of inserting characters using a "
"two-character mnemonic."
msgstr ""

#. type: tindex
#: zsh.texi:39046
#, no-wrap
msgid "narrow-to-region"
msgstr ""

#. type: t{#1}
#: zsh.texi:39047 zsh.texi:39052
#, no-wrap
msgid "narrow-to-region-invisible"
msgstr ""

#. type: item
#: zsh.texi:39049
#, no-wrap
msgid "@t{narrow-to-region }[ @t{-p} @var{pre} ] [ @t{-P} @var{post} ]"
msgstr ""

#. type: itemx
#: zsh.texi:39050
#, no-wrap
msgid ""
"@t{@ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ }[ @t{-S} @var{statepm} | @t{-R} "
"@var{statepm} | [ @t{-l} @var{lbufvar} ] [ @t{-r} @var{rbufvar} ] ]"
msgstr ""

#. type: itemx
#: zsh.texi:39051
#, no-wrap
msgid "@t{@ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ }[ @t{-n} ] [ @var{start} @var{end} ]"
msgstr ""

#. type: table
#: zsh.texi:39055
msgid ""
"Narrow the editable portion of the buffer to the region between the cursor "
"and the mark, which may be in either order.  The region may not be empty."
msgstr ""

#. type: table
#: zsh.texi:39062
msgid ""
"@t{narrow-to-region} may be used as a widget or called as a function from a "
"user-defined widget; by default, the text outside the editable area remains "
"visible.  A @t{recursive-edit} is performed and the original widening status "
"is then restored.  Various options and arguments are available when it is "
"called as a function."
msgstr ""

#. type: table
#: zsh.texi:39067
msgid ""
"The options @t{-p} @var{pretext} and @t{-P} @var{posttext} may be used to "
"replace the text before and after the display for the duration of the "
"function; either or both may be an empty string."
msgstr ""

#. type: table
#: zsh.texi:39072
msgid ""
"If the option @t{-n} is also given, @var{pretext} or @var{posttext} will "
"only be inserted if there is text before or after the region respectively "
"which will be made invisible."
msgstr ""

#. type: table
#: zsh.texi:39076
msgid ""
"Two numeric arguments may be given which will be used instead of the cursor "
"and mark positions."
msgstr ""

#. type: table
#: zsh.texi:39091
msgid ""
"The option @t{-S} @var{statepm} is used to narrow according to the other "
"options while saving the original state in the parameter with name "
"@var{statepm}, while the option @t{-R} @var{statepm} is used to restore the "
"state from the parameter; note in both cases the @emph{name} of the "
"parameter is required.  In the second case, other options and arguments are "
"irrelevant.  When this method is used, no @t{recursive-edit} is performed; "
"the calling widget should call this function with the option @t{-S}, perform "
"its own editing on the command line or pass control to the user via `@t{zle "
"recursive-edit}', then call this function with the option @t{-R}.  The "
"argument @var{statepm} must be a suitable name for an ordinary parameter, "
"except that parameters beginning with the prefix @t{_ntr_} are reserved for "
"use within @t{narrow-to-region}.  Typically the parameter will be local to "
"the calling function."
msgstr ""

#. type: table
#: zsh.texi:39098
msgid ""
"The options @t{-l} @var{lbufvar} and @t{-r} @var{rbufvar} may be used to "
"specify parameters where the widget will store the resulting text from the "
"operation.  The parameter @var{lbufvar} will contain @t{LBUFFER} and "
"@var{rbufvar} will contain @t{RBUFFER}.  Neither of these two options may be "
"used with @t{-S} or @t{-R}."
msgstr ""

#. type: table
#: zsh.texi:39103
msgid ""
"@t{narrow-to-region-invisible} is a simple widget which calls "
"@t{narrow-to-region} with arguments which replace any text outside the "
"region with `@t{...}'.  It does not take any arguments."
msgstr ""

#. type: table
#: zsh.texi:39108
msgid ""
"The display is restored (and the widget returns) upon any zle command which "
"would usually cause the line to be accepted or aborted.  Hence an additional "
"such command is required to accept or abort the current line."
msgstr ""

#. type: table
#: zsh.texi:39112
msgid ""
"The return status of both widgets is zero if the line was accepted, else "
"non-zero."
msgstr ""

#. type: table
#: zsh.texi:39115
msgid "Here is a trivial example of a widget using this feature."
msgstr ""

#. type: example
#: zsh.texi:39121
#, no-wrap
msgid ""
"local state\n"
"narrow-to-region -p $'Editing restricted region\\n' \\ \n"
"  -P @value{dsq} -S state\n"
"zle recursive-edit\n"
"narrow-to-region -R state\n"
msgstr ""

#. type: t{#1}
#: zsh.texi:39123 zsh.texi:39125
#, no-wrap
msgid "predict-on"
msgstr ""

#. type: t{#1}
#: zsh.texi:39124 zsh.texi:39156
#, no-wrap
msgid "predict-off"
msgstr ""

#. type: table
#: zsh.texi:39135
msgid ""
"This set of functions implements predictive typing using history search.  "
"After @t{predict-on}, typing characters causes the editor to look backward "
"in the history for the first line beginning with what you have typed so "
"far.  After @t{predict-off}, editing returns to normal for the line found.  "
"In fact, you often don't even need to use @t{predict-off}, because if the "
"line doesn't match something in the history, adding a key performs standard "
"completion, and then inserts itself if no completions were found.  However, "
"editing in the middle of a line is liable to confuse prediction; see the "
"@t{toggle} style below."
msgstr ""

#. type: table
#: zsh.texi:39143
msgid ""
"With the function based completion system (which is needed for this), you "
"should be able to type @t{TAB} at almost any point to advance the cursor to "
"the next @value{dsbq}interesting@value{dsq} character position (usually the "
"end of the current word, but sometimes somewhere in the middle of the "
"word).  And of course as soon as the entire line is what you want, you can "
"accept with return, without needing to move the cursor to the end first."
msgstr ""

#. type: table
#: zsh.texi:39147
msgid ""
"The first time @t{predict-on} is used, it creates several additional widget "
"functions:"
msgstr ""

#. type: t{#1}
#: zsh.texi:39150
#, no-wrap
msgid "delete-backward-and-predict"
msgstr ""

#. type: table
#: zsh.texi:39153
msgid ""
"Replaces the @t{backward-delete-char} widget.  You do not need to bind this "
"yourself."
msgstr ""

#. type: t{#1}
#: zsh.texi:39153
#, no-wrap
msgid "insert-and-predict"
msgstr ""

#. type: table
#: zsh.texi:39156
msgid ""
"Implements predictive typing by replacing the @t{self-insert} widget.  You "
"do not need to bind this yourself."
msgstr ""

#. type: table
#: zsh.texi:39158
msgid "Turns off predictive typing."
msgstr ""

#. type: table
#: zsh.texi:39163
msgid ""
"Although you @t{autoload} only the @t{predict-on} function, it is necessary "
"to create a keybinding for @t{predict-off} as well."
msgstr ""

#. type: example
#: zsh.texi:39170
#, no-wrap
msgid ""
"zle -N predict-on\n"
"zle -N predict-off\n"
"bindkey '^X^Z' predict-on\n"
"bindkey '^Z' predict-off\n"
msgstr ""

#. type: t{#1}
#: zsh.texi:39172 zsh.texi:39173
#, no-wrap
msgid "read-from-minibuffer"
msgstr ""

#. type: table
#: zsh.texi:39183
msgid ""
"This is most useful when called as a function from inside a widget, but will "
"work correctly as a widget in its own right.  It prompts for a value below "
"the current command line; a value may be input using all of the standard zle "
"operations (and not merely the restricted set available when executing, for "
"example, @t{execute-named-cmd}).  The value is then returned to the calling "
"function in the parameter @t{$REPLY} and the editing buffer restored to its "
"previous state.  If the read was aborted by a keyboard break (typically "
"@t{^G}), the function returns status 1 and @t{$REPLY} is not set."
msgstr ""

#. type: table
#: zsh.texi:39191
msgid ""
"If one argument is supplied to the function it is taken as a prompt, "
"otherwise `@t{? }' is used.  If two arguments are supplied, they are the "
"prompt and the initial value of @t{$LBUFFER}, and if a third argument is "
"given it is the initial value of @t{$RBUFFER}.  This provides a default "
"value and starting cursor placement.  Upon return the entire buffer is the "
"value of @t{$REPLY}."
msgstr ""

#. type: table
#: zsh.texi:39199
msgid ""
"One option is available: `@t{-k} @var{num}' specifies that @var{num} "
"characters are to be read instead of a whole line.  The line editor is not "
"invoked recursively in this case, so depending on the terminal settings the "
"input may not be visible, and only the input keys are placed in @t{$REPLY}, "
"not the entire buffer.  Note that unlike the @t{read} builtin @var{num} must "
"be given; there is no default."
msgstr ""

#. type: table
#: zsh.texi:39204
msgid ""
"The name is a slight misnomer, as in fact the shell's own minibuffer is not "
"used.  Hence it is still possible to call @t{executed-named-cmd} and similar "
"functions while reading a value."
msgstr ""

#. type: tindex
#: zsh.texi:39205
#, no-wrap
msgid "replace-argument"
msgstr ""

#. type: tindex
#: zsh.texi:39206
#, no-wrap
msgid "replace-argument-edit"
msgstr ""

#. type: item
#: zsh.texi:39207
#, no-wrap
msgid "@t{replace-argument}, @t{replace-argument-edit}"
msgstr ""

#. type: table
#: zsh.texi:39212
msgid ""
"The function @t{replace-argument} can be used to replace a command line "
"argument in the current command line or, if the current command line is "
"empty, in the last command line executed (the new command line is not "
"executed).  Arguments are as delimited by standard shell syntax,"
msgstr ""

#. type: table
#: zsh.texi:39217
msgid ""
"If a numeric argument is given, that specifies the argument to be replaced.  "
"0 means the command name, as in history expansion.  A negative numeric "
"argument counts backward from the last word."
msgstr ""

#. type: table
#: zsh.texi:39221
msgid ""
"If no numeric argument is given, the current argument is replaced; this is "
"the last argument if the previous history line is being used."
msgstr ""

#. type: table
#: zsh.texi:39224
msgid "The function prompts for a replacement argument."
msgstr ""

#. type: table
#: zsh.texi:39227
msgid "If the widget contains the string @t{edit}, for example is defined as"
msgstr ""

#. type: example
#: zsh.texi:39231
#, no-wrap
msgid "zle -N replace-argument-edit replace-argument\n"
msgstr ""

#. type: table
#: zsh.texi:39237
msgid ""
"then the function presents the current value of the argument for editing, "
"otherwise the editing buffer for the replacement is initially empty."
msgstr ""

#. type: tindex
#: zsh.texi:39238
#, no-wrap
msgid "replace-string"
msgstr ""

#. type: tindex
#: zsh.texi:39239
#, no-wrap
msgid "replace-string-again"
msgstr ""

#. type: tindex
#: zsh.texi:39240
#, no-wrap
msgid "replace-pattern"
msgstr ""

#. type: itemx
#: zsh.texi:39242
#, no-wrap
msgid "@t{replace-string-again}, @t{replace-pattern-again}"
msgstr ""

#. type: table
#: zsh.texi:39247
msgid ""
"The function @t{replace-string} implements three widgets.  If defined under "
"the same name as the function, it prompts for two strings; the first "
"(source) string will be replaced by the second everywhere it occurs in the "
"line editing buffer."
msgstr ""

#. type: table
#: zsh.texi:39261
msgid ""
"If the widget name contains the word `@t{pattern}', for example by defining "
"the widget using the command `@t{zle -N replace-pattern replace-string}', "
"then the matching is performed using zsh patterns.  All zsh extended "
"globbing patterns can be used in the source string; note that unlike "
"filename generation the pattern does not need to match an entire word, nor "
"do glob qualifiers have any effect.  In addition, the replacement string can "
"contain parameter or command substitutions.  Furthermore, a `@t{&}' in the "
"replacement string will be replaced with the matched source string, and a "
"backquoted digit `@t{\\}@var{N}' will be replaced by the @var{N}th "
"parenthesised expression matched.  The form `@t{\\@{}@var{N}@t{@}}' may be "
"used to protect the digit from following digits."
msgstr ""

#. type: table
#: zsh.texi:39268
msgid ""
"If the widget instead contains the word `@t{regex}' (or `@t{regexp}'), then "
"the matching is performed using regular expressions, respecting the setting "
"of the option @t{RE_MATCH_PCRE} (see the description of the function "
"@t{regexp-replace} below).  The special replacement facilities described "
"above for pattern matching are available."
msgstr ""

#. type: table
#: zsh.texi:39276
msgid ""
"By default the previous source or replacement string will not be offered for "
"editing.  However, this feature can be activated by setting the style "
"@t{edit-previous} in the context @t{:zle:}@var{widget} (for example, "
"@t{:zle:replace-string}) to @t{true}.  In addition, a positive numeric "
"argument forces the previous values to be offered, a negative or zero "
"argument forces them not to be."
msgstr ""

#. type: table
#: zsh.texi:39284
msgid ""
"The function @t{replace-string-again} can be used to repeat the previous "
"replacement; no prompting is done.  As with @t{replace-string}, if the name "
"of the widget contains the word `@t{pattern}' or `@t{regex}', pattern or "
"regular expression matching is performed, else a literal string "
"replacement.  Note that the previous source and replacement text are the "
"same whether pattern, regular expression or string matching is used."
msgstr ""

#. type: table
#: zsh.texi:39290
msgid ""
"In addition, @t{replace-string} shows the previous replacement above the "
"prompt, so long as there was one during the current session; if the source "
"string is empty, that replacement will be repeated without the widget "
"prompting for a replacement string."
msgstr ""

#. type: table
#: zsh.texi:39293
msgid "For example, starting from the line:"
msgstr ""

#. type: example
#: zsh.texi:39297
#, no-wrap
msgid "print This line contains fan and fond\n"
msgstr ""

#. type: table
#: zsh.texi:39303
msgid ""
"and invoking @t{replace-pattern} with the source string `@t{f(?)n}' and the "
"replacement string `@t{c\\1r}' produces the not very useful line:"
msgstr ""

#. type: example
#: zsh.texi:39307
#, no-wrap
msgid "print This line contains car and cord\n"
msgstr ""

#. type: table
#: zsh.texi:39314
msgid ""
"The range of the replacement string can be limited by using the "
"@t{narrow-to-region-invisible} widget.  One limitation of the current "
"version is that @t{undo} will cycle through changes to the replacement and "
"source strings before undoing the replacement itself."
msgstr ""

#. type: t{#1}
#: zsh.texi:39315 zsh.texi:39316
#, no-wrap
msgid "send-invisible"
msgstr ""

#. type: table
#: zsh.texi:39326
msgid ""
"This is similar to read-from-minibuffer in that it may be called as a "
"function from a widget or as a widget of its own, and interactively reads "
"input from the keyboard.  However, the input being typed is concealed and a "
"string of asterisks (`@t{*}') is shown instead.  The value is saved in the "
"parameter @t{$INVISIBLE} to which a reference is inserted into the editing "
"buffer at the restored cursor position.  If the read was aborted by a "
"keyboard break (typically @t{^G}) or another escape from editing such as "
"@t{push-line}, @t{$INVISIBLE} is set to empty and the original buffer is "
"restored unchanged."
msgstr ""

#. type: table
#: zsh.texi:39334
msgid ""
"If one argument is supplied to the function it is taken as a prompt, "
"otherwise `@t{Non-echoed text: }' is used (as in emacs).  If a second and "
"third argument are supplied they are used to begin and end the reference to "
"@t{$INVISIBLE} that is inserted into the buffer.  The default is to open "
"with @t{$@{}, then @t{INVISIBLE}, and close with @t{@}}, but many other "
"effects are possible."
msgstr ""

#. type: t{#1}
#: zsh.texi:39335 zsh.texi:39336
#, no-wrap
msgid "smart-insert-last-word"
msgstr ""

#. type: table
#: zsh.texi:39338
msgid "This function may replace the @t{insert-last-word} widget, like so:"
msgstr ""

#. type: example
#: zsh.texi:39342
#, no-wrap
msgid "zle -N insert-last-word smart-insert-last-word\n"
msgstr ""

#. type: table
#: zsh.texi:39348
msgid ""
"With a numeric argument, or when passed command line arguments in a call "
"from another widget, it behaves like @t{insert-last-word}, except that words "
"in comments are ignored when @t{INTERACTIVE_COMMENTS} is set."
msgstr ""

#. type: table
#: zsh.texi:39357
msgid ""
"Otherwise, the rightmost @value{dsbq}interesting@value{dsq} word from the "
"previous command is found and inserted.  The default definition of "
"@value{dsbq}interesting@value{dsq} is that the word contains at least one "
"alphabetic character, slash, or backslash.  This definition may be "
"overridden by use of the @t{match} style.  The context used to look up the "
"style is the widget name, so usually the context is @t{:insert-last-word}.  "
"However, you can bind this function to different widgets to use different "
"patterns:"
msgstr ""

#. type: example
#: zsh.texi:39363
#, no-wrap
msgid ""
"zle -N insert-last-assignment smart-insert-last-word\n"
"zstyle :insert-last-assignment match '[[:alpha:]][][[:alnum:]]#=*'\n"
"bindkey '\\e=' insert-last-assignment\n"
msgstr ""

#. type: table
#: zsh.texi:39370
msgid ""
"If no interesting word is found and the @t{auto-previous} style is set to a "
"true value, the search continues upward through the history.  When "
"@t{auto-previous} is unset or false (the default), the widget must be "
"invoked repeatedly in order to search earlier history lines."
msgstr ""

#. type: t{#1}
#: zsh.texi:39371 zsh.texi:39372
#, no-wrap
msgid "transpose-lines"
msgstr ""

#. type: table
#: zsh.texi:39376
msgid ""
"Only useful with a multi-line editing buffer; the lines here are lines "
"within the current on-screen buffer, not history lines.  The effect is "
"similar to the function of the same name in Emacs."
msgstr ""

#. type: table
#: zsh.texi:39382
msgid ""
"Transpose the current line with the previous line and move the cursor to the "
"start of the next line.  Repeating this (which can be done by providing a "
"positive numeric argument) has the effect of moving the line above the "
"cursor down by a number of lines."
msgstr ""

#. type: table
#: zsh.texi:39389
msgid ""
"With a negative numeric argument, requires two lines above the cursor.  "
"These two lines are transposed and the cursor moved to the start of the "
"previous line.  Using a numeric argument less than -1 has the effect of "
"moving the line above the cursor up by minus that number of lines."
msgstr ""

#. type: t{#1}
#: zsh.texi:39390 zsh.texi:39391
#, no-wrap
msgid "url-quote-magic"
msgstr ""

#. type: table
#: zsh.texi:39397
msgid ""
"This widget replaces the built-in @t{self-insert} to make it easier to type "
"URLs as command line arguments.  As you type, the input character is "
"analyzed and, if it may need quoting, the current word is checked for a URI "
"scheme.  If one is found and the current word is not already in quotes, a "
"backslash is inserted before the input character."
msgstr ""

#. type: table
#: zsh.texi:39400
msgid "Styles to control quoting behavior:"
msgstr ""

#. type: t{#1}
#: zsh.texi:39403
#, no-wrap
msgid "url-metas"
msgstr ""

#. type: table
#: zsh.texi:39411
msgid ""
"This style is looked up in the context `@t{:url-quote-magic:}@var{scheme}' "
"(where @var{scheme} is that of the current URL, e.g. \"@t{ftp}\").  The "
"value is a string listing the characters to be treated as globbing "
"metacharacters when appearing in a URL using that scheme.  The default is to "
"quote all zsh extended globbing characters, excluding '@t{<}' and '@t{>}' "
"but including braces (as in brace expansion).  See also @t{url-seps}."
msgstr ""

#. type: t{#1}
#: zsh.texi:39412
#, no-wrap
msgid "url-seps"
msgstr ""

#. type: table
#: zsh.texi:39418
msgid ""
"Like @t{url-metas}, but lists characters that should be considered command "
"separators, redirections, history references, etc.  The default is to quote "
"the standard set of shell separators, excluding those that overlap with the "
"extended globbing characters, but including '@t{<}' and '@t{>}' and the "
"first character of @t{$histchars}."
msgstr ""

#. type: t{#1}
#: zsh.texi:39419
#, no-wrap
msgid "url-globbers"
msgstr ""

#. type: table
#: zsh.texi:39430
msgid ""
"This style is looked up in the context `@t{:url-quote-magic}'.  The values "
"form a list of command names that are expected to do their own globbing on "
"the URL string.  This implies that they are aliased to use the `@t{noglob}' "
"modifier.  When the first word on the line matches one of the values "
"@emph{and} the URL refers to a local file (see @t{url-local-schema}), only "
"the @t{url-seps} characters are quoted; the @t{url-metas} are left alone, "
"allowing them to affect command-line parsing, completion, etc.  The default "
"values are a literal `@t{noglob}' plus (when the @t{zsh/parameter} module is "
"available) any commands aliased to the helper function `@t{urlglobber}' or "
"its alias `@t{globurl}'."
msgstr ""

#. type: t{#1}
#: zsh.texi:39431
#, no-wrap
msgid "url-local-schema"
msgstr ""

#. type: table
#: zsh.texi:39438
msgid ""
"This style is always looked up in the context `@t{:urlglobber}', even though "
"it is used by both url-quote-magic and urlglobber.  The values form a list "
"of URI schema that should be treated as referring to local files by their "
"real local path names, as opposed to files which are specified relative to a "
"web-server-defined document root.  The defaults are \"@t{ftp}\" and "
"\"@t{file}\"."
msgstr ""

#. type: t{#1}
#: zsh.texi:39439
#, no-wrap
msgid "url-other-schema"
msgstr ""

#. type: table
#: zsh.texi:39447
msgid ""
"Like @t{url-local-schema}, but lists all other URI schema upon which "
"@t{urlglobber} and @t{url-quote-magic} should act.  If the URI on the "
"command line does not have a scheme appearing either in this list or in "
"@t{url-local-schema}, it is not magically quoted.  The default values are "
"\"@t{http}\", \"@t{https}\", and \"@t{ftp}\".  When a scheme appears both "
"here and in @t{url-local-schema}, it is quoted differently depending on "
"whether the command name appears in @t{url-globbers}."
msgstr ""

#. type: table
#: zsh.texi:39455
msgid ""
"Loading @t{url-quote-magic} also defines a helper function `@t{urlglobber}' "
"and aliases `@t{globurl}' to `@t{noglob urlglobber}'.  This function takes a "
"local URL apart, attempts to pattern-match the local file portion of the URL "
"path, and then puts the results back into URL format again."
msgstr ""

#. type: t{#1}
#: zsh.texi:39456 zsh.texi:39457
#, no-wrap
msgid "vi-pipe"
msgstr ""

#. type: table
#: zsh.texi:39463
msgid ""
"This function reads a movement command from the keyboard and then prompts "
"for an external command. The part of the buffer covered by the movement is "
"piped to the external command and then replaced by the command's output. If "
"the movement command is bound to vi-pipe, the current line is used."
msgstr ""

#. type: table
#: zsh.texi:39467
msgid ""
"The function serves as an example for reading a vi movement command from "
"within a user-defined widget."
msgstr ""

#. type: table
#: zsh.texi:39475
msgid ""
"This function is a drop-in replacement for the builtin widget "
"@t{which-command}.  It has enhanced behaviour, in that it correctly detects "
"whether or not the command word needs to be expanded as an alias; if so, it "
"continues tracing the command word from the expanded alias until it reaches "
"the command that will be executed."
msgstr ""

#. type: table
#: zsh.texi:39480
msgid ""
"The style @t{whence} is available in the context @t{:zle:$WIDGET}; this may "
"be set to an array to give the command and options that will be used to "
"investigate the command word found.  The default is @t{whence -c}."
msgstr ""

#. type: t{#1}
#: zsh.texi:39481 zsh.texi:39482
#, no-wrap
msgid "zcalc-auto-insert"
msgstr ""

#. type: table
#: zsh.texi:39493
msgid ""
"This function is useful together with the @t{zcalc} function described in "
"@ref{Mathematical Functions}.  It should be bound to a key representing a "
"binary operator such as `@t{+}', `@t{-}', `@t{*}' or `@t{/}'.  When running "
"in zcalc, if the key occurs at the start of the line or immediately "
"following an open parenthesis, the text @t{\"ans \"} is inserted before the "
"representation of the key itself.  This allows easy use of the answer from "
"the previous calculation in the current line.  The text to be inserted "
"before the symbol typed can be modified by setting the variable "
"@t{ZCALC_AUTO_INSERT_PREFIX}."
msgstr ""

#. type: table
#: zsh.texi:39497
msgid ""
"Hence, for example, typing `@t{+12}' followed by return adds 12 to the "
"previous result."
msgstr ""

#. type: table
#: zsh.texi:39501
msgid ""
"If zcalc is in RPN mode (@t{-r} option) the effect of this binding is "
"automatically suppressed as operators alone on a line are meaningful."
msgstr ""

#. type: table
#: zsh.texi:39504
msgid "When not in zcalc, the key simply inserts the symbol itself."
msgstr ""

#. type: Plain text
#: zsh.texi:39516
msgid ""
"These functions are useful in constructing widgets.  They should be loaded "
"with `@t{autoload -U} @var{function}' and called as indicated from "
"user-defined widgets."
msgstr ""

#. type: t{#1}
#: zsh.texi:39519 zsh.texi:39520
#, no-wrap
msgid "split-shell-arguments"
msgstr ""

#. type: table
#: zsh.texi:39530
msgid ""
"This function splits the line currently being edited into shell arguments "
"and whitespace.  The result is stored in the array @t{reply}.  The array "
"contains all the parts of the line in order, starting with any whitespace "
"before the first argument, and finishing with any whitespace after the last "
"argument.  Hence (so long as the option @t{KSH_ARRAYS} is not set)  "
"whitespace is given by odd indices in the array and arguments by even "
"indices.  Note that no stripping of quotes is done; joining together all the "
"elements of @t{reply} in order is guaranteed to produce the original line."
msgstr ""

#. type: table
#: zsh.texi:39536
msgid ""
"The parameter @t{REPLY} is set to the index of the word in @t{reply} which "
"contains the character after the cursor, where the first element has index "
"1.  The parameter @t{REPLY2} is set to the index of the character under the "
"cursor in that word, where the first character has index 1."
msgstr ""

#. type: table
#: zsh.texi:39540
msgid ""
"Hence @t{reply}, @t{REPLY} and @t{REPLY2} should all be made local to the "
"enclosing function."
msgstr ""

#. type: table
#: zsh.texi:39544
msgid ""
"See the function @t{modify-current-argument}, described below, for an "
"example of how to call this function."
msgstr ""

#. type: tindex
#: zsh.texi:39545
#, no-wrap
msgid "modify-current-argument"
msgstr ""

#. type: item
#: zsh.texi:39546
#, no-wrap
msgid "@t{modify-current-argument} [ @var{expr-using-}@t{$ARG} | @var{func} ]"
msgstr ""

#. type: table
#: zsh.texi:39550
msgid ""
"This function provides a simple method of allowing user-defined widgets to "
"modify the command line argument under the cursor (or immediately to the "
"left of the cursor if the cursor is between arguments)."
msgstr ""

#. type: table
#: zsh.texi:39556
msgid ""
"The argument can be an expression which when evaluated operates on the shell "
"parameter @t{ARG}, which will have been set to the command line argument "
"under the cursor.  The expression should be suitably quoted to prevent it "
"being evaluated too early."
msgstr ""

#. type: table
#: zsh.texi:39563
msgid ""
"Alternatively, if the argument does not contain the string @t{ARG}, it is "
"assumed to be a shell function, to which the current command line argument "
"is passed as the only argument.  The function should set the variable "
"@t{REPLY} to the new value for the command line argument.  If the function "
"returns non-zero status, so does the calling function."
msgstr ""

#. type: table
#: zsh.texi:39568
msgid ""
"For example, a user-defined widget containing the following code converts "
"the characters in the argument under the cursor into all upper case:"
msgstr ""

#. type: example
#: zsh.texi:39572
#, no-wrap
msgid "modify-current-argument '$@{(U)ARG@}'\n"
msgstr ""

#. type: table
#: zsh.texi:39578
msgid ""
"The following strips any quoting from the current word (whether backslashes "
"or one of the styles of quotes), and replaces it with single quoting "
"throughout:"
msgstr ""

#. type: example
#: zsh.texi:39582
#, no-wrap
msgid "modify-current-argument '$@{(qq)$@{(Q)ARG@}@}'\n"
msgstr ""

#. type: table
#: zsh.texi:39587
msgid ""
"The following performs directory expansion on the command line argument and "
"replaces it by the absolute path:"
msgstr ""

#. type: example
#: zsh.texi:39595
#, no-wrap
msgid ""
"expand-dir() @{\n"
"  REPLY=$@{~1@}\n"
"  REPLY=$@{REPLY:a@}\n"
"@}\n"
"modify-current-argument expand-dir\n"
msgstr ""

#. type: table
#: zsh.texi:39600
msgid ""
"In practice the function @t{expand-dir} would probably not be defined within "
"the widget where @t{modify-current-argument} is called."
msgstr ""

#. type: Plain text
#: zsh.texi:39613
msgid ""
"The behavior of several of the above widgets can be controlled by the use of "
"the @t{zstyle} mechanism.  In particular, widgets that interact with the "
"completion system pass along their context to any completions that they "
"invoke."
msgstr ""

#. type: kindex
#: zsh.texi:39616
#, no-wrap
msgid "break-keys, widget style"
msgstr ""

#. type: t{#1}
#: zsh.texi:39617
#, no-wrap
msgid "break-keys"
msgstr ""

#. type: table
#: zsh.texi:39624
msgid ""
"This style is used by the @t{incremental-complete-word} widget. Its value "
"should be a pattern, and all keys matching this pattern will cause the "
"widget to stop incremental completion without the key having any further "
"effect. Like all styles used directly by @t{incremental-complete-word}, this "
"style is looked up using the context `@t{:incremental}'."
msgstr ""

#. type: table
#: zsh.texi:39633
msgid ""
"The @t{incremental-complete-word} and @t{insert-and-predict} widgets set up "
"their top-level context name before calling completion.  This allows one to "
"define different sets of completer functions for normal completion and for "
"these widgets.  For example, to use completion, approximation and correction "
"for normal completion, completion and correction for incremental completion "
"and only completion for prediction one could use:"
msgstr ""

#. type: example
#: zsh.texi:39642
#, no-wrap
msgid ""
"zstyle ':completion:*' completer \\ \n"
"        _complete _correct _approximate\n"
"zstyle ':completion:incremental:*' completer \\ \n"
"        _complete _correct\n"
"zstyle ':completion:predict:*' completer \\ \n"
"        _complete\n"
msgstr ""

#. type: table
#: zsh.texi:39652
msgid ""
"It is a good idea to restrict the completers used in prediction, because "
"they may be automatically invoked as you type.  The @t{_list} and @t{_menu} "
"completers should never be used with prediction.  The @t{_approximate}, "
"@t{_correct}, @t{_expand}, and @t{_match} completers may be used, but be "
"aware that they may change characters anywhere in the word behind the "
"cursor, so you need to watch carefully that the result is what you intended."
msgstr ""

#. type: kindex
#: zsh.texi:39653
#, no-wrap
msgid "cursor, completion style"
msgstr ""

#. type: t{#1}
#: zsh.texi:39654
#, no-wrap
msgid "cursor"
msgstr ""

#. type: table
#: zsh.texi:39658
msgid ""
"The @t{insert-and-predict} widget uses this style, in the context "
"`@t{:predict}', to decide where to place the cursor after completion has "
"been tried.  Values are:"
msgstr ""

#. type: table
#: zsh.texi:39665
msgid ""
"The cursor is left where it was when completion finished, but only if it is "
"after a character equal to the one just inserted by the user.  If it is "
"after another character, this value is the same as `@t{key}'."
msgstr ""

#. type: t{#1}
#: zsh.texi:39666
#, no-wrap
msgid "key"
msgstr ""

#. type: table
#: zsh.texi:39674
msgid ""
"The cursor is left after the @var{n}th occurrence of the character just "
"inserted, where @var{n} is the number of times that character appeared in "
"the word before completion was attempted.  In short, this has the effect of "
"leaving the cursor after the character just typed even if the completion "
"code found out that no other characters need to be inserted at that "
"position."
msgstr ""

#. type: table
#: zsh.texi:39680
msgid ""
"Any other value for this style unconditionally leaves the cursor at the "
"position where the completion code left it."
msgstr ""

#. type: kindex
#: zsh.texi:39681
#, no-wrap
msgid "list, widget style"
msgstr ""

#. type: table
#: zsh.texi:39686
msgid ""
"When using the @t{incremental-complete-word} widget, this style says if the "
"matches should be listed on every key press (if they fit on the screen).  "
"Use the context prefix `@t{:completion:incremental}'."
msgstr ""

#. type: table
#: zsh.texi:39692
msgid ""
"The @t{insert-and-predict} widget uses this style to decide if the "
"completion should be shown even if there is only one possible completion.  "
"This is done if the value of this style is the string @t{always}.  In this "
"case the context is `@t{:predict}' (@emph{not} `@t{:completion:predict}')."
msgstr ""

#. type: kindex
#: zsh.texi:39693
#, no-wrap
msgid "match, widget style"
msgstr ""

#. type: table
#: zsh.texi:39700
msgid ""
"This style is used by @t{smart-insert-last-word} to provide a pattern (using "
"full @t{EXTENDED_GLOB} syntax) that matches an interesting word.  The "
"context is the name of the widget to which @t{smart-insert-last-word} is "
"bound (see above).  The default behavior of @t{smart-insert-last-word} is "
"equivalent to:"
msgstr ""

#. type: example
#: zsh.texi:39704
#, no-wrap
msgid "zstyle :insert-last-word match '*[[:alpha:]/\\\\]*'\n"
msgstr ""

#. type: table
#: zsh.texi:39708
msgid "However, you might want to include words that contain spaces:"
msgstr ""

#. type: example
#: zsh.texi:39712
#, no-wrap
msgid "zstyle :insert-last-word match '*[[:alpha:][:space:]/\\\\]*'\n"
msgstr ""

#. type: table
#: zsh.texi:39716
msgid "Or include numbers as long as the word is at least two characters long:"
msgstr ""

#. type: example
#: zsh.texi:39720
#, no-wrap
msgid "zstyle :insert-last-word match '*([[:digit:]]?|[[:alpha:]/\\\\])*'\n"
msgstr ""

#. type: table
#: zsh.texi:39724
msgid "The above example causes redirections like \"2>\" to be included."
msgstr ""

#. type: kindex
#: zsh.texi:39725
#, no-wrap
msgid "prompt, widget style"
msgstr ""

#. type: table
#: zsh.texi:39731
msgid ""
"The @t{incremental-complete-word} widget shows the value of this style in "
"the status line during incremental completion.  The string value may contain "
"any of the following substrings in the manner of the @t{PS1} and other "
"prompt parameters:"
msgstr ""

#. type: table
#: zsh.texi:39737
msgid ""
"Replaced by the name of the completer function that generated the matches "
"(without the leading underscore)."
msgstr ""

#. type: table
#: zsh.texi:39743
msgid ""
"When the @t{list} style is set, replaced by `@t{...}' if the list of matches "
"is too long to fit on the screen and with an empty string otherwise.  If the "
"@t{list} style is `false' or not set, `@t{%l}' is always removed."
msgstr ""

#. type: table
#: zsh.texi:39746
msgid "Replaced by the number of matches generated."
msgstr ""

#. type: table
#: zsh.texi:39752
msgid ""
"Replaced by `@t{-no match-}', `@t{-no prefix-}', or an empty string if there "
"is no completion matching the word on the line, if the matches have no "
"common prefix different from the word on the line, or if there is such a "
"common prefix, respectively."
msgstr ""

#. type: table
#: zsh.texi:39756
msgid ""
"Replaced by the unambiguous part of all matches, if there is any, and if it "
"is different from the word on the line."
msgstr ""

#. type: table
#: zsh.texi:39761
msgid "Like `@t{break-keys}', this uses the `@t{:incremental}' context."
msgstr ""

#. type: kindex
#: zsh.texi:39762
#, no-wrap
msgid "stop-keys, widget style"
msgstr ""

#. type: t{#1}
#: zsh.texi:39763
#, no-wrap
msgid "stop-keys"
msgstr ""

#. type: table
#: zsh.texi:39769
msgid ""
"This style is used by the @t{incremental-complete-word} widget.  Its value "
"is treated similarly to the one for the @t{break-keys} style (and uses the "
"same context: `@t{:incremental}').  However, in this case all keys matching "
"the pattern given as its value will stop incremental completion and will "
"then execute their usual function."
msgstr ""

#. type: kindex
#: zsh.texi:39770
#, no-wrap
msgid "toggle, widget style"
msgstr ""

#. type: t{#1}
#: zsh.texi:39771
#, no-wrap
msgid "toggle"
msgstr ""

#. type: table
#: zsh.texi:39779
msgid ""
"This boolean style is used by @t{predict-on} and its related widgets in the "
"context `@t{:predict}'.  If set to one of the standard `true' values, "
"predictive typing is automatically toggled off in situations where it is "
"unlikely to be useful, such as when editing a multi-line buffer or after "
"moving into the middle of a line and then deleting a character.  The default "
"is to leave prediction turned on until an explicit call to @t{predict-off}."
msgstr ""

#. type: kindex
#: zsh.texi:39780
#, no-wrap
msgid "verbose, widget style"
msgstr ""

#. type: table
#: zsh.texi:39787
msgid ""
"This boolean style is used by @t{predict-on} and its related widgets in the "
"context `@t{:predict}'.  If set to one of the standard `true' values, these "
"widgets display a message below the prompt when the predictive state is "
"toggled.  This is most useful in combination with the @t{toggle} style.  The "
"default does not display these messages."
msgstr ""

#. type: kindex
#: zsh.texi:39788
#, no-wrap
msgid "widget, widget style"
msgstr ""

#. type: t{#1}
#: zsh.texi:39789
#, no-wrap
msgid "widget"
msgstr ""

#. type: table
#: zsh.texi:39795
msgid ""
"This style is similar to the @t{command} style: For widget functions that "
"use @t{zle} to call other widgets, this style can sometimes be used to "
"override the widget which is called.  The context for this style is the name "
"of the calling widget (@emph{not} the name of the calling function, because "
"one function may be bound to multiple widget names)."
msgstr ""

#. type: example
#: zsh.texi:39799
#, no-wrap
msgid "zstyle :copy-earlier-word widget smart-insert-last-word\n"
msgstr ""

#. type: table
#: zsh.texi:39804
msgid ""
"Check the documentation for the calling widget or function to determine "
"whether the @t{widget} style is used."
msgstr ""

#. type: node
#: zsh.texi:39808 zsh.texi:39908 zsh.texi:39910 zsh.texi:40326
#, no-wrap
msgid "MIME Functions"
msgstr ""

#. type: Plain text
#: zsh.texi:39816
msgid ""
"Two functions are provided to enable zsh to provide exception handling in a "
"form that should be familiar from other languages."
msgstr ""

#. type: findex
#: zsh.texi:39819
#, no-wrap
msgid "throw"
msgstr ""

#. type: item
#: zsh.texi:39820
#, no-wrap
msgid "@t{throw} @var{exception}"
msgstr ""

#. type: table
#: zsh.texi:39827
msgid ""
"The function @t{throw} throws the named @var{exception}.  The name is an "
"arbitrary string and is only used by the @t{throw} and @t{catch} functions.  "
"An exception is for the most part treated the same as a shell error, i.e. an "
"unhandled exception will cause the shell to abort all processing in a "
"function or script and to return to the top level in an interactive shell."
msgstr ""

#. type: item
#: zsh.texi:39828
#, no-wrap
msgid "@t{catch} @var{exception-pattern}"
msgstr ""

#. type: table
#: zsh.texi:39840
msgid ""
"The function @t{catch} returns status zero if an exception was thrown and "
"the pattern @var{exception-pattern} matches its name.  Otherwise it returns "
"status 1.  @var{exception-pattern} is a standard shell pattern, respecting "
"the current setting of the @t{EXTENDED_GLOB} option.  An alias @t{catch} is "
"also defined to prevent the argument to the function from matching "
"filenames, so patterns may be used unquoted.  Note that as exceptions are "
"not fundamentally different from other shell errors it is possible to catch "
"shell errors by using an empty string as the exception name.  The shell "
"variable @t{CAUGHT} is set by @t{catch} to the name of the exception "
"caught.  It is possible to rethrow an exception by calling the @t{throw} "
"function again once an exception has been caught."
msgstr ""

#. type: findex
#: zsh.texi:39840
#, no-wrap
msgid "catch"
msgstr ""

#. type: Plain text
#: zsh.texi:39850
msgid ""
"The functions are designed to be used together with the @t{always} construct "
"described in @ref{Complex Commands}.  This is important as only this "
"construct provides the required support for exceptions.  A typical example "
"is as follows."
msgstr ""

#. type: example
#: zsh.texi:39867
#, no-wrap
msgid ""
"@{\n"
"  # \"try\" block\n"
"  # ... nested code here calls \"throw MyExcept\"\n"
"@} always @{\n"
"  # \"always\" block\n"
"  if catch MyExcept; then\n"
"    print \"Caught exception MyExcept\"\n"
"  elif catch @value{dsq}; then\n"
"    print \"Caught a shell error.  Propagating...\"\n"
"    throw @value{dsq}\n"
"  fi\n"
"  # Other exceptions are not handled but may be caught further\n"
"  # up the call stack.\n"
"@}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:39872
msgid "If all exceptions should be caught, the following idiom might be preferable."
msgstr ""

#. type: example
#: zsh.texi:39889
#, no-wrap
msgid ""
"@{\n"
"  # ... nested code here throws an exception\n"
"@} always @{\n"
"  if catch *; then\n"
"    case $CAUGHT in\n"
"      (MyExcept)\n"
"      print \"Caught my own exception\"\n"
"      ;;\n"
"      (*)\n"
"      print \"Caught some other exception\"\n"
"      ;;\n"
"    esac\n"
"  fi\n"
"@}\n"
msgstr ""

#. type: Plain text
#: zsh.texi:39897
msgid ""
"In common with exception handling in other languages, the exception may be "
"thrown by code deeply nested inside the `try' block.  However, note that it "
"must be thrown inside the current shell, not in a subshell forked for a "
"pipeline, parenthesised current-shell construct, or some form of command or "
"process substitution."
msgstr ""

#. type: Plain text
#: zsh.texi:39906
msgid ""
"The system internally uses the shell variable @t{EXCEPTION} to record the "
"name of the exception between throwing and catching.  One drawback of this "
"scheme is that if the exception is not handled the variable @t{EXCEPTION} "
"remains set and may be incorrectly recognised as the name of an exception if "
"a shell error subsequently occurs.  Adding @t{unset EXCEPTION} at the start "
"of the outermost layer of any code that uses exception handling will "
"eliminate this problem."
msgstr ""

#. type: node
#: zsh.texi:39908 zsh.texi:40326 zsh.texi:40328 zsh.texi:40615
#, no-wrap
msgid "Mathematical Functions"
msgstr ""

#. type: Plain text
#: zsh.texi:39917
msgid ""
"Three functions are available to provide handling of files recognised by "
"extension, for example to dispatch a file @t{text.ps} when executed as a "
"command to an appropriate viewer."
msgstr ""

#. type: findex
#: zsh.texi:39921
#, no-wrap
msgid "zsh-mime-handler"
msgstr ""

#. type: item
#: zsh.texi:39922
#, no-wrap
msgid "@t{zsh-mime-setup} [ @t{-fv} ] [ @t{-l} [ @var{suffix} ... ] ]"
msgstr ""

#. type: itemx
#: zsh.texi:39923
#, no-wrap
msgid "@t{zsh-mime-handler} [ @t{-l} ] @var{command argument} ..."
msgstr ""

#. type: table
#: zsh.texi:39929
msgid ""
"These two functions use the files @t{~/.mime.types} and @t{/etc/mime.types}, "
"which associate types and extensions, as well as @t{~/.mailcap} and "
"@t{/etc/mailcap} files, which associate types and the programs that handle "
"them.  These are provided on many systems with the Multimedia Internet Mail "
"Extensions."
msgstr ""

#. type: table
#: zsh.texi:39936
msgid ""
"To enable the system, the function @t{zsh-mime-setup} should be autoloaded "
"and run.  This allows files with extensions to be treated as executable; "
"such files be completed by the function completion system.  The function "
"@t{zsh-mime-handler} should not need to be called by the user."
msgstr ""

#. type: table
#: zsh.texi:39940
msgid ""
"The system works by setting up suffix aliases with `@t{alias -s}'.  Suffix "
"aliases already installed by the user will not be overwritten."
msgstr ""

#. type: table
#: zsh.texi:39945
msgid ""
"For suffixes defined in lower case, upper case variants will also "
"automatically be handled (e.g. @t{PDF} is automatically handled if handling "
"for the suffix @t{pdf} is defined), but not vice versa."
msgstr ""

#. type: table
#: zsh.texi:39951
msgid ""
"Repeated calls to @t{zsh-mime-setup} do not override the existing mapping "
"between suffixes and executable files unless the option @t{-f} is given.  "
"Note, however, that this does not override existing suffix aliases assigned "
"to handlers other than @t{zsh-mime-handler}."
msgstr ""

#. type: table
#: zsh.texi:39958
msgid ""
"Calling @t{zsh-mime-setup} with the option @t{-l} lists the existing "
"mappings without altering them.  Suffixes to list (which may contain pattern "
"characters that should be quoted from immediate interpretation on the "
"command line) may be given as additional arguments, otherwise all suffixes "
"are listed."
msgstr ""

#. type: table
#: zsh.texi:39962
msgid ""
"Calling @t{zsh-mime-setup} with the option @t{-v} causes verbose output to "
"be shown during the setup operation."
msgstr ""

#. type: table
#: zsh.texi:39967
msgid ""
"The system respects the @t{mailcap} flags @t{needsterminal} and "
"@t{copiousoutput}; see mailcap(4) or mailcap(5)  (the man page's name varies "
"across platforms)."
msgstr ""

#. type: table
#: zsh.texi:39976
msgid ""
"The functions use the following styles, which are defined with the "
"@t{zstyle} builtin command (@ref{The zsh/zutil Module}).  They should be "
"defined before @t{zsh-mime-setup} is run.  The contexts used all start with "
"@t{:mime:}, with additional components in some cases.  It is recommended "
"that a trailing @t{*} (suitably quoted) be appended to style patterns in "
"case the system is extended in future.  Some examples are given below."
msgstr ""

#. type: table
#: zsh.texi:39988
msgid ""
"For files that have multiple suffixes, e.g. @t{.pdf.gz}, where the context "
"includes the suffix it will be looked up starting with the longest possible "
"suffix until a match for the style is found.  For example, if @t{.pdf.gz} "
"produces a match for the handler, that will be used; otherwise the handler "
"for @t{.gz} will be used.  Note that, owing to the way suffix aliases work, "
"it is always required that there be a handler for the shortest possible "
"suffix, so in this example @t{.pdf.gz} can only be handled if @t{.gz} is "
"also handled (though not necessarily in the same way).  Alternatively, if no "
"handling for @t{.gz} on its own is needed, simply adding the command"
msgstr ""

#. type: example
#: zsh.texi:39992
#, no-wrap
msgid "alias -s gz=zsh-mime-handler\n"
msgstr ""

#. type: table
#: zsh.texi:39997
msgid ""
"to the initialisation code is sufficient; @t{.gz} will not be handled on its "
"own, but may be in combination with other suffixes."
msgstr ""

#. type: kindex
#: zsh.texi:40000
#, no-wrap
msgid "current-shell, MIME style"
msgstr ""

#. type: t{#1}
#: zsh.texi:40001
#, no-wrap
msgid "current-shell"
msgstr ""

#. type: table
#: zsh.texi:40006
msgid ""
"If this boolean style is true, the mailcap handler for the context in "
"question is run using the @t{eval} builtin instead of by starting a new "
"@t{sh} process.  This is more efficient, but may not work in the occasional "
"cases where the mailcap handler uses strict POSIX syntax."
msgstr ""

#. type: kindex
#: zsh.texi:40007
#, no-wrap
msgid "disown, MIME style"
msgstr ""

#. type: table
#: zsh.texi:40014
msgid ""
"If this boolean style is true, mailcap handlers started in the background "
"will be disowned, i.e. not subject to job control within the parent shell.  "
"Such handlers nearly always produce their own windows, so the only likely "
"harmful side effect of setting the style is that it becomes harder to kill "
"jobs from within the shell."
msgstr ""

#. type: kindex
#: zsh.texi:40015
#, no-wrap
msgid "execute-as-is, MIME style"
msgstr ""

#. type: t{#1}
#: zsh.texi:40016
#, no-wrap
msgid "execute-as-is"
msgstr ""

#. type: table
#: zsh.texi:40026
msgid ""
"This style gives a list of patterns to be matched against files passed for "
"execution with a handler program.  If the file matches the pattern, the "
"entire command line is executed in its current form, with no handler.  This "
"is useful for files which might have suffixes but nonetheless be executable "
"in their own right.  If the style is not set, the pattern @t{*(*) *(/)} is "
"used; hence executable files are executed directly and not passed to a "
"handler, and the option @t{AUTO_CD} may be used to change to directories "
"that happen to have MIME suffixes."
msgstr ""

#. type: kindex
#: zsh.texi:40027
#, no-wrap
msgid "execute-never, MIME style"
msgstr ""

#. type: t{#1}
#: zsh.texi:40028
#, no-wrap
msgid "execute-never"
msgstr ""

#. type: table
#: zsh.texi:40036
msgid ""
"This style is useful in combination with @t{execute-as-is}.  It is set to an "
"array of patterns corresponding to full paths to files that should never be "
"treated as executable, even if the file passed to the MIME handler matches "
"@t{execute-as-is}.  This is useful for file systems that don't handle "
"execute permission or that contain executables from another operating "
"system.  For example, if @t{/mnt/windows} is a Windows mount, then"
msgstr ""

#. type: example
#: zsh.texi:40040
#, no-wrap
msgid "zstyle ':mime:*' execute-never '/mnt/windows/*'\n"
msgstr ""

#. type: table
#: zsh.texi:40051
msgid ""
"will ensure that any files found in that area will be executed as MIME types "
"even if they are executable.  As this example shows, the complete file name "
"is matched against the pattern, regardless of how the file was passed to the "
"handler.  The file is resolved to a full path using the @t{:P} modifier "
"described in @ref{Modifiers}; this means that symbolic links are resolved "
"where possible, so that links into other file systems behave in the correct "
"fashion."
msgstr ""

#. type: kindex
#: zsh.texi:40052
#, no-wrap
msgid "file-path, MIME style"
msgstr ""

#. type: t{#1}
#: zsh.texi:40053
#, no-wrap
msgid "file-path"
msgstr ""

#. type: table
#: zsh.texi:40063
msgid ""
"Used if the style @t{find-file-in-path} is true for the same context.  Set "
"to an array of directories that are used for searching for the file to be "
"handled; the default is the command path given by the special parameter "
"@t{path}.  The shell option @t{PATH_DIRS} is respected; if that is set, the "
"appropriate path will be searched even if the name of the file to be handled "
"as it appears on the command line contains a `@t{/}'.  The full context is "
"@t{:mime:.}@var{suffix}@t{:}, as described for the style @t{handler}."
msgstr ""

#. type: kindex
#: zsh.texi:40064
#, no-wrap
msgid "find-file-in-path, MIME style"
msgstr ""

#. type: t{#1}
#: zsh.texi:40065
#, no-wrap
msgid "find-file-in-path"
msgstr ""

#. type: table
#: zsh.texi:40075
msgid ""
"If set, allows files whose names do not contain absolute paths to be "
"searched for in the command path or the path specified by the @t{file-path} "
"style.  If the file is not found in the path, it is looked for locally "
"(whether or not the current directory is in the path); if it is not found "
"locally, the handler will abort unless the @t{handle-nonexistent} style is "
"set.  Files found in the path are tested as described for the style "
"@t{execute-as-is}.  The full context is @t{:mime:.}@var{suffix}@t{:}, as "
"described for the style @t{handler}."
msgstr ""

#. type: kindex
#: zsh.texi:40076
#, no-wrap
msgid "flags, MIME style"
msgstr ""

#. type: t{#1}
#: zsh.texi:40077 zsh.texi:40129
#, no-wrap
msgid "flags"
msgstr ""

#. type: table
#: zsh.texi:40080
msgid ""
"Defines flags to go with a handler; the context is as for the @t{handler} "
"style, and the format is as for the flags in @t{mailcap}."
msgstr ""

#. type: kindex
#: zsh.texi:40081
#, no-wrap
msgid "handle-nonexistent, MIME style"
msgstr ""

#. type: t{#1}
#: zsh.texi:40082
#, no-wrap
msgid "handle-nonexistent"
msgstr ""

#. type: table
#: zsh.texi:40092
msgid ""
"By default, arguments that don't correspond to files are not passed to the "
"MIME handler in order to prevent it from intercepting commands found in the "
"path that happen to have suffixes.  This style may be set to an array of "
"extended glob patterns for arguments that will be passed to the handler even "
"if they don't exist.  If it is not explicitly set it defaults to "
"@t{[[:alpha:]]#:/*} which allows URLs to be passed to the MIME handler even "
"though they don't exist in that format in the file system.  The full context "
"is @t{:mime:.}@var{suffix}@t{:}, as described for the style @t{handler}."
msgstr ""

#. type: kindex
#: zsh.texi:40093
#, no-wrap
msgid "handler, MIME style"
msgstr ""

#. type: t{#1}
#: zsh.texi:40094
#, no-wrap
msgid "handler"
msgstr ""

#. type: table
#: zsh.texi:40103
msgid ""
"Specifies a handler for a suffix; the suffix is given by the context as "
"@t{:mime:.}@var{suffix}@t{:}, and the format of the handler is exactly that "
"in @t{mailcap}.  Note in particular the `@t{.}' and trailing colon to "
"distinguish this use of the context.  This overrides any handler specified "
"by the @t{mailcap} files.  If the handler requires a terminal, the @t{flags} "
"style should be set to include the word @t{needsterminal}, or if the output "
"is to be displayed through a pager (but not if the handler is itself a "
"pager), it should include @t{copiousoutput}."
msgstr ""

#. type: kindex
#: zsh.texi:40104
#, no-wrap
msgid "mailcap, MIME style"
msgstr ""

#. type: t{#1}
#: zsh.texi:40105
#, no-wrap
msgid "mailcap"
msgstr ""

#. type: table
#: zsh.texi:40110
msgid ""
"A list of files in the format of @t{~/.mailcap} and @t{/etc/mailcap} to be "
"read during setup, replacing the default list which consists of those two "
"files.  The context is @t{:mime:}.  A @t{+} in the list will be replaced by "
"the default files."
msgstr ""

#. type: kindex
#: zsh.texi:40111
#, no-wrap
msgid "mailcap-priorities, MIME style"
msgstr ""

#. type: t{#1}
#: zsh.texi:40112
#, no-wrap
msgid "mailcap-priorities"
msgstr ""

#. type: table
#: zsh.texi:40118
msgid ""
"This style is used to resolve multiple mailcap entries for the same MIME "
"type.  It consists of an array of the following elements, in descending "
"order of priority; later entries will be used if earlier entries are unable "
"to resolve the entries being compared.  If none of the tests resolve the "
"entries, the first entry encountered is retained."
msgstr ""

#. type: table
#: zsh.texi:40124
msgid ""
"The order of files (entries in the @t{mailcap} style) read.  Earlier files "
"are preferred.  (Note this does not resolve entries in the same file.)"
msgstr ""

#. type: t{#1}
#: zsh.texi:40125
#, no-wrap
msgid "priority"
msgstr ""

#. type: table
#: zsh.texi:40128
msgid ""
"The priority flag from the mailcap entry.  The priority is an integer from 0 "
"to 9 with the default value being 5."
msgstr ""

#. type: table
#: zsh.texi:40132
msgid ""
"The test given by the @t{mailcap-prio-flags} option is used to resolve "
"entries."
msgstr ""

#. type: t{#1}
#: zsh.texi:40133
#, no-wrap
msgid "place"
msgstr ""

#. type: table
#: zsh.texi:40136
msgid ""
"Later entries are preferred; as the entries are strictly ordered, this test "
"always succeeds."
msgstr ""

#. type: table
#: zsh.texi:40142
msgid ""
"Note that as this style is handled during initialisation, the context is "
"always @t{:mime:}, with no discrimination by suffix."
msgstr ""

#. type: kindex
#: zsh.texi:40143
#, no-wrap
msgid "mailcap-prio-flags, MIME style"
msgstr ""

#. type: t{#1}
#: zsh.texi:40144
#, no-wrap
msgid "mailcap-prio-flags"
msgstr ""

#. type: table
#: zsh.texi:40152
msgid ""
"This style is used when the keyword @t{flags} is encountered in the list of "
"tests specified by the @t{mailcap-priorities} style.  It should be set to a "
"list of patterns, each of which is tested against the flags specified in the "
"mailcap entry (in other words, the sets of assignments found with some "
"entries in the mailcap file).  Earlier patterns in the list are preferred to "
"later ones, and matched patterns are preferred to unmatched ones."
msgstr ""

#. type: kindex
#: zsh.texi:40153
#, no-wrap
msgid "mime-types, MIME style"
msgstr ""

#. type: t{#1}
#: zsh.texi:40154
#, no-wrap
msgid "mime-types"
msgstr ""

#. type: table
#: zsh.texi:40159
msgid ""
"A list of files in the format of @t{~/.mime.types} and @t{/etc/mime.types} "
"to be read during setup, replacing the default list which consists of those "
"two files.  The context is @t{:mime:}.  A @t{+} in the list will be replaced "
"by the default files."
msgstr ""

#. type: kindex
#: zsh.texi:40160
#, no-wrap
msgid "never-background, MIME style"
msgstr ""

#. type: t{#1}
#: zsh.texi:40161
#, no-wrap
msgid "never-background"
msgstr ""

#. type: table
#: zsh.texi:40166
msgid ""
"If this boolean style is set, the handler for the given context is always "
"run in the foreground, even if the flags provided in the mailcap entry "
"suggest it need not be (for example, it doesn't require a terminal)."
msgstr ""

#. type: kindex
#: zsh.texi:40167
#, no-wrap
msgid "pager, MIME style"
msgstr ""

#. type: t{#1}
#: zsh.texi:40168 zsh.texi:41248
#, no-wrap
msgid "pager"
msgstr ""

#. type: table
#: zsh.texi:40173
msgid ""
"If set, will be used instead of @t{$PAGER} or @t{more} to handle suffixes "
"where the @t{copiousoutput} flag is set.  The context is as for @t{handler}, "
"i.e. @t{:mime:.}@var{suffix}@t{:} for handling a file with the given "
"@var{suffix}."
msgstr ""

#. type: example
#: zsh.texi:40184
#, no-wrap
msgid ""
"zstyle ':mime:*' mailcap ~/.mailcap /usr/local/etc/mailcap\n"
"zstyle ':mime:.txt:' handler less %s\n"
"zstyle ':mime:.txt:' flags needsterminal\n"
msgstr ""

#. type: table
#: zsh.texi:40192
msgid ""
"When @t{zsh-mime-setup} is subsequently run, it will look for @t{mailcap} "
"entries in the two files given.  Files of suffix @t{.txt} will be handled by "
"running `@t{less} @var{file.txt}'.  The flag @t{needsterminal} is set to "
"show that this program must run attached to a terminal."
msgstr ""

#. type: table
#: zsh.texi:40197
msgid ""
"As there are several steps to dispatching a command, the following should be "
"checked if attempting to execute a file by extension @t{.}@var{ext} does not "
"have the expected effect."
msgstr ""

#. type: table
#: zsh.texi:40206
msgid ""
"The command `@t{alias -s} @var{ext}' should show `@t{ps=zsh-mime-handler}'.  "
"If it shows something else, another suffix alias was already installed and "
"was not overwritten.  If it shows nothing, no handler was installed: this is "
"most likely because no handler was found in the @t{.mime.types} and "
"@t{mailcap} combination for @t{.ext} files.  In that case, appropriate "
"handling should be added to @t{~/.mime.types} and @t{mailcap}."
msgstr ""

#. type: table
#: zsh.texi:40218
msgid ""
"If the extension is handled by @t{zsh-mime-handler} but the file is not "
"opened correctly, either the handler defined for the type is incorrect, or "
"the flags associated with it are in appropriate.  Running @t{zsh-mime-setup "
"-l} will show the handler and, if there are any, the flags.  A @t{%s} in the "
"handler is replaced by the file (suitably quoted if necessary).  Check that "
"the handler program listed lists and can be run in the way shown.  Also "
"check that the flags @t{needsterminal} or @t{copiousoutput} are set if the "
"handler needs to be run under a terminal; the second flag is used if the "
"output should be sent to a pager.  An example of a suitable @t{mailcap} "
"entry for such a program is:"
msgstr ""

#. type: example
#: zsh.texi:40222
#, no-wrap
msgid "text/html; /usr/bin/lynx '%s'; needsterminal\n"
msgstr ""

#. type: table
#: zsh.texi:40230
msgid ""
"Running `@t{zsh-mime-handler -l} @var{command line}' prints the command line "
"that would be executed, simplified to remove the effect of any flags, and "
"quoted so that the output can be run as a complete zsh command line.  This "
"is used by the completion system to decide how to complete after a file "
"handled by @t{zsh-mime-setup}."
msgstr ""

#. type: t{#1}
#: zsh.texi:40231 zsh.texi:40232
#, no-wrap
msgid "pick-web-browser"
msgstr ""

#. type: table
#: zsh.texi:40235
msgid ""
"This function is separate from the two MIME functions described above and "
"can be assigned directly to a suffix:"
msgstr ""

#. type: example
#: zsh.texi:40240
#, no-wrap
msgid ""
"autoload -U pick-web-browser\n"
"alias -s html=pick-web-browser\n"
msgstr ""

#. type: table
#: zsh.texi:40246
msgid ""
"It is provided as an intelligent front end to dispatch a web browser.  It "
"may be run as either a function or a shell script.  The status 255 is "
"returned if no browser could be started."
msgstr ""

#. type: table
#: zsh.texi:40249
msgid "Various styles are available to customize the choice of browsers:"
msgstr ""

#. type: t{#1}
#: zsh.texi:40252
#, no-wrap
msgid "browser-style"
msgstr ""

#. type: table
#: zsh.texi:40255
msgid ""
"The value of the style is an array giving preferences in decreasing order "
"for the type of browser to use.  The values of elements may be"
msgstr ""

#. type: t{#1}
#: zsh.texi:40258
#, no-wrap
msgid "running"
msgstr ""

#. type: table
#: zsh.texi:40266
msgid ""
"Use a GUI browser that is already running when an X Window display is "
"available.  The browsers listed in the @t{x-browsers} style are tried in "
"order until one is found; if it is, the file will be displayed in that "
"browser, so the user may need to check whether it has appeared.  If no "
"running browser is found, one is not started.  Browsers other than Firefox, "
"Opera and Konqueror are assumed to understand the Mozilla syntax for opening "
"a URL remotely."
msgstr ""

#. type: table
#: zsh.texi:40272
msgid ""
"Start a new GUI browser when an X Window display is available.  Search for "
"the availability of one of the browsers listed in the @t{x-browsers} style "
"and start the first one that is found.  No check is made for an already "
"running browser."
msgstr ""

#. type: t{#1}
#: zsh.texi:40273
#, no-wrap
msgid "tty"
msgstr ""

#. type: table
#: zsh.texi:40277
msgid ""
"Start a terminal-based browser.  Search for the availability of one of the "
"browsers listed in the @t{tty-browsers} style and start the first one that "
"is found."
msgstr ""

#. type: table
#: zsh.texi:40282
msgid "If the style is not set the default @t{running x tty} is used."
msgstr ""

#. type: t{#1}
#: zsh.texi:40283
#, no-wrap
msgid "x-browsers"
msgstr ""

#. type: table
#: zsh.texi:40290
msgid ""
"An array in decreasing order of preference of browsers to use when running "
"under the X Window System.  The array consists of the command name under "
"which to start the browser.  They are looked up in the context @t{:mime:} "
"(which may be extended in future, so appending `@t{*}' is recommended).  For "
"example,"
msgstr ""

#. type: example
#: zsh.texi:40294
#, no-wrap
msgid "zstyle ':mime:*' x-browsers opera konqueror firefox\n"
msgstr ""

#. type: table
#: zsh.texi:40301
msgid ""
"specifies that @t{pick-web-browser} should first look for a running instance "
"of Opera, Konqueror or Firefox, in that order, and if it fails to find any "
"should attempt to start Opera.  The default is @t{firefox mozilla netscape "
"opera konqueror}."
msgstr ""

#. type: t{#1}
#: zsh.texi:40302
#, no-wrap
msgid "tty-browsers"
msgstr ""

#. type: table
#: zsh.texi:40306
msgid ""
"An array similar to @t{x-browsers}, except that it gives browsers to use "
"when no X Window display is available.  The default is @t{elinks links "
"lynx}."
msgstr ""

#. type: table
#: zsh.texi:40320
msgid ""
"If it is set this style is used to pick the command used to open a page for "
"a browser.  The context is @t{:mime:browser:new:$browser:} to start a new "
"browser or @t{:mime:browser:running:$browser:} to open a URL in a browser "
"already running on the current X display, where @t{$browser} is the value "
"matched in the @t{x-browsers} or @t{tty-browsers} style.  The escape "
"sequence @t{%b} in the style's value will be replaced by the browser, while "
"@t{%u} will be replaced by the URL.  If the style is not set, the default "
"for all new instances is equivalent to @t{%b %u} and the defaults for using "
"running browsers are equivalent to the values @t{kfmclient openURL %u} for "
"Konqueror, @t{firefox -new-tab %u} for Firefox, @t{opera -newpage %u} for "
"Opera, and @t{%b -remote \"openUrl(%u)\"} for all others."
msgstr ""

#. type: node
#: zsh.texi:40326 zsh.texi:40615 zsh.texi:40617 zsh.texi:40673
#, no-wrap
msgid "User Configuration Functions"
msgstr ""

#. type: item
#: zsh.texi:40334
#, no-wrap
msgid "@t{zcalc} [ @t{-erf} ] [ @var{expression} ... ]"
msgstr ""

#. type: table
#: zsh.texi:40339
msgid ""
"A reasonably powerful calculator based on zsh's arithmetic evaluation "
"facility.  The syntax is similar to that of formulae in most programming "
"languages; see @ref{Arithmetic Evaluation} for details."
msgstr ""

#. type: table
#: zsh.texi:40348
msgid ""
"Non-programmers should note that, as in many other programming languages, "
"expressions involving only integers (whether constants without a `@t{.}', "
"variables containing such constants as strings, or variables declared to be "
"integers) are by default evaluated using integer arithmetic, which is not "
"how an ordinary desk calculator operates.  To force floating point "
"operation, pass the option @t{-f}; see further notes below."
msgstr ""

#. type: table
#: zsh.texi:40357
msgid ""
"If the file @t{~/.zcalcrc} exists it will be sourced inside the function "
"once it is set up and about to process the command line.  This can be used, "
"for example, to set shell options; @t{emulate -L zsh} and @t{setopt "
"extendedglob} are in effect at this point.  Any failure to source the file "
"if it exists is treated as fatal.  As with other initialisation files, the "
"directory @t{$ZDOTDIR} is used instead of @t{$HOME} if it is set."
msgstr ""

#. type: table
#: zsh.texi:40364
msgid ""
"The mathematical library @t{zsh/mathfunc} will be loaded if it is available; "
"see @ref{The zsh/mathfunc Module}.  The mathematical functions correspond to "
"the raw system libraries, so trigonometric functions are evaluated using "
"radians, and so on."
msgstr ""

#. type: table
#: zsh.texi:40374
msgid ""
"Each line typed is evaluated as an expression.  The prompt shows a number, "
"which corresponds to a positional parameter where the result of that "
"calculation is stored.  For example, the result of the calculation on the "
"line preceded by `@t{4> }' is available as @t{$4}.  The last value "
"calculated is available as @t{ans}.  Full command line editing, including "
"the history of previous calculations, is available; the history is saved in "
"the file @t{~/.zcalc_history}.  To exit, enter a blank line or type `@t{:q}' "
"on its own (`@t{q}' is allowed for historical compatibility)."
msgstr ""

#. type: table
#: zsh.texi:40382
msgid ""
"A line ending with a single backslash is treated in the same fashion as it "
"is in command line editing: the backslash is removed, the function prompts "
"for more input (the prompt is preceded by `@t{...}' to indicate this), and "
"the lines are combined into one to get the final result.  In addition, if "
"the input so far contains more open than close parentheses @t{zcalc} will "
"prompt for more input."
msgstr ""

#. type: table
#: zsh.texi:40387
msgid ""
"If arguments are given to @t{zcalc} on start up, they are used to prime the "
"first few positional parameters.  A visual indication of this is given when "
"the calculator starts."
msgstr ""

#. type: table
#: zsh.texi:40398
msgid ""
"The constants @t{PI} (3.14159...) and @t{E} (2.71828...) are provided.  "
"Parameter assignment is possible, but note that all parameters will be put "
"into the global namespace unless the @t{:local} special command is used.  "
"The function creates local variables whose names start with @t{_}, so users "
"should avoid doing so.  The variables @t{ans} (the last answer) and "
"@t{stack} (the stack in RPN mode) may be referred to directly; @t{stack} is "
"an array but elements of it are numeric.  Various other special variables "
"are used locally with their standard meaning, for example @t{compcontext}, "
"@t{match}, @t{mbegin}, @t{mend}, @t{psvar}."
msgstr ""

#. type: table
#: zsh.texi:40403
msgid ""
"The output base can be initialised by passing the option `@t{-#}@var{base}', "
"for example `@t{zcalc -#16}' (the `@t{#}' may have to be quoted, depending "
"on the globbing options set)."
msgstr ""

#. type: table
#: zsh.texi:40408
msgid ""
"If the option `@t{-e}' is set, the function runs non-interactively: the "
"arguments are treated as expressions to be evaluated as if entered "
"interactively line by line."
msgstr ""

#. type: table
#: zsh.texi:40413
msgid ""
"If the option `@t{-f}' is set, all numbers are treated as floating point, "
"hence for example the expression `@t{3/4}' evaluates to 0.75 rather than 0.  "
"Options must appear in separate words."
msgstr ""

#. type: table
#: zsh.texi:40417
msgid ""
"If the option `@t{-r}' is set, RPN (Reverse Polish Notation) mode is "
"entered.  This has various additional properties:"
msgstr ""

#. type: item
#: zsh.texi:40418
#, no-wrap
msgid "Stack"
msgstr ""

#. type: table
#: zsh.texi:40421
msgid ""
"Evaluated values are maintained in a stack; this is contained in an array "
"named @t{stack} with the most recent value in @t{$@{stack[1]@}}."
msgstr ""

#. type: item
#: zsh.texi:40422
#, no-wrap
msgid "Operators and functions"
msgstr ""

#. type: table
#: zsh.texi:40429
msgid ""
"If the line entered matches an operator (@t{+}, @t{-}, @t{*}, @t{/}, @t{**}, "
"@t{^}, @t{|} or @t{&}) or a function supplied by the @t{zsh/mathfunc} "
"library, the bottom element or elements of the stack are popped to use as "
"the argument or arguments.  The higher elements of stack (least recent) are "
"used as earlier arguments.  The result is then pushed into "
"@t{$@{stack[1]@}}."
msgstr ""

#. type: item
#: zsh.texi:40430
#, no-wrap
msgid "Expressions"
msgstr ""

#. type: table
#: zsh.texi:40434
msgid ""
"Other expressions are evaluated normally, printed, and added to the stack as "
"numeric values.  The syntax within expressions on a single line is normal "
"shell arithmetic (not RPN)."
msgstr ""

#. type: item
#: zsh.texi:40435
#, no-wrap
msgid "Stack listing"
msgstr ""

#. type: table
#: zsh.texi:40441
msgid ""
"If an integer follows the option @t{-r} with no space, then on every "
"evaluation that many elements of the stack, where available, are printed "
"instead of just the most recent result.  Hence, for example, @t{zcalc -r4} "
"shows @t{$stack[4]} to @t{$stack[1]} each time results are printed."
msgstr ""

#. type: item
#: zsh.texi:40442
#, no-wrap
msgid "Duplication: @t{=}"
msgstr ""

#. type: table
#: zsh.texi:40445
msgid ""
"The pseudo-operator @t{=} causes the most recent element of the stack to be "
"duplicated onto the stack."
msgstr ""

#. type: t{#1}
#: zsh.texi:40446
#, no-wrap
msgid "pop"
msgstr ""

#. type: table
#: zsh.texi:40449
msgid ""
"The pseudo-function @t{pop} causes the most recent element of the stack to "
"be popped.  A `@t{>}' on its own has the same effect."
msgstr ""

#. type: item
#: zsh.texi:40450
#, no-wrap
msgid "@t{>}@var{ident}"
msgstr ""

#. type: table
#: zsh.texi:40455
msgid ""
"The expression @t{>} followed (with no space) by a shell identifier causes "
"the most recent element of the stack to be popped and assigned to the "
"variable with that name.  The variable is local to the @t{zcalc} function."
msgstr ""

#. type: item
#: zsh.texi:40456
#, no-wrap
msgid "@t{<}@var{ident}"
msgstr ""

#. type: table
#: zsh.texi:40462
msgid ""
"The expression @t{<} followed (with no space) by a shell identifier causes "
"the value of the variable with that name to be pushed onto the stack.  "
"@var{ident} may be an integer, in which case the previous result with that "
"number (as shown before the @t{>} in the standard @t{zcalc} prompt) is put "
"on the stack."
msgstr ""

#. type: item
#: zsh.texi:40463
#, no-wrap
msgid "Exchange: @t{xy}"
msgstr ""

#. type: table
#: zsh.texi:40466
msgid ""
"The pseudo-function @t{xy} causes the most recent two elements of the stack "
"to be exchanged.  `@t{<>}' has the same effect."
msgstr ""

#. type: table
#: zsh.texi:40475
msgid ""
"The prompt is configurable via the parameter @t{ZCALCPROMPT}, which "
"undergoes standard prompt expansion.  The index of the current entry is "
"stored locally in the first element of the array @t{psvar}, which can be "
"referred to in @t{ZCALCPROMPT} as `@t{%1v}'.  The default prompt is `@t{%1v> "
"}'."
msgstr ""

#. type: table
#: zsh.texi:40480
msgid ""
"The variable @t{ZCALC_ACTIVE} is set within the function and can be tested "
"by nested functions; it has the value @t{rpn} if RPN mode is active, else 1."
msgstr ""

#. type: table
#: zsh.texi:40485
msgid ""
"A few special commands are available; these are introduced by a colon.  For "
"backward compatibility, the colon may be omitted for certain commands.  "
"Completion is available if @t{compinit} has been run."
msgstr ""

#. type: table
#: zsh.texi:40489
msgid ""
"The output precision may be specified within zcalc by special commands "
"familiar from many calculators."
msgstr ""

#. type: t{#1}
#: zsh.texi:40490
#, no-wrap
msgid ":norm"
msgstr ""

#. type: table
#: zsh.texi:40493
msgid ""
"The default output format.  It corresponds to the printf @t{%g} "
"specification.  Typically this shows six decimal digits."
msgstr ""

#. type: item
#: zsh.texi:40494
#, no-wrap
msgid "@t{:sci} @var{digits}"
msgstr ""

#. type: table
#: zsh.texi:40498
msgid ""
"Scientific notation, corresponding to the printf @t{%g} output format with "
"the precision given by @var{digits}.  This produces either fixed point or "
"exponential notation depending on the value output."
msgstr ""

#. type: item
#: zsh.texi:40499
#, no-wrap
msgid "@t{:fix} @var{digits}"
msgstr ""

#. type: table
#: zsh.texi:40502
msgid ""
"Fixed point notation, corresponding to the printf @t{%f} output format with "
"the precision given by @var{digits}."
msgstr ""

#. type: item
#: zsh.texi:40503
#, no-wrap
msgid "@t{:eng} @var{digits}"
msgstr ""

#. type: table
#: zsh.texi:40506
msgid ""
"Exponential notation, corresponding to the printf @t{%E} output format with "
"the precision given by @var{digits}."
msgstr ""

#. type: t{#1}
#: zsh.texi:40507
#, no-wrap
msgid ":raw"
msgstr ""

#. type: table
#: zsh.texi:40511
msgid ""
"Raw output: this is the default form of the output from a math evaluation.  "
"This may show more precision than the number actually possesses."
msgstr ""

#. type: table
#: zsh.texi:40516
msgid "Other special commands:"
msgstr ""

#. type: item
#: zsh.texi:40517
#, no-wrap
msgid "@t{:!}@var{line...}"
msgstr ""

#. type: table
#: zsh.texi:40521
msgid ""
"Execute @var{line...} as a normal shell command line.  Note that it is "
"executed in the context of the function, i.e. with local variables.  Space "
"is optional after @t{:!}."
msgstr ""

#. type: item
#: zsh.texi:40522
#, no-wrap
msgid "@t{:local} @var{arg} ..."
msgstr ""

#. type: table
#: zsh.texi:40526
msgid ""
"Declare variables local to the function.  Other variables may be used, too, "
"but they will be taken from or put into the global scope."
msgstr ""

#. type: item
#: zsh.texi:40527
#, no-wrap
msgid "@t{:function} @var{name} [ @var{body} ]"
msgstr ""

#. type: table
#: zsh.texi:40532
msgid ""
"Define a mathematical function or (with no @var{body}) delete it.  "
"@t{:function} may be abbreviated to @t{:func} or simply @t{:f}.  The "
"@var{name} may contain the same characters as a shell function name.  The "
"function is defined using @t{zmathfuncdef}, see below."
msgstr ""

#. type: table
#: zsh.texi:40535
msgid "Note that @t{zcalc} takes care of all quoting.  Hence for example:"
msgstr ""

#. type: example
#: zsh.texi:40539
#, no-wrap
msgid ":f cube $1 * $1 * $1\n"
msgstr ""

#. type: table
#: zsh.texi:40549
msgid ""
"defines a function to cube the sole argument.  Functions so defined, or "
"indeed any functions defined directly or indirectly using @t{functions -M}, "
"are available to execute by typing only the name on the line in RPN mode; "
"this pops the appropriate number of arguments off the stack to pass to the "
"function, i.e. 1 in the case of the example @t{cube} function.  If there are "
"optional arguments only the mandatory arguments are supplied by this means."
msgstr ""

#. type: item
#: zsh.texi:40550
#, no-wrap
msgid "@t{[#}@var{base}@t{]}"
msgstr ""

#. type: table
#: zsh.texi:40559
msgid ""
"This is not a special command, rather part of normal arithmetic syntax; "
"however, when this form appears on a line by itself the default output radix "
"is set to @var{base}.  Use, for example, `@t{[#16]}' to display hexadecimal "
"output preceded by an indication of the base, or `@t{[##16]}' just to "
"display the raw number in the given base.  Bases themselves are always "
"specified in decimal. `@t{[#]}' restores the normal output format.  Note "
"that setting an output base suppresses floating point output; use `@t{[#]}' "
"to return to normal operation."
msgstr ""

#. type: item
#: zsh.texi:40560
#, no-wrap
msgid "@t{$}@var{var}"
msgstr ""

#. type: table
#: zsh.texi:40563
msgid ""
"Print out the value of var literally; does not affect the calculation.  To "
"use the value of var, omit the leading `@t{$}'."
msgstr ""

#. type: table
#: zsh.texi:40568
msgid "See the comments in the function for a few extra tips."
msgstr ""

#. type: findex
#: zsh.texi:40569
#, no-wrap
msgid "max"
msgstr ""

#. type: findex
#: zsh.texi:40570
#, no-wrap
msgid "min"
msgstr ""

#. type: findex
#: zsh.texi:40571
#, no-wrap
msgid "sum"
msgstr ""

#. type: t{#1}
#: zsh.texi:40572 zsh.texi:40576
#, no-wrap
msgid "zmathfunc"
msgstr ""

#. type: item
#: zsh.texi:40573
#, no-wrap
msgid "@t{min(}@var{arg}@t{, ...)}"
msgstr ""

#. type: itemx
#: zsh.texi:40574
#, no-wrap
msgid "@t{max(}@var{arg}@t{, ...)}"
msgstr ""

#. type: itemx
#: zsh.texi:40575
#, no-wrap
msgid "@t{sum(}@var{arg}@t{, ...)}"
msgstr ""

#. type: table
#: zsh.texi:40581
msgid ""
"The function @t{zmathfunc} defines the three mathematical functions @t{min}, "
"@t{max}, and @t{sum}.  The functions @t{min} and @t{max} take one or more "
"arguments.  The function @t{sum} takes zero or more arguments.  Arguments "
"can be of different types (ints and floats)."
msgstr ""

#. type: table
#: zsh.texi:40585
msgid ""
"Not to be confused with the @t{zsh/mathfunc} module, described in @ref{The "
"zsh/mathfunc Module}."
msgstr ""

#. type: findex
#: zsh.texi:40586
#, no-wrap
msgid "zmathfuncdef"
msgstr ""

#. type: item
#: zsh.texi:40587
#, no-wrap
msgid "@t{zmathfuncdef} [ @var{mathfunc} [ @var{body} ] ]"
msgstr ""

#. type: table
#: zsh.texi:40589
msgid "A convenient front end to @t{functions -M}."
msgstr ""

#. type: table
#: zsh.texi:40602
msgid ""
"With two arguments, define a mathematical function named @var{mathfunc} "
"which can be used in any form of arithmetic evaluation.  @var{body} is a "
"mathematical expression to implement the function.  It may contain "
"references to position parameters @t{$1}, @t{$2}, ...  to refer to mandatory "
"parameters and @t{$@{1:-}@var{defvalue}@t{@}} ...  to refer to optional "
"parameters.  Note that the forms must be strictly adhered to for the "
"function to calculate the correct number of arguments.  The implementation "
"is held in a shell function named @t{zsh_math_func_}@var{mathfunc}; usually "
"the user will not need to refer to the shell function directly.  Any "
"existing function of the same name is silently replaced."
msgstr ""

#. type: table
#: zsh.texi:40606
msgid ""
"With one argument, remove the mathematical function @var{mathfunc} as well "
"as the shell function implementation."
msgstr ""

#. type: table
#: zsh.texi:40611
msgid ""
"With no arguments, list all @var{mathfunc} functions in a form suitable for "
"restoring the definition.  The functions have not necessarily been defined "
"by @t{zmathfuncdef}."
msgstr ""

#. type: Plain text
#: zsh.texi:40626
msgid ""
"The @t{zsh/newuser} module comes with a function to aid in configuring shell "
"options for new users.  If the module is installed, this function can also "
"be run by hand.  It is available even if the module's default behaviour, "
"namely running the function for a new user logging in without startup files, "
"is inhibited."
msgstr ""

#. type: item
#: zsh.texi:40629
#, no-wrap
msgid "@t{zsh-newuser-install} [ @t{-f} ]"
msgstr ""

#. type: table
#: zsh.texi:40635
msgid ""
"The function presents the user with various options for customizing their "
"initialization scripts.  Currently only @t{~/.zshrc} is handled.  "
"@t{$ZDOTDIR/.zshrc} is used instead if the parameter @t{ZDOTDIR} is set; "
"this provides a way for the user to configure a file without altering an "
"existing @t{.zshrc}."
msgstr ""

#. type: table
#: zsh.texi:40642
msgid ""
"By default the function exits immediately if it finds any of the files "
"@t{.zshenv}, @t{.zprofile}, @t{.zshrc}, or @t{.zlogin} in the appropriate "
"directory.  The option @t{-f} is required in order to force the function to "
"continue.  Note this may happen even if @t{.zshrc} itself does not exist."
msgstr ""

#. type: table
#: zsh.texi:40646
msgid ""
"As currently configured, the function will exit immediately if the user has "
"root privileges; this behaviour cannot be overridden."
msgstr ""

#. type: table
#: zsh.texi:40652
msgid ""
"Once activated, the function's behaviour is supposed to be "
"self-explanatory.  Menus are present allowing the user to alter the value of "
"options and parameters.  Suggestions for improvements are always welcome."
msgstr ""

#. type: table
#: zsh.texi:40661
msgid ""
"When the script exits, the user is given the opportunity to save the new "
"file or not; changes are not irreversible until this point.  However, the "
"script is careful to restrict changes to the file only to a group marked by "
"the lines `@t{# Lines configured by zsh-newuser-install}' and `@t{# End of "
"lines configured by zsh-newuser-install}'.  In addition, the old version of "
"@t{.zshrc} is saved to a file with the suffix @t{.zni} appended."
msgstr ""

#. type: table
#: zsh.texi:40669
msgid ""
"If the function edits an existing @t{.zshrc}, it is up to the user to ensure "
"that the changes made will take effect.  For example, if control usually "
"returns early from the existing @t{.zshrc} the lines will not be executed; "
"or a later initialization file may override options or parameters, and so "
"on.  The function itself does not attempt to detect any such conflicts."
msgstr ""

#. type: Plain text
#: zsh.texi:40682
msgid ""
"There are a large number of helpful functions in the @t{Functions/Misc} "
"directory of the zsh distribution.  Most are very simple and do not require "
"documentation here, but a few are worthy of special mention."
msgstr ""

#. type: subsection
#: zsh.texi:40685
#, no-wrap
msgid "Descriptions"
msgstr ""

#. type: table
#: zsh.texi:40696
msgid ""
"This function initializes several associative arrays to map color names to "
"(and from) the ANSI standard eight-color terminal codes.  These are used by "
"the prompt theme system (@ref{Prompt Themes}).  You seldom should need to "
"run @t{colors} more than once."
msgstr ""

#. type: table
#: zsh.texi:40706
msgid ""
"The eight base colors are: @t{black}, @t{red}, @t{green}, @t{yellow}, "
"@t{blue}, @t{magenta}, @t{cyan}, and @t{white}.  Each of these has codes for "
"foreground and background.  In addition there are seven intensity "
"attributes: @t{bold}, @t{faint}, @t{standout}, @t{underline}, @t{blink}, "
"@t{reverse}, and @t{conceal}.  Finally, there are seven codes used to negate "
"attributes: @t{none} (reset all attributes to the defaults), @t{normal} "
"(neither bold nor faint), @t{no-standout}, @t{no-underline}, @t{no-blink}, "
"@t{no-reverse}, and @t{no-conceal}."
msgstr ""

#. type: table
#: zsh.texi:40709
msgid "Some terminals do not support all combinations of colors and intensities."
msgstr ""

#. type: table
#: zsh.texi:40712
msgid "The associative arrays are:"
msgstr ""

#. type: t{#1}
#: zsh.texi:40715
#, no-wrap
msgid "color"
msgstr ""

#. type: t{#1}
#: zsh.texi:40716
#, no-wrap
msgid "colour"
msgstr ""

#. type: table
#: zsh.texi:40723
msgid ""
"Map all the color names to their integer codes, and integer codes to the "
"color names.  The eight base names map to the foreground color codes, as do "
"names prefixed with `@t{fg-}', such as `@t{fg-red}'.  Names prefixed with "
"`@t{bg-}', such as `@t{bg-blue}', refer to the background codes.  The "
"reverse mapping from code to color yields base name for foreground codes and "
"the @t{bg-} form for backgrounds."
msgstr ""

#. type: table
#: zsh.texi:40727
msgid ""
"Although it is a misnomer to call them `colors', these arrays also map the "
"other fourteen attributes from names to codes and codes to names."
msgstr ""

#. type: t{#1}
#: zsh.texi:40729
#, no-wrap
msgid "fg_bold"
msgstr ""

#. type: t{#1}
#: zsh.texi:40730
#, no-wrap
msgid "fg_no_bold"
msgstr ""

#. type: table
#: zsh.texi:40734
msgid ""
"Map the eight basic color names to ANSI terminal escape sequences that set "
"the corresponding foreground text properties.  The @t{fg} sequences change "
"the color without changing the eight intensity attributes."
msgstr ""

#. type: t{#1}
#: zsh.texi:40736
#, no-wrap
msgid "bg_bold"
msgstr ""

#. type: t{#1}
#: zsh.texi:40737
#, no-wrap
msgid "bg_no_bold"
msgstr ""

#. type: table
#: zsh.texi:40741
msgid ""
"Map the eight basic color names to ANSI terminal escape sequences that set "
"the corresponding background properties.  The @t{bg} sequences change the "
"color without changing the eight intensity attributes."
msgstr ""

#. type: table
#: zsh.texi:40748
msgid ""
"In addition, the scalar parameters @t{reset_color} and @t{bold_color} are "
"set to the ANSI terminal escapes that turn off all attributes and turn on "
"bold intensity, respectively."
msgstr ""

#. type: findex
#: zsh.texi:40749
#, no-wrap
msgid "fned"
msgstr ""

#. type: item
#: zsh.texi:40750
#, no-wrap
msgid "@t{fned} [ @t{-x} @var{num} ] @var{name}"
msgstr ""

#. type: table
#: zsh.texi:40754
msgid ""
"Same as @t{zed -f}.  This function does not appear in the zsh distribution, "
"but can be created by linking @t{zed} to the name @t{fned} in some directory "
"in your @t{fpath}."
msgstr ""

#. type: findex
#: zsh.texi:40755
#, no-wrap
msgid "histed"
msgstr ""

#. type: item
#: zsh.texi:40756
#, no-wrap
msgid "@t{histed} [ [ @var{name} ] @var{size} ]"
msgstr ""

#. type: table
#: zsh.texi:40760
msgid ""
"Same as @t{zed -h}.  This function does not appear in the zsh distribution, "
"but can be created by linking @t{zed} to the name @t{histed} in some "
"directory in your @t{fpath}."
msgstr ""

#. type: findex
#: zsh.texi:40761
#, no-wrap
msgid "is-at-least"
msgstr ""

#. type: item
#: zsh.texi:40762
#, no-wrap
msgid "@t{is-at-least} @var{needed} [ @var{present} ]"
msgstr ""

#. type: table
#: zsh.texi:40769
msgid ""
"Perform a greater-than-or-equal-to comparison of two strings having the "
"format of a zsh version number; that is, a string of numbers and text with "
"segments separated by dots or dashes.  If the @var{present} string is not "
"provided, @t{$ZSH_VERSION} is used.  Segments are paired left-to-right in "
"the two strings with leading non-number parts ignored.  If one string has "
"fewer segments than the other, the missing segments are considered zero."
msgstr ""

#. type: table
#: zsh.texi:40773
msgid ""
"This is useful in startup files to set options and other state that are not "
"available in all versions of zsh."
msgstr ""

#. type: example
#: zsh.texi:40779
#, no-wrap
msgid ""
"is-at-least 3.1.6-15 && setopt NO_GLOBAL_RCS\n"
"is-at-least 3.1.0 && setopt HIST_REDUCE_BLANKS\n"
"is-at-least 2.6-17 || print \"You can't use is-at-least here.\"\n"
msgstr ""

#. type: findex
#: zsh.texi:40781
#, no-wrap
msgid "nslookup"
msgstr ""

#. type: item
#: zsh.texi:40782
#, no-wrap
msgid "@t{nslookup} [ @var{arg} ... ]"
msgstr ""

#. type: table
#: zsh.texi:40790
msgid ""
"This wrapper function for the @t{nslookup} command requires the @t{zsh/zpty} "
"module (see @ref{The zsh/zpty Module}).  It behaves exactly like the "
"standard @t{nslookup} except that it provides customizable prompts "
"(including a right-side prompt) and completion of nslookup commands, host "
"names, etc. (if you use the function-based completion system).  Completion "
"styles may be set with the context prefix `@t{:completion:nslookup}'."
msgstr ""

#. type: table
#: zsh.texi:40793
msgid "See also the @t{pager}, @t{prompt} and @t{rprompt} styles below."
msgstr ""

#. type: findex
#: zsh.texi:40794
#, no-wrap
msgid "regexp-replace"
msgstr ""

#. type: item
#: zsh.texi:40795
#, no-wrap
msgid "@t{regexp-replace} @var{var} @var{regexp} @var{replace}"
msgstr ""

#. type: table
#: zsh.texi:40802
msgid ""
"Use regular expressions to perform a global search and replace operation on "
"a variable.  POSIX extended regular expressions (ERE) are used, unless the "
"option @t{RE_MATCH_PCRE} has been set, in which case Perl-compatible regular "
"expressions are used (this requires the shell to be linked against the "
"@t{pcre} library)."
msgstr ""

#. type: table
#: zsh.texi:40808
msgid ""
"@var{var} is the name of the variable containing the string to be matched.  "
"The variable will be modified directly by the function.  The variables "
"@t{MATCH}, @t{MBEGIN}, @t{MEND}, @t{match}, @t{mbegin}, @t{mend} should be "
"avoided as these are used by the regular expression code."
msgstr ""

#. type: table
#: zsh.texi:40811
msgid "@var{regexp} is the regular expression to match against the string."
msgstr ""

#. type: table
#: zsh.texi:40816
msgid ""
"@var{replace} is the replacement text.  This can contain parameter, command "
"and arithmetic expressions which will be replaced: in particular, a "
"reference to @t{$MATCH} will be replaced by the text matched by the pattern."
msgstr ""

#. type: table
#: zsh.texi:40819
msgid "The return status is 0 if at least one match was performed, else 1."
msgstr ""

#. type: table
#: zsh.texi:40823
msgid ""
"Note that if using POSIX EREs, the @t{^} or word boundary operators (where "
"available) may not work properly."
msgstr ""

#. type: item
#: zsh.texi:40825
#, no-wrap
msgid "@t{run-help} @var{cmd}"
msgstr ""

#. type: table
#: zsh.texi:40829
msgid ""
"This function is designed to be invoked by the @t{run-help} ZLE widget, in "
"place of the default alias.  See `Accessing On-Line Help' (@ref{Utilities}) "
"for setup instructions."
msgstr ""

#. type: table
#: zsh.texi:40833
msgid ""
"In the discussion which follows, if @var{cmd} is a file system path, it is "
"first reduced to its rightmost component (the file name)."
msgstr ""

#. type: table
#: zsh.texi:40842
msgid ""
"Help is first sought by looking for a file named @var{cmd} in the directory "
"named by the @t{HELPDIR} parameter.  If no file is found, an assistant "
"function, alias, or command named @t{run-help-@var{cmd}} is sought.  If "
"found, the assistant is executed with the rest of the current command line "
"(everything after the command name @var{cmd}) as its arguments.  When "
"neither file nor assistant is found, the external command `@t{man} "
"@var{cmd}' is run."
msgstr ""

#. type: table
#: zsh.texi:40845
msgid "An example assistant for the \"ssh\" command:"
msgstr ""

#. type: example
#: zsh.texi:40861
#, no-wrap
msgid ""
"run-help-ssh() @{\n"
"    emulate -LR zsh\n"
"    local -a args\n"
"    # Delete the \"-l username\" option\n"
"    zparseopts -D -E -a args l:\n"
"    # Delete other options, leaving: host command\n"
"    args=($@{@@:#-*@})\n"
"    if [[ $@{#args@} -lt 2 ]]; then\n"
"        man ssh\n"
"    else\n"
"        run-help $args[2]\n"
"    fi\n"
"@}\n"
msgstr ""

#. type: table
#: zsh.texi:40867
msgid ""
"Several of these assistants are provided in the @t{Functions/Misc} "
"directory.  These must be autoloaded, or placed as executable scripts in "
"your search path, in order to be found and used by @t{run-help}."
msgstr ""

#. type: t{#1}
#: zsh.texi:40870 zsh.texi:40878
#, no-wrap
msgid "run-help-btrfs"
msgstr ""

#. type: t{#1}
#: zsh.texi:40871 zsh.texi:40879
#, no-wrap
msgid "run-help-git"
msgstr ""

#. type: t{#1}
#: zsh.texi:40872 zsh.texi:40880
#, no-wrap
msgid "run-help-ip"
msgstr ""

#. type: t{#1}
#: zsh.texi:40873 zsh.texi:40881
#, no-wrap
msgid "run-help-openssl"
msgstr ""

#. type: t{#1}
#: zsh.texi:40874 zsh.texi:40882
#, no-wrap
msgid "run-help-p4"
msgstr ""

#. type: t{#1}
#: zsh.texi:40875 zsh.texi:40883
#, no-wrap
msgid "run-help-sudo"
msgstr ""

#. type: t{#1}
#: zsh.texi:40876 zsh.texi:40884
#, no-wrap
msgid "run-help-svk"
msgstr ""

#. type: t{#1}
#: zsh.texi:40877 zsh.texi:40885
#, no-wrap
msgid "run-help-svn"
msgstr ""

#. type: table
#: zsh.texi:40897
msgid ""
"Assistant functions for the @t{btrfs}, @t{git}, @t{ip}, @t{openssl}, @t{p4}, "
"@t{sudo}, @t{svk}, and @t{svn}, commands."
msgstr ""

#. type: t{#1}
#: zsh.texi:40900
#, no-wrap
msgid "tetris"
msgstr ""

#. type: table
#: zsh.texi:40904
msgid ""
"Zsh was once accused of not being as complete as Emacs, because it lacked a "
"Tetris game.  This function was written to refute this vicious slander."
msgstr ""

#. type: table
#: zsh.texi:40907
msgid "This function must be used as a ZLE widget:"
msgstr ""

#. type: example
#: zsh.texi:40913
#, no-wrap
msgid ""
"autoload -U tetris\n"
"zle -N tetris\n"
"bindkey @var{keys} tetris\n"
msgstr ""

#. type: table
#: zsh.texi:40920
msgid ""
"To start a game, execute the widget by typing the @var{keys}.  Whatever "
"command line you were editing disappears temporarily, and your keymap is "
"also temporarily replaced by the Tetris control keys.  The previous editor "
"state is restored when you quit the game (by pressing `@t{q}') or when you "
"lose."
msgstr ""

#. type: table
#: zsh.texi:40925
msgid ""
"If you quit in the middle of a game, the next invocation of the @t{tetris} "
"widget will continue where you left off.  If you lost, it will start a new "
"game."
msgstr ""

#. type: t{#1}
#: zsh.texi:40926
#, no-wrap
msgid "tetriscurses"
msgstr ""

#. type: table
#: zsh.texi:40930
msgid ""
"This is a port of the above to zcurses.  The input handling is improved a "
"bit so that moving a block sideways doesn't automatically advance a "
"timestep, and the graphics use unicode block graphics."
msgstr ""

#. type: table
#: zsh.texi:40934
msgid ""
"This version does not save the game state between invocations, and is not "
"invoked as a widget, but rather as:"
msgstr ""

#. type: example
#: zsh.texi:40939
#, no-wrap
msgid ""
"autoload -U tetriscurses\n"
"tetriscurses\n"
msgstr ""

#. type: item
#: zsh.texi:40942
#, no-wrap
msgid ""
"@t{zargs} [ @var{option} ... @t{-}@t{-} ] [ @var{input} ... ] [ @t{-}@t{-} "
"@var{command} [ @var{arg} ... ] ]"
msgstr ""

#. type: table
#: zsh.texi:40948
msgid ""
"This function has a similar purpose to GNU xargs.  Instead of reading lines "
"of arguments from the standard input, it takes them from the command line.  "
"This is useful because zsh, especially with recursive glob operators, often "
"can construct a command line for a shell function that is longer than can be "
"accepted by an external command."
msgstr ""

#. type: table
#: zsh.texi:40959
msgid ""
"The @var{option} list represents options of the @t{zargs} command itself, "
"which are the same as those of @t{xargs}.  The @var{input} list is the "
"collection of strings (often file names) that become the arguments of the "
"@t{command}, analogous to the standard input of @t{xargs}.  Finally, the "
"@var{arg} list consists of those arguments (usually options) that are passed "
"to the @var{command} each time it runs.  The @var{arg} list precedes the "
"elements from the @t{input} list in each run.  If no @var{command} is "
"provided, then no @var{arg} list may be provided, and in that event the "
"default command is `@t{print}' with arguments `@t{-r -}@t{-}'."
msgstr ""

#. type: table
#: zsh.texi:40963
msgid ""
"For example, to get a long @t{ls} listing of all non-hidden plain files in "
"the current directory or its subdirectories:"
msgstr ""

#. type: example
#: zsh.texi:40968
#, no-wrap
msgid ""
"autoload -U zargs\n"
"zargs -- **/*(.) -- ls -ld --\n"
msgstr ""

#. type: table
#: zsh.texi:40975
msgid ""
"The first and third occurrences of `@t{-}@t{-}' are used to mark the end of "
"options for @t{zargs} and @t{ls} respectively to guard against filenames "
"starting with `@t{-}', while the second is used to separate the list of "
"files from the command to run (`@t{ls -ld --}')."
msgstr ""

#. type: table
#: zsh.texi:40979
msgid ""
"The first `@t{-}@t{-}' would also be needed if there was a chance the list "
"might be empty as in:"
msgstr ""

#. type: example
#: zsh.texi:40983
#, no-wrap
msgid "zargs -r -- ./*.back(#qN) -- rm -f\n"
msgstr ""

#. type: table
#: zsh.texi:40990
msgid ""
"In the event that the string `@t{-}@t{-}' is or may be an @var{input}, the "
"@t{-e} option may be used to change the end-of-inputs marker.  Note that "
"this does @emph{not} change the end-of-options marker.  For example, to use "
"`@t{..}' as the marker:"
msgstr ""

#. type: example
#: zsh.texi:40994
#, no-wrap
msgid "zargs -e.. -- **/*(.) .. ls -ld --\n"
msgstr ""

#. type: table
#: zsh.texi:40999
msgid ""
"This is a good choice in that example because no plain file can be named "
"`@t{..}', but the best end-marker depends on the circumstances."
msgstr ""

#. type: table
#: zsh.texi:41007
msgid ""
"The options @t{-i}, @t{-I}, @t{-l}, @t{-L}, and @t{-n} differ slightly from "
"their usage in @t{xargs}.  There are no input lines for @t{zargs} to count, "
"so @t{-l} and @t{-L} count through the @var{input} list, and @t{-n} counts "
"the number of arguments passed to each execution of @var{command}, "
"@emph{including} any @var{arg} list.  Also, any time @t{-i} or @t{-I} is "
"used, each @var{input} is processed separately as if by `@t{-L} @t{1}'."
msgstr ""

#. type: table
#: zsh.texi:41012
msgid ""
"For details of the other @t{zargs} options, see the xargs(1) man page (but "
"note the difference in function between @t{zargs} and @t{xargs}) or run "
"@t{zargs} with the @t{-}@t{-help} option."
msgstr ""

#. type: findex
#: zsh.texi:41013
#, no-wrap
msgid "zed"
msgstr ""

#. type: item
#: zsh.texi:41014
#, no-wrap
msgid "@t{zed} [ @t{-f} [ @t{-x} @var{num} ] ] @var{name}"
msgstr ""

#. type: itemx
#: zsh.texi:41015
#, no-wrap
msgid "@t{zed} [ @t{-h} [ @var{name} ] @var{size} ]"
msgstr ""

#. type: t{#1}
#: zsh.texi:41016
#, no-wrap
msgid "zed -b"
msgstr ""

#. type: table
#: zsh.texi:41018
msgid "This function uses the ZLE editor to edit a file or function."
msgstr ""

#. type: table
#: zsh.texi:41029
msgid ""
"Only one @var{name} argument is allowed.  If the @t{-f} option is given, the "
"name is taken to be that of a function; if the function is marked for "
"autoloading, @t{zed} searches for it in the @t{fpath} and loads it.  Note "
"that functions edited this way are installed into the current shell, but "
"@emph{not} written back to the autoload file.  In this case the @t{-x} "
"option specifies that leading tabs indenting the function according to "
"syntax should be converted into the given number of spaces; `@t{-x 2}' is "
"consistent with the layout of functions distributed with the shell."
msgstr ""

#. type: table
#: zsh.texi:41034
msgid ""
"Without @t{-f}, @var{name} is the path name of the file to edit, which need "
"not exist; it is created on write, if necessary.  With @t{-h}, the file is "
"presumed to contain history events."
msgstr ""

#. type: table
#: zsh.texi:41038
msgid ""
"When no file name is provided for @t{-h} the current shell history is edited "
"in place.  The history is renumbered when zed exits successfully."
msgstr ""

#. type: table
#: zsh.texi:41042
msgid ""
"When editing history, multi-line events must have a trailing backslash on "
"every line before the last."
msgstr ""

#. type: table
#: zsh.texi:41048
msgid ""
"While editing, the function sets the main keymap to @t{zed} and the vi "
"command keymap to @t{zed-vicmd}.  These will be copied from the existing "
"@t{main} and @t{vicmd} keymaps if they do not exist the first time @t{zed} "
"is run.  They can be used to provide special key bindings used only in zed."
msgstr ""

#. type: table
#: zsh.texi:41053
msgid ""
"If it creates the keymap, @t{zed} rebinds the return key to insert a line "
"break and `@t{^X^W}' to accept the edit in the @t{zed} keymap, and binds "
"`@t{ZZ}' to accept the edit in the @t{zed-vicmd} keymap."
msgstr ""

#. type: table
#: zsh.texi:41058
msgid ""
"The bindings alone can be installed by running `@t{zed -b}'.  This is "
"suitable for putting into a startup file.  Note that, if rerun, this will "
"overwrite the existing @t{zed} and @t{zed-vicmd} keymaps."
msgstr ""

#. type: table
#: zsh.texi:41062
msgid ""
"Completion is available, and styles may be set with the context prefix "
"`@t{:completion:zed:}'."
msgstr ""

#. type: findex
#: zsh.texi:41064
#, no-wrap
msgid "zed-set-file-name"
msgstr ""

#. type: table
#: zsh.texi:41076
msgid ""
"A zle widget @t{zed-set-file-name} is available.  This can be called by name "
"from within zed using `@t{\\ex zed-set-file-name}' or can be bound to a key "
"in either of the @t{zed} or @t{zed-vicmd} keymaps after `@t{zed -b}' has "
"been run.  When the widget is called, it prompts for a new name for the file "
"being edited.  When zed exits the file will be written under that name and "
"the original file will be left alone.  The widget has no effect when invoked "
"from `@t{zed -f}'.  The completion context is changed to "
"`@t{:completion:zed-set-file-name:}'.  When editing the current history with "
"`@t{zed -h}', the history is first updated and then the file is written, but "
"the global setting of @t{HISTFILE} is not altered."
msgstr ""

#. type: table
#: zsh.texi:41083
msgid ""
"While @t{zed-set-file-name} is running, zed uses the keymap "
"@t{zed-normal-keymap}, which is linked from the main keymap in effect at the "
"time zed initialised its bindings.  (This is to make the return key operate "
"normally.)  The result is that if the main keymap has been changed, the "
"widget won't notice.  This is not a concern for most users."
msgstr ""

#. type: findex
#: zsh.texi:41084
#, no-wrap
msgid "zcp"
msgstr ""

#. type: findex
#: zsh.texi:41085
#, no-wrap
msgid "zln"
msgstr ""

#. type: item
#: zsh.texi:41086
#, no-wrap
msgid "@t{zcp} [ @t{-finqQvwW} ] @var{srcpat} @var{dest}"
msgstr ""

#. type: itemx
#: zsh.texi:41087
#, no-wrap
msgid "@t{zln} [ @t{-finqQsvwW} ] @var{srcpat} @var{dest}"
msgstr ""

#. type: table
#: zsh.texi:41091
msgid ""
"Same as @t{zmv -C} and @t{zmv -L}, respectively.  These functions do not "
"appear in the zsh distribution, but can be created by linking @t{zmv} to the "
"names @t{zcp} and @t{zln} in some directory in your @t{fpath}."
msgstr ""

#. type: table
#: zsh.texi:41095
msgid "See `Keyboard Definition' (@ref{Utilities})."
msgstr ""

#. type: item
#: zsh.texi:41098
#, no-wrap
msgid ""
"@t{zmv} [ @t{-finqQsvwW} ] [ @t{-C} | @t{-L} | @t{-M} | -@{@t{p}|@t{P}@} "
"@var{program} ] [ @t{-o} @var{optstring} ]"
msgstr ""

#. type: itemx
#: zsh.texi:41099
#, no-wrap
msgid "@t{@ @ @ @ }@var{srcpat} @var{dest}"
msgstr ""

#. type: table
#: zsh.texi:41104
msgid ""
"Move (usually, rename) files matching the pattern @var{srcpat} to "
"corresponding files having names of the form given by @var{dest}, where "
"@var{srcpat} contains parentheses surrounding patterns which will be "
"replaced in turn by @t{$1}, @t{$2}, ... in @var{dest}.  For example,"
msgstr ""

#. type: example
#: zsh.texi:41108
#, no-wrap
msgid "zmv '(*).lis' '$1.txt'\n"
msgstr ""

#. type: table
#: zsh.texi:41113
msgid ""
"renames `@t{foo.lis}' to `@t{foo.txt}', `@t{my.old.stuff.lis}' to "
"`@t{my.old.stuff.txt}', and so on."
msgstr ""

#. type: table
#: zsh.texi:41121
msgid ""
"The pattern is always treated as an @t{EXTENDED_GLOB} pattern.  Any file "
"whose name is not changed by the substitution is simply ignored.  Any error "
"(a substitution resulted in an empty string, two substitutions gave the same "
"result, the destination was an existing regular file and @t{-f} was not "
"given) causes the entire function to abort without doing anything."
msgstr ""

#. type: table
#: zsh.texi:41126
msgid ""
"In addition to pattern replacement, the variable @t{$f} can be referred to "
"in the second (replacement) argument.  This makes it possible to use "
"variable substitution to alter the argument; see examples below."
msgstr ""

#. type: table
#: zsh.texi:41136
msgid ""
"Force overwriting of destination files.  Not currently passed down to the "
"@t{mv}/@t{cp}/@t{ln} command due to vagaries of implementations (but you can "
"use @t{-o-f} to do that)."
msgstr ""

#. type: table
#: zsh.texi:41140
msgid ""
"Interactive: show each line to be executed and ask the user whether to "
"execute it.  `@t{Y}' or `@t{y}' will execute it, anything else will skip "
"it.  Note that you just need to type one character."
msgstr ""

#. type: table
#: zsh.texi:41142
msgid "No execution: print what would happen, but don't do it."
msgstr ""

#. type: table
#: zsh.texi:41145
msgid ""
"Turn bare glob qualifiers off: now assumed by default, so this has no "
"effect."
msgstr ""

#. type: table
#: zsh.texi:41148
msgid ""
"Force bare glob qualifiers on.  Don't turn this on unless you are actually "
"using glob qualifiers in a pattern."
msgstr ""

#. type: table
#: zsh.texi:41150
msgid "Symbolic, passed down to @t{ln}; only works with @t{-L}."
msgstr ""

#. type: table
#: zsh.texi:41152
msgid "Verbose: print each command as it's being executed."
msgstr ""

#. type: table
#: zsh.texi:41155
msgid ""
"Pick out wildcard parts of the pattern, as described above, and implicitly "
"add parentheses for referring to them."
msgstr ""

#. type: table
#: zsh.texi:41158
msgid ""
"Just like @t{-w}, with the addition of turning wildcards in the replacement "
"pattern into sequential @t{$@{1@}} .. @t{$@{N@}} references."
msgstr ""

#. type: table
#: zsh.texi:41163
msgid ""
"Force @t{cp}, @t{ln} or @t{mv}, respectively, regardless of the name of the "
"function."
msgstr ""

#. type: item
#: zsh.texi:41163
#, no-wrap
msgid "@t{-p} @var{program}"
msgstr ""

#. type: table
#: zsh.texi:41166
msgid ""
"Call @var{program} instead of @t{cp}, @t{ln} or @t{mv}.  Whatever it does, "
"it should at least understand the form"
msgstr ""

#. type: example
#: zsh.texi:41168
#, no-wrap
msgid "@var{program} @t{-}@t{-} @var{oldname} @var{newname}\n"
msgstr ""

#. type: table
#: zsh.texi:41172
msgid ""
"where @var{oldname} and @var{newname} are filenames generated by @t{zmv}.  "
"@var{program} will be split into words, so might be e.g. the name of an "
"archive tool plus a copy or rename subcommand."
msgstr ""

#. type: item
#: zsh.texi:41172
#, no-wrap
msgid "@t{-P} @var{program}"
msgstr ""

#. type: table
#: zsh.texi:41177
msgid ""
"As @t{-p} @var{program}, except that @var{program} does not accept a "
"following @t{-}@t{-} to indicate the end of options.  In this case filenames "
"must already be in a sane form for the program in question."
msgstr ""

#. type: item
#: zsh.texi:41177
#, no-wrap
msgid "@t{-o} @var{optstring}"
msgstr ""

#. type: table
#: zsh.texi:41181
msgid ""
"The @var{optstring} is split into words and passed down verbatim to the "
"@t{cp}, @t{ln} or @t{mv} command called to perform the work.  It should "
"probably begin with a `@t{-}'."
msgstr ""

#. type: table
#: zsh.texi:41185
msgid "Further examples:"
msgstr ""

#. type: example
#: zsh.texi:41189
#, no-wrap
msgid "zmv -v '(* *)' '$@{1// /_@}'\n"
msgstr ""

#. type: table
#: zsh.texi:41194
msgid ""
"For any file in the current directory with at least one space in the name, "
"replace every space by an underscore and display the commands executed."
msgstr ""

#. type: example
#: zsh.texi:41198
#, no-wrap
msgid "zmv -v '* *' '$@{f// /_@}'\n"
msgstr ""

#. type: table
#: zsh.texi:41202
msgid "This does exactly the same by referring to the file name stored in @t{$f}."
msgstr ""

#. type: table
#: zsh.texi:41207
msgid ""
"For more complete examples and other implementation details, see the @t{zmv} "
"source file, usually located in one of the directories named in your "
"@t{fpath}, or in @t{Functions/Misc/zmv} in the zsh distribution."
msgstr ""

#. type: table
#: zsh.texi:41211
msgid "See `Recompiling Functions' (@ref{Utilities})."
msgstr ""

#. type: findex
#: zsh.texi:41212
#, no-wrap
msgid "zstyle+"
msgstr ""

#. type: item
#: zsh.texi:41213
#, no-wrap
msgid ""
"@t{zstyle+} @var{context} @var{style} @var{value} [ @t{+} @var{subcontext} "
"@var{style} @var{value} ... ]"
msgstr ""

#. type: table
#: zsh.texi:41217
msgid ""
"This makes defining styles a bit simpler by using a single `@t{+}' as a "
"special token that allows you to append a context name to the previously "
"used context name.  Like this:"
msgstr ""

#. type: example
#: zsh.texi:41223
#, no-wrap
msgid ""
"zstyle+ ':foo:bar' @var{style1} @var{value1} \\ \n"
"       +':baz'     @var{style2} @var{value2} \\ \n"
"       +':frob'    @var{style3} @var{value3}\n"
msgstr ""

#. type: table
#: zsh.texi:41231
msgid ""
"This defines @var{style1} with @var{value1} for the context @t{:foo:bar} as "
"usual, but it also defines @var{style2} with @var{value2} for the context "
"@t{:foo:bar:baz} and @var{style3} with @var{value3} for @t{:foo:bar:frob}.  "
"Any @var{subcontext} may be the empty string to re-use the first context "
"unchanged."
msgstr ""

#. type: table
#: zsh.texi:41246
msgid ""
"The @t{zed} function @emph{sets} this style in context "
"`@t{:completion:zed:*}' to turn off completion when @t{TAB} is typed at the "
"beginning of a line.  You may override this by setting your own value for "
"this context and style."
msgstr ""

#. type: kindex
#: zsh.texi:41247
#, no-wrap
msgid "pager, nslookup style"
msgstr ""

#. type: table
#: zsh.texi:41252
msgid ""
"The @t{nslookup} function looks up this style in the context `@t{:nslookup}' "
"to determine the program used to display output that does not fit on a "
"single screen."
msgstr ""

#. type: kindex
#: zsh.texi:41253
#, no-wrap
msgid "prompt, nslookup style"
msgstr ""

#. type: kindex
#: zsh.texi:41254
#, no-wrap
msgid "rprompt, nslookup style"
msgstr ""

#. type: t{#1}
#: zsh.texi:41256
#, no-wrap
msgid "rprompt"
msgstr ""

#. type: table
#: zsh.texi:41262
msgid ""
"The @t{nslookup} function looks up this style in the context `@t{:nslookup}' "
"to set the prompt and the right-side prompt, respectively.  The usual "
"expansions for the @t{PS1} and @t{RPS1} parameters may be used (see "
"@ref{Prompt Expansion})."
msgstr ""

#. type: node
#: zsh.texi:41268 zsh.texi:41270 zsh.texi:41275
#, no-wrap
msgid "Concept Index"
msgstr ""

#. type: node
#: zsh.texi:41268 zsh.texi:41275 zsh.texi:41277 zsh.texi:41282
#, no-wrap
msgid "Variables Index"
msgstr ""

#. type: node
#: zsh.texi:41275 zsh.texi:41282 zsh.texi:41284 zsh.texi:41289
#, no-wrap
msgid "Options Index"
msgstr ""

#. type: node
#: zsh.texi:41282 zsh.texi:41289 zsh.texi:41291 zsh.texi:41296
#, no-wrap
msgid "Functions Index"
msgstr ""

#. type: node
#: zsh.texi:41289 zsh.texi:41296 zsh.texi:41298 zsh.texi:41303
#, no-wrap
msgid "Editor Functions Index"
msgstr ""
